type ActionPlugin implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  code: String!
  name: String
  description: String
  path: String
  functionName: String
  requiredParameters: [String]
}

"""
A condition to be used against `ActionPlugin` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ActionPluginCondition {
  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `path` field."""
  path: String

  """Checks for equality with the object’s `functionName` field."""
  functionName: String

  """Checks for equality with the object’s `requiredParameters` field."""
  requiredParameters: [String]
}

"""An input for mutations affecting `ActionPlugin`"""
input ActionPluginInput {
  code: String!
  name: String
  description: String
  path: String
  functionName: String
  requiredParameters: [String]
}

"""
Represents an update to a `ActionPlugin`. Fields that are set will be updated.
"""
input ActionPluginPatch {
  code: String
  name: String
  description: String
  path: String
  functionName: String
  requiredParameters: [String]
}

"""A connection to a list of `ActionPlugin` values."""
type ActionPluginsConnection {
  """A list of `ActionPlugin` objects."""
  nodes: [ActionPlugin]!

  """
  A list of edges which contains the `ActionPlugin` and cursor to aid in pagination.
  """
  edges: [ActionPluginsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ActionPlugin` you could get from the connection."""
  totalCount: Int!
}

"""A `ActionPlugin` edge in the connection."""
type ActionPluginsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ActionPlugin` at the end of the edge."""
  node: ActionPlugin
}

"""Methods to use when ordering `ActionPlugin`."""
enum ActionPluginsOrderBy {
  NATURAL
  CODE_ASC
  CODE_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PATH_ASC
  PATH_DESC
  FUNCTION_NAME_ASC
  FUNCTION_NAME_DESC
  REQUIRED_PARAMETERS_ASC
  REQUIRED_PARAMETERS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ActionQueue implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  triggerEvent: Int
  actionCode: String
  parameters: JSON
  status: ActionQueueStatus
  timeQueued: Datetime
  timeExecuted: Datetime
  errorLog: String

  """Reads a single `TriggerQueue` that is related to this `ActionQueue`."""
  triggerQueueByTriggerEvent: TriggerQueue
}

"""The fields on `actionQueue` to look up the row to connect."""
input ActionQueueActionQueuePkeyConnect {
  id: Int!
}

"""The fields on `actionQueue` to look up the row to delete."""
input ActionQueueActionQueuePkeyDelete {
  id: Int!
}

"""
A condition to be used against `ActionQueue` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ActionQueueCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `triggerEvent` field."""
  triggerEvent: Int

  """Checks for equality with the object’s `actionCode` field."""
  actionCode: String

  """Checks for equality with the object’s `parameters` field."""
  parameters: JSON

  """Checks for equality with the object’s `status` field."""
  status: ActionQueueStatus

  """Checks for equality with the object’s `timeQueued` field."""
  timeQueued: Datetime

  """Checks for equality with the object’s `timeExecuted` field."""
  timeExecuted: Datetime

  """Checks for equality with the object’s `errorLog` field."""
  errorLog: String
}

"""An input for mutations affecting `ActionQueue`"""
input ActionQueueInput {
  id: Int
  triggerEvent: Int
  actionCode: String
  parameters: JSON
  status: ActionQueueStatus
  timeQueued: Datetime
  timeExecuted: Datetime
  errorLog: String
  triggerQueueToTriggerEvent: ActionQueueTriggerEventFkeyInput
}

"""The globally unique `ID` look up for the row to connect."""
input ActionQueueNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `actionQueue` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input ActionQueueNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `actionQueue` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input ActionQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `triggerQueue` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `triggerQueue` being updated.
  """
  triggerQueuePatch: TriggerQueuePatch!
}

"""The fields on `actionQueue` to look up the row to update."""
input ActionQueueOnActionQueueForActionQueueTriggerEventFkeyUsingActionQueuePkeyUpdate {
  """
  An object where the defined keys will be set on the `actionQueue` being updated.
  """
  actionQueuePatch: updateActionQueueOnActionQueueForActionQueueTriggerEventFkeyPatch!
  id: Int!
}

"""
Represents an update to a `ActionQueue`. Fields that are set will be updated.
"""
input ActionQueuePatch {
  id: Int
  triggerEvent: Int
  actionCode: String
  parameters: JSON
  status: ActionQueueStatus
  timeQueued: Datetime
  timeExecuted: Datetime
  errorLog: String
  triggerQueueToTriggerEvent: ActionQueueTriggerEventFkeyInput
}

"""A connection to a list of `ActionQueue` values."""
type ActionQueuesConnection {
  """A list of `ActionQueue` objects."""
  nodes: [ActionQueue]!

  """
  A list of edges which contains the `ActionQueue` and cursor to aid in pagination.
  """
  edges: [ActionQueuesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ActionQueue` you could get from the connection."""
  totalCount: Int!
}

"""A `ActionQueue` edge in the connection."""
type ActionQueuesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ActionQueue` at the end of the edge."""
  node: ActionQueue
}

"""Methods to use when ordering `ActionQueue`."""
enum ActionQueuesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TRIGGER_EVENT_ASC
  TRIGGER_EVENT_DESC
  ACTION_CODE_ASC
  ACTION_CODE_DESC
  PARAMETERS_ASC
  PARAMETERS_DESC
  STATUS_ASC
  STATUS_DESC
  TIME_QUEUED_ASC
  TIME_QUEUED_DESC
  TIME_EXECUTED_ASC
  TIME_EXECUTED_DESC
  ERROR_LOG_ASC
  ERROR_LOG_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum ActionQueueStatus {
  SCHEDULED
  QUEUED
  SUCCESS
  FAIL
}

"""The `actionQueue` to be created by this mutation."""
input ActionQueueTriggerEventFkeyActionQueueCreateInput {
  id: Int
  actionCode: String
  parameters: JSON
  status: ActionQueueStatus
  timeQueued: Datetime
  timeExecuted: Datetime
  errorLog: String
  triggerQueueToTriggerEvent: ActionQueueTriggerEventFkeyInput
}

"""
Input for the nested mutation of `triggerQueue` in the `ActionQueueInput` mutation.
"""
input ActionQueueTriggerEventFkeyInput {
  """
  The primary key(s) for `triggerQueue` for the far side of the relationship.
  """
  connectById: TriggerQueueTriggerQueuePkeyConnect

  """
  The primary key(s) for `triggerQueue` for the far side of the relationship.
  """
  connectByNodeId: TriggerQueueNodeIdConnect

  """
  The primary key(s) for `triggerQueue` for the far side of the relationship.
  """
  deleteById: TriggerQueueTriggerQueuePkeyDelete

  """
  The primary key(s) for `triggerQueue` for the far side of the relationship.
  """
  deleteByNodeId: TriggerQueueNodeIdDelete

  """
  The primary key(s) and patch data for `triggerQueue` for the far side of the relationship.
  """
  updateById: TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyUsingTriggerQueuePkeyUpdate

  """
  The primary key(s) and patch data for `triggerQueue` for the far side of the relationship.
  """
  updateByNodeId: ActionQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate

  """
  A `TriggerQueueInput` object that will be created and connected to this object.
  """
  create: ActionQueueTriggerEventFkeyTriggerQueueCreateInput
}

"""
Input for the nested mutation of `actionQueue` in the `TriggerQueueInput` mutation.
"""
input ActionQueueTriggerEventFkeyInverseInput {
  """
  Flag indicating whether all other `actionQueue` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `actionQueue` for the far side of the relationship.
  """
  connectById: [ActionQueueActionQueuePkeyConnect!]

  """
  The primary key(s) for `actionQueue` for the far side of the relationship.
  """
  connectByNodeId: [ActionQueueNodeIdConnect!]

  """
  The primary key(s) for `actionQueue` for the far side of the relationship.
  """
  deleteById: [ActionQueueActionQueuePkeyDelete!]

  """
  The primary key(s) for `actionQueue` for the far side of the relationship.
  """
  deleteByNodeId: [ActionQueueNodeIdDelete!]

  """
  The primary key(s) and patch data for `actionQueue` for the far side of the relationship.
  """
  updateById: [ActionQueueOnActionQueueForActionQueueTriggerEventFkeyUsingActionQueuePkeyUpdate!]

  """
  The primary key(s) and patch data for `actionQueue` for the far side of the relationship.
  """
  updateByNodeId: [TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate!]

  """
  A `ActionQueueInput` object that will be created and connected to this object.
  """
  create: [ActionQueueTriggerEventFkeyActionQueueCreateInput!]
}

"""The `triggerQueue` to be created by this mutation."""
input ActionQueueTriggerEventFkeyTriggerQueueCreateInput {
  id: Int
  triggerType: Trigger
  table: String
  recordId: Int
  timestamp: Datetime
  payload: JSON
  status: TriggerQueueStatus
  log: JSON
  actionQueuesUsingId: ActionQueueTriggerEventFkeyInverseInput
}

type Application implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  uniqueIdentifier: String
  templateId: Int
  userId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger

  """Reads a single `Template` that is related to this `Application`."""
  templateByTemplateId: Template

  """Reads a single `User` that is related to this `Application`."""
  userByUserId: User

  """Reads and enables pagination through a set of `ApplicationSection`."""
  applicationSectionsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSection`."""
    orderBy: [ApplicationSectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSectionCondition
  ): ApplicationSectionsConnection!

  """
  Reads and enables pagination through a set of `ApplicationStageHistory`.
  """
  applicationStageHistoriesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStageHistory`."""
    orderBy: [ApplicationStageHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStageHistoryCondition
  ): ApplicationStageHistoriesConnection!

  """Reads and enables pagination through a set of `ApplicationResponse`."""
  applicationResponsesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationResponse`."""
    orderBy: [ApplicationResponsesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationResponseCondition
  ): ApplicationResponsesConnection!

  """Reads and enables pagination through a set of `Review`."""
  reviewsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Review`."""
    orderBy: [ReviewsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCondition
  ): ReviewsConnection!

  """Reads and enables pagination through a set of `File`."""
  filesByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition
  ): FilesConnection!

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByApplicationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition
  ): NotificationsConnection!
}

"""The fields on `application` to look up the row to connect."""
input ApplicationApplicationPkeyConnect {
  id: Int!
}

"""The fields on `application` to look up the row to delete."""
input ApplicationApplicationPkeyDelete {
  id: Int!
}

"""
A condition to be used against `Application` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ApplicationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `uniqueIdentifier` field."""
  uniqueIdentifier: String

  """Checks for equality with the object’s `templateId` field."""
  templateId: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `serial` field."""
  serial: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `outcome` field."""
  outcome: ApplicationOutcome

  """Checks for equality with the object’s `isActive` field."""
  isActive: Boolean

  """Checks for equality with the object’s `trigger` field."""
  trigger: Trigger
}

"""An input for mutations affecting `Application`"""
input ApplicationInput {
  id: Int
  uniqueIdentifier: String
  templateId: Int
  userId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger
  templateToTemplateId: ApplicationTemplateIdFkeyInput
  userToUserId: ApplicationUserIdFkeyInput
  applicationSectionsUsingId: ApplicationSectionApplicationIdFkeyInverseInput
  applicationStageHistoriesUsingId: ApplicationStageHistoryApplicationIdFkeyInverseInput
  applicationResponsesUsingId: ApplicationResponseApplicationIdFkeyInverseInput
  reviewsUsingId: ReviewApplicationIdFkeyInverseInput
  filesUsingId: FileApplicationIdFkeyInverseInput
  notificationsUsingId: NotificationApplicationIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input ApplicationNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `application` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input ApplicationNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `application` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `template` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `template` being updated.
  """
  templatePatch: TemplatePatch!
}

"""The fields on `application` to look up the row to update."""
input ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationPkeyUpdate {
  """
  An object where the defined keys will be set on the `application` being updated.
  """
  applicationPatch: updateApplicationOnApplicationForApplicationTemplateIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationOnApplicationForApplicationUserIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `user` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `user` being updated.
  """
  userPatch: UserPatch!
}

"""The fields on `application` to look up the row to update."""
input ApplicationOnApplicationForApplicationUserIdFkeyUsingApplicationPkeyUpdate {
  """
  An object where the defined keys will be set on the `application` being updated.
  """
  applicationPatch: updateApplicationOnApplicationForApplicationUserIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `applicationResponse` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `applicationResponse` being updated.
  """
  applicationResponsePatch: ApplicationResponsePatch!
}

"""The fields on `application` to look up the row to update."""
input ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationPkeyUpdate {
  """
  An object where the defined keys will be set on the `application` being updated.
  """
  applicationPatch: updateApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationOnApplicationSectionForApplicationSectionApplicationIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `applicationSection` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `applicationSection` being updated.
  """
  applicationSectionPatch: ApplicationSectionPatch!
}

"""The fields on `application` to look up the row to update."""
input ApplicationOnApplicationSectionForApplicationSectionApplicationIdFkeyUsingApplicationPkeyUpdate {
  """
  An object where the defined keys will be set on the `application` being updated.
  """
  applicationPatch: updateApplicationOnApplicationSectionForApplicationSectionApplicationIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `applicationStageHistory` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `applicationStageHistory` being updated.
  """
  applicationStageHistoryPatch: ApplicationStageHistoryPatch!
}

"""The fields on `application` to look up the row to update."""
input ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationPkeyUpdate {
  """
  An object where the defined keys will be set on the `application` being updated.
  """
  applicationPatch: updateApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationOnFileForFileApplicationIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `file` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `file` being updated.
  """
  filePatch: FilePatch!
}

"""The fields on `application` to look up the row to update."""
input ApplicationOnFileForFileApplicationIdFkeyUsingApplicationPkeyUpdate {
  """
  An object where the defined keys will be set on the `application` being updated.
  """
  applicationPatch: updateApplicationOnFileForFileApplicationIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `notification` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `notification` being updated.
  """
  notificationPatch: NotificationPatch!
}

"""The fields on `application` to look up the row to update."""
input ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationPkeyUpdate {
  """
  An object where the defined keys will be set on the `application` being updated.
  """
  applicationPatch: updateApplicationOnNotificationForNotificationApplicationIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationOnReviewForReviewApplicationIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `review` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `review` being updated.
  """
  reviewPatch: ReviewPatch!
}

"""The fields on `application` to look up the row to update."""
input ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationPkeyUpdate {
  """
  An object where the defined keys will be set on the `application` being updated.
  """
  applicationPatch: updateApplicationOnReviewForReviewApplicationIdFkeyPatch!
  id: Int!
}

enum ApplicationOutcome {
  PENDING
  APPROVED
  REJECTED
}

"""
Represents an update to a `Application`. Fields that are set will be updated.
"""
input ApplicationPatch {
  id: Int
  uniqueIdentifier: String
  templateId: Int
  userId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger
  templateToTemplateId: ApplicationTemplateIdFkeyInput
  userToUserId: ApplicationUserIdFkeyInput
  applicationSectionsUsingId: ApplicationSectionApplicationIdFkeyInverseInput
  applicationStageHistoriesUsingId: ApplicationStageHistoryApplicationIdFkeyInverseInput
  applicationResponsesUsingId: ApplicationResponseApplicationIdFkeyInverseInput
  reviewsUsingId: ReviewApplicationIdFkeyInverseInput
  filesUsingId: FileApplicationIdFkeyInverseInput
  notificationsUsingId: NotificationApplicationIdFkeyInverseInput
}

type ApplicationResponse implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  templateQuestionId: Int
  applicationId: Int
  value: JSON
  timeCreated: Datetime

  """
  Reads a single `TemplateElement` that is related to this `ApplicationResponse`.
  """
  templateElementByTemplateQuestionId: TemplateElement

  """
  Reads a single `Application` that is related to this `ApplicationResponse`.
  """
  applicationByApplicationId: Application

  """Reads and enables pagination through a set of `ReviewResponse`."""
  reviewResponsesByApplicationResponseId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReviewResponse`."""
    orderBy: [ReviewResponsesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewResponseCondition
  ): ReviewResponsesConnection!

  """Reads and enables pagination through a set of `File`."""
  filesByApplicationResponseId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition
  ): FilesConnection!
}

"""The `application` to be created by this mutation."""
input ApplicationResponseApplicationIdFkeyApplicationCreateInput {
  id: Int
  uniqueIdentifier: String
  templateId: Int
  userId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger
  templateToTemplateId: ApplicationTemplateIdFkeyInput
  userToUserId: ApplicationUserIdFkeyInput
  applicationSectionsUsingId: ApplicationSectionApplicationIdFkeyInverseInput
  applicationStageHistoriesUsingId: ApplicationStageHistoryApplicationIdFkeyInverseInput
  applicationResponsesUsingId: ApplicationResponseApplicationIdFkeyInverseInput
  reviewsUsingId: ReviewApplicationIdFkeyInverseInput
  filesUsingId: FileApplicationIdFkeyInverseInput
  notificationsUsingId: NotificationApplicationIdFkeyInverseInput
}

"""The `applicationResponse` to be created by this mutation."""
input ApplicationResponseApplicationIdFkeyApplicationResponseCreateInput {
  id: Int
  templateQuestionId: Int
  value: JSON
  timeCreated: Datetime
  templateElementToTemplateQuestionId: ApplicationResponseTemplateQuestionIdFkeyInput
  applicationToApplicationId: ApplicationResponseApplicationIdFkeyInput
  reviewResponsesUsingId: ReviewResponseApplicationResponseIdFkeyInverseInput
  filesUsingId: FileApplicationResponseIdFkeyInverseInput
}

"""
Input for the nested mutation of `application` in the `ApplicationResponseInput` mutation.
"""
input ApplicationResponseApplicationIdFkeyInput {
  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  connectById: ApplicationApplicationPkeyConnect

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  connectByNodeId: ApplicationNodeIdConnect

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  deleteById: ApplicationApplicationPkeyDelete

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  deleteByNodeId: ApplicationNodeIdDelete

  """
  The primary key(s) and patch data for `application` for the far side of the relationship.
  """
  updateById: ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationPkeyUpdate

  """
  The primary key(s) and patch data for `application` for the far side of the relationship.
  """
  updateByNodeId: ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate

  """
  A `ApplicationInput` object that will be created and connected to this object.
  """
  create: ApplicationResponseApplicationIdFkeyApplicationCreateInput
}

"""
Input for the nested mutation of `applicationResponse` in the `ApplicationInput` mutation.
"""
input ApplicationResponseApplicationIdFkeyInverseInput {
  """
  Flag indicating whether all other `applicationResponse` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `applicationResponse` for the far side of the relationship.
  """
  connectById: [ApplicationResponseApplicationResponsePkeyConnect!]

  """
  The primary key(s) for `applicationResponse` for the far side of the relationship.
  """
  connectByNodeId: [ApplicationResponseNodeIdConnect!]

  """
  The primary key(s) for `applicationResponse` for the far side of the relationship.
  """
  deleteById: [ApplicationResponseApplicationResponsePkeyDelete!]

  """
  The primary key(s) for `applicationResponse` for the far side of the relationship.
  """
  deleteByNodeId: [ApplicationResponseNodeIdDelete!]

  """
  The primary key(s) and patch data for `applicationResponse` for the far side of the relationship.
  """
  updateById: [ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationResponsePkeyUpdate!]

  """
  The primary key(s) and patch data for `applicationResponse` for the far side of the relationship.
  """
  updateByNodeId: [ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate!]

  """
  A `ApplicationResponseInput` object that will be created and connected to this object.
  """
  create: [ApplicationResponseApplicationIdFkeyApplicationResponseCreateInput!]
}

"""The fields on `applicationResponse` to look up the row to connect."""
input ApplicationResponseApplicationResponsePkeyConnect {
  id: Int!
}

"""The fields on `applicationResponse` to look up the row to delete."""
input ApplicationResponseApplicationResponsePkeyDelete {
  id: Int!
}

"""
A condition to be used against `ApplicationResponse` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ApplicationResponseCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `templateQuestionId` field."""
  templateQuestionId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `value` field."""
  value: JSON

  """Checks for equality with the object’s `timeCreated` field."""
  timeCreated: Datetime
}

"""An input for mutations affecting `ApplicationResponse`"""
input ApplicationResponseInput {
  id: Int
  templateQuestionId: Int
  applicationId: Int
  value: JSON
  timeCreated: Datetime
  templateElementToTemplateQuestionId: ApplicationResponseTemplateQuestionIdFkeyInput
  applicationToApplicationId: ApplicationResponseApplicationIdFkeyInput
  reviewResponsesUsingId: ReviewResponseApplicationResponseIdFkeyInverseInput
  filesUsingId: FileApplicationResponseIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input ApplicationResponseNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `applicationResponse` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input ApplicationResponseNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `applicationResponse` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `application` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `application` being updated.
  """
  applicationPatch: ApplicationPatch!
}

"""The fields on `applicationResponse` to look up the row to update."""
input ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationResponsePkeyUpdate {
  """
  An object where the defined keys will be set on the `applicationResponse` being updated.
  """
  applicationResponsePatch: updateApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationResponseOnApplicationResponseForApplicationResponseTemplateQuestionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `templateElement` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `templateElement` being updated.
  """
  templateElementPatch: TemplateElementPatch!
}

"""The fields on `applicationResponse` to look up the row to update."""
input ApplicationResponseOnApplicationResponseForApplicationResponseTemplateQuestionIdFkeyUsingApplicationResponsePkeyUpdate {
  """
  An object where the defined keys will be set on the `applicationResponse` being updated.
  """
  applicationResponsePatch: updateApplicationResponseOnApplicationResponseForApplicationResponseTemplateQuestionIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationResponseOnFileForFileApplicationResponseIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `file` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `file` being updated.
  """
  filePatch: FilePatch!
}

"""The fields on `applicationResponse` to look up the row to update."""
input ApplicationResponseOnFileForFileApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate {
  """
  An object where the defined keys will be set on the `applicationResponse` being updated.
  """
  applicationResponsePatch: updateApplicationResponseOnFileForFileApplicationResponseIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `reviewResponse` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `reviewResponse` being updated.
  """
  reviewResponsePatch: ReviewResponsePatch!
}

"""The fields on `applicationResponse` to look up the row to update."""
input ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate {
  """
  An object where the defined keys will be set on the `applicationResponse` being updated.
  """
  applicationResponsePatch: updateApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `ApplicationResponse`. Fields that are set will be updated.
"""
input ApplicationResponsePatch {
  id: Int
  templateQuestionId: Int
  applicationId: Int
  value: JSON
  timeCreated: Datetime
  templateElementToTemplateQuestionId: ApplicationResponseTemplateQuestionIdFkeyInput
  applicationToApplicationId: ApplicationResponseApplicationIdFkeyInput
  reviewResponsesUsingId: ReviewResponseApplicationResponseIdFkeyInverseInput
  filesUsingId: FileApplicationResponseIdFkeyInverseInput
}

"""A connection to a list of `ApplicationResponse` values."""
type ApplicationResponsesConnection {
  """A list of `ApplicationResponse` objects."""
  nodes: [ApplicationResponse]!

  """
  A list of edges which contains the `ApplicationResponse` and cursor to aid in pagination.
  """
  edges: [ApplicationResponsesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationResponse` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ApplicationResponse` edge in the connection."""
type ApplicationResponsesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationResponse` at the end of the edge."""
  node: ApplicationResponse
}

"""Methods to use when ordering `ApplicationResponse`."""
enum ApplicationResponsesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TEMPLATE_QUESTION_ID_ASC
  TEMPLATE_QUESTION_ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  VALUE_ASC
  VALUE_DESC
  TIME_CREATED_ASC
  TIME_CREATED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The `applicationResponse` to be created by this mutation."""
input ApplicationResponseTemplateQuestionIdFkeyApplicationResponseCreateInput {
  id: Int
  applicationId: Int
  value: JSON
  timeCreated: Datetime
  templateElementToTemplateQuestionId: ApplicationResponseTemplateQuestionIdFkeyInput
  applicationToApplicationId: ApplicationResponseApplicationIdFkeyInput
  reviewResponsesUsingId: ReviewResponseApplicationResponseIdFkeyInverseInput
  filesUsingId: FileApplicationResponseIdFkeyInverseInput
}

"""
Input for the nested mutation of `templateElement` in the `ApplicationResponseInput` mutation.
"""
input ApplicationResponseTemplateQuestionIdFkeyInput {
  """
  The primary key(s) for `templateElement` for the far side of the relationship.
  """
  connectById: TemplateElementTemplateElementPkeyConnect

  """
  The primary key(s) for `templateElement` for the far side of the relationship.
  """
  connectByNodeId: TemplateElementNodeIdConnect

  """
  The primary key(s) for `templateElement` for the far side of the relationship.
  """
  deleteById: TemplateElementTemplateElementPkeyDelete

  """
  The primary key(s) for `templateElement` for the far side of the relationship.
  """
  deleteByNodeId: TemplateElementNodeIdDelete

  """
  The primary key(s) and patch data for `templateElement` for the far side of the relationship.
  """
  updateById: TemplateElementOnApplicationResponseForApplicationResponseTemplateQuestionIdFkeyUsingTemplateElementPkeyUpdate

  """
  The primary key(s) and patch data for `templateElement` for the far side of the relationship.
  """
  updateByNodeId: ApplicationResponseOnApplicationResponseForApplicationResponseTemplateQuestionIdFkeyNodeIdUpdate

  """
  A `TemplateElementInput` object that will be created and connected to this object.
  """
  create: ApplicationResponseTemplateQuestionIdFkeyTemplateElementCreateInput
}

"""
Input for the nested mutation of `applicationResponse` in the `TemplateElementInput` mutation.
"""
input ApplicationResponseTemplateQuestionIdFkeyInverseInput {
  """
  Flag indicating whether all other `applicationResponse` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `applicationResponse` for the far side of the relationship.
  """
  connectById: [ApplicationResponseApplicationResponsePkeyConnect!]

  """
  The primary key(s) for `applicationResponse` for the far side of the relationship.
  """
  connectByNodeId: [ApplicationResponseNodeIdConnect!]

  """
  The primary key(s) for `applicationResponse` for the far side of the relationship.
  """
  deleteById: [ApplicationResponseApplicationResponsePkeyDelete!]

  """
  The primary key(s) for `applicationResponse` for the far side of the relationship.
  """
  deleteByNodeId: [ApplicationResponseNodeIdDelete!]

  """
  The primary key(s) and patch data for `applicationResponse` for the far side of the relationship.
  """
  updateById: [ApplicationResponseOnApplicationResponseForApplicationResponseTemplateQuestionIdFkeyUsingApplicationResponsePkeyUpdate!]

  """
  The primary key(s) and patch data for `applicationResponse` for the far side of the relationship.
  """
  updateByNodeId: [TemplateElementOnApplicationResponseForApplicationResponseTemplateQuestionIdFkeyNodeIdUpdate!]

  """
  A `ApplicationResponseInput` object that will be created and connected to this object.
  """
  create: [ApplicationResponseTemplateQuestionIdFkeyApplicationResponseCreateInput!]
}

"""The `templateElement` to be created by this mutation."""
input ApplicationResponseTemplateQuestionIdFkeyTemplateElementCreateInput {
  id: Int
  sectionId: Int
  code: String!
  nextElementCode: String
  title: String
  category: TemplateElementCategory
  visibilityCondition: JSON
  elementTypePluginCode: String
  isRequired: Boolean
  isEditable: Boolean
  parameters: JSON
  defaultValue: JSON
  validation: JSON
  templateSectionToSectionId: TemplateElementSectionIdFkeyInput
  applicationResponsesUsingId: ApplicationResponseTemplateQuestionIdFkeyInverseInput
}

"""A connection to a list of `Application` values."""
type ApplicationsConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application` and cursor to aid in pagination.
  """
  edges: [ApplicationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int!
}

type ApplicationSection implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  applicationId: Int
  templateSectionId: Int

  """
  Reads a single `Application` that is related to this `ApplicationSection`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `TemplateSection` that is related to this `ApplicationSection`.
  """
  templateSectionByTemplateSectionId: TemplateSection

  """
  Reads and enables pagination through a set of `ReviewSectionAssignment`.
  """
  reviewSectionAssignmentsBySectionId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReviewSectionAssignment`."""
    orderBy: [ReviewSectionAssignmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewSectionAssignmentCondition
  ): ReviewSectionAssignmentsConnection!
}

"""The `application` to be created by this mutation."""
input ApplicationSectionApplicationIdFkeyApplicationCreateInput {
  id: Int
  uniqueIdentifier: String
  templateId: Int
  userId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger
  templateToTemplateId: ApplicationTemplateIdFkeyInput
  userToUserId: ApplicationUserIdFkeyInput
  applicationSectionsUsingId: ApplicationSectionApplicationIdFkeyInverseInput
  applicationStageHistoriesUsingId: ApplicationStageHistoryApplicationIdFkeyInverseInput
  applicationResponsesUsingId: ApplicationResponseApplicationIdFkeyInverseInput
  reviewsUsingId: ReviewApplicationIdFkeyInverseInput
  filesUsingId: FileApplicationIdFkeyInverseInput
  notificationsUsingId: NotificationApplicationIdFkeyInverseInput
}

"""The `applicationSection` to be created by this mutation."""
input ApplicationSectionApplicationIdFkeyApplicationSectionCreateInput {
  id: Int
  templateSectionId: Int
  applicationToApplicationId: ApplicationSectionApplicationIdFkeyInput
  templateSectionToTemplateSectionId: ApplicationSectionTemplateSectionIdFkeyInput
  reviewSectionAssignmentsUsingId: ReviewSectionAssignmentSectionIdFkeyInverseInput
}

"""
Input for the nested mutation of `application` in the `ApplicationSectionInput` mutation.
"""
input ApplicationSectionApplicationIdFkeyInput {
  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  connectById: ApplicationApplicationPkeyConnect

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  connectByNodeId: ApplicationNodeIdConnect

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  deleteById: ApplicationApplicationPkeyDelete

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  deleteByNodeId: ApplicationNodeIdDelete

  """
  The primary key(s) and patch data for `application` for the far side of the relationship.
  """
  updateById: ApplicationOnApplicationSectionForApplicationSectionApplicationIdFkeyUsingApplicationPkeyUpdate

  """
  The primary key(s) and patch data for `application` for the far side of the relationship.
  """
  updateByNodeId: ApplicationSectionOnApplicationSectionForApplicationSectionApplicationIdFkeyNodeIdUpdate

  """
  A `ApplicationInput` object that will be created and connected to this object.
  """
  create: ApplicationSectionApplicationIdFkeyApplicationCreateInput
}

"""
Input for the nested mutation of `applicationSection` in the `ApplicationInput` mutation.
"""
input ApplicationSectionApplicationIdFkeyInverseInput {
  """
  Flag indicating whether all other `applicationSection` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `applicationSection` for the far side of the relationship.
  """
  connectById: [ApplicationSectionApplicationSectionPkeyConnect!]

  """
  The primary key(s) for `applicationSection` for the far side of the relationship.
  """
  connectByNodeId: [ApplicationSectionNodeIdConnect!]

  """
  The primary key(s) for `applicationSection` for the far side of the relationship.
  """
  deleteById: [ApplicationSectionApplicationSectionPkeyDelete!]

  """
  The primary key(s) for `applicationSection` for the far side of the relationship.
  """
  deleteByNodeId: [ApplicationSectionNodeIdDelete!]

  """
  The primary key(s) and patch data for `applicationSection` for the far side of the relationship.
  """
  updateById: [ApplicationSectionOnApplicationSectionForApplicationSectionApplicationIdFkeyUsingApplicationSectionPkeyUpdate!]

  """
  The primary key(s) and patch data for `applicationSection` for the far side of the relationship.
  """
  updateByNodeId: [ApplicationOnApplicationSectionForApplicationSectionApplicationIdFkeyNodeIdUpdate!]

  """
  A `ApplicationSectionInput` object that will be created and connected to this object.
  """
  create: [ApplicationSectionApplicationIdFkeyApplicationSectionCreateInput!]
}

"""The fields on `applicationSection` to look up the row to connect."""
input ApplicationSectionApplicationSectionPkeyConnect {
  id: Int!
}

"""The fields on `applicationSection` to look up the row to delete."""
input ApplicationSectionApplicationSectionPkeyDelete {
  id: Int!
}

"""
A condition to be used against `ApplicationSection` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ApplicationSectionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `templateSectionId` field."""
  templateSectionId: Int
}

"""An input for mutations affecting `ApplicationSection`"""
input ApplicationSectionInput {
  id: Int
  applicationId: Int
  templateSectionId: Int
  applicationToApplicationId: ApplicationSectionApplicationIdFkeyInput
  templateSectionToTemplateSectionId: ApplicationSectionTemplateSectionIdFkeyInput
  reviewSectionAssignmentsUsingId: ReviewSectionAssignmentSectionIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input ApplicationSectionNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `applicationSection` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input ApplicationSectionNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `applicationSection` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationSectionOnApplicationSectionForApplicationSectionApplicationIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `application` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `application` being updated.
  """
  applicationPatch: ApplicationPatch!
}

"""The fields on `applicationSection` to look up the row to update."""
input ApplicationSectionOnApplicationSectionForApplicationSectionApplicationIdFkeyUsingApplicationSectionPkeyUpdate {
  """
  An object where the defined keys will be set on the `applicationSection` being updated.
  """
  applicationSectionPatch: updateApplicationSectionOnApplicationSectionForApplicationSectionApplicationIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationSectionOnApplicationSectionForApplicationSectionTemplateSectionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `templateSection` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `templateSection` being updated.
  """
  templateSectionPatch: TemplateSectionPatch!
}

"""The fields on `applicationSection` to look up the row to update."""
input ApplicationSectionOnApplicationSectionForApplicationSectionTemplateSectionIdFkeyUsingApplicationSectionPkeyUpdate {
  """
  An object where the defined keys will be set on the `applicationSection` being updated.
  """
  applicationSectionPatch: updateApplicationSectionOnApplicationSectionForApplicationSectionTemplateSectionIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationSectionOnReviewSectionAssignmentForReviewSectionAssignmentSectionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `reviewSectionAssignment` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `reviewSectionAssignment` being updated.
  """
  reviewSectionAssignmentPatch: ReviewSectionAssignmentPatch!
}

"""The fields on `applicationSection` to look up the row to update."""
input ApplicationSectionOnReviewSectionAssignmentForReviewSectionAssignmentSectionIdFkeyUsingApplicationSectionPkeyUpdate {
  """
  An object where the defined keys will be set on the `applicationSection` being updated.
  """
  applicationSectionPatch: updateApplicationSectionOnReviewSectionAssignmentForReviewSectionAssignmentSectionIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `ApplicationSection`. Fields that are set will be updated.
"""
input ApplicationSectionPatch {
  id: Int
  applicationId: Int
  templateSectionId: Int
  applicationToApplicationId: ApplicationSectionApplicationIdFkeyInput
  templateSectionToTemplateSectionId: ApplicationSectionTemplateSectionIdFkeyInput
  reviewSectionAssignmentsUsingId: ReviewSectionAssignmentSectionIdFkeyInverseInput
}

"""A connection to a list of `ApplicationSection` values."""
type ApplicationSectionsConnection {
  """A list of `ApplicationSection` objects."""
  nodes: [ApplicationSection]!

  """
  A list of edges which contains the `ApplicationSection` and cursor to aid in pagination.
  """
  edges: [ApplicationSectionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationSection` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ApplicationSection` edge in the connection."""
type ApplicationSectionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationSection` at the end of the edge."""
  node: ApplicationSection
}

"""Methods to use when ordering `ApplicationSection`."""
enum ApplicationSectionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  TEMPLATE_SECTION_ID_ASC
  TEMPLATE_SECTION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The `applicationSection` to be created by this mutation."""
input ApplicationSectionTemplateSectionIdFkeyApplicationSectionCreateInput {
  id: Int
  applicationId: Int
  applicationToApplicationId: ApplicationSectionApplicationIdFkeyInput
  templateSectionToTemplateSectionId: ApplicationSectionTemplateSectionIdFkeyInput
  reviewSectionAssignmentsUsingId: ReviewSectionAssignmentSectionIdFkeyInverseInput
}

"""
Input for the nested mutation of `templateSection` in the `ApplicationSectionInput` mutation.
"""
input ApplicationSectionTemplateSectionIdFkeyInput {
  """
  The primary key(s) for `templateSection` for the far side of the relationship.
  """
  connectById: TemplateSectionTemplateSectionPkeyConnect

  """
  The primary key(s) for `templateSection` for the far side of the relationship.
  """
  connectByNodeId: TemplateSectionNodeIdConnect

  """
  The primary key(s) for `templateSection` for the far side of the relationship.
  """
  deleteById: TemplateSectionTemplateSectionPkeyDelete

  """
  The primary key(s) for `templateSection` for the far side of the relationship.
  """
  deleteByNodeId: TemplateSectionNodeIdDelete

  """
  The primary key(s) and patch data for `templateSection` for the far side of the relationship.
  """
  updateById: TemplateSectionOnApplicationSectionForApplicationSectionTemplateSectionIdFkeyUsingTemplateSectionPkeyUpdate

  """
  The primary key(s) and patch data for `templateSection` for the far side of the relationship.
  """
  updateByNodeId: ApplicationSectionOnApplicationSectionForApplicationSectionTemplateSectionIdFkeyNodeIdUpdate

  """
  A `TemplateSectionInput` object that will be created and connected to this object.
  """
  create: ApplicationSectionTemplateSectionIdFkeyTemplateSectionCreateInput
}

"""
Input for the nested mutation of `applicationSection` in the `TemplateSectionInput` mutation.
"""
input ApplicationSectionTemplateSectionIdFkeyInverseInput {
  """
  Flag indicating whether all other `applicationSection` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `applicationSection` for the far side of the relationship.
  """
  connectById: [ApplicationSectionApplicationSectionPkeyConnect!]

  """
  The primary key(s) for `applicationSection` for the far side of the relationship.
  """
  connectByNodeId: [ApplicationSectionNodeIdConnect!]

  """
  The primary key(s) for `applicationSection` for the far side of the relationship.
  """
  deleteById: [ApplicationSectionApplicationSectionPkeyDelete!]

  """
  The primary key(s) for `applicationSection` for the far side of the relationship.
  """
  deleteByNodeId: [ApplicationSectionNodeIdDelete!]

  """
  The primary key(s) and patch data for `applicationSection` for the far side of the relationship.
  """
  updateById: [ApplicationSectionOnApplicationSectionForApplicationSectionTemplateSectionIdFkeyUsingApplicationSectionPkeyUpdate!]

  """
  The primary key(s) and patch data for `applicationSection` for the far side of the relationship.
  """
  updateByNodeId: [TemplateSectionOnApplicationSectionForApplicationSectionTemplateSectionIdFkeyNodeIdUpdate!]

  """
  A `ApplicationSectionInput` object that will be created and connected to this object.
  """
  create: [ApplicationSectionTemplateSectionIdFkeyApplicationSectionCreateInput!]
}

"""The `templateSection` to be created by this mutation."""
input ApplicationSectionTemplateSectionIdFkeyTemplateSectionCreateInput {
  id: Int
  templateId: Int
  title: String
  code: String
  templateToTemplateId: TemplateSectionTemplateIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionTemplateSectionIdFkeyInverseInput
  templateElementsUsingId: TemplateElementSectionIdFkeyInverseInput
  applicationSectionsUsingId: ApplicationSectionTemplateSectionIdFkeyInverseInput
}

"""A `Application` edge in the connection."""
type ApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""Methods to use when ordering `Application`."""
enum ApplicationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  UNIQUE_IDENTIFIER_ASC
  UNIQUE_IDENTIFIER_DESC
  TEMPLATE_ID_ASC
  TEMPLATE_ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  SERIAL_ASC
  SERIAL_DESC
  NAME_ASC
  NAME_DESC
  OUTCOME_ASC
  OUTCOME_DESC
  IS_ACTIVE_ASC
  IS_ACTIVE_DESC
  TRIGGER_ASC
  TRIGGER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum ApplicationStage {
  SCREENING
  ASSESSMENT
  FINAL_DECISION
}

"""A connection to a list of `ApplicationStageHistory` values."""
type ApplicationStageHistoriesConnection {
  """A list of `ApplicationStageHistory` objects."""
  nodes: [ApplicationStageHistory]!

  """
  A list of edges which contains the `ApplicationStageHistory` and cursor to aid in pagination.
  """
  edges: [ApplicationStageHistoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStageHistory` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ApplicationStageHistory` edge in the connection."""
type ApplicationStageHistoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStageHistory` at the end of the edge."""
  node: ApplicationStageHistory
}

"""Methods to use when ordering `ApplicationStageHistory`."""
enum ApplicationStageHistoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  STAGE_ASC
  STAGE_DESC
  TIME_CREATED_ASC
  TIME_CREATED_DESC
  IS_CURRENT_ASC
  IS_CURRENT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ApplicationStageHistory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  applicationId: Int
  stage: ApplicationStage
  timeCreated: Datetime
  isCurrent: Boolean

  """
  Reads a single `Application` that is related to this `ApplicationStageHistory`.
  """
  applicationByApplicationId: Application

  """
  Reads and enables pagination through a set of `ApplicationStatusHistory`.
  """
  applicationStatusHistoriesByApplicationStageHistoryId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatusHistory`."""
    orderBy: [ApplicationStatusHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusHistoryCondition
  ): ApplicationStatusHistoriesConnection!

  """
  Reads and enables pagination through a set of `ReviewSectionAssignment`.
  """
  reviewSectionAssignmentsByStageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReviewSectionAssignment`."""
    orderBy: [ReviewSectionAssignmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewSectionAssignmentCondition
  ): ReviewSectionAssignmentsConnection!
}

"""The `application` to be created by this mutation."""
input ApplicationStageHistoryApplicationIdFkeyApplicationCreateInput {
  id: Int
  uniqueIdentifier: String
  templateId: Int
  userId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger
  templateToTemplateId: ApplicationTemplateIdFkeyInput
  userToUserId: ApplicationUserIdFkeyInput
  applicationSectionsUsingId: ApplicationSectionApplicationIdFkeyInverseInput
  applicationStageHistoriesUsingId: ApplicationStageHistoryApplicationIdFkeyInverseInput
  applicationResponsesUsingId: ApplicationResponseApplicationIdFkeyInverseInput
  reviewsUsingId: ReviewApplicationIdFkeyInverseInput
  filesUsingId: FileApplicationIdFkeyInverseInput
  notificationsUsingId: NotificationApplicationIdFkeyInverseInput
}

"""The `applicationStageHistory` to be created by this mutation."""
input ApplicationStageHistoryApplicationIdFkeyApplicationStageHistoryCreateInput {
  id: Int
  stage: ApplicationStage
  timeCreated: Datetime
  isCurrent: Boolean
  applicationToApplicationId: ApplicationStageHistoryApplicationIdFkeyInput
  applicationStatusHistoriesUsingId: ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput
  reviewSectionAssignmentsUsingId: ReviewSectionAssignmentStageIdFkeyInverseInput
}

"""
Input for the nested mutation of `application` in the `ApplicationStageHistoryInput` mutation.
"""
input ApplicationStageHistoryApplicationIdFkeyInput {
  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  connectById: ApplicationApplicationPkeyConnect

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  connectByNodeId: ApplicationNodeIdConnect

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  deleteById: ApplicationApplicationPkeyDelete

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  deleteByNodeId: ApplicationNodeIdDelete

  """
  The primary key(s) and patch data for `application` for the far side of the relationship.
  """
  updateById: ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationPkeyUpdate

  """
  The primary key(s) and patch data for `application` for the far side of the relationship.
  """
  updateByNodeId: ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate

  """
  A `ApplicationInput` object that will be created and connected to this object.
  """
  create: ApplicationStageHistoryApplicationIdFkeyApplicationCreateInput
}

"""
Input for the nested mutation of `applicationStageHistory` in the `ApplicationInput` mutation.
"""
input ApplicationStageHistoryApplicationIdFkeyInverseInput {
  """
  Flag indicating whether all other `applicationStageHistory` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `applicationStageHistory` for the far side of the relationship.
  """
  connectById: [ApplicationStageHistoryApplicationStageHistoryPkeyConnect!]

  """
  The primary key(s) for `applicationStageHistory` for the far side of the relationship.
  """
  connectByNodeId: [ApplicationStageHistoryNodeIdConnect!]

  """
  The primary key(s) for `applicationStageHistory` for the far side of the relationship.
  """
  deleteById: [ApplicationStageHistoryApplicationStageHistoryPkeyDelete!]

  """
  The primary key(s) for `applicationStageHistory` for the far side of the relationship.
  """
  deleteByNodeId: [ApplicationStageHistoryNodeIdDelete!]

  """
  The primary key(s) and patch data for `applicationStageHistory` for the far side of the relationship.
  """
  updateById: [ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationStageHistoryPkeyUpdate!]

  """
  The primary key(s) and patch data for `applicationStageHistory` for the far side of the relationship.
  """
  updateByNodeId: [ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate!]

  """
  A `ApplicationStageHistoryInput` object that will be created and connected to this object.
  """
  create: [ApplicationStageHistoryApplicationIdFkeyApplicationStageHistoryCreateInput!]
}

"""The fields on `applicationStageHistory` to look up the row to connect."""
input ApplicationStageHistoryApplicationStageHistoryPkeyConnect {
  id: Int!
}

"""The fields on `applicationStageHistory` to look up the row to delete."""
input ApplicationStageHistoryApplicationStageHistoryPkeyDelete {
  id: Int!
}

"""
A condition to be used against `ApplicationStageHistory` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ApplicationStageHistoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `stage` field."""
  stage: ApplicationStage

  """Checks for equality with the object’s `timeCreated` field."""
  timeCreated: Datetime

  """Checks for equality with the object’s `isCurrent` field."""
  isCurrent: Boolean
}

"""An input for mutations affecting `ApplicationStageHistory`"""
input ApplicationStageHistoryInput {
  id: Int
  applicationId: Int
  stage: ApplicationStage
  timeCreated: Datetime
  isCurrent: Boolean
  applicationToApplicationId: ApplicationStageHistoryApplicationIdFkeyInput
  applicationStatusHistoriesUsingId: ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput
  reviewSectionAssignmentsUsingId: ReviewSectionAssignmentStageIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input ApplicationStageHistoryNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `applicationStageHistory` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input ApplicationStageHistoryNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `applicationStageHistory` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `application` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `application` being updated.
  """
  applicationPatch: ApplicationPatch!
}

"""The fields on `applicationStageHistory` to look up the row to update."""
input ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationStageHistoryPkeyUpdate {
  """
  An object where the defined keys will be set on the `applicationStageHistory` being updated.
  """
  applicationStageHistoryPatch: updateApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `applicationStatusHistory` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `applicationStatusHistory` being updated.
  """
  applicationStatusHistoryPatch: ApplicationStatusHistoryPatch!
}

"""The fields on `applicationStageHistory` to look up the row to update."""
input ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStageHistoryPkeyUpdate {
  """
  An object where the defined keys will be set on the `applicationStageHistory` being updated.
  """
  applicationStageHistoryPatch: updateApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationStageHistoryOnReviewSectionAssignmentForReviewSectionAssignmentStageIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `reviewSectionAssignment` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `reviewSectionAssignment` being updated.
  """
  reviewSectionAssignmentPatch: ReviewSectionAssignmentPatch!
}

"""The fields on `applicationStageHistory` to look up the row to update."""
input ApplicationStageHistoryOnReviewSectionAssignmentForReviewSectionAssignmentStageIdFkeyUsingApplicationStageHistoryPkeyUpdate {
  """
  An object where the defined keys will be set on the `applicationStageHistory` being updated.
  """
  applicationStageHistoryPatch: updateApplicationStageHistoryOnReviewSectionAssignmentForReviewSectionAssignmentStageIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `ApplicationStageHistory`. Fields that are set will be updated.
"""
input ApplicationStageHistoryPatch {
  id: Int
  applicationId: Int
  stage: ApplicationStage
  timeCreated: Datetime
  isCurrent: Boolean
  applicationToApplicationId: ApplicationStageHistoryApplicationIdFkeyInput
  applicationStatusHistoriesUsingId: ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput
  reviewSectionAssignmentsUsingId: ReviewSectionAssignmentStageIdFkeyInverseInput
}

enum ApplicationStatus {
  DRAFT
  WITHDRAWN
  SUBMITTED
  CHANGES_REQUIRED
  RE_SUBMITTED
  COMPLETED
}

"""A connection to a list of `ApplicationStatusHistory` values."""
type ApplicationStatusHistoriesConnection {
  """A list of `ApplicationStatusHistory` objects."""
  nodes: [ApplicationStatusHistory]!

  """
  A list of edges which contains the `ApplicationStatusHistory` and cursor to aid in pagination.
  """
  edges: [ApplicationStatusHistoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationStatusHistory` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ApplicationStatusHistory` edge in the connection."""
type ApplicationStatusHistoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationStatusHistory` at the end of the edge."""
  node: ApplicationStatusHistory
}

"""Methods to use when ordering `ApplicationStatusHistory`."""
enum ApplicationStatusHistoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_STAGE_HISTORY_ID_ASC
  APPLICATION_STAGE_HISTORY_ID_DESC
  STATUS_ASC
  STATUS_DESC
  TIME_CREATED_ASC
  TIME_CREATED_DESC
  IS_CURRENT_ASC
  IS_CURRENT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ApplicationStatusHistory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  applicationStageHistoryId: Int
  status: ApplicationStatus
  timeCreated: Datetime
  isCurrent: Boolean

  """
  Reads a single `ApplicationStageHistory` that is related to this `ApplicationStatusHistory`.
  """
  applicationStageHistoryByApplicationStageHistoryId: ApplicationStageHistory
}

"""The `applicationStageHistory` to be created by this mutation."""
input ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStageHistoryCreateInput {
  id: Int
  applicationId: Int
  stage: ApplicationStage
  timeCreated: Datetime
  isCurrent: Boolean
  applicationToApplicationId: ApplicationStageHistoryApplicationIdFkeyInput
  applicationStatusHistoriesUsingId: ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput
  reviewSectionAssignmentsUsingId: ReviewSectionAssignmentStageIdFkeyInverseInput
}

"""The `applicationStatusHistory` to be created by this mutation."""
input ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStatusHistoryCreateInput {
  id: Int
  status: ApplicationStatus
  timeCreated: Datetime
  isCurrent: Boolean
  applicationStageHistoryToApplicationStageHistoryId: ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput
}

"""
Input for the nested mutation of `applicationStageHistory` in the `ApplicationStatusHistoryInput` mutation.
"""
input ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput {
  """
  The primary key(s) for `applicationStageHistory` for the far side of the relationship.
  """
  connectById: ApplicationStageHistoryApplicationStageHistoryPkeyConnect

  """
  The primary key(s) for `applicationStageHistory` for the far side of the relationship.
  """
  connectByNodeId: ApplicationStageHistoryNodeIdConnect

  """
  The primary key(s) for `applicationStageHistory` for the far side of the relationship.
  """
  deleteById: ApplicationStageHistoryApplicationStageHistoryPkeyDelete

  """
  The primary key(s) for `applicationStageHistory` for the far side of the relationship.
  """
  deleteByNodeId: ApplicationStageHistoryNodeIdDelete

  """
  The primary key(s) and patch data for `applicationStageHistory` for the far side of the relationship.
  """
  updateById: ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStageHistoryPkeyUpdate

  """
  The primary key(s) and patch data for `applicationStageHistory` for the far side of the relationship.
  """
  updateByNodeId: ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate

  """
  A `ApplicationStageHistoryInput` object that will be created and connected to this object.
  """
  create: ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStageHistoryCreateInput
}

"""
Input for the nested mutation of `applicationStatusHistory` in the `ApplicationStageHistoryInput` mutation.
"""
input ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput {
  """
  Flag indicating whether all other `applicationStatusHistory` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `applicationStatusHistory` for the far side of the relationship.
  """
  connectById: [ApplicationStatusHistoryApplicationStatusHistoryPkeyConnect!]

  """
  The primary key(s) for `applicationStatusHistory` for the far side of the relationship.
  """
  connectByNodeId: [ApplicationStatusHistoryNodeIdConnect!]

  """
  The primary key(s) for `applicationStatusHistory` for the far side of the relationship.
  """
  deleteById: [ApplicationStatusHistoryApplicationStatusHistoryPkeyDelete!]

  """
  The primary key(s) for `applicationStatusHistory` for the far side of the relationship.
  """
  deleteByNodeId: [ApplicationStatusHistoryNodeIdDelete!]

  """
  The primary key(s) and patch data for `applicationStatusHistory` for the far side of the relationship.
  """
  updateById: [ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStatusHistoryPkeyUpdate!]

  """
  The primary key(s) and patch data for `applicationStatusHistory` for the far side of the relationship.
  """
  updateByNodeId: [ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate!]

  """
  A `ApplicationStatusHistoryInput` object that will be created and connected to this object.
  """
  create: [ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStatusHistoryCreateInput!]
}

"""
The fields on `applicationStatusHistory` to look up the row to connect.
"""
input ApplicationStatusHistoryApplicationStatusHistoryPkeyConnect {
  id: Int!
}

"""The fields on `applicationStatusHistory` to look up the row to delete."""
input ApplicationStatusHistoryApplicationStatusHistoryPkeyDelete {
  id: Int!
}

"""
A condition to be used against `ApplicationStatusHistory` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ApplicationStatusHistoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """
  Checks for equality with the object’s `applicationStageHistoryId` field.
  """
  applicationStageHistoryId: Int

  """Checks for equality with the object’s `status` field."""
  status: ApplicationStatus

  """Checks for equality with the object’s `timeCreated` field."""
  timeCreated: Datetime

  """Checks for equality with the object’s `isCurrent` field."""
  isCurrent: Boolean
}

"""An input for mutations affecting `ApplicationStatusHistory`"""
input ApplicationStatusHistoryInput {
  id: Int
  applicationStageHistoryId: Int
  status: ApplicationStatus
  timeCreated: Datetime
  isCurrent: Boolean
  applicationStageHistoryToApplicationStageHistoryId: ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput
}

"""The globally unique `ID` look up for the row to connect."""
input ApplicationStatusHistoryNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `applicationStatusHistory` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input ApplicationStatusHistoryNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `applicationStatusHistory` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `applicationStageHistory` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `applicationStageHistory` being updated.
  """
  applicationStageHistoryPatch: ApplicationStageHistoryPatch!
}

"""The fields on `applicationStatusHistory` to look up the row to update."""
input ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStatusHistoryPkeyUpdate {
  """
  An object where the defined keys will be set on the `applicationStatusHistory` being updated.
  """
  applicationStatusHistoryPatch: updateApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `ApplicationStatusHistory`. Fields that are set will be updated.
"""
input ApplicationStatusHistoryPatch {
  id: Int
  applicationStageHistoryId: Int
  status: ApplicationStatus
  timeCreated: Datetime
  isCurrent: Boolean
  applicationStageHistoryToApplicationStageHistoryId: ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput
}

"""The `application` to be created by this mutation."""
input ApplicationTemplateIdFkeyApplicationCreateInput {
  id: Int
  uniqueIdentifier: String
  userId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger
  templateToTemplateId: ApplicationTemplateIdFkeyInput
  userToUserId: ApplicationUserIdFkeyInput
  applicationSectionsUsingId: ApplicationSectionApplicationIdFkeyInverseInput
  applicationStageHistoriesUsingId: ApplicationStageHistoryApplicationIdFkeyInverseInput
  applicationResponsesUsingId: ApplicationResponseApplicationIdFkeyInverseInput
  reviewsUsingId: ReviewApplicationIdFkeyInverseInput
  filesUsingId: FileApplicationIdFkeyInverseInput
  notificationsUsingId: NotificationApplicationIdFkeyInverseInput
}

"""
Input for the nested mutation of `template` in the `ApplicationInput` mutation.
"""
input ApplicationTemplateIdFkeyInput {
  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  connectById: TemplateTemplatePkeyConnect

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  connectByNodeId: TemplateNodeIdConnect

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  deleteById: TemplateTemplatePkeyDelete

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  deleteByNodeId: TemplateNodeIdDelete

  """
  The primary key(s) and patch data for `template` for the far side of the relationship.
  """
  updateById: TemplateOnApplicationForApplicationTemplateIdFkeyUsingTemplatePkeyUpdate

  """
  The primary key(s) and patch data for `template` for the far side of the relationship.
  """
  updateByNodeId: ApplicationOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate

  """
  A `TemplateInput` object that will be created and connected to this object.
  """
  create: ApplicationTemplateIdFkeyTemplateCreateInput
}

"""
Input for the nested mutation of `application` in the `TemplateInput` mutation.
"""
input ApplicationTemplateIdFkeyInverseInput {
  """
  Flag indicating whether all other `application` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  connectById: [ApplicationApplicationPkeyConnect!]

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  connectByNodeId: [ApplicationNodeIdConnect!]

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  deleteById: [ApplicationApplicationPkeyDelete!]

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  deleteByNodeId: [ApplicationNodeIdDelete!]

  """
  The primary key(s) and patch data for `application` for the far side of the relationship.
  """
  updateById: [ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationPkeyUpdate!]

  """
  The primary key(s) and patch data for `application` for the far side of the relationship.
  """
  updateByNodeId: [TemplateOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate!]

  """
  A `ApplicationInput` object that will be created and connected to this object.
  """
  create: [ApplicationTemplateIdFkeyApplicationCreateInput!]
}

"""The `template` to be created by this mutation."""
input ApplicationTemplateIdFkeyTemplateCreateInput {
  id: Int
  versionId: Int
  templateName: String
  code: String!
  status: TemplateStatus
  templateVersionToVersionId: TemplateVersionIdFkeyInput
  templateStagesUsingId: TemplateStageTamplateIdFkeyInverseInput
  templateSectionsUsingId: TemplateSectionTemplateIdFkeyInverseInput
  templatePermissionsUsingId: TemplatePermissionTemplateIdFkeyInverseInput
  applicationsUsingId: ApplicationTemplateIdFkeyInverseInput
  templateActionsUsingId: TemplateActionTemplateIdFkeyInverseInput
}

"""The `application` to be created by this mutation."""
input ApplicationUserIdFkeyApplicationCreateInput {
  id: Int
  uniqueIdentifier: String
  templateId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger
  templateToTemplateId: ApplicationTemplateIdFkeyInput
  userToUserId: ApplicationUserIdFkeyInput
  applicationSectionsUsingId: ApplicationSectionApplicationIdFkeyInverseInput
  applicationStageHistoriesUsingId: ApplicationStageHistoryApplicationIdFkeyInverseInput
  applicationResponsesUsingId: ApplicationResponseApplicationIdFkeyInverseInput
  reviewsUsingId: ReviewApplicationIdFkeyInverseInput
  filesUsingId: FileApplicationIdFkeyInverseInput
  notificationsUsingId: NotificationApplicationIdFkeyInverseInput
}

"""
Input for the nested mutation of `user` in the `ApplicationInput` mutation.
"""
input ApplicationUserIdFkeyInput {
  """The primary key(s) for `user` for the far side of the relationship."""
  connectById: UserUserPkeyConnect

  """The primary key(s) for `user` for the far side of the relationship."""
  connectByNodeId: UserNodeIdConnect

  """The primary key(s) for `user` for the far side of the relationship."""
  deleteById: UserUserPkeyDelete

  """The primary key(s) for `user` for the far side of the relationship."""
  deleteByNodeId: UserNodeIdDelete

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateById: UserOnApplicationForApplicationUserIdFkeyUsingUserPkeyUpdate

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateByNodeId: ApplicationOnApplicationForApplicationUserIdFkeyNodeIdUpdate

  """
  A `UserInput` object that will be created and connected to this object.
  """
  create: ApplicationUserIdFkeyUserCreateInput
}

"""
Input for the nested mutation of `application` in the `UserInput` mutation.
"""
input ApplicationUserIdFkeyInverseInput {
  """
  Flag indicating whether all other `application` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  connectById: [ApplicationApplicationPkeyConnect!]

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  connectByNodeId: [ApplicationNodeIdConnect!]

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  deleteById: [ApplicationApplicationPkeyDelete!]

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  deleteByNodeId: [ApplicationNodeIdDelete!]

  """
  The primary key(s) and patch data for `application` for the far side of the relationship.
  """
  updateById: [ApplicationOnApplicationForApplicationUserIdFkeyUsingApplicationPkeyUpdate!]

  """
  The primary key(s) and patch data for `application` for the far side of the relationship.
  """
  updateByNodeId: [UserOnApplicationForApplicationUserIdFkeyNodeIdUpdate!]

  """
  A `ApplicationInput` object that will be created and connected to this object.
  """
  create: [ApplicationUserIdFkeyApplicationCreateInput!]
}

"""The `user` to be created by this mutation."""
input ApplicationUserIdFkeyUserCreateInput {
  id: Int
  username: String
  password: String
  email: String
  role: UserRole
  userOrganisationsUsingId: UserOrganisationUserIdFkeyInverseInput
  permissionJoinsUsingId: PermissionJoinUserIdFkeyInverseInput
  applicationsUsingId: ApplicationUserIdFkeyInverseInput
  reviewSectionAssignmentsToReviewerIdUsingId: ReviewSectionAssignmentReviewerIdFkeyInverseInput
  reviewSectionAssignmentsToAssignerIdUsingId: ReviewSectionAssignmentAssignerIdFkeyInverseInput
  filesUsingId: FileUserIdFkeyInverseInput
  notificationsUsingId: NotificationUserIdFkeyInverseInput
}

"""All input for the create `ActionPlugin` mutation."""
input CreateActionPluginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ActionPlugin` to be created by this mutation."""
  actionPlugin: ActionPluginInput!
}

"""The output of our create `ActionPlugin` mutation."""
type CreateActionPluginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActionPlugin` that was created by this mutation."""
  actionPlugin: ActionPlugin

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ActionPlugin`. May be used by Relay 1."""
  actionPluginEdge(
    """The method to use when ordering `ActionPlugin`."""
    orderBy: [ActionPluginsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActionPluginsEdge
}

"""All input for the create `ActionQueue` mutation."""
input CreateActionQueueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ActionQueue` to be created by this mutation."""
  actionQueue: ActionQueueInput!
}

"""The output of our create `ActionQueue` mutation."""
type CreateActionQueuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActionQueue` that was created by this mutation."""
  actionQueue: ActionQueue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TriggerQueue` that is related to this `ActionQueue`."""
  triggerQueueByTriggerEvent: TriggerQueue

  """An edge for our `ActionQueue`. May be used by Relay 1."""
  actionQueueEdge(
    """The method to use when ordering `ActionQueue`."""
    orderBy: [ActionQueuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActionQueuesEdge
}

"""All input for the create `Application` mutation."""
input CreateApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Application` to be created by this mutation."""
  application: ApplicationInput!
}

"""The output of our create `Application` mutation."""
type CreateApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was created by this mutation."""
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Template` that is related to this `Application`."""
  templateByTemplateId: Template

  """Reads a single `User` that is related to this `Application`."""
  userByUserId: User

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the create `ApplicationResponse` mutation."""
input CreateApplicationResponseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationResponse` to be created by this mutation."""
  applicationResponse: ApplicationResponseInput!
}

"""The output of our create `ApplicationResponse` mutation."""
type CreateApplicationResponsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationResponse` that was created by this mutation."""
  applicationResponse: ApplicationResponse

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TemplateElement` that is related to this `ApplicationResponse`.
  """
  templateElementByTemplateQuestionId: TemplateElement

  """
  Reads a single `Application` that is related to this `ApplicationResponse`.
  """
  applicationByApplicationId: Application

  """An edge for our `ApplicationResponse`. May be used by Relay 1."""
  applicationResponseEdge(
    """The method to use when ordering `ApplicationResponse`."""
    orderBy: [ApplicationResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationResponsesEdge
}

"""All input for the create `ApplicationSection` mutation."""
input CreateApplicationSectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationSection` to be created by this mutation."""
  applicationSection: ApplicationSectionInput!
}

"""The output of our create `ApplicationSection` mutation."""
type CreateApplicationSectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationSection` that was created by this mutation."""
  applicationSection: ApplicationSection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationSection`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `TemplateSection` that is related to this `ApplicationSection`.
  """
  templateSectionByTemplateSectionId: TemplateSection

  """An edge for our `ApplicationSection`. May be used by Relay 1."""
  applicationSectionEdge(
    """The method to use when ordering `ApplicationSection`."""
    orderBy: [ApplicationSectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationSectionsEdge
}

"""All input for the create `ApplicationStageHistory` mutation."""
input CreateApplicationStageHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationStageHistory` to be created by this mutation."""
  applicationStageHistory: ApplicationStageHistoryInput!
}

"""The output of our create `ApplicationStageHistory` mutation."""
type CreateApplicationStageHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStageHistory` that was created by this mutation."""
  applicationStageHistory: ApplicationStageHistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationStageHistory`.
  """
  applicationByApplicationId: Application

  """An edge for our `ApplicationStageHistory`. May be used by Relay 1."""
  applicationStageHistoryEdge(
    """The method to use when ordering `ApplicationStageHistory`."""
    orderBy: [ApplicationStageHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStageHistoriesEdge
}

"""All input for the create `ApplicationStatusHistory` mutation."""
input CreateApplicationStatusHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationStatusHistory` to be created by this mutation."""
  applicationStatusHistory: ApplicationStatusHistoryInput!
}

"""The output of our create `ApplicationStatusHistory` mutation."""
type CreateApplicationStatusHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatusHistory` that was created by this mutation."""
  applicationStatusHistory: ApplicationStatusHistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ApplicationStageHistory` that is related to this `ApplicationStatusHistory`.
  """
  applicationStageHistoryByApplicationStageHistoryId: ApplicationStageHistory

  """An edge for our `ApplicationStatusHistory`. May be used by Relay 1."""
  applicationStatusHistoryEdge(
    """The method to use when ordering `ApplicationStatusHistory`."""
    orderBy: [ApplicationStatusHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusHistoriesEdge
}

"""All input for the create `ElementTypePlugin` mutation."""
input CreateElementTypePluginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ElementTypePlugin` to be created by this mutation."""
  elementTypePlugin: ElementTypePluginInput!
}

"""The output of our create `ElementTypePlugin` mutation."""
type CreateElementTypePluginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ElementTypePlugin` that was created by this mutation."""
  elementTypePlugin: ElementTypePlugin

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ElementTypePlugin`. May be used by Relay 1."""
  elementTypePluginEdge(
    """The method to use when ordering `ElementTypePlugin`."""
    orderBy: [ElementTypePluginsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ElementTypePluginsEdge
}

"""All input for the create `File` mutation."""
input CreateFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `File` to be created by this mutation."""
  file: FileInput!
}

"""The output of our create `File` mutation."""
type CreateFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `File` that was created by this mutation."""
  file: File

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `File`."""
  userByUserId: User

  """Reads a single `Application` that is related to this `File`."""
  applicationByApplicationId: Application

  """Reads a single `ApplicationResponse` that is related to this `File`."""
  applicationResponseByApplicationResponseId: ApplicationResponse

  """An edge for our `File`. May be used by Relay 1."""
  fileEdge(
    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilesEdge
}

"""All input for the create `Notification` mutation."""
input CreateNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Notification` to be created by this mutation."""
  notification: NotificationInput!
}

"""The output of our create `Notification` mutation."""
type CreateNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Notification` that was created by this mutation."""
  notification: Notification

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Notification`."""
  userByUserId: User

  """Reads a single `Application` that is related to this `Notification`."""
  applicationByApplicationId: Application

  """Reads a single `Review` that is related to this `Notification`."""
  reviewByReviewId: Review

  """Reads a single `File` that is related to this `Notification`."""
  fileByDocumentId: File

  """An edge for our `Notification`. May be used by Relay 1."""
  notificationEdge(
    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge
}

"""All input for the create `Organisation` mutation."""
input CreateOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Organisation` to be created by this mutation."""
  organisation: OrganisationInput!
}

"""The output of our create `Organisation` mutation."""
type CreateOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organisation` that was created by this mutation."""
  organisation: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organisation`. May be used by Relay 1."""
  organisationEdge(
    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationsEdge
}

"""All input for the create `PermissionJoin` mutation."""
input CreatePermissionJoinInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PermissionJoin` to be created by this mutation."""
  permissionJoin: PermissionJoinInput!
}

"""The output of our create `PermissionJoin` mutation."""
type CreatePermissionJoinPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PermissionJoin` that was created by this mutation."""
  permissionJoin: PermissionJoin

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PermissionJoin`."""
  userByUserId: User

  """
  Reads a single `UserOrganisation` that is related to this `PermissionJoin`.
  """
  userOrganisationByUserOrganisationId: UserOrganisation

  """
  Reads a single `PermissionName` that is related to this `PermissionJoin`.
  """
  permissionNameByPermissionNameId: PermissionName

  """An edge for our `PermissionJoin`. May be used by Relay 1."""
  permissionJoinEdge(
    """The method to use when ordering `PermissionJoin`."""
    orderBy: [PermissionJoinsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermissionJoinsEdge
}

"""All input for the create `PermissionName` mutation."""
input CreatePermissionNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PermissionName` to be created by this mutation."""
  permissionName: PermissionNameInput!
}

"""The output of our create `PermissionName` mutation."""
type CreatePermissionNamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PermissionName` that was created by this mutation."""
  permissionName: PermissionName

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `PermissionName`. May be used by Relay 1."""
  permissionNameEdge(
    """The method to use when ordering `PermissionName`."""
    orderBy: [PermissionNamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermissionNamesEdge
}

"""All input for the create `PermissionPolicy` mutation."""
input CreatePermissionPolicyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PermissionPolicy` to be created by this mutation."""
  permissionPolicy: PermissionPolicyInput!
}

"""The output of our create `PermissionPolicy` mutation."""
type CreatePermissionPolicyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PermissionPolicy` that was created by this mutation."""
  permissionPolicy: PermissionPolicy

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `PermissionPolicy`. May be used by Relay 1."""
  permissionPolicyEdge(
    """The method to use when ordering `PermissionPolicy`."""
    orderBy: [PermissionPoliciesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermissionPoliciesEdge
}

"""All input for the create `Review` mutation."""
input CreateReviewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Review` to be created by this mutation."""
  review: ReviewInput!
}

"""The output of our create `Review` mutation."""
type CreateReviewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Review` that was created by this mutation."""
  review: Review

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `Review`."""
  applicationByApplicationId: Application

  """An edge for our `Review`. May be used by Relay 1."""
  reviewEdge(
    """The method to use when ordering `Review`."""
    orderBy: [ReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewsEdge
}

"""All input for the create `ReviewResponse` mutation."""
input CreateReviewResponseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ReviewResponse` to be created by this mutation."""
  reviewResponse: ReviewResponseInput!
}

"""The output of our create `ReviewResponse` mutation."""
type CreateReviewResponsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReviewResponse` that was created by this mutation."""
  reviewResponse: ReviewResponse

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ApplicationResponse` that is related to this `ReviewResponse`.
  """
  applicationResponseByApplicationResponseId: ApplicationResponse

  """An edge for our `ReviewResponse`. May be used by Relay 1."""
  reviewResponseEdge(
    """The method to use when ordering `ReviewResponse`."""
    orderBy: [ReviewResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewResponsesEdge
}

"""All input for the create `ReviewSectionAssignment` mutation."""
input CreateReviewSectionAssignmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ReviewSectionAssignment` to be created by this mutation."""
  reviewSectionAssignment: ReviewSectionAssignmentInput!
}

"""The output of our create `ReviewSectionAssignment` mutation."""
type CreateReviewSectionAssignmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReviewSectionAssignment` that was created by this mutation."""
  reviewSectionAssignment: ReviewSectionAssignment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `ReviewSectionAssignment`.
  """
  userByReviewerId: User

  """
  Reads a single `User` that is related to this `ReviewSectionAssignment`.
  """
  userByAssignerId: User

  """
  Reads a single `ApplicationStageHistory` that is related to this `ReviewSectionAssignment`.
  """
  applicationStageHistoryByStageId: ApplicationStageHistory

  """
  Reads a single `ApplicationSection` that is related to this `ReviewSectionAssignment`.
  """
  applicationSectionBySectionId: ApplicationSection

  """An edge for our `ReviewSectionAssignment`. May be used by Relay 1."""
  reviewSectionAssignmentEdge(
    """The method to use when ordering `ReviewSectionAssignment`."""
    orderBy: [ReviewSectionAssignmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewSectionAssignmentsEdge
}

"""All input for the create `ReviewSection` mutation."""
input CreateReviewSectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ReviewSection` to be created by this mutation."""
  reviewSection: ReviewSectionInput!
}

"""All input for the create `ReviewSectionJoin` mutation."""
input CreateReviewSectionJoinInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ReviewSectionJoin` to be created by this mutation."""
  reviewSectionJoin: ReviewSectionJoinInput!
}

"""The output of our create `ReviewSectionJoin` mutation."""
type CreateReviewSectionJoinPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReviewSectionJoin` that was created by this mutation."""
  reviewSectionJoin: ReviewSectionJoin

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Review` that is related to this `ReviewSectionJoin`."""
  reviewByReviewId: Review

  """
  Reads a single `ReviewSectionAssignment` that is related to this `ReviewSectionJoin`.
  """
  reviewSectionAssignmentBySectionAssignmentId: ReviewSectionAssignment

  """
  Reads a single `ReviewSection` that is related to this `ReviewSectionJoin`.
  """
  reviewSectionByReviewSectionId: ReviewSection

  """An edge for our `ReviewSectionJoin`. May be used by Relay 1."""
  reviewSectionJoinEdge(
    """The method to use when ordering `ReviewSectionJoin`."""
    orderBy: [ReviewSectionJoinsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewSectionJoinsEdge
}

"""The output of our create `ReviewSection` mutation."""
type CreateReviewSectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReviewSection` that was created by this mutation."""
  reviewSection: ReviewSection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ReviewSection`. May be used by Relay 1."""
  reviewSectionEdge(
    """The method to use when ordering `ReviewSection`."""
    orderBy: [ReviewSectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewSectionsEdge
}

"""All input for the create `ReviewSectionResponseJoin` mutation."""
input CreateReviewSectionResponseJoinInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ReviewSectionResponseJoin` to be created by this mutation."""
  reviewSectionResponseJoin: ReviewSectionResponseJoinInput!
}

"""The output of our create `ReviewSectionResponseJoin` mutation."""
type CreateReviewSectionResponseJoinPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReviewSectionResponseJoin` that was created by this mutation."""
  reviewSectionResponseJoin: ReviewSectionResponseJoin

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ReviewSectionJoin` that is related to this `ReviewSectionResponseJoin`.
  """
  reviewSectionJoinByReviewSectionJoinId: ReviewSectionJoin

  """
  Reads a single `ReviewResponse` that is related to this `ReviewSectionResponseJoin`.
  """
  reviewResponseByReviewResponseId: ReviewResponse

  """An edge for our `ReviewSectionResponseJoin`. May be used by Relay 1."""
  reviewSectionResponseJoinEdge(
    """The method to use when ordering `ReviewSectionResponseJoin`."""
    orderBy: [ReviewSectionResponseJoinsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewSectionResponseJoinsEdge
}

"""All input for the create `TemplateAction` mutation."""
input CreateTemplateActionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TemplateAction` to be created by this mutation."""
  templateAction: TemplateActionInput!
}

"""The output of our create `TemplateAction` mutation."""
type CreateTemplateActionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplateAction` that was created by this mutation."""
  templateAction: TemplateAction

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Template` that is related to this `TemplateAction`."""
  templateByTemplateId: Template

  """
  Reads a single `TemplateAction` that is related to this `TemplateAction`.
  """
  templateActionByPreviousActionId: TemplateAction

  """An edge for our `TemplateAction`. May be used by Relay 1."""
  templateActionEdge(
    """The method to use when ordering `TemplateAction`."""
    orderBy: [TemplateActionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplateActionsEdge
}

"""All input for the create `TemplateElement` mutation."""
input CreateTemplateElementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TemplateElement` to be created by this mutation."""
  templateElement: TemplateElementInput!
}

"""The output of our create `TemplateElement` mutation."""
type CreateTemplateElementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplateElement` that was created by this mutation."""
  templateElement: TemplateElement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TemplateSection` that is related to this `TemplateElement`.
  """
  templateSectionBySectionId: TemplateSection

  """An edge for our `TemplateElement`. May be used by Relay 1."""
  templateElementEdge(
    """The method to use when ordering `TemplateElement`."""
    orderBy: [TemplateElementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplateElementsEdge
}

"""All input for the create `Template` mutation."""
input CreateTemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Template` to be created by this mutation."""
  template: TemplateInput!
}

"""The output of our create `Template` mutation."""
type CreateTemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Template` that was created by this mutation."""
  template: Template

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TemplateVersion` that is related to this `Template`."""
  templateVersionByVersionId: TemplateVersion

  """An edge for our `Template`. May be used by Relay 1."""
  templateEdge(
    """The method to use when ordering `Template`."""
    orderBy: [TemplatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplatesEdge
}

"""All input for the create `TemplatePermission` mutation."""
input CreateTemplatePermissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TemplatePermission` to be created by this mutation."""
  templatePermission: TemplatePermissionInput!
}

"""The output of our create `TemplatePermission` mutation."""
type CreateTemplatePermissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplatePermission` that was created by this mutation."""
  templatePermission: TemplatePermission

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `PermissionJoin` that is related to this `TemplatePermission`.
  """
  permissionJoinByPermissionJoinId: PermissionJoin

  """
  Reads a single `Template` that is related to this `TemplatePermission`.
  """
  templateByTemplateId: Template

  """
  Reads a single `TemplateSection` that is related to this `TemplatePermission`.
  """
  templateSectionByTemplateSectionId: TemplateSection

  """
  Reads a single `PermissionPolicy` that is related to this `TemplatePermission`.
  """
  permissionPolicyByPermissionPolicyId: PermissionPolicy

  """An edge for our `TemplatePermission`. May be used by Relay 1."""
  templatePermissionEdge(
    """The method to use when ordering `TemplatePermission`."""
    orderBy: [TemplatePermissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplatePermissionsEdge
}

"""All input for the create `TemplateReviewStage` mutation."""
input CreateTemplateReviewStageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TemplateReviewStage` to be created by this mutation."""
  templateReviewStage: TemplateReviewStageInput!
}

"""The output of our create `TemplateReviewStage` mutation."""
type CreateTemplateReviewStagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplateReviewStage` that was created by this mutation."""
  templateReviewStage: TemplateReviewStage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TemplateStage` that is related to this `TemplateReviewStage`.
  """
  templateStageByTemplateStageId: TemplateStage

  """
  Reads a single `PermissionJoin` that is related to this `TemplateReviewStage`.
  """
  permissionJoinByPermissionJoinId: PermissionJoin

  """
  Reads a single `TemplateReviewStage` that is related to this `TemplateReviewStage`.
  """
  templateReviewStageByNextReviewStageId: TemplateReviewStage

  """An edge for our `TemplateReviewStage`. May be used by Relay 1."""
  templateReviewStageEdge(
    """The method to use when ordering `TemplateReviewStage`."""
    orderBy: [TemplateReviewStagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplateReviewStagesEdge
}

"""All input for the create `TemplateSection` mutation."""
input CreateTemplateSectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TemplateSection` to be created by this mutation."""
  templateSection: TemplateSectionInput!
}

"""The output of our create `TemplateSection` mutation."""
type CreateTemplateSectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplateSection` that was created by this mutation."""
  templateSection: TemplateSection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Template` that is related to this `TemplateSection`."""
  templateByTemplateId: Template

  """An edge for our `TemplateSection`. May be used by Relay 1."""
  templateSectionEdge(
    """The method to use when ordering `TemplateSection`."""
    orderBy: [TemplateSectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplateSectionsEdge
}

"""All input for the create `TemplateStage` mutation."""
input CreateTemplateStageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TemplateStage` to be created by this mutation."""
  templateStage: TemplateStageInput!
}

"""The output of our create `TemplateStage` mutation."""
type CreateTemplateStagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplateStage` that was created by this mutation."""
  templateStage: TemplateStage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Template` that is related to this `TemplateStage`."""
  templateByTamplateId: Template

  """An edge for our `TemplateStage`. May be used by Relay 1."""
  templateStageEdge(
    """The method to use when ordering `TemplateStage`."""
    orderBy: [TemplateStagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplateStagesEdge
}

"""All input for the create `TemplateVersion` mutation."""
input CreateTemplateVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TemplateVersion` to be created by this mutation."""
  templateVersion: TemplateVersionInput!
}

"""The output of our create `TemplateVersion` mutation."""
type CreateTemplateVersionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplateVersion` that was created by this mutation."""
  templateVersion: TemplateVersion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TemplateVersion`. May be used by Relay 1."""
  templateVersionEdge(
    """The method to use when ordering `TemplateVersion`."""
    orderBy: [TemplateVersionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplateVersionsEdge
}

"""All input for the create `TriggerQueue` mutation."""
input CreateTriggerQueueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TriggerQueue` to be created by this mutation."""
  triggerQueue: TriggerQueueInput!
}

"""The output of our create `TriggerQueue` mutation."""
type CreateTriggerQueuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TriggerQueue` that was created by this mutation."""
  triggerQueue: TriggerQueue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TriggerQueue`. May be used by Relay 1."""
  triggerQueueEdge(
    """The method to use when ordering `TriggerQueue`."""
    orderBy: [TriggerQueuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TriggerQueuesEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""All input for the create `UserOrganisation` mutation."""
input CreateUserOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserOrganisation` to be created by this mutation."""
  userOrganisation: UserOrganisationInput!
}

"""The output of our create `UserOrganisation` mutation."""
type CreateUserOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserOrganisation` that was created by this mutation."""
  userOrganisation: UserOrganisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserOrganisation`."""
  userByUserId: User

  """
  Reads a single `Organisation` that is related to this `UserOrganisation`.
  """
  organisationByOrganistionId: Organisation

  """An edge for our `UserOrganisation`. May be used by Relay 1."""
  userOrganisationEdge(
    """The method to use when ordering `UserOrganisation`."""
    orderBy: [UserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserOrganisationsEdge
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteActionPluginByCode` mutation."""
input DeleteActionPluginByCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  code: String!
}

"""All input for the `deleteActionPlugin` mutation."""
input DeleteActionPluginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ActionPlugin` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ActionPlugin` mutation."""
type DeleteActionPluginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActionPlugin` that was deleted by this mutation."""
  actionPlugin: ActionPlugin
  deletedActionPluginId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ActionPlugin`. May be used by Relay 1."""
  actionPluginEdge(
    """The method to use when ordering `ActionPlugin`."""
    orderBy: [ActionPluginsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActionPluginsEdge
}

"""All input for the `deleteActionQueueById` mutation."""
input DeleteActionQueueByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteActionQueue` mutation."""
input DeleteActionQueueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ActionQueue` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ActionQueue` mutation."""
type DeleteActionQueuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActionQueue` that was deleted by this mutation."""
  actionQueue: ActionQueue
  deletedActionQueueId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TriggerQueue` that is related to this `ActionQueue`."""
  triggerQueueByTriggerEvent: TriggerQueue

  """An edge for our `ActionQueue`. May be used by Relay 1."""
  actionQueueEdge(
    """The method to use when ordering `ActionQueue`."""
    orderBy: [ActionQueuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActionQueuesEdge
}

"""All input for the `deleteApplicationById` mutation."""
input DeleteApplicationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteApplication` mutation."""
input DeleteApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Application` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Application` mutation."""
type DeleteApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was deleted by this mutation."""
  application: Application
  deletedApplicationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Template` that is related to this `Application`."""
  templateByTemplateId: Template

  """Reads a single `User` that is related to this `Application`."""
  userByUserId: User

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `deleteApplicationResponseById` mutation."""
input DeleteApplicationResponseByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteApplicationResponse` mutation."""
input DeleteApplicationResponseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationResponse` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ApplicationResponse` mutation."""
type DeleteApplicationResponsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationResponse` that was deleted by this mutation."""
  applicationResponse: ApplicationResponse
  deletedApplicationResponseId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TemplateElement` that is related to this `ApplicationResponse`.
  """
  templateElementByTemplateQuestionId: TemplateElement

  """
  Reads a single `Application` that is related to this `ApplicationResponse`.
  """
  applicationByApplicationId: Application

  """An edge for our `ApplicationResponse`. May be used by Relay 1."""
  applicationResponseEdge(
    """The method to use when ordering `ApplicationResponse`."""
    orderBy: [ApplicationResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationResponsesEdge
}

"""All input for the `deleteApplicationSectionById` mutation."""
input DeleteApplicationSectionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteApplicationSection` mutation."""
input DeleteApplicationSectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationSection` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ApplicationSection` mutation."""
type DeleteApplicationSectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationSection` that was deleted by this mutation."""
  applicationSection: ApplicationSection
  deletedApplicationSectionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationSection`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `TemplateSection` that is related to this `ApplicationSection`.
  """
  templateSectionByTemplateSectionId: TemplateSection

  """An edge for our `ApplicationSection`. May be used by Relay 1."""
  applicationSectionEdge(
    """The method to use when ordering `ApplicationSection`."""
    orderBy: [ApplicationSectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationSectionsEdge
}

"""All input for the `deleteApplicationStageHistoryById` mutation."""
input DeleteApplicationStageHistoryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteApplicationStageHistory` mutation."""
input DeleteApplicationStageHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationStageHistory` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ApplicationStageHistory` mutation."""
type DeleteApplicationStageHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStageHistory` that was deleted by this mutation."""
  applicationStageHistory: ApplicationStageHistory
  deletedApplicationStageHistoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationStageHistory`.
  """
  applicationByApplicationId: Application

  """An edge for our `ApplicationStageHistory`. May be used by Relay 1."""
  applicationStageHistoryEdge(
    """The method to use when ordering `ApplicationStageHistory`."""
    orderBy: [ApplicationStageHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStageHistoriesEdge
}

"""All input for the `deleteApplicationStatusHistoryById` mutation."""
input DeleteApplicationStatusHistoryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteApplicationStatusHistory` mutation."""
input DeleteApplicationStatusHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationStatusHistory` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ApplicationStatusHistory` mutation."""
type DeleteApplicationStatusHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatusHistory` that was deleted by this mutation."""
  applicationStatusHistory: ApplicationStatusHistory
  deletedApplicationStatusHistoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ApplicationStageHistory` that is related to this `ApplicationStatusHistory`.
  """
  applicationStageHistoryByApplicationStageHistoryId: ApplicationStageHistory

  """An edge for our `ApplicationStatusHistory`. May be used by Relay 1."""
  applicationStatusHistoryEdge(
    """The method to use when ordering `ApplicationStatusHistory`."""
    orderBy: [ApplicationStatusHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusHistoriesEdge
}

"""All input for the `deleteElementTypePluginByCode` mutation."""
input DeleteElementTypePluginByCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  code: String!
}

"""All input for the `deleteElementTypePlugin` mutation."""
input DeleteElementTypePluginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ElementTypePlugin` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ElementTypePlugin` mutation."""
type DeleteElementTypePluginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ElementTypePlugin` that was deleted by this mutation."""
  elementTypePlugin: ElementTypePlugin
  deletedElementTypePluginId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ElementTypePlugin`. May be used by Relay 1."""
  elementTypePluginEdge(
    """The method to use when ordering `ElementTypePlugin`."""
    orderBy: [ElementTypePluginsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ElementTypePluginsEdge
}

"""All input for the `deleteFileById` mutation."""
input DeleteFileByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteFile` mutation."""
input DeleteFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `File` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `File` mutation."""
type DeleteFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `File` that was deleted by this mutation."""
  file: File
  deletedFileId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `File`."""
  userByUserId: User

  """Reads a single `Application` that is related to this `File`."""
  applicationByApplicationId: Application

  """Reads a single `ApplicationResponse` that is related to this `File`."""
  applicationResponseByApplicationResponseId: ApplicationResponse

  """An edge for our `File`. May be used by Relay 1."""
  fileEdge(
    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilesEdge
}

"""All input for the `deleteNotificationById` mutation."""
input DeleteNotificationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteNotification` mutation."""
input DeleteNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Notification` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Notification` mutation."""
type DeleteNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Notification` that was deleted by this mutation."""
  notification: Notification
  deletedNotificationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Notification`."""
  userByUserId: User

  """Reads a single `Application` that is related to this `Notification`."""
  applicationByApplicationId: Application

  """Reads a single `Review` that is related to this `Notification`."""
  reviewByReviewId: Review

  """Reads a single `File` that is related to this `Notification`."""
  fileByDocumentId: File

  """An edge for our `Notification`. May be used by Relay 1."""
  notificationEdge(
    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge
}

"""All input for the `deleteOrganisationById` mutation."""
input DeleteOrganisationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteOrganisation` mutation."""
input DeleteOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organisation` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Organisation` mutation."""
type DeleteOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organisation` that was deleted by this mutation."""
  organisation: Organisation
  deletedOrganisationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organisation`. May be used by Relay 1."""
  organisationEdge(
    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationsEdge
}

"""All input for the `deletePermissionJoinById` mutation."""
input DeletePermissionJoinByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deletePermissionJoin` mutation."""
input DeletePermissionJoinInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PermissionJoin` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `PermissionJoin` mutation."""
type DeletePermissionJoinPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PermissionJoin` that was deleted by this mutation."""
  permissionJoin: PermissionJoin
  deletedPermissionJoinId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PermissionJoin`."""
  userByUserId: User

  """
  Reads a single `UserOrganisation` that is related to this `PermissionJoin`.
  """
  userOrganisationByUserOrganisationId: UserOrganisation

  """
  Reads a single `PermissionName` that is related to this `PermissionJoin`.
  """
  permissionNameByPermissionNameId: PermissionName

  """An edge for our `PermissionJoin`. May be used by Relay 1."""
  permissionJoinEdge(
    """The method to use when ordering `PermissionJoin`."""
    orderBy: [PermissionJoinsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermissionJoinsEdge
}

"""All input for the `deletePermissionNameById` mutation."""
input DeletePermissionNameByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deletePermissionName` mutation."""
input DeletePermissionNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PermissionName` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `PermissionName` mutation."""
type DeletePermissionNamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PermissionName` that was deleted by this mutation."""
  permissionName: PermissionName
  deletedPermissionNameId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `PermissionName`. May be used by Relay 1."""
  permissionNameEdge(
    """The method to use when ordering `PermissionName`."""
    orderBy: [PermissionNamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermissionNamesEdge
}

"""All input for the `deletePermissionPolicyById` mutation."""
input DeletePermissionPolicyByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deletePermissionPolicy` mutation."""
input DeletePermissionPolicyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PermissionPolicy` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `PermissionPolicy` mutation."""
type DeletePermissionPolicyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PermissionPolicy` that was deleted by this mutation."""
  permissionPolicy: PermissionPolicy
  deletedPermissionPolicyId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `PermissionPolicy`. May be used by Relay 1."""
  permissionPolicyEdge(
    """The method to use when ordering `PermissionPolicy`."""
    orderBy: [PermissionPoliciesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermissionPoliciesEdge
}

"""All input for the `deleteReviewById` mutation."""
input DeleteReviewByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteReview` mutation."""
input DeleteReviewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Review` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Review` mutation."""
type DeleteReviewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Review` that was deleted by this mutation."""
  review: Review
  deletedReviewId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `Review`."""
  applicationByApplicationId: Application

  """An edge for our `Review`. May be used by Relay 1."""
  reviewEdge(
    """The method to use when ordering `Review`."""
    orderBy: [ReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewsEdge
}

"""All input for the `deleteReviewResponseById` mutation."""
input DeleteReviewResponseByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteReviewResponse` mutation."""
input DeleteReviewResponseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReviewResponse` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ReviewResponse` mutation."""
type DeleteReviewResponsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReviewResponse` that was deleted by this mutation."""
  reviewResponse: ReviewResponse
  deletedReviewResponseId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ApplicationResponse` that is related to this `ReviewResponse`.
  """
  applicationResponseByApplicationResponseId: ApplicationResponse

  """An edge for our `ReviewResponse`. May be used by Relay 1."""
  reviewResponseEdge(
    """The method to use when ordering `ReviewResponse`."""
    orderBy: [ReviewResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewResponsesEdge
}

"""All input for the `deleteReviewSectionAssignmentById` mutation."""
input DeleteReviewSectionAssignmentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteReviewSectionAssignment` mutation."""
input DeleteReviewSectionAssignmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReviewSectionAssignment` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ReviewSectionAssignment` mutation."""
type DeleteReviewSectionAssignmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReviewSectionAssignment` that was deleted by this mutation."""
  reviewSectionAssignment: ReviewSectionAssignment
  deletedReviewSectionAssignmentId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `ReviewSectionAssignment`.
  """
  userByReviewerId: User

  """
  Reads a single `User` that is related to this `ReviewSectionAssignment`.
  """
  userByAssignerId: User

  """
  Reads a single `ApplicationStageHistory` that is related to this `ReviewSectionAssignment`.
  """
  applicationStageHistoryByStageId: ApplicationStageHistory

  """
  Reads a single `ApplicationSection` that is related to this `ReviewSectionAssignment`.
  """
  applicationSectionBySectionId: ApplicationSection

  """An edge for our `ReviewSectionAssignment`. May be used by Relay 1."""
  reviewSectionAssignmentEdge(
    """The method to use when ordering `ReviewSectionAssignment`."""
    orderBy: [ReviewSectionAssignmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewSectionAssignmentsEdge
}

"""All input for the `deleteReviewSectionById` mutation."""
input DeleteReviewSectionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteReviewSection` mutation."""
input DeleteReviewSectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReviewSection` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteReviewSectionJoinById` mutation."""
input DeleteReviewSectionJoinByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteReviewSectionJoin` mutation."""
input DeleteReviewSectionJoinInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReviewSectionJoin` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ReviewSectionJoin` mutation."""
type DeleteReviewSectionJoinPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReviewSectionJoin` that was deleted by this mutation."""
  reviewSectionJoin: ReviewSectionJoin
  deletedReviewSectionJoinId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Review` that is related to this `ReviewSectionJoin`."""
  reviewByReviewId: Review

  """
  Reads a single `ReviewSectionAssignment` that is related to this `ReviewSectionJoin`.
  """
  reviewSectionAssignmentBySectionAssignmentId: ReviewSectionAssignment

  """
  Reads a single `ReviewSection` that is related to this `ReviewSectionJoin`.
  """
  reviewSectionByReviewSectionId: ReviewSection

  """An edge for our `ReviewSectionJoin`. May be used by Relay 1."""
  reviewSectionJoinEdge(
    """The method to use when ordering `ReviewSectionJoin`."""
    orderBy: [ReviewSectionJoinsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewSectionJoinsEdge
}

"""The output of our delete `ReviewSection` mutation."""
type DeleteReviewSectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReviewSection` that was deleted by this mutation."""
  reviewSection: ReviewSection
  deletedReviewSectionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ReviewSection`. May be used by Relay 1."""
  reviewSectionEdge(
    """The method to use when ordering `ReviewSection`."""
    orderBy: [ReviewSectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewSectionsEdge
}

"""All input for the `deleteReviewSectionResponseJoinById` mutation."""
input DeleteReviewSectionResponseJoinByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteReviewSectionResponseJoin` mutation."""
input DeleteReviewSectionResponseJoinInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReviewSectionResponseJoin` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ReviewSectionResponseJoin` mutation."""
type DeleteReviewSectionResponseJoinPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReviewSectionResponseJoin` that was deleted by this mutation."""
  reviewSectionResponseJoin: ReviewSectionResponseJoin
  deletedReviewSectionResponseJoinId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ReviewSectionJoin` that is related to this `ReviewSectionResponseJoin`.
  """
  reviewSectionJoinByReviewSectionJoinId: ReviewSectionJoin

  """
  Reads a single `ReviewResponse` that is related to this `ReviewSectionResponseJoin`.
  """
  reviewResponseByReviewResponseId: ReviewResponse

  """An edge for our `ReviewSectionResponseJoin`. May be used by Relay 1."""
  reviewSectionResponseJoinEdge(
    """The method to use when ordering `ReviewSectionResponseJoin`."""
    orderBy: [ReviewSectionResponseJoinsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewSectionResponseJoinsEdge
}

"""All input for the `deleteTemplateActionById` mutation."""
input DeleteTemplateActionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteTemplateAction` mutation."""
input DeleteTemplateActionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TemplateAction` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TemplateAction` mutation."""
type DeleteTemplateActionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplateAction` that was deleted by this mutation."""
  templateAction: TemplateAction
  deletedTemplateActionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Template` that is related to this `TemplateAction`."""
  templateByTemplateId: Template

  """
  Reads a single `TemplateAction` that is related to this `TemplateAction`.
  """
  templateActionByPreviousActionId: TemplateAction

  """An edge for our `TemplateAction`. May be used by Relay 1."""
  templateActionEdge(
    """The method to use when ordering `TemplateAction`."""
    orderBy: [TemplateActionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplateActionsEdge
}

"""All input for the `deleteTemplateById` mutation."""
input DeleteTemplateByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteTemplateElementById` mutation."""
input DeleteTemplateElementByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteTemplateElement` mutation."""
input DeleteTemplateElementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TemplateElement` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TemplateElement` mutation."""
type DeleteTemplateElementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplateElement` that was deleted by this mutation."""
  templateElement: TemplateElement
  deletedTemplateElementId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TemplateSection` that is related to this `TemplateElement`.
  """
  templateSectionBySectionId: TemplateSection

  """An edge for our `TemplateElement`. May be used by Relay 1."""
  templateElementEdge(
    """The method to use when ordering `TemplateElement`."""
    orderBy: [TemplateElementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplateElementsEdge
}

"""All input for the `deleteTemplate` mutation."""
input DeleteTemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Template` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Template` mutation."""
type DeleteTemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Template` that was deleted by this mutation."""
  template: Template
  deletedTemplateId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TemplateVersion` that is related to this `Template`."""
  templateVersionByVersionId: TemplateVersion

  """An edge for our `Template`. May be used by Relay 1."""
  templateEdge(
    """The method to use when ordering `Template`."""
    orderBy: [TemplatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplatesEdge
}

"""All input for the `deleteTemplatePermissionById` mutation."""
input DeleteTemplatePermissionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteTemplatePermission` mutation."""
input DeleteTemplatePermissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TemplatePermission` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TemplatePermission` mutation."""
type DeleteTemplatePermissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplatePermission` that was deleted by this mutation."""
  templatePermission: TemplatePermission
  deletedTemplatePermissionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `PermissionJoin` that is related to this `TemplatePermission`.
  """
  permissionJoinByPermissionJoinId: PermissionJoin

  """
  Reads a single `Template` that is related to this `TemplatePermission`.
  """
  templateByTemplateId: Template

  """
  Reads a single `TemplateSection` that is related to this `TemplatePermission`.
  """
  templateSectionByTemplateSectionId: TemplateSection

  """
  Reads a single `PermissionPolicy` that is related to this `TemplatePermission`.
  """
  permissionPolicyByPermissionPolicyId: PermissionPolicy

  """An edge for our `TemplatePermission`. May be used by Relay 1."""
  templatePermissionEdge(
    """The method to use when ordering `TemplatePermission`."""
    orderBy: [TemplatePermissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplatePermissionsEdge
}

"""All input for the `deleteTemplateReviewStageById` mutation."""
input DeleteTemplateReviewStageByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteTemplateReviewStage` mutation."""
input DeleteTemplateReviewStageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TemplateReviewStage` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TemplateReviewStage` mutation."""
type DeleteTemplateReviewStagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplateReviewStage` that was deleted by this mutation."""
  templateReviewStage: TemplateReviewStage
  deletedTemplateReviewStageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TemplateStage` that is related to this `TemplateReviewStage`.
  """
  templateStageByTemplateStageId: TemplateStage

  """
  Reads a single `PermissionJoin` that is related to this `TemplateReviewStage`.
  """
  permissionJoinByPermissionJoinId: PermissionJoin

  """
  Reads a single `TemplateReviewStage` that is related to this `TemplateReviewStage`.
  """
  templateReviewStageByNextReviewStageId: TemplateReviewStage

  """An edge for our `TemplateReviewStage`. May be used by Relay 1."""
  templateReviewStageEdge(
    """The method to use when ordering `TemplateReviewStage`."""
    orderBy: [TemplateReviewStagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplateReviewStagesEdge
}

"""All input for the `deleteTemplateSectionById` mutation."""
input DeleteTemplateSectionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteTemplateSection` mutation."""
input DeleteTemplateSectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TemplateSection` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TemplateSection` mutation."""
type DeleteTemplateSectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplateSection` that was deleted by this mutation."""
  templateSection: TemplateSection
  deletedTemplateSectionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Template` that is related to this `TemplateSection`."""
  templateByTemplateId: Template

  """An edge for our `TemplateSection`. May be used by Relay 1."""
  templateSectionEdge(
    """The method to use when ordering `TemplateSection`."""
    orderBy: [TemplateSectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplateSectionsEdge
}

"""All input for the `deleteTemplateStageById` mutation."""
input DeleteTemplateStageByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteTemplateStage` mutation."""
input DeleteTemplateStageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TemplateStage` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TemplateStage` mutation."""
type DeleteTemplateStagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplateStage` that was deleted by this mutation."""
  templateStage: TemplateStage
  deletedTemplateStageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Template` that is related to this `TemplateStage`."""
  templateByTamplateId: Template

  """An edge for our `TemplateStage`. May be used by Relay 1."""
  templateStageEdge(
    """The method to use when ordering `TemplateStage`."""
    orderBy: [TemplateStagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplateStagesEdge
}

"""All input for the `deleteTemplateVersionById` mutation."""
input DeleteTemplateVersionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteTemplateVersion` mutation."""
input DeleteTemplateVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TemplateVersion` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TemplateVersion` mutation."""
type DeleteTemplateVersionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplateVersion` that was deleted by this mutation."""
  templateVersion: TemplateVersion
  deletedTemplateVersionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TemplateVersion`. May be used by Relay 1."""
  templateVersionEdge(
    """The method to use when ordering `TemplateVersion`."""
    orderBy: [TemplateVersionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplateVersionsEdge
}

"""All input for the `deleteTriggerQueueById` mutation."""
input DeleteTriggerQueueByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteTriggerQueue` mutation."""
input DeleteTriggerQueueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TriggerQueue` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TriggerQueue` mutation."""
type DeleteTriggerQueuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TriggerQueue` that was deleted by this mutation."""
  triggerQueue: TriggerQueue
  deletedTriggerQueueId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TriggerQueue`. May be used by Relay 1."""
  triggerQueueEdge(
    """The method to use when ordering `TriggerQueue`."""
    orderBy: [TriggerQueuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TriggerQueuesEdge
}

"""All input for the `deleteUserById` mutation."""
input DeleteUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserOrganisationById` mutation."""
input DeleteUserOrganisationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteUserOrganisation` mutation."""
input DeleteUserOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserOrganisation` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `UserOrganisation` mutation."""
type DeleteUserOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserOrganisation` that was deleted by this mutation."""
  userOrganisation: UserOrganisation
  deletedUserOrganisationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserOrganisation`."""
  userByUserId: User

  """
  Reads a single `Organisation` that is related to this `UserOrganisation`.
  """
  organisationByOrganistionId: Organisation

  """An edge for our `UserOrganisation`. May be used by Relay 1."""
  userOrganisationEdge(
    """The method to use when ordering `UserOrganisation`."""
    orderBy: [UserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserOrganisationsEdge
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type ElementTypePlugin implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  code: String!
  name: String
  description: String
  category: TemplateElementCategory
  path: String
  displayComponentName: String
  configComponentName: String
  requiredParameters: [String]
}

"""
A condition to be used against `ElementTypePlugin` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ElementTypePluginCondition {
  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `category` field."""
  category: TemplateElementCategory

  """Checks for equality with the object’s `path` field."""
  path: String

  """Checks for equality with the object’s `displayComponentName` field."""
  displayComponentName: String

  """Checks for equality with the object’s `configComponentName` field."""
  configComponentName: String

  """Checks for equality with the object’s `requiredParameters` field."""
  requiredParameters: [String]
}

"""An input for mutations affecting `ElementTypePlugin`"""
input ElementTypePluginInput {
  code: String!
  name: String
  description: String
  category: TemplateElementCategory
  path: String
  displayComponentName: String
  configComponentName: String
  requiredParameters: [String]
}

"""
Represents an update to a `ElementTypePlugin`. Fields that are set will be updated.
"""
input ElementTypePluginPatch {
  code: String
  name: String
  description: String
  category: TemplateElementCategory
  path: String
  displayComponentName: String
  configComponentName: String
  requiredParameters: [String]
}

"""A connection to a list of `ElementTypePlugin` values."""
type ElementTypePluginsConnection {
  """A list of `ElementTypePlugin` objects."""
  nodes: [ElementTypePlugin]!

  """
  A list of edges which contains the `ElementTypePlugin` and cursor to aid in pagination.
  """
  edges: [ElementTypePluginsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ElementTypePlugin` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ElementTypePlugin` edge in the connection."""
type ElementTypePluginsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ElementTypePlugin` at the end of the edge."""
  node: ElementTypePlugin
}

"""Methods to use when ordering `ElementTypePlugin`."""
enum ElementTypePluginsOrderBy {
  NATURAL
  CODE_ASC
  CODE_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CATEGORY_ASC
  CATEGORY_DESC
  PATH_ASC
  PATH_DESC
  DISPLAY_COMPONENT_NAME_ASC
  DISPLAY_COMPONENT_NAME_DESC
  CONFIG_COMPONENT_NAME_ASC
  CONFIG_COMPONENT_NAME_DESC
  REQUIRED_PARAMETERS_ASC
  REQUIRED_PARAMETERS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type File implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: Int
  originalFilename: String
  path: String
  mimetype: String
  applicationId: Int
  applicationResponseId: Int

  """Reads a single `User` that is related to this `File`."""
  userByUserId: User

  """Reads a single `Application` that is related to this `File`."""
  applicationByApplicationId: Application

  """Reads a single `ApplicationResponse` that is related to this `File`."""
  applicationResponseByApplicationResponseId: ApplicationResponse

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByDocumentId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition
  ): NotificationsConnection!
}

"""The `application` to be created by this mutation."""
input FileApplicationIdFkeyApplicationCreateInput {
  id: Int
  uniqueIdentifier: String
  templateId: Int
  userId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger
  templateToTemplateId: ApplicationTemplateIdFkeyInput
  userToUserId: ApplicationUserIdFkeyInput
  applicationSectionsUsingId: ApplicationSectionApplicationIdFkeyInverseInput
  applicationStageHistoriesUsingId: ApplicationStageHistoryApplicationIdFkeyInverseInput
  applicationResponsesUsingId: ApplicationResponseApplicationIdFkeyInverseInput
  reviewsUsingId: ReviewApplicationIdFkeyInverseInput
  filesUsingId: FileApplicationIdFkeyInverseInput
  notificationsUsingId: NotificationApplicationIdFkeyInverseInput
}

"""The `file` to be created by this mutation."""
input FileApplicationIdFkeyFileCreateInput {
  id: Int
  userId: Int
  originalFilename: String
  path: String
  mimetype: String
  applicationResponseId: Int
  userToUserId: FileUserIdFkeyInput
  applicationToApplicationId: FileApplicationIdFkeyInput
  applicationResponseToApplicationResponseId: FileApplicationResponseIdFkeyInput
  notificationsUsingId: NotificationDocumentIdFkeyInverseInput
}

"""
Input for the nested mutation of `application` in the `FileInput` mutation.
"""
input FileApplicationIdFkeyInput {
  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  connectById: ApplicationApplicationPkeyConnect

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  connectByNodeId: ApplicationNodeIdConnect

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  deleteById: ApplicationApplicationPkeyDelete

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  deleteByNodeId: ApplicationNodeIdDelete

  """
  The primary key(s) and patch data for `application` for the far side of the relationship.
  """
  updateById: ApplicationOnFileForFileApplicationIdFkeyUsingApplicationPkeyUpdate

  """
  The primary key(s) and patch data for `application` for the far side of the relationship.
  """
  updateByNodeId: FileOnFileForFileApplicationIdFkeyNodeIdUpdate

  """
  A `ApplicationInput` object that will be created and connected to this object.
  """
  create: FileApplicationIdFkeyApplicationCreateInput
}

"""
Input for the nested mutation of `file` in the `ApplicationInput` mutation.
"""
input FileApplicationIdFkeyInverseInput {
  """
  Flag indicating whether all other `file` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """The primary key(s) for `file` for the far side of the relationship."""
  connectById: [FileFilePkeyConnect!]

  """The primary key(s) for `file` for the far side of the relationship."""
  connectByNodeId: [FileNodeIdConnect!]

  """The primary key(s) for `file` for the far side of the relationship."""
  deleteById: [FileFilePkeyDelete!]

  """The primary key(s) for `file` for the far side of the relationship."""
  deleteByNodeId: [FileNodeIdDelete!]

  """
  The primary key(s) and patch data for `file` for the far side of the relationship.
  """
  updateById: [FileOnFileForFileApplicationIdFkeyUsingFilePkeyUpdate!]

  """
  The primary key(s) and patch data for `file` for the far side of the relationship.
  """
  updateByNodeId: [ApplicationOnFileForFileApplicationIdFkeyNodeIdUpdate!]

  """
  A `FileInput` object that will be created and connected to this object.
  """
  create: [FileApplicationIdFkeyFileCreateInput!]
}

"""The `applicationResponse` to be created by this mutation."""
input FileApplicationResponseIdFkeyApplicationResponseCreateInput {
  id: Int
  templateQuestionId: Int
  applicationId: Int
  value: JSON
  timeCreated: Datetime
  templateElementToTemplateQuestionId: ApplicationResponseTemplateQuestionIdFkeyInput
  applicationToApplicationId: ApplicationResponseApplicationIdFkeyInput
  reviewResponsesUsingId: ReviewResponseApplicationResponseIdFkeyInverseInput
  filesUsingId: FileApplicationResponseIdFkeyInverseInput
}

"""The `file` to be created by this mutation."""
input FileApplicationResponseIdFkeyFileCreateInput {
  id: Int
  userId: Int
  originalFilename: String
  path: String
  mimetype: String
  applicationId: Int
  userToUserId: FileUserIdFkeyInput
  applicationToApplicationId: FileApplicationIdFkeyInput
  applicationResponseToApplicationResponseId: FileApplicationResponseIdFkeyInput
  notificationsUsingId: NotificationDocumentIdFkeyInverseInput
}

"""
Input for the nested mutation of `applicationResponse` in the `FileInput` mutation.
"""
input FileApplicationResponseIdFkeyInput {
  """
  The primary key(s) for `applicationResponse` for the far side of the relationship.
  """
  connectById: ApplicationResponseApplicationResponsePkeyConnect

  """
  The primary key(s) for `applicationResponse` for the far side of the relationship.
  """
  connectByNodeId: ApplicationResponseNodeIdConnect

  """
  The primary key(s) for `applicationResponse` for the far side of the relationship.
  """
  deleteById: ApplicationResponseApplicationResponsePkeyDelete

  """
  The primary key(s) for `applicationResponse` for the far side of the relationship.
  """
  deleteByNodeId: ApplicationResponseNodeIdDelete

  """
  The primary key(s) and patch data for `applicationResponse` for the far side of the relationship.
  """
  updateById: ApplicationResponseOnFileForFileApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate

  """
  The primary key(s) and patch data for `applicationResponse` for the far side of the relationship.
  """
  updateByNodeId: FileOnFileForFileApplicationResponseIdFkeyNodeIdUpdate

  """
  A `ApplicationResponseInput` object that will be created and connected to this object.
  """
  create: FileApplicationResponseIdFkeyApplicationResponseCreateInput
}

"""
Input for the nested mutation of `file` in the `ApplicationResponseInput` mutation.
"""
input FileApplicationResponseIdFkeyInverseInput {
  """
  Flag indicating whether all other `file` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """The primary key(s) for `file` for the far side of the relationship."""
  connectById: [FileFilePkeyConnect!]

  """The primary key(s) for `file` for the far side of the relationship."""
  connectByNodeId: [FileNodeIdConnect!]

  """The primary key(s) for `file` for the far side of the relationship."""
  deleteById: [FileFilePkeyDelete!]

  """The primary key(s) for `file` for the far side of the relationship."""
  deleteByNodeId: [FileNodeIdDelete!]

  """
  The primary key(s) and patch data for `file` for the far side of the relationship.
  """
  updateById: [FileOnFileForFileApplicationResponseIdFkeyUsingFilePkeyUpdate!]

  """
  The primary key(s) and patch data for `file` for the far side of the relationship.
  """
  updateByNodeId: [ApplicationResponseOnFileForFileApplicationResponseIdFkeyNodeIdUpdate!]

  """
  A `FileInput` object that will be created and connected to this object.
  """
  create: [FileApplicationResponseIdFkeyFileCreateInput!]
}

"""
A condition to be used against `File` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FileCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `originalFilename` field."""
  originalFilename: String

  """Checks for equality with the object’s `path` field."""
  path: String

  """Checks for equality with the object’s `mimetype` field."""
  mimetype: String

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `applicationResponseId` field."""
  applicationResponseId: Int
}

"""The fields on `file` to look up the row to connect."""
input FileFilePkeyConnect {
  id: Int!
}

"""The fields on `file` to look up the row to delete."""
input FileFilePkeyDelete {
  id: Int!
}

"""An input for mutations affecting `File`"""
input FileInput {
  id: Int
  userId: Int
  originalFilename: String
  path: String
  mimetype: String
  applicationId: Int
  applicationResponseId: Int
  userToUserId: FileUserIdFkeyInput
  applicationToApplicationId: FileApplicationIdFkeyInput
  applicationResponseToApplicationResponseId: FileApplicationResponseIdFkeyInput
  notificationsUsingId: NotificationDocumentIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input FileNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `file` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input FileNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `file` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input FileOnFileForFileApplicationIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `application` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `application` being updated.
  """
  applicationPatch: ApplicationPatch!
}

"""The fields on `file` to look up the row to update."""
input FileOnFileForFileApplicationIdFkeyUsingFilePkeyUpdate {
  """
  An object where the defined keys will be set on the `file` being updated.
  """
  filePatch: updateFileOnFileForFileApplicationIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input FileOnFileForFileApplicationResponseIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `applicationResponse` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `applicationResponse` being updated.
  """
  applicationResponsePatch: ApplicationResponsePatch!
}

"""The fields on `file` to look up the row to update."""
input FileOnFileForFileApplicationResponseIdFkeyUsingFilePkeyUpdate {
  """
  An object where the defined keys will be set on the `file` being updated.
  """
  filePatch: updateFileOnFileForFileApplicationResponseIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input FileOnFileForFileUserIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `user` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `user` being updated.
  """
  userPatch: UserPatch!
}

"""The fields on `file` to look up the row to update."""
input FileOnFileForFileUserIdFkeyUsingFilePkeyUpdate {
  """
  An object where the defined keys will be set on the `file` being updated.
  """
  filePatch: updateFileOnFileForFileUserIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input FileOnNotificationForNotificationDocumentIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `notification` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `notification` being updated.
  """
  notificationPatch: NotificationPatch!
}

"""The fields on `file` to look up the row to update."""
input FileOnNotificationForNotificationDocumentIdFkeyUsingFilePkeyUpdate {
  """
  An object where the defined keys will be set on the `file` being updated.
  """
  filePatch: updateFileOnNotificationForNotificationDocumentIdFkeyPatch!
  id: Int!
}

"""Represents an update to a `File`. Fields that are set will be updated."""
input FilePatch {
  id: Int
  userId: Int
  originalFilename: String
  path: String
  mimetype: String
  applicationId: Int
  applicationResponseId: Int
  userToUserId: FileUserIdFkeyInput
  applicationToApplicationId: FileApplicationIdFkeyInput
  applicationResponseToApplicationResponseId: FileApplicationResponseIdFkeyInput
  notificationsUsingId: NotificationDocumentIdFkeyInverseInput
}

"""A connection to a list of `File` values."""
type FilesConnection {
  """A list of `File` objects."""
  nodes: [File]!

  """
  A list of edges which contains the `File` and cursor to aid in pagination.
  """
  edges: [FilesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection."""
type FilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `File` at the end of the edge."""
  node: File
}

"""Methods to use when ordering `File`."""
enum FilesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  ORIGINAL_FILENAME_ASC
  ORIGINAL_FILENAME_DESC
  PATH_ASC
  PATH_DESC
  MIMETYPE_ASC
  MIMETYPE_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  APPLICATION_RESPONSE_ID_ASC
  APPLICATION_RESPONSE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The `file` to be created by this mutation."""
input FileUserIdFkeyFileCreateInput {
  id: Int
  originalFilename: String
  path: String
  mimetype: String
  applicationId: Int
  applicationResponseId: Int
  userToUserId: FileUserIdFkeyInput
  applicationToApplicationId: FileApplicationIdFkeyInput
  applicationResponseToApplicationResponseId: FileApplicationResponseIdFkeyInput
  notificationsUsingId: NotificationDocumentIdFkeyInverseInput
}

"""Input for the nested mutation of `user` in the `FileInput` mutation."""
input FileUserIdFkeyInput {
  """The primary key(s) for `user` for the far side of the relationship."""
  connectById: UserUserPkeyConnect

  """The primary key(s) for `user` for the far side of the relationship."""
  connectByNodeId: UserNodeIdConnect

  """The primary key(s) for `user` for the far side of the relationship."""
  deleteById: UserUserPkeyDelete

  """The primary key(s) for `user` for the far side of the relationship."""
  deleteByNodeId: UserNodeIdDelete

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateById: UserOnFileForFileUserIdFkeyUsingUserPkeyUpdate

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateByNodeId: FileOnFileForFileUserIdFkeyNodeIdUpdate

  """
  A `UserInput` object that will be created and connected to this object.
  """
  create: FileUserIdFkeyUserCreateInput
}

"""Input for the nested mutation of `file` in the `UserInput` mutation."""
input FileUserIdFkeyInverseInput {
  """
  Flag indicating whether all other `file` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """The primary key(s) for `file` for the far side of the relationship."""
  connectById: [FileFilePkeyConnect!]

  """The primary key(s) for `file` for the far side of the relationship."""
  connectByNodeId: [FileNodeIdConnect!]

  """The primary key(s) for `file` for the far side of the relationship."""
  deleteById: [FileFilePkeyDelete!]

  """The primary key(s) for `file` for the far side of the relationship."""
  deleteByNodeId: [FileNodeIdDelete!]

  """
  The primary key(s) and patch data for `file` for the far side of the relationship.
  """
  updateById: [FileOnFileForFileUserIdFkeyUsingFilePkeyUpdate!]

  """
  The primary key(s) and patch data for `file` for the far side of the relationship.
  """
  updateByNodeId: [UserOnFileForFileUserIdFkeyNodeIdUpdate!]

  """
  A `FileInput` object that will be created and connected to this object.
  """
  create: [FileUserIdFkeyFileCreateInput!]
}

"""The `user` to be created by this mutation."""
input FileUserIdFkeyUserCreateInput {
  id: Int
  username: String
  password: String
  email: String
  role: UserRole
  userOrganisationsUsingId: UserOrganisationUserIdFkeyInverseInput
  permissionJoinsUsingId: PermissionJoinUserIdFkeyInverseInput
  applicationsUsingId: ApplicationUserIdFkeyInverseInput
  reviewSectionAssignmentsToReviewerIdUsingId: ReviewSectionAssignmentReviewerIdFkeyInverseInput
  reviewSectionAssignmentsToAssignerIdUsingId: ReviewSectionAssignmentAssignerIdFkeyInverseInput
  filesUsingId: FileUserIdFkeyInverseInput
  notificationsUsingId: NotificationUserIdFkeyInverseInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""A connection to a list of `String` values."""
type JwtGetPolicyLinksAsSetofTextConnection {
  """A list of `String` objects."""
  nodes: [String]!

  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [JwtGetPolicyLinksAsSetofTextEdge!]!

  """The count of *all* `String` you could get from the connection."""
  totalCount: Int!
}

"""A `String` edge in the connection."""
type JwtGetPolicyLinksAsSetofTextEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `String` at the end of the edge."""
  node: String
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `ActionPlugin`."""
  createActionPlugin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateActionPluginInput!
  ): CreateActionPluginPayload

  """Creates a single `ActionQueue`."""
  createActionQueue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateActionQueueInput!
  ): CreateActionQueuePayload

  """Creates a single `Application`."""
  createApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationInput!
  ): CreateApplicationPayload

  """Creates a single `ApplicationResponse`."""
  createApplicationResponse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationResponseInput!
  ): CreateApplicationResponsePayload

  """Creates a single `ApplicationSection`."""
  createApplicationSection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationSectionInput!
  ): CreateApplicationSectionPayload

  """Creates a single `ApplicationStageHistory`."""
  createApplicationStageHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationStageHistoryInput!
  ): CreateApplicationStageHistoryPayload

  """Creates a single `ApplicationStatusHistory`."""
  createApplicationStatusHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationStatusHistoryInput!
  ): CreateApplicationStatusHistoryPayload

  """Creates a single `ElementTypePlugin`."""
  createElementTypePlugin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateElementTypePluginInput!
  ): CreateElementTypePluginPayload

  """Creates a single `File`."""
  createFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFileInput!
  ): CreateFilePayload

  """Creates a single `Notification`."""
  createNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNotificationInput!
  ): CreateNotificationPayload

  """Creates a single `Organisation`."""
  createOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrganisationInput!
  ): CreateOrganisationPayload

  """Creates a single `PermissionJoin`."""
  createPermissionJoin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePermissionJoinInput!
  ): CreatePermissionJoinPayload

  """Creates a single `PermissionName`."""
  createPermissionName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePermissionNameInput!
  ): CreatePermissionNamePayload

  """Creates a single `PermissionPolicy`."""
  createPermissionPolicy(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePermissionPolicyInput!
  ): CreatePermissionPolicyPayload

  """Creates a single `Review`."""
  createReview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReviewInput!
  ): CreateReviewPayload

  """Creates a single `ReviewResponse`."""
  createReviewResponse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReviewResponseInput!
  ): CreateReviewResponsePayload

  """Creates a single `ReviewSection`."""
  createReviewSection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReviewSectionInput!
  ): CreateReviewSectionPayload

  """Creates a single `ReviewSectionAssignment`."""
  createReviewSectionAssignment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReviewSectionAssignmentInput!
  ): CreateReviewSectionAssignmentPayload

  """Creates a single `ReviewSectionJoin`."""
  createReviewSectionJoin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReviewSectionJoinInput!
  ): CreateReviewSectionJoinPayload

  """Creates a single `ReviewSectionResponseJoin`."""
  createReviewSectionResponseJoin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReviewSectionResponseJoinInput!
  ): CreateReviewSectionResponseJoinPayload

  """Creates a single `Template`."""
  createTemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTemplateInput!
  ): CreateTemplatePayload

  """Creates a single `TemplateAction`."""
  createTemplateAction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTemplateActionInput!
  ): CreateTemplateActionPayload

  """Creates a single `TemplateElement`."""
  createTemplateElement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTemplateElementInput!
  ): CreateTemplateElementPayload

  """Creates a single `TemplatePermission`."""
  createTemplatePermission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTemplatePermissionInput!
  ): CreateTemplatePermissionPayload

  """Creates a single `TemplateReviewStage`."""
  createTemplateReviewStage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTemplateReviewStageInput!
  ): CreateTemplateReviewStagePayload

  """Creates a single `TemplateSection`."""
  createTemplateSection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTemplateSectionInput!
  ): CreateTemplateSectionPayload

  """Creates a single `TemplateStage`."""
  createTemplateStage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTemplateStageInput!
  ): CreateTemplateStagePayload

  """Creates a single `TemplateVersion`."""
  createTemplateVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTemplateVersionInput!
  ): CreateTemplateVersionPayload

  """Creates a single `TriggerQueue`."""
  createTriggerQueue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTriggerQueueInput!
  ): CreateTriggerQueuePayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `UserOrganisation`."""
  createUserOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserOrganisationInput!
  ): CreateUserOrganisationPayload

  """
  Updates a single `ActionPlugin` using its globally unique id and a patch.
  """
  updateActionPlugin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionPluginInput!
  ): UpdateActionPluginPayload

  """Updates a single `ActionPlugin` using a unique key and a patch."""
  updateActionPluginByCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionPluginByCodeInput!
  ): UpdateActionPluginPayload

  """
  Updates a single `ActionQueue` using its globally unique id and a patch.
  """
  updateActionQueue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionQueueInput!
  ): UpdateActionQueuePayload

  """Updates a single `ActionQueue` using a unique key and a patch."""
  updateActionQueueById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionQueueByIdInput!
  ): UpdateActionQueuePayload

  """
  Updates a single `Application` using its globally unique id and a patch.
  """
  updateApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationInput!
  ): UpdateApplicationPayload

  """Updates a single `Application` using a unique key and a patch."""
  updateApplicationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationByIdInput!
  ): UpdateApplicationPayload

  """
  Updates a single `ApplicationResponse` using its globally unique id and a patch.
  """
  updateApplicationResponse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationResponseInput!
  ): UpdateApplicationResponsePayload

  """Updates a single `ApplicationResponse` using a unique key and a patch."""
  updateApplicationResponseById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationResponseByIdInput!
  ): UpdateApplicationResponsePayload

  """
  Updates a single `ApplicationSection` using its globally unique id and a patch.
  """
  updateApplicationSection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationSectionInput!
  ): UpdateApplicationSectionPayload

  """Updates a single `ApplicationSection` using a unique key and a patch."""
  updateApplicationSectionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationSectionByIdInput!
  ): UpdateApplicationSectionPayload

  """
  Updates a single `ApplicationStageHistory` using its globally unique id and a patch.
  """
  updateApplicationStageHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStageHistoryInput!
  ): UpdateApplicationStageHistoryPayload

  """
  Updates a single `ApplicationStageHistory` using a unique key and a patch.
  """
  updateApplicationStageHistoryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStageHistoryByIdInput!
  ): UpdateApplicationStageHistoryPayload

  """
  Updates a single `ApplicationStatusHistory` using its globally unique id and a patch.
  """
  updateApplicationStatusHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStatusHistoryInput!
  ): UpdateApplicationStatusHistoryPayload

  """
  Updates a single `ApplicationStatusHistory` using a unique key and a patch.
  """
  updateApplicationStatusHistoryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationStatusHistoryByIdInput!
  ): UpdateApplicationStatusHistoryPayload

  """
  Updates a single `ElementTypePlugin` using its globally unique id and a patch.
  """
  updateElementTypePlugin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateElementTypePluginInput!
  ): UpdateElementTypePluginPayload

  """Updates a single `ElementTypePlugin` using a unique key and a patch."""
  updateElementTypePluginByCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateElementTypePluginByCodeInput!
  ): UpdateElementTypePluginPayload

  """Updates a single `File` using its globally unique id and a patch."""
  updateFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFileInput!
  ): UpdateFilePayload

  """Updates a single `File` using a unique key and a patch."""
  updateFileById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFileByIdInput!
  ): UpdateFilePayload

  """
  Updates a single `Notification` using its globally unique id and a patch.
  """
  updateNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNotificationInput!
  ): UpdateNotificationPayload

  """Updates a single `Notification` using a unique key and a patch."""
  updateNotificationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateNotificationByIdInput!
  ): UpdateNotificationPayload

  """
  Updates a single `Organisation` using its globally unique id and a patch.
  """
  updateOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganisationInput!
  ): UpdateOrganisationPayload

  """Updates a single `Organisation` using a unique key and a patch."""
  updateOrganisationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrganisationByIdInput!
  ): UpdateOrganisationPayload

  """
  Updates a single `PermissionJoin` using its globally unique id and a patch.
  """
  updatePermissionJoin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePermissionJoinInput!
  ): UpdatePermissionJoinPayload

  """Updates a single `PermissionJoin` using a unique key and a patch."""
  updatePermissionJoinById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePermissionJoinByIdInput!
  ): UpdatePermissionJoinPayload

  """
  Updates a single `PermissionName` using its globally unique id and a patch.
  """
  updatePermissionName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePermissionNameInput!
  ): UpdatePermissionNamePayload

  """Updates a single `PermissionName` using a unique key and a patch."""
  updatePermissionNameById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePermissionNameByIdInput!
  ): UpdatePermissionNamePayload

  """
  Updates a single `PermissionPolicy` using its globally unique id and a patch.
  """
  updatePermissionPolicy(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePermissionPolicyInput!
  ): UpdatePermissionPolicyPayload

  """Updates a single `PermissionPolicy` using a unique key and a patch."""
  updatePermissionPolicyById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePermissionPolicyByIdInput!
  ): UpdatePermissionPolicyPayload

  """Updates a single `Review` using its globally unique id and a patch."""
  updateReview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewInput!
  ): UpdateReviewPayload

  """Updates a single `Review` using a unique key and a patch."""
  updateReviewById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewByIdInput!
  ): UpdateReviewPayload

  """
  Updates a single `ReviewResponse` using its globally unique id and a patch.
  """
  updateReviewResponse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewResponseInput!
  ): UpdateReviewResponsePayload

  """Updates a single `ReviewResponse` using a unique key and a patch."""
  updateReviewResponseById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewResponseByIdInput!
  ): UpdateReviewResponsePayload

  """
  Updates a single `ReviewSection` using its globally unique id and a patch.
  """
  updateReviewSection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewSectionInput!
  ): UpdateReviewSectionPayload

  """Updates a single `ReviewSection` using a unique key and a patch."""
  updateReviewSectionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewSectionByIdInput!
  ): UpdateReviewSectionPayload

  """
  Updates a single `ReviewSectionAssignment` using its globally unique id and a patch.
  """
  updateReviewSectionAssignment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewSectionAssignmentInput!
  ): UpdateReviewSectionAssignmentPayload

  """
  Updates a single `ReviewSectionAssignment` using a unique key and a patch.
  """
  updateReviewSectionAssignmentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewSectionAssignmentByIdInput!
  ): UpdateReviewSectionAssignmentPayload

  """
  Updates a single `ReviewSectionJoin` using its globally unique id and a patch.
  """
  updateReviewSectionJoin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewSectionJoinInput!
  ): UpdateReviewSectionJoinPayload

  """Updates a single `ReviewSectionJoin` using a unique key and a patch."""
  updateReviewSectionJoinById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewSectionJoinByIdInput!
  ): UpdateReviewSectionJoinPayload

  """
  Updates a single `ReviewSectionResponseJoin` using its globally unique id and a patch.
  """
  updateReviewSectionResponseJoin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewSectionResponseJoinInput!
  ): UpdateReviewSectionResponseJoinPayload

  """
  Updates a single `ReviewSectionResponseJoin` using a unique key and a patch.
  """
  updateReviewSectionResponseJoinById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewSectionResponseJoinByIdInput!
  ): UpdateReviewSectionResponseJoinPayload

  """Updates a single `Template` using its globally unique id and a patch."""
  updateTemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTemplateInput!
  ): UpdateTemplatePayload

  """Updates a single `Template` using a unique key and a patch."""
  updateTemplateById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTemplateByIdInput!
  ): UpdateTemplatePayload

  """
  Updates a single `TemplateAction` using its globally unique id and a patch.
  """
  updateTemplateAction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTemplateActionInput!
  ): UpdateTemplateActionPayload

  """Updates a single `TemplateAction` using a unique key and a patch."""
  updateTemplateActionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTemplateActionByIdInput!
  ): UpdateTemplateActionPayload

  """
  Updates a single `TemplateElement` using its globally unique id and a patch.
  """
  updateTemplateElement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTemplateElementInput!
  ): UpdateTemplateElementPayload

  """Updates a single `TemplateElement` using a unique key and a patch."""
  updateTemplateElementById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTemplateElementByIdInput!
  ): UpdateTemplateElementPayload

  """
  Updates a single `TemplatePermission` using its globally unique id and a patch.
  """
  updateTemplatePermission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTemplatePermissionInput!
  ): UpdateTemplatePermissionPayload

  """Updates a single `TemplatePermission` using a unique key and a patch."""
  updateTemplatePermissionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTemplatePermissionByIdInput!
  ): UpdateTemplatePermissionPayload

  """
  Updates a single `TemplateReviewStage` using its globally unique id and a patch.
  """
  updateTemplateReviewStage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTemplateReviewStageInput!
  ): UpdateTemplateReviewStagePayload

  """Updates a single `TemplateReviewStage` using a unique key and a patch."""
  updateTemplateReviewStageById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTemplateReviewStageByIdInput!
  ): UpdateTemplateReviewStagePayload

  """
  Updates a single `TemplateSection` using its globally unique id and a patch.
  """
  updateTemplateSection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTemplateSectionInput!
  ): UpdateTemplateSectionPayload

  """Updates a single `TemplateSection` using a unique key and a patch."""
  updateTemplateSectionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTemplateSectionByIdInput!
  ): UpdateTemplateSectionPayload

  """
  Updates a single `TemplateStage` using its globally unique id and a patch.
  """
  updateTemplateStage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTemplateStageInput!
  ): UpdateTemplateStagePayload

  """Updates a single `TemplateStage` using a unique key and a patch."""
  updateTemplateStageById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTemplateStageByIdInput!
  ): UpdateTemplateStagePayload

  """
  Updates a single `TemplateVersion` using its globally unique id and a patch.
  """
  updateTemplateVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTemplateVersionInput!
  ): UpdateTemplateVersionPayload

  """Updates a single `TemplateVersion` using a unique key and a patch."""
  updateTemplateVersionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTemplateVersionByIdInput!
  ): UpdateTemplateVersionPayload

  """
  Updates a single `TriggerQueue` using its globally unique id and a patch.
  """
  updateTriggerQueue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTriggerQueueInput!
  ): UpdateTriggerQueuePayload

  """Updates a single `TriggerQueue` using a unique key and a patch."""
  updateTriggerQueueById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTriggerQueueByIdInput!
  ): UpdateTriggerQueuePayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByIdInput!
  ): UpdateUserPayload

  """
  Updates a single `UserOrganisation` using its globally unique id and a patch.
  """
  updateUserOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserOrganisationInput!
  ): UpdateUserOrganisationPayload

  """Updates a single `UserOrganisation` using a unique key and a patch."""
  updateUserOrganisationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserOrganisationByIdInput!
  ): UpdateUserOrganisationPayload

  """Deletes a single `ActionPlugin` using its globally unique id."""
  deleteActionPlugin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionPluginInput!
  ): DeleteActionPluginPayload

  """Deletes a single `ActionPlugin` using a unique key."""
  deleteActionPluginByCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionPluginByCodeInput!
  ): DeleteActionPluginPayload

  """Deletes a single `ActionQueue` using its globally unique id."""
  deleteActionQueue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionQueueInput!
  ): DeleteActionQueuePayload

  """Deletes a single `ActionQueue` using a unique key."""
  deleteActionQueueById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionQueueByIdInput!
  ): DeleteActionQueuePayload

  """Deletes a single `Application` using its globally unique id."""
  deleteApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationInput!
  ): DeleteApplicationPayload

  """Deletes a single `Application` using a unique key."""
  deleteApplicationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationByIdInput!
  ): DeleteApplicationPayload

  """Deletes a single `ApplicationResponse` using its globally unique id."""
  deleteApplicationResponse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationResponseInput!
  ): DeleteApplicationResponsePayload

  """Deletes a single `ApplicationResponse` using a unique key."""
  deleteApplicationResponseById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationResponseByIdInput!
  ): DeleteApplicationResponsePayload

  """Deletes a single `ApplicationSection` using its globally unique id."""
  deleteApplicationSection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationSectionInput!
  ): DeleteApplicationSectionPayload

  """Deletes a single `ApplicationSection` using a unique key."""
  deleteApplicationSectionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationSectionByIdInput!
  ): DeleteApplicationSectionPayload

  """
  Deletes a single `ApplicationStageHistory` using its globally unique id.
  """
  deleteApplicationStageHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStageHistoryInput!
  ): DeleteApplicationStageHistoryPayload

  """Deletes a single `ApplicationStageHistory` using a unique key."""
  deleteApplicationStageHistoryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStageHistoryByIdInput!
  ): DeleteApplicationStageHistoryPayload

  """
  Deletes a single `ApplicationStatusHistory` using its globally unique id.
  """
  deleteApplicationStatusHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStatusHistoryInput!
  ): DeleteApplicationStatusHistoryPayload

  """Deletes a single `ApplicationStatusHistory` using a unique key."""
  deleteApplicationStatusHistoryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationStatusHistoryByIdInput!
  ): DeleteApplicationStatusHistoryPayload

  """Deletes a single `ElementTypePlugin` using its globally unique id."""
  deleteElementTypePlugin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteElementTypePluginInput!
  ): DeleteElementTypePluginPayload

  """Deletes a single `ElementTypePlugin` using a unique key."""
  deleteElementTypePluginByCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteElementTypePluginByCodeInput!
  ): DeleteElementTypePluginPayload

  """Deletes a single `File` using its globally unique id."""
  deleteFile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFileInput!
  ): DeleteFilePayload

  """Deletes a single `File` using a unique key."""
  deleteFileById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFileByIdInput!
  ): DeleteFilePayload

  """Deletes a single `Notification` using its globally unique id."""
  deleteNotification(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNotificationInput!
  ): DeleteNotificationPayload

  """Deletes a single `Notification` using a unique key."""
  deleteNotificationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteNotificationByIdInput!
  ): DeleteNotificationPayload

  """Deletes a single `Organisation` using its globally unique id."""
  deleteOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganisationInput!
  ): DeleteOrganisationPayload

  """Deletes a single `Organisation` using a unique key."""
  deleteOrganisationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrganisationByIdInput!
  ): DeleteOrganisationPayload

  """Deletes a single `PermissionJoin` using its globally unique id."""
  deletePermissionJoin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePermissionJoinInput!
  ): DeletePermissionJoinPayload

  """Deletes a single `PermissionJoin` using a unique key."""
  deletePermissionJoinById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePermissionJoinByIdInput!
  ): DeletePermissionJoinPayload

  """Deletes a single `PermissionName` using its globally unique id."""
  deletePermissionName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePermissionNameInput!
  ): DeletePermissionNamePayload

  """Deletes a single `PermissionName` using a unique key."""
  deletePermissionNameById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePermissionNameByIdInput!
  ): DeletePermissionNamePayload

  """Deletes a single `PermissionPolicy` using its globally unique id."""
  deletePermissionPolicy(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePermissionPolicyInput!
  ): DeletePermissionPolicyPayload

  """Deletes a single `PermissionPolicy` using a unique key."""
  deletePermissionPolicyById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePermissionPolicyByIdInput!
  ): DeletePermissionPolicyPayload

  """Deletes a single `Review` using its globally unique id."""
  deleteReview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewInput!
  ): DeleteReviewPayload

  """Deletes a single `Review` using a unique key."""
  deleteReviewById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewByIdInput!
  ): DeleteReviewPayload

  """Deletes a single `ReviewResponse` using its globally unique id."""
  deleteReviewResponse(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewResponseInput!
  ): DeleteReviewResponsePayload

  """Deletes a single `ReviewResponse` using a unique key."""
  deleteReviewResponseById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewResponseByIdInput!
  ): DeleteReviewResponsePayload

  """Deletes a single `ReviewSection` using its globally unique id."""
  deleteReviewSection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewSectionInput!
  ): DeleteReviewSectionPayload

  """Deletes a single `ReviewSection` using a unique key."""
  deleteReviewSectionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewSectionByIdInput!
  ): DeleteReviewSectionPayload

  """
  Deletes a single `ReviewSectionAssignment` using its globally unique id.
  """
  deleteReviewSectionAssignment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewSectionAssignmentInput!
  ): DeleteReviewSectionAssignmentPayload

  """Deletes a single `ReviewSectionAssignment` using a unique key."""
  deleteReviewSectionAssignmentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewSectionAssignmentByIdInput!
  ): DeleteReviewSectionAssignmentPayload

  """Deletes a single `ReviewSectionJoin` using its globally unique id."""
  deleteReviewSectionJoin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewSectionJoinInput!
  ): DeleteReviewSectionJoinPayload

  """Deletes a single `ReviewSectionJoin` using a unique key."""
  deleteReviewSectionJoinById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewSectionJoinByIdInput!
  ): DeleteReviewSectionJoinPayload

  """
  Deletes a single `ReviewSectionResponseJoin` using its globally unique id.
  """
  deleteReviewSectionResponseJoin(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewSectionResponseJoinInput!
  ): DeleteReviewSectionResponseJoinPayload

  """Deletes a single `ReviewSectionResponseJoin` using a unique key."""
  deleteReviewSectionResponseJoinById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewSectionResponseJoinByIdInput!
  ): DeleteReviewSectionResponseJoinPayload

  """Deletes a single `Template` using its globally unique id."""
  deleteTemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTemplateInput!
  ): DeleteTemplatePayload

  """Deletes a single `Template` using a unique key."""
  deleteTemplateById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTemplateByIdInput!
  ): DeleteTemplatePayload

  """Deletes a single `TemplateAction` using its globally unique id."""
  deleteTemplateAction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTemplateActionInput!
  ): DeleteTemplateActionPayload

  """Deletes a single `TemplateAction` using a unique key."""
  deleteTemplateActionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTemplateActionByIdInput!
  ): DeleteTemplateActionPayload

  """Deletes a single `TemplateElement` using its globally unique id."""
  deleteTemplateElement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTemplateElementInput!
  ): DeleteTemplateElementPayload

  """Deletes a single `TemplateElement` using a unique key."""
  deleteTemplateElementById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTemplateElementByIdInput!
  ): DeleteTemplateElementPayload

  """Deletes a single `TemplatePermission` using its globally unique id."""
  deleteTemplatePermission(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTemplatePermissionInput!
  ): DeleteTemplatePermissionPayload

  """Deletes a single `TemplatePermission` using a unique key."""
  deleteTemplatePermissionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTemplatePermissionByIdInput!
  ): DeleteTemplatePermissionPayload

  """Deletes a single `TemplateReviewStage` using its globally unique id."""
  deleteTemplateReviewStage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTemplateReviewStageInput!
  ): DeleteTemplateReviewStagePayload

  """Deletes a single `TemplateReviewStage` using a unique key."""
  deleteTemplateReviewStageById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTemplateReviewStageByIdInput!
  ): DeleteTemplateReviewStagePayload

  """Deletes a single `TemplateSection` using its globally unique id."""
  deleteTemplateSection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTemplateSectionInput!
  ): DeleteTemplateSectionPayload

  """Deletes a single `TemplateSection` using a unique key."""
  deleteTemplateSectionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTemplateSectionByIdInput!
  ): DeleteTemplateSectionPayload

  """Deletes a single `TemplateStage` using its globally unique id."""
  deleteTemplateStage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTemplateStageInput!
  ): DeleteTemplateStagePayload

  """Deletes a single `TemplateStage` using a unique key."""
  deleteTemplateStageById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTemplateStageByIdInput!
  ): DeleteTemplateStagePayload

  """Deletes a single `TemplateVersion` using its globally unique id."""
  deleteTemplateVersion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTemplateVersionInput!
  ): DeleteTemplateVersionPayload

  """Deletes a single `TemplateVersion` using a unique key."""
  deleteTemplateVersionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTemplateVersionByIdInput!
  ): DeleteTemplateVersionPayload

  """Deletes a single `TriggerQueue` using its globally unique id."""
  deleteTriggerQueue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTriggerQueueInput!
  ): DeleteTriggerQueuePayload

  """Deletes a single `TriggerQueue` using a unique key."""
  deleteTriggerQueueById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTriggerQueueByIdInput!
  ): DeleteTriggerQueuePayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByIdInput!
  ): DeleteUserPayload

  """Deletes a single `UserOrganisation` using its globally unique id."""
  deleteUserOrganisation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserOrganisationInput!
  ): DeleteUserOrganisationPayload

  """Deletes a single `UserOrganisation` using a unique key."""
  deleteUserOrganisationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserOrganisationByIdInput!
  ): DeleteUserOrganisationPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Notification implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: Int
  applicationId: Int
  reviewId: Int
  subject: String
  message: String
  documentId: Int
  isRead: Boolean

  """Reads a single `User` that is related to this `Notification`."""
  userByUserId: User

  """Reads a single `Application` that is related to this `Notification`."""
  applicationByApplicationId: Application

  """Reads a single `Review` that is related to this `Notification`."""
  reviewByReviewId: Review

  """Reads a single `File` that is related to this `Notification`."""
  fileByDocumentId: File
}

"""The `application` to be created by this mutation."""
input NotificationApplicationIdFkeyApplicationCreateInput {
  id: Int
  uniqueIdentifier: String
  templateId: Int
  userId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger
  templateToTemplateId: ApplicationTemplateIdFkeyInput
  userToUserId: ApplicationUserIdFkeyInput
  applicationSectionsUsingId: ApplicationSectionApplicationIdFkeyInverseInput
  applicationStageHistoriesUsingId: ApplicationStageHistoryApplicationIdFkeyInverseInput
  applicationResponsesUsingId: ApplicationResponseApplicationIdFkeyInverseInput
  reviewsUsingId: ReviewApplicationIdFkeyInverseInput
  filesUsingId: FileApplicationIdFkeyInverseInput
  notificationsUsingId: NotificationApplicationIdFkeyInverseInput
}

"""
Input for the nested mutation of `application` in the `NotificationInput` mutation.
"""
input NotificationApplicationIdFkeyInput {
  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  connectById: ApplicationApplicationPkeyConnect

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  connectByNodeId: ApplicationNodeIdConnect

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  deleteById: ApplicationApplicationPkeyDelete

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  deleteByNodeId: ApplicationNodeIdDelete

  """
  The primary key(s) and patch data for `application` for the far side of the relationship.
  """
  updateById: ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationPkeyUpdate

  """
  The primary key(s) and patch data for `application` for the far side of the relationship.
  """
  updateByNodeId: NotificationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate

  """
  A `ApplicationInput` object that will be created and connected to this object.
  """
  create: NotificationApplicationIdFkeyApplicationCreateInput
}

"""
Input for the nested mutation of `notification` in the `ApplicationInput` mutation.
"""
input NotificationApplicationIdFkeyInverseInput {
  """
  Flag indicating whether all other `notification` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `notification` for the far side of the relationship.
  """
  connectById: [NotificationNotificationPkeyConnect!]

  """
  The primary key(s) for `notification` for the far side of the relationship.
  """
  connectByNodeId: [NotificationNodeIdConnect!]

  """
  The primary key(s) for `notification` for the far side of the relationship.
  """
  deleteById: [NotificationNotificationPkeyDelete!]

  """
  The primary key(s) for `notification` for the far side of the relationship.
  """
  deleteByNodeId: [NotificationNodeIdDelete!]

  """
  The primary key(s) and patch data for `notification` for the far side of the relationship.
  """
  updateById: [NotificationOnNotificationForNotificationApplicationIdFkeyUsingNotificationPkeyUpdate!]

  """
  The primary key(s) and patch data for `notification` for the far side of the relationship.
  """
  updateByNodeId: [ApplicationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate!]

  """
  A `NotificationInput` object that will be created and connected to this object.
  """
  create: [NotificationApplicationIdFkeyNotificationCreateInput!]
}

"""The `notification` to be created by this mutation."""
input NotificationApplicationIdFkeyNotificationCreateInput {
  id: Int
  userId: Int
  reviewId: Int
  subject: String
  message: String
  documentId: Int
  isRead: Boolean
  userToUserId: NotificationUserIdFkeyInput
  applicationToApplicationId: NotificationApplicationIdFkeyInput
  reviewToReviewId: NotificationReviewIdFkeyInput
  fileToDocumentId: NotificationDocumentIdFkeyInput
}

"""
A condition to be used against `Notification` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NotificationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `reviewId` field."""
  reviewId: Int

  """Checks for equality with the object’s `subject` field."""
  subject: String

  """Checks for equality with the object’s `message` field."""
  message: String

  """Checks for equality with the object’s `documentId` field."""
  documentId: Int

  """Checks for equality with the object’s `isRead` field."""
  isRead: Boolean
}

"""The `file` to be created by this mutation."""
input NotificationDocumentIdFkeyFileCreateInput {
  id: Int
  userId: Int
  originalFilename: String
  path: String
  mimetype: String
  applicationId: Int
  applicationResponseId: Int
  userToUserId: FileUserIdFkeyInput
  applicationToApplicationId: FileApplicationIdFkeyInput
  applicationResponseToApplicationResponseId: FileApplicationResponseIdFkeyInput
  notificationsUsingId: NotificationDocumentIdFkeyInverseInput
}

"""
Input for the nested mutation of `file` in the `NotificationInput` mutation.
"""
input NotificationDocumentIdFkeyInput {
  """The primary key(s) for `file` for the far side of the relationship."""
  connectById: FileFilePkeyConnect

  """The primary key(s) for `file` for the far side of the relationship."""
  connectByNodeId: FileNodeIdConnect

  """The primary key(s) for `file` for the far side of the relationship."""
  deleteById: FileFilePkeyDelete

  """The primary key(s) for `file` for the far side of the relationship."""
  deleteByNodeId: FileNodeIdDelete

  """
  The primary key(s) and patch data for `file` for the far side of the relationship.
  """
  updateById: FileOnNotificationForNotificationDocumentIdFkeyUsingFilePkeyUpdate

  """
  The primary key(s) and patch data for `file` for the far side of the relationship.
  """
  updateByNodeId: NotificationOnNotificationForNotificationDocumentIdFkeyNodeIdUpdate

  """
  A `FileInput` object that will be created and connected to this object.
  """
  create: NotificationDocumentIdFkeyFileCreateInput
}

"""
Input for the nested mutation of `notification` in the `FileInput` mutation.
"""
input NotificationDocumentIdFkeyInverseInput {
  """
  Flag indicating whether all other `notification` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `notification` for the far side of the relationship.
  """
  connectById: [NotificationNotificationPkeyConnect!]

  """
  The primary key(s) for `notification` for the far side of the relationship.
  """
  connectByNodeId: [NotificationNodeIdConnect!]

  """
  The primary key(s) for `notification` for the far side of the relationship.
  """
  deleteById: [NotificationNotificationPkeyDelete!]

  """
  The primary key(s) for `notification` for the far side of the relationship.
  """
  deleteByNodeId: [NotificationNodeIdDelete!]

  """
  The primary key(s) and patch data for `notification` for the far side of the relationship.
  """
  updateById: [NotificationOnNotificationForNotificationDocumentIdFkeyUsingNotificationPkeyUpdate!]

  """
  The primary key(s) and patch data for `notification` for the far side of the relationship.
  """
  updateByNodeId: [FileOnNotificationForNotificationDocumentIdFkeyNodeIdUpdate!]

  """
  A `NotificationInput` object that will be created and connected to this object.
  """
  create: [NotificationDocumentIdFkeyNotificationCreateInput!]
}

"""The `notification` to be created by this mutation."""
input NotificationDocumentIdFkeyNotificationCreateInput {
  id: Int
  userId: Int
  applicationId: Int
  reviewId: Int
  subject: String
  message: String
  isRead: Boolean
  userToUserId: NotificationUserIdFkeyInput
  applicationToApplicationId: NotificationApplicationIdFkeyInput
  reviewToReviewId: NotificationReviewIdFkeyInput
  fileToDocumentId: NotificationDocumentIdFkeyInput
}

"""An input for mutations affecting `Notification`"""
input NotificationInput {
  id: Int
  userId: Int
  applicationId: Int
  reviewId: Int
  subject: String
  message: String
  documentId: Int
  isRead: Boolean
  userToUserId: NotificationUserIdFkeyInput
  applicationToApplicationId: NotificationApplicationIdFkeyInput
  reviewToReviewId: NotificationReviewIdFkeyInput
  fileToDocumentId: NotificationDocumentIdFkeyInput
}

"""The globally unique `ID` look up for the row to connect."""
input NotificationNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `notification` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input NotificationNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `notification` to be deleted.
  """
  nodeId: ID!
}

"""The fields on `notification` to look up the row to connect."""
input NotificationNotificationPkeyConnect {
  id: Int!
}

"""The fields on `notification` to look up the row to delete."""
input NotificationNotificationPkeyDelete {
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input NotificationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `application` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `application` being updated.
  """
  applicationPatch: ApplicationPatch!
}

"""The fields on `notification` to look up the row to update."""
input NotificationOnNotificationForNotificationApplicationIdFkeyUsingNotificationPkeyUpdate {
  """
  An object where the defined keys will be set on the `notification` being updated.
  """
  notificationPatch: updateNotificationOnNotificationForNotificationApplicationIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input NotificationOnNotificationForNotificationDocumentIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `file` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `file` being updated.
  """
  filePatch: FilePatch!
}

"""The fields on `notification` to look up the row to update."""
input NotificationOnNotificationForNotificationDocumentIdFkeyUsingNotificationPkeyUpdate {
  """
  An object where the defined keys will be set on the `notification` being updated.
  """
  notificationPatch: updateNotificationOnNotificationForNotificationDocumentIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input NotificationOnNotificationForNotificationReviewIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `review` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `review` being updated.
  """
  reviewPatch: ReviewPatch!
}

"""The fields on `notification` to look up the row to update."""
input NotificationOnNotificationForNotificationReviewIdFkeyUsingNotificationPkeyUpdate {
  """
  An object where the defined keys will be set on the `notification` being updated.
  """
  notificationPatch: updateNotificationOnNotificationForNotificationReviewIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input NotificationOnNotificationForNotificationUserIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `user` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `user` being updated.
  """
  userPatch: UserPatch!
}

"""The fields on `notification` to look up the row to update."""
input NotificationOnNotificationForNotificationUserIdFkeyUsingNotificationPkeyUpdate {
  """
  An object where the defined keys will be set on the `notification` being updated.
  """
  notificationPatch: updateNotificationOnNotificationForNotificationUserIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `Notification`. Fields that are set will be updated.
"""
input NotificationPatch {
  id: Int
  userId: Int
  applicationId: Int
  reviewId: Int
  subject: String
  message: String
  documentId: Int
  isRead: Boolean
  userToUserId: NotificationUserIdFkeyInput
  applicationToApplicationId: NotificationApplicationIdFkeyInput
  reviewToReviewId: NotificationReviewIdFkeyInput
  fileToDocumentId: NotificationDocumentIdFkeyInput
}

"""
Input for the nested mutation of `review` in the `NotificationInput` mutation.
"""
input NotificationReviewIdFkeyInput {
  """The primary key(s) for `review` for the far side of the relationship."""
  connectById: ReviewReviewPkeyConnect

  """The primary key(s) for `review` for the far side of the relationship."""
  connectByNodeId: ReviewNodeIdConnect

  """The primary key(s) for `review` for the far side of the relationship."""
  deleteById: ReviewReviewPkeyDelete

  """The primary key(s) for `review` for the far side of the relationship."""
  deleteByNodeId: ReviewNodeIdDelete

  """
  The primary key(s) and patch data for `review` for the far side of the relationship.
  """
  updateById: ReviewOnNotificationForNotificationReviewIdFkeyUsingReviewPkeyUpdate

  """
  The primary key(s) and patch data for `review` for the far side of the relationship.
  """
  updateByNodeId: NotificationOnNotificationForNotificationReviewIdFkeyNodeIdUpdate

  """
  A `ReviewInput` object that will be created and connected to this object.
  """
  create: NotificationReviewIdFkeyReviewCreateInput
}

"""
Input for the nested mutation of `notification` in the `ReviewInput` mutation.
"""
input NotificationReviewIdFkeyInverseInput {
  """
  Flag indicating whether all other `notification` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `notification` for the far side of the relationship.
  """
  connectById: [NotificationNotificationPkeyConnect!]

  """
  The primary key(s) for `notification` for the far side of the relationship.
  """
  connectByNodeId: [NotificationNodeIdConnect!]

  """
  The primary key(s) for `notification` for the far side of the relationship.
  """
  deleteById: [NotificationNotificationPkeyDelete!]

  """
  The primary key(s) for `notification` for the far side of the relationship.
  """
  deleteByNodeId: [NotificationNodeIdDelete!]

  """
  The primary key(s) and patch data for `notification` for the far side of the relationship.
  """
  updateById: [NotificationOnNotificationForNotificationReviewIdFkeyUsingNotificationPkeyUpdate!]

  """
  The primary key(s) and patch data for `notification` for the far side of the relationship.
  """
  updateByNodeId: [ReviewOnNotificationForNotificationReviewIdFkeyNodeIdUpdate!]

  """
  A `NotificationInput` object that will be created and connected to this object.
  """
  create: [NotificationReviewIdFkeyNotificationCreateInput!]
}

"""The `notification` to be created by this mutation."""
input NotificationReviewIdFkeyNotificationCreateInput {
  id: Int
  userId: Int
  applicationId: Int
  subject: String
  message: String
  documentId: Int
  isRead: Boolean
  userToUserId: NotificationUserIdFkeyInput
  applicationToApplicationId: NotificationApplicationIdFkeyInput
  reviewToReviewId: NotificationReviewIdFkeyInput
  fileToDocumentId: NotificationDocumentIdFkeyInput
}

"""The `review` to be created by this mutation."""
input NotificationReviewIdFkeyReviewCreateInput {
  id: Int
  applicationId: Int
  status: ReviewStatus
  comment: String
  timeCreated: Datetime
  trigger: Trigger
  applicationToApplicationId: ReviewApplicationIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinReviewIdFkeyInverseInput
  notificationsUsingId: NotificationReviewIdFkeyInverseInput
}

"""A connection to a list of `Notification` values."""
type NotificationsConnection {
  """A list of `Notification` objects."""
  nodes: [Notification]!

  """
  A list of edges which contains the `Notification` and cursor to aid in pagination.
  """
  edges: [NotificationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Notification` you could get from the connection."""
  totalCount: Int!
}

"""A `Notification` edge in the connection."""
type NotificationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Notification` at the end of the edge."""
  node: Notification
}

"""Methods to use when ordering `Notification`."""
enum NotificationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  REVIEW_ID_ASC
  REVIEW_ID_DESC
  SUBJECT_ASC
  SUBJECT_DESC
  MESSAGE_ASC
  MESSAGE_DESC
  DOCUMENT_ID_ASC
  DOCUMENT_ID_DESC
  IS_READ_ASC
  IS_READ_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Input for the nested mutation of `user` in the `NotificationInput` mutation.
"""
input NotificationUserIdFkeyInput {
  """The primary key(s) for `user` for the far side of the relationship."""
  connectById: UserUserPkeyConnect

  """The primary key(s) for `user` for the far side of the relationship."""
  connectByNodeId: UserNodeIdConnect

  """The primary key(s) for `user` for the far side of the relationship."""
  deleteById: UserUserPkeyDelete

  """The primary key(s) for `user` for the far side of the relationship."""
  deleteByNodeId: UserNodeIdDelete

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateById: UserOnNotificationForNotificationUserIdFkeyUsingUserPkeyUpdate

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateByNodeId: NotificationOnNotificationForNotificationUserIdFkeyNodeIdUpdate

  """
  A `UserInput` object that will be created and connected to this object.
  """
  create: NotificationUserIdFkeyUserCreateInput
}

"""
Input for the nested mutation of `notification` in the `UserInput` mutation.
"""
input NotificationUserIdFkeyInverseInput {
  """
  Flag indicating whether all other `notification` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `notification` for the far side of the relationship.
  """
  connectById: [NotificationNotificationPkeyConnect!]

  """
  The primary key(s) for `notification` for the far side of the relationship.
  """
  connectByNodeId: [NotificationNodeIdConnect!]

  """
  The primary key(s) for `notification` for the far side of the relationship.
  """
  deleteById: [NotificationNotificationPkeyDelete!]

  """
  The primary key(s) for `notification` for the far side of the relationship.
  """
  deleteByNodeId: [NotificationNodeIdDelete!]

  """
  The primary key(s) and patch data for `notification` for the far side of the relationship.
  """
  updateById: [NotificationOnNotificationForNotificationUserIdFkeyUsingNotificationPkeyUpdate!]

  """
  The primary key(s) and patch data for `notification` for the far side of the relationship.
  """
  updateByNodeId: [UserOnNotificationForNotificationUserIdFkeyNodeIdUpdate!]

  """
  A `NotificationInput` object that will be created and connected to this object.
  """
  create: [NotificationUserIdFkeyNotificationCreateInput!]
}

"""The `notification` to be created by this mutation."""
input NotificationUserIdFkeyNotificationCreateInput {
  id: Int
  applicationId: Int
  reviewId: Int
  subject: String
  message: String
  documentId: Int
  isRead: Boolean
  userToUserId: NotificationUserIdFkeyInput
  applicationToApplicationId: NotificationApplicationIdFkeyInput
  reviewToReviewId: NotificationReviewIdFkeyInput
  fileToDocumentId: NotificationDocumentIdFkeyInput
}

"""The `user` to be created by this mutation."""
input NotificationUserIdFkeyUserCreateInput {
  id: Int
  username: String
  password: String
  email: String
  role: UserRole
  userOrganisationsUsingId: UserOrganisationUserIdFkeyInverseInput
  permissionJoinsUsingId: PermissionJoinUserIdFkeyInverseInput
  applicationsUsingId: ApplicationUserIdFkeyInverseInput
  reviewSectionAssignmentsToReviewerIdUsingId: ReviewSectionAssignmentReviewerIdFkeyInverseInput
  reviewSectionAssignmentsToAssignerIdUsingId: ReviewSectionAssignmentAssignerIdFkeyInverseInput
  filesUsingId: FileUserIdFkeyInverseInput
  notificationsUsingId: NotificationUserIdFkeyInverseInput
}

type Organisation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  licenceNumber: Int
  address: String

  """Reads and enables pagination through a set of `UserOrganisation`."""
  userOrganisationsByOrganistionId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserOrganisation`."""
    orderBy: [UserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserOrganisationCondition
  ): UserOrganisationsConnection!
}

"""
A condition to be used against `Organisation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OrganisationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `licenceNumber` field."""
  licenceNumber: Int

  """Checks for equality with the object’s `address` field."""
  address: String
}

"""An input for mutations affecting `Organisation`"""
input OrganisationInput {
  id: Int
  name: String
  licenceNumber: Int
  address: String
  userOrganisationsUsingId: UserOrganisationOrganistionIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input OrganisationNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `organisation` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input OrganisationNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `organisation` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input OrganisationOnUserOrganisationForUserOrganisationOrganistionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `userOrganisation` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `userOrganisation` being updated.
  """
  userOrganisationPatch: UserOrganisationPatch!
}

"""The fields on `organisation` to look up the row to update."""
input OrganisationOnUserOrganisationForUserOrganisationOrganistionIdFkeyUsingOrganisationPkeyUpdate {
  """
  An object where the defined keys will be set on the `organisation` being updated.
  """
  organisationPatch: updateOrganisationOnUserOrganisationForUserOrganisationOrganistionIdFkeyPatch!
  id: Int!
}

"""The fields on `organisation` to look up the row to connect."""
input OrganisationOrganisationPkeyConnect {
  id: Int!
}

"""The fields on `organisation` to look up the row to delete."""
input OrganisationOrganisationPkeyDelete {
  id: Int!
}

"""
Represents an update to a `Organisation`. Fields that are set will be updated.
"""
input OrganisationPatch {
  id: Int
  name: String
  licenceNumber: Int
  address: String
  userOrganisationsUsingId: UserOrganisationOrganistionIdFkeyInverseInput
}

"""A connection to a list of `Organisation` values."""
type OrganisationsConnection {
  """A list of `Organisation` objects."""
  nodes: [Organisation]!

  """
  A list of edges which contains the `Organisation` and cursor to aid in pagination.
  """
  edges: [OrganisationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Organisation` you could get from the connection."""
  totalCount: Int!
}

"""A `Organisation` edge in the connection."""
type OrganisationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Organisation` at the end of the edge."""
  node: Organisation
}

"""Methods to use when ordering `Organisation`."""
enum OrganisationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  LICENCE_NUMBER_ASC
  LICENCE_NUMBER_DESC
  ADDRESS_ASC
  ADDRESS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type PermissionJoin implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: Int
  userOrganisationId: Int
  permissionNameId: Int

  """Reads a single `User` that is related to this `PermissionJoin`."""
  userByUserId: User

  """
  Reads a single `UserOrganisation` that is related to this `PermissionJoin`.
  """
  userOrganisationByUserOrganisationId: UserOrganisation

  """
  Reads a single `PermissionName` that is related to this `PermissionJoin`.
  """
  permissionNameByPermissionNameId: PermissionName

  """Reads and enables pagination through a set of `TemplatePermission`."""
  templatePermissionsByPermissionJoinId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplatePermission`."""
    orderBy: [TemplatePermissionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplatePermissionCondition
  ): TemplatePermissionsConnection!

  """Reads and enables pagination through a set of `TemplateReviewStage`."""
  templateReviewStagesByPermissionJoinId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplateReviewStage`."""
    orderBy: [TemplateReviewStagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplateReviewStageCondition
  ): TemplateReviewStagesConnection!
}

"""
A condition to be used against `PermissionJoin` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PermissionJoinCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `userOrganisationId` field."""
  userOrganisationId: Int

  """Checks for equality with the object’s `permissionNameId` field."""
  permissionNameId: Int
}

"""An input for mutations affecting `PermissionJoin`"""
input PermissionJoinInput {
  id: Int
  userId: Int
  userOrganisationId: Int
  permissionNameId: Int
  userToUserId: PermissionJoinUserIdFkeyInput
  userOrganisationToUserOrganisationId: PermissionJoinUserOrganisationIdFkeyInput
  permissionNameToPermissionNameId: PermissionJoinPermissionNameIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionPermissionJoinIdFkeyInverseInput
  templateReviewStagesUsingId: TemplateReviewStagePermissionJoinIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input PermissionJoinNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `permissionJoin` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input PermissionJoinNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `permissionJoin` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `permissionName` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `permissionName` being updated.
  """
  permissionNamePatch: PermissionNamePatch!
}

"""The fields on `permissionJoin` to look up the row to update."""
input PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionJoinPkeyUpdate {
  """
  An object where the defined keys will be set on the `permissionJoin` being updated.
  """
  permissionJoinPatch: updatePermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input PermissionJoinOnPermissionJoinForPermissionJoinUserIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `user` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `user` being updated.
  """
  userPatch: UserPatch!
}

"""The fields on `permissionJoin` to look up the row to update."""
input PermissionJoinOnPermissionJoinForPermissionJoinUserIdFkeyUsingPermissionJoinPkeyUpdate {
  """
  An object where the defined keys will be set on the `permissionJoin` being updated.
  """
  permissionJoinPatch: updatePermissionJoinOnPermissionJoinForPermissionJoinUserIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input PermissionJoinOnPermissionJoinForPermissionJoinUserOrganisationIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `userOrganisation` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `userOrganisation` being updated.
  """
  userOrganisationPatch: UserOrganisationPatch!
}

"""The fields on `permissionJoin` to look up the row to update."""
input PermissionJoinOnPermissionJoinForPermissionJoinUserOrganisationIdFkeyUsingPermissionJoinPkeyUpdate {
  """
  An object where the defined keys will be set on the `permissionJoin` being updated.
  """
  permissionJoinPatch: updatePermissionJoinOnPermissionJoinForPermissionJoinUserOrganisationIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input PermissionJoinOnTemplatePermissionForTemplatePermissionPermissionJoinIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `templatePermission` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `templatePermission` being updated.
  """
  templatePermissionPatch: TemplatePermissionPatch!
}

"""The fields on `permissionJoin` to look up the row to update."""
input PermissionJoinOnTemplatePermissionForTemplatePermissionPermissionJoinIdFkeyUsingPermissionJoinPkeyUpdate {
  """
  An object where the defined keys will be set on the `permissionJoin` being updated.
  """
  permissionJoinPatch: updatePermissionJoinOnTemplatePermissionForTemplatePermissionPermissionJoinIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input PermissionJoinOnTemplateReviewStageForTemplateReviewStagePermissionJoinIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `templateReviewStage` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `templateReviewStage` being updated.
  """
  templateReviewStagePatch: TemplateReviewStagePatch!
}

"""The fields on `permissionJoin` to look up the row to update."""
input PermissionJoinOnTemplateReviewStageForTemplateReviewStagePermissionJoinIdFkeyUsingPermissionJoinPkeyUpdate {
  """
  An object where the defined keys will be set on the `permissionJoin` being updated.
  """
  permissionJoinPatch: updatePermissionJoinOnTemplateReviewStageForTemplateReviewStagePermissionJoinIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `PermissionJoin`. Fields that are set will be updated.
"""
input PermissionJoinPatch {
  id: Int
  userId: Int
  userOrganisationId: Int
  permissionNameId: Int
  userToUserId: PermissionJoinUserIdFkeyInput
  userOrganisationToUserOrganisationId: PermissionJoinUserOrganisationIdFkeyInput
  permissionNameToPermissionNameId: PermissionJoinPermissionNameIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionPermissionJoinIdFkeyInverseInput
  templateReviewStagesUsingId: TemplateReviewStagePermissionJoinIdFkeyInverseInput
}

"""The fields on `permissionJoin` to look up the row to connect."""
input PermissionJoinPermissionJoinPkeyConnect {
  id: Int!
}

"""The fields on `permissionJoin` to look up the row to delete."""
input PermissionJoinPermissionJoinPkeyDelete {
  id: Int!
}

"""
Input for the nested mutation of `permissionName` in the `PermissionJoinInput` mutation.
"""
input PermissionJoinPermissionNameIdFkeyInput {
  """
  The primary key(s) for `permissionName` for the far side of the relationship.
  """
  connectById: PermissionNamePermissionNamePkeyConnect

  """
  The primary key(s) for `permissionName` for the far side of the relationship.
  """
  connectByNodeId: PermissionNameNodeIdConnect

  """
  The primary key(s) for `permissionName` for the far side of the relationship.
  """
  deleteById: PermissionNamePermissionNamePkeyDelete

  """
  The primary key(s) for `permissionName` for the far side of the relationship.
  """
  deleteByNodeId: PermissionNameNodeIdDelete

  """
  The primary key(s) and patch data for `permissionName` for the far side of the relationship.
  """
  updateById: PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionNamePkeyUpdate

  """
  The primary key(s) and patch data for `permissionName` for the far side of the relationship.
  """
  updateByNodeId: PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate

  """
  A `PermissionNameInput` object that will be created and connected to this object.
  """
  create: PermissionJoinPermissionNameIdFkeyPermissionNameCreateInput
}

"""
Input for the nested mutation of `permissionJoin` in the `PermissionNameInput` mutation.
"""
input PermissionJoinPermissionNameIdFkeyInverseInput {
  """
  Flag indicating whether all other `permissionJoin` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  connectById: [PermissionJoinPermissionJoinPkeyConnect!]

  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  connectByNodeId: [PermissionJoinNodeIdConnect!]

  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  deleteById: [PermissionJoinPermissionJoinPkeyDelete!]

  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  deleteByNodeId: [PermissionJoinNodeIdDelete!]

  """
  The primary key(s) and patch data for `permissionJoin` for the far side of the relationship.
  """
  updateById: [PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionJoinPkeyUpdate!]

  """
  The primary key(s) and patch data for `permissionJoin` for the far side of the relationship.
  """
  updateByNodeId: [PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate!]

  """
  A `PermissionJoinInput` object that will be created and connected to this object.
  """
  create: [PermissionJoinPermissionNameIdFkeyPermissionJoinCreateInput!]
}

"""The `permissionJoin` to be created by this mutation."""
input PermissionJoinPermissionNameIdFkeyPermissionJoinCreateInput {
  id: Int
  userId: Int
  userOrganisationId: Int
  userToUserId: PermissionJoinUserIdFkeyInput
  userOrganisationToUserOrganisationId: PermissionJoinUserOrganisationIdFkeyInput
  permissionNameToPermissionNameId: PermissionJoinPermissionNameIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionPermissionJoinIdFkeyInverseInput
  templateReviewStagesUsingId: TemplateReviewStagePermissionJoinIdFkeyInverseInput
}

"""The `permissionName` to be created by this mutation."""
input PermissionJoinPermissionNameIdFkeyPermissionNameCreateInput {
  id: Int
  name: String
  permissionJoinsUsingId: PermissionJoinPermissionNameIdFkeyInverseInput
}

"""A connection to a list of `PermissionJoin` values."""
type PermissionJoinsConnection {
  """A list of `PermissionJoin` objects."""
  nodes: [PermissionJoin]!

  """
  A list of edges which contains the `PermissionJoin` and cursor to aid in pagination.
  """
  edges: [PermissionJoinsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PermissionJoin` you could get from the connection."""
  totalCount: Int!
}

"""A `PermissionJoin` edge in the connection."""
type PermissionJoinsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PermissionJoin` at the end of the edge."""
  node: PermissionJoin
}

"""Methods to use when ordering `PermissionJoin`."""
enum PermissionJoinsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  USER_ORGANISATION_ID_ASC
  USER_ORGANISATION_ID_DESC
  PERMISSION_NAME_ID_ASC
  PERMISSION_NAME_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Input for the nested mutation of `user` in the `PermissionJoinInput` mutation.
"""
input PermissionJoinUserIdFkeyInput {
  """The primary key(s) for `user` for the far side of the relationship."""
  connectById: UserUserPkeyConnect

  """The primary key(s) for `user` for the far side of the relationship."""
  connectByNodeId: UserNodeIdConnect

  """The primary key(s) for `user` for the far side of the relationship."""
  deleteById: UserUserPkeyDelete

  """The primary key(s) for `user` for the far side of the relationship."""
  deleteByNodeId: UserNodeIdDelete

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateById: UserOnPermissionJoinForPermissionJoinUserIdFkeyUsingUserPkeyUpdate

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateByNodeId: PermissionJoinOnPermissionJoinForPermissionJoinUserIdFkeyNodeIdUpdate

  """
  A `UserInput` object that will be created and connected to this object.
  """
  create: PermissionJoinUserIdFkeyUserCreateInput
}

"""
Input for the nested mutation of `permissionJoin` in the `UserInput` mutation.
"""
input PermissionJoinUserIdFkeyInverseInput {
  """
  Flag indicating whether all other `permissionJoin` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  connectById: [PermissionJoinPermissionJoinPkeyConnect!]

  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  connectByNodeId: [PermissionJoinNodeIdConnect!]

  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  deleteById: [PermissionJoinPermissionJoinPkeyDelete!]

  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  deleteByNodeId: [PermissionJoinNodeIdDelete!]

  """
  The primary key(s) and patch data for `permissionJoin` for the far side of the relationship.
  """
  updateById: [PermissionJoinOnPermissionJoinForPermissionJoinUserIdFkeyUsingPermissionJoinPkeyUpdate!]

  """
  The primary key(s) and patch data for `permissionJoin` for the far side of the relationship.
  """
  updateByNodeId: [UserOnPermissionJoinForPermissionJoinUserIdFkeyNodeIdUpdate!]

  """
  A `PermissionJoinInput` object that will be created and connected to this object.
  """
  create: [PermissionJoinUserIdFkeyPermissionJoinCreateInput!]
}

"""The `permissionJoin` to be created by this mutation."""
input PermissionJoinUserIdFkeyPermissionJoinCreateInput {
  id: Int
  userOrganisationId: Int
  permissionNameId: Int
  userToUserId: PermissionJoinUserIdFkeyInput
  userOrganisationToUserOrganisationId: PermissionJoinUserOrganisationIdFkeyInput
  permissionNameToPermissionNameId: PermissionJoinPermissionNameIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionPermissionJoinIdFkeyInverseInput
  templateReviewStagesUsingId: TemplateReviewStagePermissionJoinIdFkeyInverseInput
}

"""The `user` to be created by this mutation."""
input PermissionJoinUserIdFkeyUserCreateInput {
  id: Int
  username: String
  password: String
  email: String
  role: UserRole
  userOrganisationsUsingId: UserOrganisationUserIdFkeyInverseInput
  permissionJoinsUsingId: PermissionJoinUserIdFkeyInverseInput
  applicationsUsingId: ApplicationUserIdFkeyInverseInput
  reviewSectionAssignmentsToReviewerIdUsingId: ReviewSectionAssignmentReviewerIdFkeyInverseInput
  reviewSectionAssignmentsToAssignerIdUsingId: ReviewSectionAssignmentAssignerIdFkeyInverseInput
  filesUsingId: FileUserIdFkeyInverseInput
  notificationsUsingId: NotificationUserIdFkeyInverseInput
}

"""
Input for the nested mutation of `userOrganisation` in the `PermissionJoinInput` mutation.
"""
input PermissionJoinUserOrganisationIdFkeyInput {
  """
  The primary key(s) for `userOrganisation` for the far side of the relationship.
  """
  connectById: UserOrganisationUserOrganisationPkeyConnect

  """
  The primary key(s) for `userOrganisation` for the far side of the relationship.
  """
  connectByNodeId: UserOrganisationNodeIdConnect

  """
  The primary key(s) for `userOrganisation` for the far side of the relationship.
  """
  deleteById: UserOrganisationUserOrganisationPkeyDelete

  """
  The primary key(s) for `userOrganisation` for the far side of the relationship.
  """
  deleteByNodeId: UserOrganisationNodeIdDelete

  """
  The primary key(s) and patch data for `userOrganisation` for the far side of the relationship.
  """
  updateById: UserOrganisationOnPermissionJoinForPermissionJoinUserOrganisationIdFkeyUsingUserOrganisationPkeyUpdate

  """
  The primary key(s) and patch data for `userOrganisation` for the far side of the relationship.
  """
  updateByNodeId: PermissionJoinOnPermissionJoinForPermissionJoinUserOrganisationIdFkeyNodeIdUpdate

  """
  A `UserOrganisationInput` object that will be created and connected to this object.
  """
  create: PermissionJoinUserOrganisationIdFkeyUserOrganisationCreateInput
}

"""
Input for the nested mutation of `permissionJoin` in the `UserOrganisationInput` mutation.
"""
input PermissionJoinUserOrganisationIdFkeyInverseInput {
  """
  Flag indicating whether all other `permissionJoin` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  connectById: [PermissionJoinPermissionJoinPkeyConnect!]

  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  connectByNodeId: [PermissionJoinNodeIdConnect!]

  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  deleteById: [PermissionJoinPermissionJoinPkeyDelete!]

  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  deleteByNodeId: [PermissionJoinNodeIdDelete!]

  """
  The primary key(s) and patch data for `permissionJoin` for the far side of the relationship.
  """
  updateById: [PermissionJoinOnPermissionJoinForPermissionJoinUserOrganisationIdFkeyUsingPermissionJoinPkeyUpdate!]

  """
  The primary key(s) and patch data for `permissionJoin` for the far side of the relationship.
  """
  updateByNodeId: [UserOrganisationOnPermissionJoinForPermissionJoinUserOrganisationIdFkeyNodeIdUpdate!]

  """
  A `PermissionJoinInput` object that will be created and connected to this object.
  """
  create: [PermissionJoinUserOrganisationIdFkeyPermissionJoinCreateInput!]
}

"""The `permissionJoin` to be created by this mutation."""
input PermissionJoinUserOrganisationIdFkeyPermissionJoinCreateInput {
  id: Int
  userId: Int
  permissionNameId: Int
  userToUserId: PermissionJoinUserIdFkeyInput
  userOrganisationToUserOrganisationId: PermissionJoinUserOrganisationIdFkeyInput
  permissionNameToPermissionNameId: PermissionJoinPermissionNameIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionPermissionJoinIdFkeyInverseInput
  templateReviewStagesUsingId: TemplateReviewStagePermissionJoinIdFkeyInverseInput
}

"""The `userOrganisation` to be created by this mutation."""
input PermissionJoinUserOrganisationIdFkeyUserOrganisationCreateInput {
  id: Int
  userId: Int
  organistionId: Int
  job: String
  userToUserId: UserOrganisationUserIdFkeyInput
  organisationToOrganistionId: UserOrganisationOrganistionIdFkeyInput
  permissionJoinsUsingId: PermissionJoinUserOrganisationIdFkeyInverseInput
}

type PermissionName implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String

  """Reads and enables pagination through a set of `PermissionJoin`."""
  permissionJoinsByPermissionNameId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PermissionJoin`."""
    orderBy: [PermissionJoinsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PermissionJoinCondition
  ): PermissionJoinsConnection!
}

"""
A condition to be used against `PermissionName` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PermissionNameCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `PermissionName`"""
input PermissionNameInput {
  id: Int
  name: String
  permissionJoinsUsingId: PermissionJoinPermissionNameIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input PermissionNameNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `permissionName` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input PermissionNameNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `permissionName` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `permissionJoin` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `permissionJoin` being updated.
  """
  permissionJoinPatch: PermissionJoinPatch!
}

"""The fields on `permissionName` to look up the row to update."""
input PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionNamePkeyUpdate {
  """
  An object where the defined keys will be set on the `permissionName` being updated.
  """
  permissionNamePatch: updatePermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `PermissionName`. Fields that are set will be updated.
"""
input PermissionNamePatch {
  id: Int
  name: String
  permissionJoinsUsingId: PermissionJoinPermissionNameIdFkeyInverseInput
}

"""The fields on `permissionName` to look up the row to connect."""
input PermissionNamePermissionNamePkeyConnect {
  id: Int!
}

"""The fields on `permissionName` to look up the row to delete."""
input PermissionNamePermissionNamePkeyDelete {
  id: Int!
}

"""A connection to a list of `PermissionName` values."""
type PermissionNamesConnection {
  """A list of `PermissionName` objects."""
  nodes: [PermissionName]!

  """
  A list of edges which contains the `PermissionName` and cursor to aid in pagination.
  """
  edges: [PermissionNamesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PermissionName` you could get from the connection."""
  totalCount: Int!
}

"""A `PermissionName` edge in the connection."""
type PermissionNamesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PermissionName` at the end of the edge."""
  node: PermissionName
}

"""Methods to use when ordering `PermissionName`."""
enum PermissionNamesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `PermissionPolicy` values."""
type PermissionPoliciesConnection {
  """A list of `PermissionPolicy` objects."""
  nodes: [PermissionPolicy]!

  """
  A list of edges which contains the `PermissionPolicy` and cursor to aid in pagination.
  """
  edges: [PermissionPoliciesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PermissionPolicy` you could get from the connection.
  """
  totalCount: Int!
}

"""A `PermissionPolicy` edge in the connection."""
type PermissionPoliciesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PermissionPolicy` at the end of the edge."""
  node: PermissionPolicy
}

"""Methods to use when ordering `PermissionPolicy`."""
enum PermissionPoliciesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  RULES_ASC
  RULES_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TYPE_ASC
  TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type PermissionPolicy implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  rules: JSON
  description: String
  type: PermissionPolicyType

  """Reads and enables pagination through a set of `TemplatePermission`."""
  templatePermissionsByPermissionPolicyId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplatePermission`."""
    orderBy: [TemplatePermissionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplatePermissionCondition
  ): TemplatePermissionsConnection!
}

"""
A condition to be used against `PermissionPolicy` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PermissionPolicyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `rules` field."""
  rules: JSON

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `type` field."""
  type: PermissionPolicyType
}

"""An input for mutations affecting `PermissionPolicy`"""
input PermissionPolicyInput {
  id: Int
  name: String
  rules: JSON
  description: String
  type: PermissionPolicyType
  templatePermissionsUsingId: TemplatePermissionPermissionPolicyIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input PermissionPolicyNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `permissionPolicy` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input PermissionPolicyNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `permissionPolicy` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input PermissionPolicyOnTemplatePermissionForTemplatePermissionPermissionPolicyIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `templatePermission` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `templatePermission` being updated.
  """
  templatePermissionPatch: TemplatePermissionPatch!
}

"""The fields on `permissionPolicy` to look up the row to update."""
input PermissionPolicyOnTemplatePermissionForTemplatePermissionPermissionPolicyIdFkeyUsingPermissionPolicyPkeyUpdate {
  """
  An object where the defined keys will be set on the `permissionPolicy` being updated.
  """
  permissionPolicyPatch: updatePermissionPolicyOnTemplatePermissionForTemplatePermissionPermissionPolicyIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `PermissionPolicy`. Fields that are set will be updated.
"""
input PermissionPolicyPatch {
  id: Int
  name: String
  rules: JSON
  description: String
  type: PermissionPolicyType
  templatePermissionsUsingId: TemplatePermissionPermissionPolicyIdFkeyInverseInput
}

"""The fields on `permissionPolicy` to look up the row to connect."""
input PermissionPolicyPermissionPolicyPkeyConnect {
  id: Int!
}

"""The fields on `permissionPolicy` to look up the row to delete."""
input PermissionPolicyPermissionPolicyPkeyDelete {
  id: Int!
}

enum PermissionPolicyType {
  REVIEW
  APPLY
  ASSIGN
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `ActionPlugin`."""
  allActionPlugins(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ActionPlugin`."""
    orderBy: [ActionPluginsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionPluginCondition
  ): ActionPluginsConnection

  """Reads and enables pagination through a set of `ActionQueue`."""
  allActionQueues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ActionQueue`."""
    orderBy: [ActionQueuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionQueueCondition
  ): ActionQueuesConnection

  """Reads and enables pagination through a set of `Application`."""
  allApplications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection

  """Reads and enables pagination through a set of `ApplicationResponse`."""
  allApplicationResponses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationResponse`."""
    orderBy: [ApplicationResponsesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationResponseCondition
  ): ApplicationResponsesConnection

  """Reads and enables pagination through a set of `ApplicationSection`."""
  allApplicationSections(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSection`."""
    orderBy: [ApplicationSectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSectionCondition
  ): ApplicationSectionsConnection

  """
  Reads and enables pagination through a set of `ApplicationStageHistory`.
  """
  allApplicationStageHistories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStageHistory`."""
    orderBy: [ApplicationStageHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStageHistoryCondition
  ): ApplicationStageHistoriesConnection

  """
  Reads and enables pagination through a set of `ApplicationStatusHistory`.
  """
  allApplicationStatusHistories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationStatusHistory`."""
    orderBy: [ApplicationStatusHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationStatusHistoryCondition
  ): ApplicationStatusHistoriesConnection

  """Reads and enables pagination through a set of `ElementTypePlugin`."""
  allElementTypePlugins(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ElementTypePlugin`."""
    orderBy: [ElementTypePluginsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ElementTypePluginCondition
  ): ElementTypePluginsConnection

  """Reads and enables pagination through a set of `File`."""
  allFiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition
  ): FilesConnection

  """Reads and enables pagination through a set of `Notification`."""
  allNotifications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition
  ): NotificationsConnection

  """Reads and enables pagination through a set of `Organisation`."""
  allOrganisations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrganisationCondition
  ): OrganisationsConnection

  """Reads and enables pagination through a set of `PermissionJoin`."""
  allPermissionJoins(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PermissionJoin`."""
    orderBy: [PermissionJoinsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PermissionJoinCondition
  ): PermissionJoinsConnection

  """Reads and enables pagination through a set of `PermissionName`."""
  allPermissionNames(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PermissionName`."""
    orderBy: [PermissionNamesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PermissionNameCondition
  ): PermissionNamesConnection

  """Reads and enables pagination through a set of `PermissionPolicy`."""
  allPermissionPolicies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PermissionPolicy`."""
    orderBy: [PermissionPoliciesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PermissionPolicyCondition
  ): PermissionPoliciesConnection

  """Reads and enables pagination through a set of `Review`."""
  allReviews(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Review`."""
    orderBy: [ReviewsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCondition
  ): ReviewsConnection

  """Reads and enables pagination through a set of `ReviewResponse`."""
  allReviewResponses(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReviewResponse`."""
    orderBy: [ReviewResponsesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewResponseCondition
  ): ReviewResponsesConnection

  """Reads and enables pagination through a set of `ReviewSection`."""
  allReviewSections(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReviewSection`."""
    orderBy: [ReviewSectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewSectionCondition
  ): ReviewSectionsConnection

  """
  Reads and enables pagination through a set of `ReviewSectionAssignment`.
  """
  allReviewSectionAssignments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReviewSectionAssignment`."""
    orderBy: [ReviewSectionAssignmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewSectionAssignmentCondition
  ): ReviewSectionAssignmentsConnection

  """Reads and enables pagination through a set of `ReviewSectionJoin`."""
  allReviewSectionJoins(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReviewSectionJoin`."""
    orderBy: [ReviewSectionJoinsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewSectionJoinCondition
  ): ReviewSectionJoinsConnection

  """
  Reads and enables pagination through a set of `ReviewSectionResponseJoin`.
  """
  allReviewSectionResponseJoins(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReviewSectionResponseJoin`."""
    orderBy: [ReviewSectionResponseJoinsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewSectionResponseJoinCondition
  ): ReviewSectionResponseJoinsConnection

  """Reads and enables pagination through a set of `Template`."""
  allTemplates(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Template`."""
    orderBy: [TemplatesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplateCondition
  ): TemplatesConnection

  """Reads and enables pagination through a set of `TemplateAction`."""
  allTemplateActions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplateAction`."""
    orderBy: [TemplateActionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplateActionCondition
  ): TemplateActionsConnection

  """Reads and enables pagination through a set of `TemplateElement`."""
  allTemplateElements(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplateElement`."""
    orderBy: [TemplateElementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplateElementCondition
  ): TemplateElementsConnection

  """Reads and enables pagination through a set of `TemplatePermission`."""
  allTemplatePermissions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplatePermission`."""
    orderBy: [TemplatePermissionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplatePermissionCondition
  ): TemplatePermissionsConnection

  """Reads and enables pagination through a set of `TemplateReviewStage`."""
  allTemplateReviewStages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplateReviewStage`."""
    orderBy: [TemplateReviewStagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplateReviewStageCondition
  ): TemplateReviewStagesConnection

  """Reads and enables pagination through a set of `TemplateSection`."""
  allTemplateSections(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplateSection`."""
    orderBy: [TemplateSectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplateSectionCondition
  ): TemplateSectionsConnection

  """Reads and enables pagination through a set of `TemplateStage`."""
  allTemplateStages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplateStage`."""
    orderBy: [TemplateStagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplateStageCondition
  ): TemplateStagesConnection

  """Reads and enables pagination through a set of `TemplateVersion`."""
  allTemplateVersions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplateVersion`."""
    orderBy: [TemplateVersionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplateVersionCondition
  ): TemplateVersionsConnection

  """Reads and enables pagination through a set of `TriggerQueue`."""
  allTriggerQueues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TriggerQueue`."""
    orderBy: [TriggerQueuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TriggerQueueCondition
  ): TriggerQueuesConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection

  """Reads and enables pagination through a set of `UserOrganisation`."""
  allUserOrganisations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserOrganisation`."""
    orderBy: [UserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserOrganisationCondition
  ): UserOrganisationsConnection
  actionPluginByCode(code: String!): ActionPlugin
  actionQueueById(id: Int!): ActionQueue
  applicationById(id: Int!): Application
  applicationResponseById(id: Int!): ApplicationResponse
  applicationSectionById(id: Int!): ApplicationSection
  applicationStageHistoryById(id: Int!): ApplicationStageHistory
  applicationStatusHistoryById(id: Int!): ApplicationStatusHistory
  elementTypePluginByCode(code: String!): ElementTypePlugin
  fileById(id: Int!): File
  notificationById(id: Int!): Notification
  organisationById(id: Int!): Organisation
  permissionJoinById(id: Int!): PermissionJoin
  permissionNameById(id: Int!): PermissionName
  permissionPolicyById(id: Int!): PermissionPolicy
  reviewById(id: Int!): Review
  reviewResponseById(id: Int!): ReviewResponse
  reviewSectionById(id: Int!): ReviewSection
  reviewSectionAssignmentById(id: Int!): ReviewSectionAssignment
  reviewSectionJoinById(id: Int!): ReviewSectionJoin
  reviewSectionResponseJoinById(id: Int!): ReviewSectionResponseJoin
  templateById(id: Int!): Template
  templateActionById(id: Int!): TemplateAction
  templateElementById(id: Int!): TemplateElement
  templatePermissionById(id: Int!): TemplatePermission
  templateReviewStageById(id: Int!): TemplateReviewStage
  templateSectionById(id: Int!): TemplateSection
  templateStageById(id: Int!): TemplateStage
  templateVersionById(id: Int!): TemplateVersion
  triggerQueueById(id: Int!): TriggerQueue
  userById(id: Int!): User
  userOrganisationById(id: Int!): UserOrganisation
  jwtCheckPolicy(policyName: String): Boolean
  jwtGetKey(jwtKey: String): String
  jwtGetPolicyLinksAsSetofText(
    policyName: String

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor
  ): JwtGetPolicyLinksAsSetofTextConnection!
  jwtGetPolicyLinksAsText(policyName: String): String

  """Reads a single `ActionPlugin` using its globally unique `ID`."""
  actionPlugin(
    """
    The globally unique `ID` to be used in selecting a single `ActionPlugin`.
    """
    nodeId: ID!
  ): ActionPlugin

  """Reads a single `ActionQueue` using its globally unique `ID`."""
  actionQueue(
    """
    The globally unique `ID` to be used in selecting a single `ActionQueue`.
    """
    nodeId: ID!
  ): ActionQueue

  """Reads a single `Application` using its globally unique `ID`."""
  application(
    """
    The globally unique `ID` to be used in selecting a single `Application`.
    """
    nodeId: ID!
  ): Application

  """Reads a single `ApplicationResponse` using its globally unique `ID`."""
  applicationResponse(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationResponse`.
    """
    nodeId: ID!
  ): ApplicationResponse

  """Reads a single `ApplicationSection` using its globally unique `ID`."""
  applicationSection(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationSection`.
    """
    nodeId: ID!
  ): ApplicationSection

  """
  Reads a single `ApplicationStageHistory` using its globally unique `ID`.
  """
  applicationStageHistory(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationStageHistory`.
    """
    nodeId: ID!
  ): ApplicationStageHistory

  """
  Reads a single `ApplicationStatusHistory` using its globally unique `ID`.
  """
  applicationStatusHistory(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationStatusHistory`.
    """
    nodeId: ID!
  ): ApplicationStatusHistory

  """Reads a single `ElementTypePlugin` using its globally unique `ID`."""
  elementTypePlugin(
    """
    The globally unique `ID` to be used in selecting a single `ElementTypePlugin`.
    """
    nodeId: ID!
  ): ElementTypePlugin

  """Reads a single `File` using its globally unique `ID`."""
  file(
    """The globally unique `ID` to be used in selecting a single `File`."""
    nodeId: ID!
  ): File

  """Reads a single `Notification` using its globally unique `ID`."""
  notification(
    """
    The globally unique `ID` to be used in selecting a single `Notification`.
    """
    nodeId: ID!
  ): Notification

  """Reads a single `Organisation` using its globally unique `ID`."""
  organisation(
    """
    The globally unique `ID` to be used in selecting a single `Organisation`.
    """
    nodeId: ID!
  ): Organisation

  """Reads a single `PermissionJoin` using its globally unique `ID`."""
  permissionJoin(
    """
    The globally unique `ID` to be used in selecting a single `PermissionJoin`.
    """
    nodeId: ID!
  ): PermissionJoin

  """Reads a single `PermissionName` using its globally unique `ID`."""
  permissionName(
    """
    The globally unique `ID` to be used in selecting a single `PermissionName`.
    """
    nodeId: ID!
  ): PermissionName

  """Reads a single `PermissionPolicy` using its globally unique `ID`."""
  permissionPolicy(
    """
    The globally unique `ID` to be used in selecting a single `PermissionPolicy`.
    """
    nodeId: ID!
  ): PermissionPolicy

  """Reads a single `Review` using its globally unique `ID`."""
  review(
    """The globally unique `ID` to be used in selecting a single `Review`."""
    nodeId: ID!
  ): Review

  """Reads a single `ReviewResponse` using its globally unique `ID`."""
  reviewResponse(
    """
    The globally unique `ID` to be used in selecting a single `ReviewResponse`.
    """
    nodeId: ID!
  ): ReviewResponse

  """Reads a single `ReviewSection` using its globally unique `ID`."""
  reviewSection(
    """
    The globally unique `ID` to be used in selecting a single `ReviewSection`.
    """
    nodeId: ID!
  ): ReviewSection

  """
  Reads a single `ReviewSectionAssignment` using its globally unique `ID`.
  """
  reviewSectionAssignment(
    """
    The globally unique `ID` to be used in selecting a single `ReviewSectionAssignment`.
    """
    nodeId: ID!
  ): ReviewSectionAssignment

  """Reads a single `ReviewSectionJoin` using its globally unique `ID`."""
  reviewSectionJoin(
    """
    The globally unique `ID` to be used in selecting a single `ReviewSectionJoin`.
    """
    nodeId: ID!
  ): ReviewSectionJoin

  """
  Reads a single `ReviewSectionResponseJoin` using its globally unique `ID`.
  """
  reviewSectionResponseJoin(
    """
    The globally unique `ID` to be used in selecting a single `ReviewSectionResponseJoin`.
    """
    nodeId: ID!
  ): ReviewSectionResponseJoin

  """Reads a single `Template` using its globally unique `ID`."""
  template(
    """The globally unique `ID` to be used in selecting a single `Template`."""
    nodeId: ID!
  ): Template

  """Reads a single `TemplateAction` using its globally unique `ID`."""
  templateAction(
    """
    The globally unique `ID` to be used in selecting a single `TemplateAction`.
    """
    nodeId: ID!
  ): TemplateAction

  """Reads a single `TemplateElement` using its globally unique `ID`."""
  templateElement(
    """
    The globally unique `ID` to be used in selecting a single `TemplateElement`.
    """
    nodeId: ID!
  ): TemplateElement

  """Reads a single `TemplatePermission` using its globally unique `ID`."""
  templatePermission(
    """
    The globally unique `ID` to be used in selecting a single `TemplatePermission`.
    """
    nodeId: ID!
  ): TemplatePermission

  """Reads a single `TemplateReviewStage` using its globally unique `ID`."""
  templateReviewStage(
    """
    The globally unique `ID` to be used in selecting a single `TemplateReviewStage`.
    """
    nodeId: ID!
  ): TemplateReviewStage

  """Reads a single `TemplateSection` using its globally unique `ID`."""
  templateSection(
    """
    The globally unique `ID` to be used in selecting a single `TemplateSection`.
    """
    nodeId: ID!
  ): TemplateSection

  """Reads a single `TemplateStage` using its globally unique `ID`."""
  templateStage(
    """
    The globally unique `ID` to be used in selecting a single `TemplateStage`.
    """
    nodeId: ID!
  ): TemplateStage

  """Reads a single `TemplateVersion` using its globally unique `ID`."""
  templateVersion(
    """
    The globally unique `ID` to be used in selecting a single `TemplateVersion`.
    """
    nodeId: ID!
  ): TemplateVersion

  """Reads a single `TriggerQueue` using its globally unique `ID`."""
  triggerQueue(
    """
    The globally unique `ID` to be used in selecting a single `TriggerQueue`.
    """
    nodeId: ID!
  ): TriggerQueue

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Reads a single `UserOrganisation` using its globally unique `ID`."""
  userOrganisation(
    """
    The globally unique `ID` to be used in selecting a single `UserOrganisation`.
    """
    nodeId: ID!
  ): UserOrganisation
}

type Review implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  applicationId: Int
  status: ReviewStatus
  comment: String
  timeCreated: Datetime
  trigger: Trigger

  """Reads a single `Application` that is related to this `Review`."""
  applicationByApplicationId: Application

  """Reads and enables pagination through a set of `ReviewSectionJoin`."""
  reviewSectionJoinsByReviewId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReviewSectionJoin`."""
    orderBy: [ReviewSectionJoinsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewSectionJoinCondition
  ): ReviewSectionJoinsConnection!

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByReviewId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition
  ): NotificationsConnection!
}

"""The `application` to be created by this mutation."""
input ReviewApplicationIdFkeyApplicationCreateInput {
  id: Int
  uniqueIdentifier: String
  templateId: Int
  userId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger
  templateToTemplateId: ApplicationTemplateIdFkeyInput
  userToUserId: ApplicationUserIdFkeyInput
  applicationSectionsUsingId: ApplicationSectionApplicationIdFkeyInverseInput
  applicationStageHistoriesUsingId: ApplicationStageHistoryApplicationIdFkeyInverseInput
  applicationResponsesUsingId: ApplicationResponseApplicationIdFkeyInverseInput
  reviewsUsingId: ReviewApplicationIdFkeyInverseInput
  filesUsingId: FileApplicationIdFkeyInverseInput
  notificationsUsingId: NotificationApplicationIdFkeyInverseInput
}

"""
Input for the nested mutation of `application` in the `ReviewInput` mutation.
"""
input ReviewApplicationIdFkeyInput {
  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  connectById: ApplicationApplicationPkeyConnect

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  connectByNodeId: ApplicationNodeIdConnect

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  deleteById: ApplicationApplicationPkeyDelete

  """
  The primary key(s) for `application` for the far side of the relationship.
  """
  deleteByNodeId: ApplicationNodeIdDelete

  """
  The primary key(s) and patch data for `application` for the far side of the relationship.
  """
  updateById: ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationPkeyUpdate

  """
  The primary key(s) and patch data for `application` for the far side of the relationship.
  """
  updateByNodeId: ReviewOnReviewForReviewApplicationIdFkeyNodeIdUpdate

  """
  A `ApplicationInput` object that will be created and connected to this object.
  """
  create: ReviewApplicationIdFkeyApplicationCreateInput
}

"""
Input for the nested mutation of `review` in the `ApplicationInput` mutation.
"""
input ReviewApplicationIdFkeyInverseInput {
  """
  Flag indicating whether all other `review` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """The primary key(s) for `review` for the far side of the relationship."""
  connectById: [ReviewReviewPkeyConnect!]

  """The primary key(s) for `review` for the far side of the relationship."""
  connectByNodeId: [ReviewNodeIdConnect!]

  """The primary key(s) for `review` for the far side of the relationship."""
  deleteById: [ReviewReviewPkeyDelete!]

  """The primary key(s) for `review` for the far side of the relationship."""
  deleteByNodeId: [ReviewNodeIdDelete!]

  """
  The primary key(s) and patch data for `review` for the far side of the relationship.
  """
  updateById: [ReviewOnReviewForReviewApplicationIdFkeyUsingReviewPkeyUpdate!]

  """
  The primary key(s) and patch data for `review` for the far side of the relationship.
  """
  updateByNodeId: [ApplicationOnReviewForReviewApplicationIdFkeyNodeIdUpdate!]

  """
  A `ReviewInput` object that will be created and connected to this object.
  """
  create: [ReviewApplicationIdFkeyReviewCreateInput!]
}

"""The `review` to be created by this mutation."""
input ReviewApplicationIdFkeyReviewCreateInput {
  id: Int
  status: ReviewStatus
  comment: String
  timeCreated: Datetime
  trigger: Trigger
  applicationToApplicationId: ReviewApplicationIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinReviewIdFkeyInverseInput
  notificationsUsingId: NotificationReviewIdFkeyInverseInput
}

"""
A condition to be used against `Review` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ReviewCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `applicationId` field."""
  applicationId: Int

  """Checks for equality with the object’s `status` field."""
  status: ReviewStatus

  """Checks for equality with the object’s `comment` field."""
  comment: String

  """Checks for equality with the object’s `timeCreated` field."""
  timeCreated: Datetime

  """Checks for equality with the object’s `trigger` field."""
  trigger: Trigger
}

enum ReviewDecision {
  APPROVED
  REJECTED
  OBSERVATIONS
}

"""An input for mutations affecting `Review`"""
input ReviewInput {
  id: Int
  applicationId: Int
  status: ReviewStatus
  comment: String
  timeCreated: Datetime
  trigger: Trigger
  applicationToApplicationId: ReviewApplicationIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinReviewIdFkeyInverseInput
  notificationsUsingId: NotificationReviewIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input ReviewNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `review` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input ReviewNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `review` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input ReviewOnNotificationForNotificationReviewIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `notification` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `notification` being updated.
  """
  notificationPatch: NotificationPatch!
}

"""The fields on `review` to look up the row to update."""
input ReviewOnNotificationForNotificationReviewIdFkeyUsingReviewPkeyUpdate {
  """
  An object where the defined keys will be set on the `review` being updated.
  """
  reviewPatch: updateReviewOnNotificationForNotificationReviewIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ReviewOnReviewForReviewApplicationIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `application` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `application` being updated.
  """
  applicationPatch: ApplicationPatch!
}

"""The fields on `review` to look up the row to update."""
input ReviewOnReviewForReviewApplicationIdFkeyUsingReviewPkeyUpdate {
  """
  An object where the defined keys will be set on the `review` being updated.
  """
  reviewPatch: updateReviewOnReviewForReviewApplicationIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ReviewOnReviewSectionJoinForReviewSectionJoinReviewIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `reviewSectionJoin` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `reviewSectionJoin` being updated.
  """
  reviewSectionJoinPatch: ReviewSectionJoinPatch!
}

"""The fields on `review` to look up the row to update."""
input ReviewOnReviewSectionJoinForReviewSectionJoinReviewIdFkeyUsingReviewPkeyUpdate {
  """
  An object where the defined keys will be set on the `review` being updated.
  """
  reviewPatch: updateReviewOnReviewSectionJoinForReviewSectionJoinReviewIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `Review`. Fields that are set will be updated.
"""
input ReviewPatch {
  id: Int
  applicationId: Int
  status: ReviewStatus
  comment: String
  timeCreated: Datetime
  trigger: Trigger
  applicationToApplicationId: ReviewApplicationIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinReviewIdFkeyInverseInput
  notificationsUsingId: NotificationReviewIdFkeyInverseInput
}

type ReviewResponse implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  applicationResponseId: Int
  reviewDecision: ReviewDecision
  comment: String
  trigger: Trigger

  """
  Reads a single `ApplicationResponse` that is related to this `ReviewResponse`.
  """
  applicationResponseByApplicationResponseId: ApplicationResponse

  """
  Reads and enables pagination through a set of `ReviewSectionResponseJoin`.
  """
  reviewSectionResponseJoinsByReviewResponseId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReviewSectionResponseJoin`."""
    orderBy: [ReviewSectionResponseJoinsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewSectionResponseJoinCondition
  ): ReviewSectionResponseJoinsConnection!
}

"""The `applicationResponse` to be created by this mutation."""
input ReviewResponseApplicationResponseIdFkeyApplicationResponseCreateInput {
  id: Int
  templateQuestionId: Int
  applicationId: Int
  value: JSON
  timeCreated: Datetime
  templateElementToTemplateQuestionId: ApplicationResponseTemplateQuestionIdFkeyInput
  applicationToApplicationId: ApplicationResponseApplicationIdFkeyInput
  reviewResponsesUsingId: ReviewResponseApplicationResponseIdFkeyInverseInput
  filesUsingId: FileApplicationResponseIdFkeyInverseInput
}

"""
Input for the nested mutation of `applicationResponse` in the `ReviewResponseInput` mutation.
"""
input ReviewResponseApplicationResponseIdFkeyInput {
  """
  The primary key(s) for `applicationResponse` for the far side of the relationship.
  """
  connectById: ApplicationResponseApplicationResponsePkeyConnect

  """
  The primary key(s) for `applicationResponse` for the far side of the relationship.
  """
  connectByNodeId: ApplicationResponseNodeIdConnect

  """
  The primary key(s) for `applicationResponse` for the far side of the relationship.
  """
  deleteById: ApplicationResponseApplicationResponsePkeyDelete

  """
  The primary key(s) for `applicationResponse` for the far side of the relationship.
  """
  deleteByNodeId: ApplicationResponseNodeIdDelete

  """
  The primary key(s) and patch data for `applicationResponse` for the far side of the relationship.
  """
  updateById: ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate

  """
  The primary key(s) and patch data for `applicationResponse` for the far side of the relationship.
  """
  updateByNodeId: ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate

  """
  A `ApplicationResponseInput` object that will be created and connected to this object.
  """
  create: ReviewResponseApplicationResponseIdFkeyApplicationResponseCreateInput
}

"""
Input for the nested mutation of `reviewResponse` in the `ApplicationResponseInput` mutation.
"""
input ReviewResponseApplicationResponseIdFkeyInverseInput {
  """
  Flag indicating whether all other `reviewResponse` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `reviewResponse` for the far side of the relationship.
  """
  connectById: [ReviewResponseReviewResponsePkeyConnect!]

  """
  The primary key(s) for `reviewResponse` for the far side of the relationship.
  """
  connectByNodeId: [ReviewResponseNodeIdConnect!]

  """
  The primary key(s) for `reviewResponse` for the far side of the relationship.
  """
  deleteById: [ReviewResponseReviewResponsePkeyDelete!]

  """
  The primary key(s) for `reviewResponse` for the far side of the relationship.
  """
  deleteByNodeId: [ReviewResponseNodeIdDelete!]

  """
  The primary key(s) and patch data for `reviewResponse` for the far side of the relationship.
  """
  updateById: [ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingReviewResponsePkeyUpdate!]

  """
  The primary key(s) and patch data for `reviewResponse` for the far side of the relationship.
  """
  updateByNodeId: [ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate!]

  """
  A `ReviewResponseInput` object that will be created and connected to this object.
  """
  create: [ReviewResponseApplicationResponseIdFkeyReviewResponseCreateInput!]
}

"""The `reviewResponse` to be created by this mutation."""
input ReviewResponseApplicationResponseIdFkeyReviewResponseCreateInput {
  id: Int
  reviewDecision: ReviewDecision
  comment: String
  trigger: Trigger
  applicationResponseToApplicationResponseId: ReviewResponseApplicationResponseIdFkeyInput
  reviewSectionResponseJoinsUsingId: ReviewSectionResponseJoinReviewResponseIdFkeyInverseInput
}

"""
A condition to be used against `ReviewResponse` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ReviewResponseCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `applicationResponseId` field."""
  applicationResponseId: Int

  """Checks for equality with the object’s `reviewDecision` field."""
  reviewDecision: ReviewDecision

  """Checks for equality with the object’s `comment` field."""
  comment: String

  """Checks for equality with the object’s `trigger` field."""
  trigger: Trigger
}

"""An input for mutations affecting `ReviewResponse`"""
input ReviewResponseInput {
  id: Int
  applicationResponseId: Int
  reviewDecision: ReviewDecision
  comment: String
  trigger: Trigger
  applicationResponseToApplicationResponseId: ReviewResponseApplicationResponseIdFkeyInput
  reviewSectionResponseJoinsUsingId: ReviewSectionResponseJoinReviewResponseIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input ReviewResponseNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `reviewResponse` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input ReviewResponseNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `reviewResponse` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `applicationResponse` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `applicationResponse` being updated.
  """
  applicationResponsePatch: ApplicationResponsePatch!
}

"""The fields on `reviewResponse` to look up the row to update."""
input ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingReviewResponsePkeyUpdate {
  """
  An object where the defined keys will be set on the `reviewResponse` being updated.
  """
  reviewResponsePatch: updateReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ReviewResponseOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewResponseIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `reviewSectionResponseJoin` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `reviewSectionResponseJoin` being updated.
  """
  reviewSectionResponseJoinPatch: ReviewSectionResponseJoinPatch!
}

"""The fields on `reviewResponse` to look up the row to update."""
input ReviewResponseOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewResponseIdFkeyUsingReviewResponsePkeyUpdate {
  """
  An object where the defined keys will be set on the `reviewResponse` being updated.
  """
  reviewResponsePatch: updateReviewResponseOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewResponseIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `ReviewResponse`. Fields that are set will be updated.
"""
input ReviewResponsePatch {
  id: Int
  applicationResponseId: Int
  reviewDecision: ReviewDecision
  comment: String
  trigger: Trigger
  applicationResponseToApplicationResponseId: ReviewResponseApplicationResponseIdFkeyInput
  reviewSectionResponseJoinsUsingId: ReviewSectionResponseJoinReviewResponseIdFkeyInverseInput
}

"""The fields on `reviewResponse` to look up the row to connect."""
input ReviewResponseReviewResponsePkeyConnect {
  id: Int!
}

"""The fields on `reviewResponse` to look up the row to delete."""
input ReviewResponseReviewResponsePkeyDelete {
  id: Int!
}

"""A connection to a list of `ReviewResponse` values."""
type ReviewResponsesConnection {
  """A list of `ReviewResponse` objects."""
  nodes: [ReviewResponse]!

  """
  A list of edges which contains the `ReviewResponse` and cursor to aid in pagination.
  """
  edges: [ReviewResponsesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReviewResponse` you could get from the connection."""
  totalCount: Int!
}

"""A `ReviewResponse` edge in the connection."""
type ReviewResponsesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReviewResponse` at the end of the edge."""
  node: ReviewResponse
}

"""Methods to use when ordering `ReviewResponse`."""
enum ReviewResponsesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_RESPONSE_ID_ASC
  APPLICATION_RESPONSE_ID_DESC
  REVIEW_DECISION_ASC
  REVIEW_DECISION_DESC
  COMMENT_ASC
  COMMENT_DESC
  TRIGGER_ASC
  TRIGGER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The fields on `review` to look up the row to connect."""
input ReviewReviewPkeyConnect {
  id: Int!
}

"""The fields on `review` to look up the row to delete."""
input ReviewReviewPkeyDelete {
  id: Int!
}

"""A connection to a list of `Review` values."""
type ReviewsConnection {
  """A list of `Review` objects."""
  nodes: [Review]!

  """
  A list of edges which contains the `Review` and cursor to aid in pagination.
  """
  edges: [ReviewsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Review` you could get from the connection."""
  totalCount: Int!
}

type ReviewSection implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  reviewDecision: ReviewDecision
  comment: String

  """Reads and enables pagination through a set of `ReviewSectionJoin`."""
  reviewSectionJoinsByReviewSectionId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReviewSectionJoin`."""
    orderBy: [ReviewSectionJoinsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewSectionJoinCondition
  ): ReviewSectionJoinsConnection!
}

type ReviewSectionAssignment implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  reviewerId: Int
  assignerId: Int
  stageId: Int
  sectionId: Int
  level: String

  """
  Reads a single `User` that is related to this `ReviewSectionAssignment`.
  """
  userByReviewerId: User

  """
  Reads a single `User` that is related to this `ReviewSectionAssignment`.
  """
  userByAssignerId: User

  """
  Reads a single `ApplicationStageHistory` that is related to this `ReviewSectionAssignment`.
  """
  applicationStageHistoryByStageId: ApplicationStageHistory

  """
  Reads a single `ApplicationSection` that is related to this `ReviewSectionAssignment`.
  """
  applicationSectionBySectionId: ApplicationSection

  """Reads and enables pagination through a set of `ReviewSectionJoin`."""
  reviewSectionJoinsBySectionAssignmentId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReviewSectionJoin`."""
    orderBy: [ReviewSectionJoinsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewSectionJoinCondition
  ): ReviewSectionJoinsConnection!
}

"""
Input for the nested mutation of `user` in the `ReviewSectionAssignmentInput` mutation.
"""
input ReviewSectionAssignmentAssignerIdFkeyInput {
  """The primary key(s) for `user` for the far side of the relationship."""
  connectById: UserUserPkeyConnect

  """The primary key(s) for `user` for the far side of the relationship."""
  connectByNodeId: UserNodeIdConnect

  """The primary key(s) for `user` for the far side of the relationship."""
  deleteById: UserUserPkeyDelete

  """The primary key(s) for `user` for the far side of the relationship."""
  deleteByNodeId: UserNodeIdDelete

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateById: UserOnReviewSectionAssignmentForReviewSectionAssignmentAssignerIdFkeyUsingUserPkeyUpdate

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateByNodeId: ReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentAssignerIdFkeyNodeIdUpdate

  """
  A `UserInput` object that will be created and connected to this object.
  """
  create: ReviewSectionAssignmentAssignerIdFkeyUserCreateInput
}

"""
Input for the nested mutation of `reviewSectionAssignment` in the `UserInput` mutation.
"""
input ReviewSectionAssignmentAssignerIdFkeyInverseInput {
  """
  Flag indicating whether all other `reviewSectionAssignment` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  connectById: [ReviewSectionAssignmentReviewSectionAssignmentPkeyConnect!]

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  connectByNodeId: [ReviewSectionAssignmentNodeIdConnect!]

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  deleteById: [ReviewSectionAssignmentReviewSectionAssignmentPkeyDelete!]

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  deleteByNodeId: [ReviewSectionAssignmentNodeIdDelete!]

  """
  The primary key(s) and patch data for `reviewSectionAssignment` for the far side of the relationship.
  """
  updateById: [ReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentAssignerIdFkeyUsingReviewSectionAssignmentPkeyUpdate!]

  """
  The primary key(s) and patch data for `reviewSectionAssignment` for the far side of the relationship.
  """
  updateByNodeId: [UserOnReviewSectionAssignmentForReviewSectionAssignmentAssignerIdFkeyNodeIdUpdate!]

  """
  A `ReviewSectionAssignmentInput` object that will be created and connected to this object.
  """
  create: [ReviewSectionAssignmentAssignerIdFkeyReviewSectionAssignmentCreateInput!]
}

"""The `reviewSectionAssignment` to be created by this mutation."""
input ReviewSectionAssignmentAssignerIdFkeyReviewSectionAssignmentCreateInput {
  id: Int
  reviewerId: Int
  stageId: Int
  sectionId: Int
  level: String
  userToReviewerId: ReviewSectionAssignmentReviewerIdFkeyInput
  userToAssignerId: ReviewSectionAssignmentAssignerIdFkeyInput
  applicationStageHistoryToStageId: ReviewSectionAssignmentStageIdFkeyInput
  applicationSectionToSectionId: ReviewSectionAssignmentSectionIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinSectionAssignmentIdFkeyInverseInput
}

"""The `user` to be created by this mutation."""
input ReviewSectionAssignmentAssignerIdFkeyUserCreateInput {
  id: Int
  username: String
  password: String
  email: String
  role: UserRole
  userOrganisationsUsingId: UserOrganisationUserIdFkeyInverseInput
  permissionJoinsUsingId: PermissionJoinUserIdFkeyInverseInput
  applicationsUsingId: ApplicationUserIdFkeyInverseInput
  reviewSectionAssignmentsToReviewerIdUsingId: ReviewSectionAssignmentReviewerIdFkeyInverseInput
  reviewSectionAssignmentsToAssignerIdUsingId: ReviewSectionAssignmentAssignerIdFkeyInverseInput
  filesUsingId: FileUserIdFkeyInverseInput
  notificationsUsingId: NotificationUserIdFkeyInverseInput
}

"""
A condition to be used against `ReviewSectionAssignment` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ReviewSectionAssignmentCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `reviewerId` field."""
  reviewerId: Int

  """Checks for equality with the object’s `assignerId` field."""
  assignerId: Int

  """Checks for equality with the object’s `stageId` field."""
  stageId: Int

  """Checks for equality with the object’s `sectionId` field."""
  sectionId: Int

  """Checks for equality with the object’s `level` field."""
  level: String
}

"""An input for mutations affecting `ReviewSectionAssignment`"""
input ReviewSectionAssignmentInput {
  id: Int
  reviewerId: Int
  assignerId: Int
  stageId: Int
  sectionId: Int
  level: String
  userToReviewerId: ReviewSectionAssignmentReviewerIdFkeyInput
  userToAssignerId: ReviewSectionAssignmentAssignerIdFkeyInput
  applicationStageHistoryToStageId: ReviewSectionAssignmentStageIdFkeyInput
  applicationSectionToSectionId: ReviewSectionAssignmentSectionIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinSectionAssignmentIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input ReviewSectionAssignmentNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `reviewSectionAssignment` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input ReviewSectionAssignmentNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `reviewSectionAssignment` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input ReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentAssignerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `user` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `user` being updated.
  """
  userPatch: UserPatch!
}

"""The fields on `reviewSectionAssignment` to look up the row to update."""
input ReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentAssignerIdFkeyUsingReviewSectionAssignmentPkeyUpdate {
  """
  An object where the defined keys will be set on the `reviewSectionAssignment` being updated.
  """
  reviewSectionAssignmentPatch: updateReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentAssignerIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentReviewerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `user` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `user` being updated.
  """
  userPatch: UserPatch!
}

"""The fields on `reviewSectionAssignment` to look up the row to update."""
input ReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentReviewerIdFkeyUsingReviewSectionAssignmentPkeyUpdate {
  """
  An object where the defined keys will be set on the `reviewSectionAssignment` being updated.
  """
  reviewSectionAssignmentPatch: updateReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentReviewerIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentSectionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `applicationSection` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `applicationSection` being updated.
  """
  applicationSectionPatch: ApplicationSectionPatch!
}

"""The fields on `reviewSectionAssignment` to look up the row to update."""
input ReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentSectionIdFkeyUsingReviewSectionAssignmentPkeyUpdate {
  """
  An object where the defined keys will be set on the `reviewSectionAssignment` being updated.
  """
  reviewSectionAssignmentPatch: updateReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentSectionIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentStageIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `applicationStageHistory` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `applicationStageHistory` being updated.
  """
  applicationStageHistoryPatch: ApplicationStageHistoryPatch!
}

"""The fields on `reviewSectionAssignment` to look up the row to update."""
input ReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentStageIdFkeyUsingReviewSectionAssignmentPkeyUpdate {
  """
  An object where the defined keys will be set on the `reviewSectionAssignment` being updated.
  """
  reviewSectionAssignmentPatch: updateReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentStageIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ReviewSectionAssignmentOnReviewSectionJoinForReviewSectionJoinSectionAssignmentIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `reviewSectionJoin` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `reviewSectionJoin` being updated.
  """
  reviewSectionJoinPatch: ReviewSectionJoinPatch!
}

"""The fields on `reviewSectionAssignment` to look up the row to update."""
input ReviewSectionAssignmentOnReviewSectionJoinForReviewSectionJoinSectionAssignmentIdFkeyUsingReviewSectionAssignmentPkeyUpdate {
  """
  An object where the defined keys will be set on the `reviewSectionAssignment` being updated.
  """
  reviewSectionAssignmentPatch: updateReviewSectionAssignmentOnReviewSectionJoinForReviewSectionJoinSectionAssignmentIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `ReviewSectionAssignment`. Fields that are set will be updated.
"""
input ReviewSectionAssignmentPatch {
  id: Int
  reviewerId: Int
  assignerId: Int
  stageId: Int
  sectionId: Int
  level: String
  userToReviewerId: ReviewSectionAssignmentReviewerIdFkeyInput
  userToAssignerId: ReviewSectionAssignmentAssignerIdFkeyInput
  applicationStageHistoryToStageId: ReviewSectionAssignmentStageIdFkeyInput
  applicationSectionToSectionId: ReviewSectionAssignmentSectionIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinSectionAssignmentIdFkeyInverseInput
}

"""
Input for the nested mutation of `user` in the `ReviewSectionAssignmentInput` mutation.
"""
input ReviewSectionAssignmentReviewerIdFkeyInput {
  """The primary key(s) for `user` for the far side of the relationship."""
  connectById: UserUserPkeyConnect

  """The primary key(s) for `user` for the far side of the relationship."""
  connectByNodeId: UserNodeIdConnect

  """The primary key(s) for `user` for the far side of the relationship."""
  deleteById: UserUserPkeyDelete

  """The primary key(s) for `user` for the far side of the relationship."""
  deleteByNodeId: UserNodeIdDelete

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateById: UserOnReviewSectionAssignmentForReviewSectionAssignmentReviewerIdFkeyUsingUserPkeyUpdate

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateByNodeId: ReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentReviewerIdFkeyNodeIdUpdate

  """
  A `UserInput` object that will be created and connected to this object.
  """
  create: ReviewSectionAssignmentReviewerIdFkeyUserCreateInput
}

"""
Input for the nested mutation of `reviewSectionAssignment` in the `UserInput` mutation.
"""
input ReviewSectionAssignmentReviewerIdFkeyInverseInput {
  """
  Flag indicating whether all other `reviewSectionAssignment` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  connectById: [ReviewSectionAssignmentReviewSectionAssignmentPkeyConnect!]

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  connectByNodeId: [ReviewSectionAssignmentNodeIdConnect!]

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  deleteById: [ReviewSectionAssignmentReviewSectionAssignmentPkeyDelete!]

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  deleteByNodeId: [ReviewSectionAssignmentNodeIdDelete!]

  """
  The primary key(s) and patch data for `reviewSectionAssignment` for the far side of the relationship.
  """
  updateById: [ReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentReviewerIdFkeyUsingReviewSectionAssignmentPkeyUpdate!]

  """
  The primary key(s) and patch data for `reviewSectionAssignment` for the far side of the relationship.
  """
  updateByNodeId: [UserOnReviewSectionAssignmentForReviewSectionAssignmentReviewerIdFkeyNodeIdUpdate!]

  """
  A `ReviewSectionAssignmentInput` object that will be created and connected to this object.
  """
  create: [ReviewSectionAssignmentReviewerIdFkeyReviewSectionAssignmentCreateInput!]
}

"""The `reviewSectionAssignment` to be created by this mutation."""
input ReviewSectionAssignmentReviewerIdFkeyReviewSectionAssignmentCreateInput {
  id: Int
  assignerId: Int
  stageId: Int
  sectionId: Int
  level: String
  userToReviewerId: ReviewSectionAssignmentReviewerIdFkeyInput
  userToAssignerId: ReviewSectionAssignmentAssignerIdFkeyInput
  applicationStageHistoryToStageId: ReviewSectionAssignmentStageIdFkeyInput
  applicationSectionToSectionId: ReviewSectionAssignmentSectionIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinSectionAssignmentIdFkeyInverseInput
}

"""The `user` to be created by this mutation."""
input ReviewSectionAssignmentReviewerIdFkeyUserCreateInput {
  id: Int
  username: String
  password: String
  email: String
  role: UserRole
  userOrganisationsUsingId: UserOrganisationUserIdFkeyInverseInput
  permissionJoinsUsingId: PermissionJoinUserIdFkeyInverseInput
  applicationsUsingId: ApplicationUserIdFkeyInverseInput
  reviewSectionAssignmentsToReviewerIdUsingId: ReviewSectionAssignmentReviewerIdFkeyInverseInput
  reviewSectionAssignmentsToAssignerIdUsingId: ReviewSectionAssignmentAssignerIdFkeyInverseInput
  filesUsingId: FileUserIdFkeyInverseInput
  notificationsUsingId: NotificationUserIdFkeyInverseInput
}

"""The fields on `reviewSectionAssignment` to look up the row to connect."""
input ReviewSectionAssignmentReviewSectionAssignmentPkeyConnect {
  id: Int!
}

"""The fields on `reviewSectionAssignment` to look up the row to delete."""
input ReviewSectionAssignmentReviewSectionAssignmentPkeyDelete {
  id: Int!
}

"""A connection to a list of `ReviewSectionAssignment` values."""
type ReviewSectionAssignmentsConnection {
  """A list of `ReviewSectionAssignment` objects."""
  nodes: [ReviewSectionAssignment]!

  """
  A list of edges which contains the `ReviewSectionAssignment` and cursor to aid in pagination.
  """
  edges: [ReviewSectionAssignmentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ReviewSectionAssignment` you could get from the connection.
  """
  totalCount: Int!
}

"""The `applicationSection` to be created by this mutation."""
input ReviewSectionAssignmentSectionIdFkeyApplicationSectionCreateInput {
  id: Int
  applicationId: Int
  templateSectionId: Int
  applicationToApplicationId: ApplicationSectionApplicationIdFkeyInput
  templateSectionToTemplateSectionId: ApplicationSectionTemplateSectionIdFkeyInput
  reviewSectionAssignmentsUsingId: ReviewSectionAssignmentSectionIdFkeyInverseInput
}

"""
Input for the nested mutation of `applicationSection` in the `ReviewSectionAssignmentInput` mutation.
"""
input ReviewSectionAssignmentSectionIdFkeyInput {
  """
  The primary key(s) for `applicationSection` for the far side of the relationship.
  """
  connectById: ApplicationSectionApplicationSectionPkeyConnect

  """
  The primary key(s) for `applicationSection` for the far side of the relationship.
  """
  connectByNodeId: ApplicationSectionNodeIdConnect

  """
  The primary key(s) for `applicationSection` for the far side of the relationship.
  """
  deleteById: ApplicationSectionApplicationSectionPkeyDelete

  """
  The primary key(s) for `applicationSection` for the far side of the relationship.
  """
  deleteByNodeId: ApplicationSectionNodeIdDelete

  """
  The primary key(s) and patch data for `applicationSection` for the far side of the relationship.
  """
  updateById: ApplicationSectionOnReviewSectionAssignmentForReviewSectionAssignmentSectionIdFkeyUsingApplicationSectionPkeyUpdate

  """
  The primary key(s) and patch data for `applicationSection` for the far side of the relationship.
  """
  updateByNodeId: ReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentSectionIdFkeyNodeIdUpdate

  """
  A `ApplicationSectionInput` object that will be created and connected to this object.
  """
  create: ReviewSectionAssignmentSectionIdFkeyApplicationSectionCreateInput
}

"""
Input for the nested mutation of `reviewSectionAssignment` in the `ApplicationSectionInput` mutation.
"""
input ReviewSectionAssignmentSectionIdFkeyInverseInput {
  """
  Flag indicating whether all other `reviewSectionAssignment` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  connectById: [ReviewSectionAssignmentReviewSectionAssignmentPkeyConnect!]

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  connectByNodeId: [ReviewSectionAssignmentNodeIdConnect!]

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  deleteById: [ReviewSectionAssignmentReviewSectionAssignmentPkeyDelete!]

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  deleteByNodeId: [ReviewSectionAssignmentNodeIdDelete!]

  """
  The primary key(s) and patch data for `reviewSectionAssignment` for the far side of the relationship.
  """
  updateById: [ReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentSectionIdFkeyUsingReviewSectionAssignmentPkeyUpdate!]

  """
  The primary key(s) and patch data for `reviewSectionAssignment` for the far side of the relationship.
  """
  updateByNodeId: [ApplicationSectionOnReviewSectionAssignmentForReviewSectionAssignmentSectionIdFkeyNodeIdUpdate!]

  """
  A `ReviewSectionAssignmentInput` object that will be created and connected to this object.
  """
  create: [ReviewSectionAssignmentSectionIdFkeyReviewSectionAssignmentCreateInput!]
}

"""The `reviewSectionAssignment` to be created by this mutation."""
input ReviewSectionAssignmentSectionIdFkeyReviewSectionAssignmentCreateInput {
  id: Int
  reviewerId: Int
  assignerId: Int
  stageId: Int
  level: String
  userToReviewerId: ReviewSectionAssignmentReviewerIdFkeyInput
  userToAssignerId: ReviewSectionAssignmentAssignerIdFkeyInput
  applicationStageHistoryToStageId: ReviewSectionAssignmentStageIdFkeyInput
  applicationSectionToSectionId: ReviewSectionAssignmentSectionIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinSectionAssignmentIdFkeyInverseInput
}

"""A `ReviewSectionAssignment` edge in the connection."""
type ReviewSectionAssignmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReviewSectionAssignment` at the end of the edge."""
  node: ReviewSectionAssignment
}

"""Methods to use when ordering `ReviewSectionAssignment`."""
enum ReviewSectionAssignmentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  REVIEWER_ID_ASC
  REVIEWER_ID_DESC
  ASSIGNER_ID_ASC
  ASSIGNER_ID_DESC
  STAGE_ID_ASC
  STAGE_ID_DESC
  SECTION_ID_ASC
  SECTION_ID_DESC
  LEVEL_ASC
  LEVEL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The `applicationStageHistory` to be created by this mutation."""
input ReviewSectionAssignmentStageIdFkeyApplicationStageHistoryCreateInput {
  id: Int
  applicationId: Int
  stage: ApplicationStage
  timeCreated: Datetime
  isCurrent: Boolean
  applicationToApplicationId: ApplicationStageHistoryApplicationIdFkeyInput
  applicationStatusHistoriesUsingId: ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput
  reviewSectionAssignmentsUsingId: ReviewSectionAssignmentStageIdFkeyInverseInput
}

"""
Input for the nested mutation of `applicationStageHistory` in the `ReviewSectionAssignmentInput` mutation.
"""
input ReviewSectionAssignmentStageIdFkeyInput {
  """
  The primary key(s) for `applicationStageHistory` for the far side of the relationship.
  """
  connectById: ApplicationStageHistoryApplicationStageHistoryPkeyConnect

  """
  The primary key(s) for `applicationStageHistory` for the far side of the relationship.
  """
  connectByNodeId: ApplicationStageHistoryNodeIdConnect

  """
  The primary key(s) for `applicationStageHistory` for the far side of the relationship.
  """
  deleteById: ApplicationStageHistoryApplicationStageHistoryPkeyDelete

  """
  The primary key(s) for `applicationStageHistory` for the far side of the relationship.
  """
  deleteByNodeId: ApplicationStageHistoryNodeIdDelete

  """
  The primary key(s) and patch data for `applicationStageHistory` for the far side of the relationship.
  """
  updateById: ApplicationStageHistoryOnReviewSectionAssignmentForReviewSectionAssignmentStageIdFkeyUsingApplicationStageHistoryPkeyUpdate

  """
  The primary key(s) and patch data for `applicationStageHistory` for the far side of the relationship.
  """
  updateByNodeId: ReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentStageIdFkeyNodeIdUpdate

  """
  A `ApplicationStageHistoryInput` object that will be created and connected to this object.
  """
  create: ReviewSectionAssignmentStageIdFkeyApplicationStageHistoryCreateInput
}

"""
Input for the nested mutation of `reviewSectionAssignment` in the `ApplicationStageHistoryInput` mutation.
"""
input ReviewSectionAssignmentStageIdFkeyInverseInput {
  """
  Flag indicating whether all other `reviewSectionAssignment` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  connectById: [ReviewSectionAssignmentReviewSectionAssignmentPkeyConnect!]

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  connectByNodeId: [ReviewSectionAssignmentNodeIdConnect!]

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  deleteById: [ReviewSectionAssignmentReviewSectionAssignmentPkeyDelete!]

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  deleteByNodeId: [ReviewSectionAssignmentNodeIdDelete!]

  """
  The primary key(s) and patch data for `reviewSectionAssignment` for the far side of the relationship.
  """
  updateById: [ReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentStageIdFkeyUsingReviewSectionAssignmentPkeyUpdate!]

  """
  The primary key(s) and patch data for `reviewSectionAssignment` for the far side of the relationship.
  """
  updateByNodeId: [ApplicationStageHistoryOnReviewSectionAssignmentForReviewSectionAssignmentStageIdFkeyNodeIdUpdate!]

  """
  A `ReviewSectionAssignmentInput` object that will be created and connected to this object.
  """
  create: [ReviewSectionAssignmentStageIdFkeyReviewSectionAssignmentCreateInput!]
}

"""The `reviewSectionAssignment` to be created by this mutation."""
input ReviewSectionAssignmentStageIdFkeyReviewSectionAssignmentCreateInput {
  id: Int
  reviewerId: Int
  assignerId: Int
  sectionId: Int
  level: String
  userToReviewerId: ReviewSectionAssignmentReviewerIdFkeyInput
  userToAssignerId: ReviewSectionAssignmentAssignerIdFkeyInput
  applicationStageHistoryToStageId: ReviewSectionAssignmentStageIdFkeyInput
  applicationSectionToSectionId: ReviewSectionAssignmentSectionIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinSectionAssignmentIdFkeyInverseInput
}

"""
A condition to be used against `ReviewSection` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ReviewSectionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `reviewDecision` field."""
  reviewDecision: ReviewDecision

  """Checks for equality with the object’s `comment` field."""
  comment: String
}

"""An input for mutations affecting `ReviewSection`"""
input ReviewSectionInput {
  id: Int
  reviewDecision: ReviewDecision
  comment: String
  reviewSectionJoinsUsingId: ReviewSectionJoinReviewSectionIdFkeyInverseInput
}

type ReviewSectionJoin implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  reviewId: Int
  sectionAssignmentId: Int
  reviewSectionId: Int
  sendToApplicant: Boolean

  """Reads a single `Review` that is related to this `ReviewSectionJoin`."""
  reviewByReviewId: Review

  """
  Reads a single `ReviewSectionAssignment` that is related to this `ReviewSectionJoin`.
  """
  reviewSectionAssignmentBySectionAssignmentId: ReviewSectionAssignment

  """
  Reads a single `ReviewSection` that is related to this `ReviewSectionJoin`.
  """
  reviewSectionByReviewSectionId: ReviewSection

  """
  Reads and enables pagination through a set of `ReviewSectionResponseJoin`.
  """
  reviewSectionResponseJoinsByReviewSectionJoinId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReviewSectionResponseJoin`."""
    orderBy: [ReviewSectionResponseJoinsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewSectionResponseJoinCondition
  ): ReviewSectionResponseJoinsConnection!
}

"""
A condition to be used against `ReviewSectionJoin` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ReviewSectionJoinCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `reviewId` field."""
  reviewId: Int

  """Checks for equality with the object’s `sectionAssignmentId` field."""
  sectionAssignmentId: Int

  """Checks for equality with the object’s `reviewSectionId` field."""
  reviewSectionId: Int

  """Checks for equality with the object’s `sendToApplicant` field."""
  sendToApplicant: Boolean
}

"""An input for mutations affecting `ReviewSectionJoin`"""
input ReviewSectionJoinInput {
  id: Int
  reviewId: Int
  sectionAssignmentId: Int
  reviewSectionId: Int
  sendToApplicant: Boolean
  reviewToReviewId: ReviewSectionJoinReviewIdFkeyInput
  reviewSectionAssignmentToSectionAssignmentId: ReviewSectionJoinSectionAssignmentIdFkeyInput
  reviewSectionToReviewSectionId: ReviewSectionJoinReviewSectionIdFkeyInput
  reviewSectionResponseJoinsUsingId: ReviewSectionResponseJoinReviewSectionJoinIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input ReviewSectionJoinNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `reviewSectionJoin` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input ReviewSectionJoinNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `reviewSectionJoin` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input ReviewSectionJoinOnReviewSectionJoinForReviewSectionJoinReviewIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `review` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `review` being updated.
  """
  reviewPatch: ReviewPatch!
}

"""The fields on `reviewSectionJoin` to look up the row to update."""
input ReviewSectionJoinOnReviewSectionJoinForReviewSectionJoinReviewIdFkeyUsingReviewSectionJoinPkeyUpdate {
  """
  An object where the defined keys will be set on the `reviewSectionJoin` being updated.
  """
  reviewSectionJoinPatch: updateReviewSectionJoinOnReviewSectionJoinForReviewSectionJoinReviewIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ReviewSectionJoinOnReviewSectionJoinForReviewSectionJoinReviewSectionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `reviewSection` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `reviewSection` being updated.
  """
  reviewSectionPatch: ReviewSectionPatch!
}

"""The fields on `reviewSectionJoin` to look up the row to update."""
input ReviewSectionJoinOnReviewSectionJoinForReviewSectionJoinReviewSectionIdFkeyUsingReviewSectionJoinPkeyUpdate {
  """
  An object where the defined keys will be set on the `reviewSectionJoin` being updated.
  """
  reviewSectionJoinPatch: updateReviewSectionJoinOnReviewSectionJoinForReviewSectionJoinReviewSectionIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ReviewSectionJoinOnReviewSectionJoinForReviewSectionJoinSectionAssignmentIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `reviewSectionAssignment` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `reviewSectionAssignment` being updated.
  """
  reviewSectionAssignmentPatch: ReviewSectionAssignmentPatch!
}

"""The fields on `reviewSectionJoin` to look up the row to update."""
input ReviewSectionJoinOnReviewSectionJoinForReviewSectionJoinSectionAssignmentIdFkeyUsingReviewSectionJoinPkeyUpdate {
  """
  An object where the defined keys will be set on the `reviewSectionJoin` being updated.
  """
  reviewSectionJoinPatch: updateReviewSectionJoinOnReviewSectionJoinForReviewSectionJoinSectionAssignmentIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ReviewSectionJoinOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewSectionJoinIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `reviewSectionResponseJoin` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `reviewSectionResponseJoin` being updated.
  """
  reviewSectionResponseJoinPatch: ReviewSectionResponseJoinPatch!
}

"""The fields on `reviewSectionJoin` to look up the row to update."""
input ReviewSectionJoinOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewSectionJoinIdFkeyUsingReviewSectionJoinPkeyUpdate {
  """
  An object where the defined keys will be set on the `reviewSectionJoin` being updated.
  """
  reviewSectionJoinPatch: updateReviewSectionJoinOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewSectionJoinIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `ReviewSectionJoin`. Fields that are set will be updated.
"""
input ReviewSectionJoinPatch {
  id: Int
  reviewId: Int
  sectionAssignmentId: Int
  reviewSectionId: Int
  sendToApplicant: Boolean
  reviewToReviewId: ReviewSectionJoinReviewIdFkeyInput
  reviewSectionAssignmentToSectionAssignmentId: ReviewSectionJoinSectionAssignmentIdFkeyInput
  reviewSectionToReviewSectionId: ReviewSectionJoinReviewSectionIdFkeyInput
  reviewSectionResponseJoinsUsingId: ReviewSectionResponseJoinReviewSectionJoinIdFkeyInverseInput
}

"""
Input for the nested mutation of `review` in the `ReviewSectionJoinInput` mutation.
"""
input ReviewSectionJoinReviewIdFkeyInput {
  """The primary key(s) for `review` for the far side of the relationship."""
  connectById: ReviewReviewPkeyConnect

  """The primary key(s) for `review` for the far side of the relationship."""
  connectByNodeId: ReviewNodeIdConnect

  """The primary key(s) for `review` for the far side of the relationship."""
  deleteById: ReviewReviewPkeyDelete

  """The primary key(s) for `review` for the far side of the relationship."""
  deleteByNodeId: ReviewNodeIdDelete

  """
  The primary key(s) and patch data for `review` for the far side of the relationship.
  """
  updateById: ReviewOnReviewSectionJoinForReviewSectionJoinReviewIdFkeyUsingReviewPkeyUpdate

  """
  The primary key(s) and patch data for `review` for the far side of the relationship.
  """
  updateByNodeId: ReviewSectionJoinOnReviewSectionJoinForReviewSectionJoinReviewIdFkeyNodeIdUpdate

  """
  A `ReviewInput` object that will be created and connected to this object.
  """
  create: ReviewSectionJoinReviewIdFkeyReviewCreateInput
}

"""
Input for the nested mutation of `reviewSectionJoin` in the `ReviewInput` mutation.
"""
input ReviewSectionJoinReviewIdFkeyInverseInput {
  """
  Flag indicating whether all other `reviewSectionJoin` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `reviewSectionJoin` for the far side of the relationship.
  """
  connectById: [ReviewSectionJoinReviewSectionJoinPkeyConnect!]

  """
  The primary key(s) for `reviewSectionJoin` for the far side of the relationship.
  """
  connectByNodeId: [ReviewSectionJoinNodeIdConnect!]

  """
  The primary key(s) for `reviewSectionJoin` for the far side of the relationship.
  """
  deleteById: [ReviewSectionJoinReviewSectionJoinPkeyDelete!]

  """
  The primary key(s) for `reviewSectionJoin` for the far side of the relationship.
  """
  deleteByNodeId: [ReviewSectionJoinNodeIdDelete!]

  """
  The primary key(s) and patch data for `reviewSectionJoin` for the far side of the relationship.
  """
  updateById: [ReviewSectionJoinOnReviewSectionJoinForReviewSectionJoinReviewIdFkeyUsingReviewSectionJoinPkeyUpdate!]

  """
  The primary key(s) and patch data for `reviewSectionJoin` for the far side of the relationship.
  """
  updateByNodeId: [ReviewOnReviewSectionJoinForReviewSectionJoinReviewIdFkeyNodeIdUpdate!]

  """
  A `ReviewSectionJoinInput` object that will be created and connected to this object.
  """
  create: [ReviewSectionJoinReviewIdFkeyReviewSectionJoinCreateInput!]
}

"""The `review` to be created by this mutation."""
input ReviewSectionJoinReviewIdFkeyReviewCreateInput {
  id: Int
  applicationId: Int
  status: ReviewStatus
  comment: String
  timeCreated: Datetime
  trigger: Trigger
  applicationToApplicationId: ReviewApplicationIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinReviewIdFkeyInverseInput
  notificationsUsingId: NotificationReviewIdFkeyInverseInput
}

"""The `reviewSectionJoin` to be created by this mutation."""
input ReviewSectionJoinReviewIdFkeyReviewSectionJoinCreateInput {
  id: Int
  sectionAssignmentId: Int
  reviewSectionId: Int
  sendToApplicant: Boolean
  reviewToReviewId: ReviewSectionJoinReviewIdFkeyInput
  reviewSectionAssignmentToSectionAssignmentId: ReviewSectionJoinSectionAssignmentIdFkeyInput
  reviewSectionToReviewSectionId: ReviewSectionJoinReviewSectionIdFkeyInput
  reviewSectionResponseJoinsUsingId: ReviewSectionResponseJoinReviewSectionJoinIdFkeyInverseInput
}

"""
Input for the nested mutation of `reviewSection` in the `ReviewSectionJoinInput` mutation.
"""
input ReviewSectionJoinReviewSectionIdFkeyInput {
  """
  The primary key(s) for `reviewSection` for the far side of the relationship.
  """
  connectById: ReviewSectionReviewSectionPkeyConnect

  """
  The primary key(s) for `reviewSection` for the far side of the relationship.
  """
  connectByNodeId: ReviewSectionNodeIdConnect

  """
  The primary key(s) for `reviewSection` for the far side of the relationship.
  """
  deleteById: ReviewSectionReviewSectionPkeyDelete

  """
  The primary key(s) for `reviewSection` for the far side of the relationship.
  """
  deleteByNodeId: ReviewSectionNodeIdDelete

  """
  The primary key(s) and patch data for `reviewSection` for the far side of the relationship.
  """
  updateById: ReviewSectionOnReviewSectionJoinForReviewSectionJoinReviewSectionIdFkeyUsingReviewSectionPkeyUpdate

  """
  The primary key(s) and patch data for `reviewSection` for the far side of the relationship.
  """
  updateByNodeId: ReviewSectionJoinOnReviewSectionJoinForReviewSectionJoinReviewSectionIdFkeyNodeIdUpdate

  """
  A `ReviewSectionInput` object that will be created and connected to this object.
  """
  create: ReviewSectionJoinReviewSectionIdFkeyReviewSectionCreateInput
}

"""
Input for the nested mutation of `reviewSectionJoin` in the `ReviewSectionInput` mutation.
"""
input ReviewSectionJoinReviewSectionIdFkeyInverseInput {
  """
  Flag indicating whether all other `reviewSectionJoin` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `reviewSectionJoin` for the far side of the relationship.
  """
  connectById: [ReviewSectionJoinReviewSectionJoinPkeyConnect!]

  """
  The primary key(s) for `reviewSectionJoin` for the far side of the relationship.
  """
  connectByNodeId: [ReviewSectionJoinNodeIdConnect!]

  """
  The primary key(s) for `reviewSectionJoin` for the far side of the relationship.
  """
  deleteById: [ReviewSectionJoinReviewSectionJoinPkeyDelete!]

  """
  The primary key(s) for `reviewSectionJoin` for the far side of the relationship.
  """
  deleteByNodeId: [ReviewSectionJoinNodeIdDelete!]

  """
  The primary key(s) and patch data for `reviewSectionJoin` for the far side of the relationship.
  """
  updateById: [ReviewSectionJoinOnReviewSectionJoinForReviewSectionJoinReviewSectionIdFkeyUsingReviewSectionJoinPkeyUpdate!]

  """
  The primary key(s) and patch data for `reviewSectionJoin` for the far side of the relationship.
  """
  updateByNodeId: [ReviewSectionOnReviewSectionJoinForReviewSectionJoinReviewSectionIdFkeyNodeIdUpdate!]

  """
  A `ReviewSectionJoinInput` object that will be created and connected to this object.
  """
  create: [ReviewSectionJoinReviewSectionIdFkeyReviewSectionJoinCreateInput!]
}

"""The `reviewSection` to be created by this mutation."""
input ReviewSectionJoinReviewSectionIdFkeyReviewSectionCreateInput {
  id: Int
  reviewDecision: ReviewDecision
  comment: String
  reviewSectionJoinsUsingId: ReviewSectionJoinReviewSectionIdFkeyInverseInput
}

"""The `reviewSectionJoin` to be created by this mutation."""
input ReviewSectionJoinReviewSectionIdFkeyReviewSectionJoinCreateInput {
  id: Int
  reviewId: Int
  sectionAssignmentId: Int
  sendToApplicant: Boolean
  reviewToReviewId: ReviewSectionJoinReviewIdFkeyInput
  reviewSectionAssignmentToSectionAssignmentId: ReviewSectionJoinSectionAssignmentIdFkeyInput
  reviewSectionToReviewSectionId: ReviewSectionJoinReviewSectionIdFkeyInput
  reviewSectionResponseJoinsUsingId: ReviewSectionResponseJoinReviewSectionJoinIdFkeyInverseInput
}

"""The fields on `reviewSectionJoin` to look up the row to connect."""
input ReviewSectionJoinReviewSectionJoinPkeyConnect {
  id: Int!
}

"""The fields on `reviewSectionJoin` to look up the row to delete."""
input ReviewSectionJoinReviewSectionJoinPkeyDelete {
  id: Int!
}

"""A connection to a list of `ReviewSectionJoin` values."""
type ReviewSectionJoinsConnection {
  """A list of `ReviewSectionJoin` objects."""
  nodes: [ReviewSectionJoin]!

  """
  A list of edges which contains the `ReviewSectionJoin` and cursor to aid in pagination.
  """
  edges: [ReviewSectionJoinsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ReviewSectionJoin` you could get from the connection.
  """
  totalCount: Int!
}

"""
Input for the nested mutation of `reviewSectionAssignment` in the `ReviewSectionJoinInput` mutation.
"""
input ReviewSectionJoinSectionAssignmentIdFkeyInput {
  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  connectById: ReviewSectionAssignmentReviewSectionAssignmentPkeyConnect

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  connectByNodeId: ReviewSectionAssignmentNodeIdConnect

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  deleteById: ReviewSectionAssignmentReviewSectionAssignmentPkeyDelete

  """
  The primary key(s) for `reviewSectionAssignment` for the far side of the relationship.
  """
  deleteByNodeId: ReviewSectionAssignmentNodeIdDelete

  """
  The primary key(s) and patch data for `reviewSectionAssignment` for the far side of the relationship.
  """
  updateById: ReviewSectionAssignmentOnReviewSectionJoinForReviewSectionJoinSectionAssignmentIdFkeyUsingReviewSectionAssignmentPkeyUpdate

  """
  The primary key(s) and patch data for `reviewSectionAssignment` for the far side of the relationship.
  """
  updateByNodeId: ReviewSectionJoinOnReviewSectionJoinForReviewSectionJoinSectionAssignmentIdFkeyNodeIdUpdate

  """
  A `ReviewSectionAssignmentInput` object that will be created and connected to this object.
  """
  create: ReviewSectionJoinSectionAssignmentIdFkeyReviewSectionAssignmentCreateInput
}

"""
Input for the nested mutation of `reviewSectionJoin` in the `ReviewSectionAssignmentInput` mutation.
"""
input ReviewSectionJoinSectionAssignmentIdFkeyInverseInput {
  """
  Flag indicating whether all other `reviewSectionJoin` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `reviewSectionJoin` for the far side of the relationship.
  """
  connectById: [ReviewSectionJoinReviewSectionJoinPkeyConnect!]

  """
  The primary key(s) for `reviewSectionJoin` for the far side of the relationship.
  """
  connectByNodeId: [ReviewSectionJoinNodeIdConnect!]

  """
  The primary key(s) for `reviewSectionJoin` for the far side of the relationship.
  """
  deleteById: [ReviewSectionJoinReviewSectionJoinPkeyDelete!]

  """
  The primary key(s) for `reviewSectionJoin` for the far side of the relationship.
  """
  deleteByNodeId: [ReviewSectionJoinNodeIdDelete!]

  """
  The primary key(s) and patch data for `reviewSectionJoin` for the far side of the relationship.
  """
  updateById: [ReviewSectionJoinOnReviewSectionJoinForReviewSectionJoinSectionAssignmentIdFkeyUsingReviewSectionJoinPkeyUpdate!]

  """
  The primary key(s) and patch data for `reviewSectionJoin` for the far side of the relationship.
  """
  updateByNodeId: [ReviewSectionAssignmentOnReviewSectionJoinForReviewSectionJoinSectionAssignmentIdFkeyNodeIdUpdate!]

  """
  A `ReviewSectionJoinInput` object that will be created and connected to this object.
  """
  create: [ReviewSectionJoinSectionAssignmentIdFkeyReviewSectionJoinCreateInput!]
}

"""The `reviewSectionAssignment` to be created by this mutation."""
input ReviewSectionJoinSectionAssignmentIdFkeyReviewSectionAssignmentCreateInput {
  id: Int
  reviewerId: Int
  assignerId: Int
  stageId: Int
  sectionId: Int
  level: String
  userToReviewerId: ReviewSectionAssignmentReviewerIdFkeyInput
  userToAssignerId: ReviewSectionAssignmentAssignerIdFkeyInput
  applicationStageHistoryToStageId: ReviewSectionAssignmentStageIdFkeyInput
  applicationSectionToSectionId: ReviewSectionAssignmentSectionIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinSectionAssignmentIdFkeyInverseInput
}

"""The `reviewSectionJoin` to be created by this mutation."""
input ReviewSectionJoinSectionAssignmentIdFkeyReviewSectionJoinCreateInput {
  id: Int
  reviewId: Int
  reviewSectionId: Int
  sendToApplicant: Boolean
  reviewToReviewId: ReviewSectionJoinReviewIdFkeyInput
  reviewSectionAssignmentToSectionAssignmentId: ReviewSectionJoinSectionAssignmentIdFkeyInput
  reviewSectionToReviewSectionId: ReviewSectionJoinReviewSectionIdFkeyInput
  reviewSectionResponseJoinsUsingId: ReviewSectionResponseJoinReviewSectionJoinIdFkeyInverseInput
}

"""A `ReviewSectionJoin` edge in the connection."""
type ReviewSectionJoinsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReviewSectionJoin` at the end of the edge."""
  node: ReviewSectionJoin
}

"""Methods to use when ordering `ReviewSectionJoin`."""
enum ReviewSectionJoinsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  REVIEW_ID_ASC
  REVIEW_ID_DESC
  SECTION_ASSIGNMENT_ID_ASC
  SECTION_ASSIGNMENT_ID_DESC
  REVIEW_SECTION_ID_ASC
  REVIEW_SECTION_ID_DESC
  SEND_TO_APPLICANT_ASC
  SEND_TO_APPLICANT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The globally unique `ID` look up for the row to connect."""
input ReviewSectionNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `reviewSection` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input ReviewSectionNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `reviewSection` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input ReviewSectionOnReviewSectionJoinForReviewSectionJoinReviewSectionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `reviewSectionJoin` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `reviewSectionJoin` being updated.
  """
  reviewSectionJoinPatch: ReviewSectionJoinPatch!
}

"""The fields on `reviewSection` to look up the row to update."""
input ReviewSectionOnReviewSectionJoinForReviewSectionJoinReviewSectionIdFkeyUsingReviewSectionPkeyUpdate {
  """
  An object where the defined keys will be set on the `reviewSection` being updated.
  """
  reviewSectionPatch: updateReviewSectionOnReviewSectionJoinForReviewSectionJoinReviewSectionIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `ReviewSection`. Fields that are set will be updated.
"""
input ReviewSectionPatch {
  id: Int
  reviewDecision: ReviewDecision
  comment: String
  reviewSectionJoinsUsingId: ReviewSectionJoinReviewSectionIdFkeyInverseInput
}

type ReviewSectionResponseJoin implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  reviewSectionJoinId: Int
  reviewResponseId: Int
  sendToApplicant: Boolean

  """
  Reads a single `ReviewSectionJoin` that is related to this `ReviewSectionResponseJoin`.
  """
  reviewSectionJoinByReviewSectionJoinId: ReviewSectionJoin

  """
  Reads a single `ReviewResponse` that is related to this `ReviewSectionResponseJoin`.
  """
  reviewResponseByReviewResponseId: ReviewResponse
}

"""
A condition to be used against `ReviewSectionResponseJoin` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ReviewSectionResponseJoinCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `reviewSectionJoinId` field."""
  reviewSectionJoinId: Int

  """Checks for equality with the object’s `reviewResponseId` field."""
  reviewResponseId: Int

  """Checks for equality with the object’s `sendToApplicant` field."""
  sendToApplicant: Boolean
}

"""An input for mutations affecting `ReviewSectionResponseJoin`"""
input ReviewSectionResponseJoinInput {
  id: Int
  reviewSectionJoinId: Int
  reviewResponseId: Int
  sendToApplicant: Boolean
  reviewSectionJoinToReviewSectionJoinId: ReviewSectionResponseJoinReviewSectionJoinIdFkeyInput
  reviewResponseToReviewResponseId: ReviewSectionResponseJoinReviewResponseIdFkeyInput
}

"""The globally unique `ID` look up for the row to connect."""
input ReviewSectionResponseJoinNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `reviewSectionResponseJoin` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input ReviewSectionResponseJoinNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `reviewSectionResponseJoin` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input ReviewSectionResponseJoinOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewResponseIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `reviewResponse` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `reviewResponse` being updated.
  """
  reviewResponsePatch: ReviewResponsePatch!
}

"""
The fields on `reviewSectionResponseJoin` to look up the row to update.
"""
input ReviewSectionResponseJoinOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewResponseIdFkeyUsingReviewSectionResponseJoinPkeyUpdate {
  """
  An object where the defined keys will be set on the `reviewSectionResponseJoin` being updated.
  """
  reviewSectionResponseJoinPatch: updateReviewSectionResponseJoinOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewResponseIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input ReviewSectionResponseJoinOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewSectionJoinIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `reviewSectionJoin` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `reviewSectionJoin` being updated.
  """
  reviewSectionJoinPatch: ReviewSectionJoinPatch!
}

"""
The fields on `reviewSectionResponseJoin` to look up the row to update.
"""
input ReviewSectionResponseJoinOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewSectionJoinIdFkeyUsingReviewSectionResponseJoinPkeyUpdate {
  """
  An object where the defined keys will be set on the `reviewSectionResponseJoin` being updated.
  """
  reviewSectionResponseJoinPatch: updateReviewSectionResponseJoinOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewSectionJoinIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `ReviewSectionResponseJoin`. Fields that are set will be updated.
"""
input ReviewSectionResponseJoinPatch {
  id: Int
  reviewSectionJoinId: Int
  reviewResponseId: Int
  sendToApplicant: Boolean
  reviewSectionJoinToReviewSectionJoinId: ReviewSectionResponseJoinReviewSectionJoinIdFkeyInput
  reviewResponseToReviewResponseId: ReviewSectionResponseJoinReviewResponseIdFkeyInput
}

"""
Input for the nested mutation of `reviewResponse` in the `ReviewSectionResponseJoinInput` mutation.
"""
input ReviewSectionResponseJoinReviewResponseIdFkeyInput {
  """
  The primary key(s) for `reviewResponse` for the far side of the relationship.
  """
  connectById: ReviewResponseReviewResponsePkeyConnect

  """
  The primary key(s) for `reviewResponse` for the far side of the relationship.
  """
  connectByNodeId: ReviewResponseNodeIdConnect

  """
  The primary key(s) for `reviewResponse` for the far side of the relationship.
  """
  deleteById: ReviewResponseReviewResponsePkeyDelete

  """
  The primary key(s) for `reviewResponse` for the far side of the relationship.
  """
  deleteByNodeId: ReviewResponseNodeIdDelete

  """
  The primary key(s) and patch data for `reviewResponse` for the far side of the relationship.
  """
  updateById: ReviewResponseOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewResponseIdFkeyUsingReviewResponsePkeyUpdate

  """
  The primary key(s) and patch data for `reviewResponse` for the far side of the relationship.
  """
  updateByNodeId: ReviewSectionResponseJoinOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewResponseIdFkeyNodeIdUpdate

  """
  A `ReviewResponseInput` object that will be created and connected to this object.
  """
  create: ReviewSectionResponseJoinReviewResponseIdFkeyReviewResponseCreateInput
}

"""
Input for the nested mutation of `reviewSectionResponseJoin` in the `ReviewResponseInput` mutation.
"""
input ReviewSectionResponseJoinReviewResponseIdFkeyInverseInput {
  """
  Flag indicating whether all other `reviewSectionResponseJoin` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `reviewSectionResponseJoin` for the far side of the relationship.
  """
  connectById: [ReviewSectionResponseJoinReviewSectionResponseJoinPkeyConnect!]

  """
  The primary key(s) for `reviewSectionResponseJoin` for the far side of the relationship.
  """
  connectByNodeId: [ReviewSectionResponseJoinNodeIdConnect!]

  """
  The primary key(s) for `reviewSectionResponseJoin` for the far side of the relationship.
  """
  deleteById: [ReviewSectionResponseJoinReviewSectionResponseJoinPkeyDelete!]

  """
  The primary key(s) for `reviewSectionResponseJoin` for the far side of the relationship.
  """
  deleteByNodeId: [ReviewSectionResponseJoinNodeIdDelete!]

  """
  The primary key(s) and patch data for `reviewSectionResponseJoin` for the far side of the relationship.
  """
  updateById: [ReviewSectionResponseJoinOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewResponseIdFkeyUsingReviewSectionResponseJoinPkeyUpdate!]

  """
  The primary key(s) and patch data for `reviewSectionResponseJoin` for the far side of the relationship.
  """
  updateByNodeId: [ReviewResponseOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewResponseIdFkeyNodeIdUpdate!]

  """
  A `ReviewSectionResponseJoinInput` object that will be created and connected to this object.
  """
  create: [ReviewSectionResponseJoinReviewResponseIdFkeyReviewSectionResponseJoinCreateInput!]
}

"""The `reviewResponse` to be created by this mutation."""
input ReviewSectionResponseJoinReviewResponseIdFkeyReviewResponseCreateInput {
  id: Int
  applicationResponseId: Int
  reviewDecision: ReviewDecision
  comment: String
  trigger: Trigger
  applicationResponseToApplicationResponseId: ReviewResponseApplicationResponseIdFkeyInput
  reviewSectionResponseJoinsUsingId: ReviewSectionResponseJoinReviewResponseIdFkeyInverseInput
}

"""The `reviewSectionResponseJoin` to be created by this mutation."""
input ReviewSectionResponseJoinReviewResponseIdFkeyReviewSectionResponseJoinCreateInput {
  id: Int
  reviewSectionJoinId: Int
  sendToApplicant: Boolean
  reviewSectionJoinToReviewSectionJoinId: ReviewSectionResponseJoinReviewSectionJoinIdFkeyInput
  reviewResponseToReviewResponseId: ReviewSectionResponseJoinReviewResponseIdFkeyInput
}

"""
Input for the nested mutation of `reviewSectionJoin` in the `ReviewSectionResponseJoinInput` mutation.
"""
input ReviewSectionResponseJoinReviewSectionJoinIdFkeyInput {
  """
  The primary key(s) for `reviewSectionJoin` for the far side of the relationship.
  """
  connectById: ReviewSectionJoinReviewSectionJoinPkeyConnect

  """
  The primary key(s) for `reviewSectionJoin` for the far side of the relationship.
  """
  connectByNodeId: ReviewSectionJoinNodeIdConnect

  """
  The primary key(s) for `reviewSectionJoin` for the far side of the relationship.
  """
  deleteById: ReviewSectionJoinReviewSectionJoinPkeyDelete

  """
  The primary key(s) for `reviewSectionJoin` for the far side of the relationship.
  """
  deleteByNodeId: ReviewSectionJoinNodeIdDelete

  """
  The primary key(s) and patch data for `reviewSectionJoin` for the far side of the relationship.
  """
  updateById: ReviewSectionJoinOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewSectionJoinIdFkeyUsingReviewSectionJoinPkeyUpdate

  """
  The primary key(s) and patch data for `reviewSectionJoin` for the far side of the relationship.
  """
  updateByNodeId: ReviewSectionResponseJoinOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewSectionJoinIdFkeyNodeIdUpdate

  """
  A `ReviewSectionJoinInput` object that will be created and connected to this object.
  """
  create: ReviewSectionResponseJoinReviewSectionJoinIdFkeyReviewSectionJoinCreateInput
}

"""
Input for the nested mutation of `reviewSectionResponseJoin` in the `ReviewSectionJoinInput` mutation.
"""
input ReviewSectionResponseJoinReviewSectionJoinIdFkeyInverseInput {
  """
  Flag indicating whether all other `reviewSectionResponseJoin` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `reviewSectionResponseJoin` for the far side of the relationship.
  """
  connectById: [ReviewSectionResponseJoinReviewSectionResponseJoinPkeyConnect!]

  """
  The primary key(s) for `reviewSectionResponseJoin` for the far side of the relationship.
  """
  connectByNodeId: [ReviewSectionResponseJoinNodeIdConnect!]

  """
  The primary key(s) for `reviewSectionResponseJoin` for the far side of the relationship.
  """
  deleteById: [ReviewSectionResponseJoinReviewSectionResponseJoinPkeyDelete!]

  """
  The primary key(s) for `reviewSectionResponseJoin` for the far side of the relationship.
  """
  deleteByNodeId: [ReviewSectionResponseJoinNodeIdDelete!]

  """
  The primary key(s) and patch data for `reviewSectionResponseJoin` for the far side of the relationship.
  """
  updateById: [ReviewSectionResponseJoinOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewSectionJoinIdFkeyUsingReviewSectionResponseJoinPkeyUpdate!]

  """
  The primary key(s) and patch data for `reviewSectionResponseJoin` for the far side of the relationship.
  """
  updateByNodeId: [ReviewSectionJoinOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewSectionJoinIdFkeyNodeIdUpdate!]

  """
  A `ReviewSectionResponseJoinInput` object that will be created and connected to this object.
  """
  create: [ReviewSectionResponseJoinReviewSectionJoinIdFkeyReviewSectionResponseJoinCreateInput!]
}

"""The `reviewSectionJoin` to be created by this mutation."""
input ReviewSectionResponseJoinReviewSectionJoinIdFkeyReviewSectionJoinCreateInput {
  id: Int
  reviewId: Int
  sectionAssignmentId: Int
  reviewSectionId: Int
  sendToApplicant: Boolean
  reviewToReviewId: ReviewSectionJoinReviewIdFkeyInput
  reviewSectionAssignmentToSectionAssignmentId: ReviewSectionJoinSectionAssignmentIdFkeyInput
  reviewSectionToReviewSectionId: ReviewSectionJoinReviewSectionIdFkeyInput
  reviewSectionResponseJoinsUsingId: ReviewSectionResponseJoinReviewSectionJoinIdFkeyInverseInput
}

"""The `reviewSectionResponseJoin` to be created by this mutation."""
input ReviewSectionResponseJoinReviewSectionJoinIdFkeyReviewSectionResponseJoinCreateInput {
  id: Int
  reviewResponseId: Int
  sendToApplicant: Boolean
  reviewSectionJoinToReviewSectionJoinId: ReviewSectionResponseJoinReviewSectionJoinIdFkeyInput
  reviewResponseToReviewResponseId: ReviewSectionResponseJoinReviewResponseIdFkeyInput
}

"""
The fields on `reviewSectionResponseJoin` to look up the row to connect.
"""
input ReviewSectionResponseJoinReviewSectionResponseJoinPkeyConnect {
  id: Int!
}

"""
The fields on `reviewSectionResponseJoin` to look up the row to delete.
"""
input ReviewSectionResponseJoinReviewSectionResponseJoinPkeyDelete {
  id: Int!
}

"""A connection to a list of `ReviewSectionResponseJoin` values."""
type ReviewSectionResponseJoinsConnection {
  """A list of `ReviewSectionResponseJoin` objects."""
  nodes: [ReviewSectionResponseJoin]!

  """
  A list of edges which contains the `ReviewSectionResponseJoin` and cursor to aid in pagination.
  """
  edges: [ReviewSectionResponseJoinsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ReviewSectionResponseJoin` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ReviewSectionResponseJoin` edge in the connection."""
type ReviewSectionResponseJoinsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReviewSectionResponseJoin` at the end of the edge."""
  node: ReviewSectionResponseJoin
}

"""Methods to use when ordering `ReviewSectionResponseJoin`."""
enum ReviewSectionResponseJoinsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  REVIEW_SECTION_JOIN_ID_ASC
  REVIEW_SECTION_JOIN_ID_DESC
  REVIEW_RESPONSE_ID_ASC
  REVIEW_RESPONSE_ID_DESC
  SEND_TO_APPLICANT_ASC
  SEND_TO_APPLICANT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The fields on `reviewSection` to look up the row to connect."""
input ReviewSectionReviewSectionPkeyConnect {
  id: Int!
}

"""The fields on `reviewSection` to look up the row to delete."""
input ReviewSectionReviewSectionPkeyDelete {
  id: Int!
}

"""A connection to a list of `ReviewSection` values."""
type ReviewSectionsConnection {
  """A list of `ReviewSection` objects."""
  nodes: [ReviewSection]!

  """
  A list of edges which contains the `ReviewSection` and cursor to aid in pagination.
  """
  edges: [ReviewSectionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReviewSection` you could get from the connection."""
  totalCount: Int!
}

"""A `ReviewSection` edge in the connection."""
type ReviewSectionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReviewSection` at the end of the edge."""
  node: ReviewSection
}

"""Methods to use when ordering `ReviewSection`."""
enum ReviewSectionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  REVIEW_DECISION_ASC
  REVIEW_DECISION_DESC
  COMMENT_ASC
  COMMENT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A `Review` edge in the connection."""
type ReviewsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Review` at the end of the edge."""
  node: Review
}

"""Methods to use when ordering `Review`."""
enum ReviewsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  APPLICATION_ID_ASC
  APPLICATION_ID_DESC
  STATUS_ASC
  STATUS_DESC
  COMMENT_ASC
  COMMENT_DESC
  TIME_CREATED_ASC
  TIME_CREATED_DESC
  TRIGGER_ASC
  TRIGGER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum ReviewStatus {
  AWAITING_REVIEW
  IN_PROGRESS
  READY
  APPROVABLE
  NON_APPROVABLE
}

type Template implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  versionId: Int
  templateName: String
  code: String!
  status: TemplateStatus

  """Reads a single `TemplateVersion` that is related to this `Template`."""
  templateVersionByVersionId: TemplateVersion

  """Reads and enables pagination through a set of `TemplateStage`."""
  templateStagesByTamplateId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplateStage`."""
    orderBy: [TemplateStagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplateStageCondition
  ): TemplateStagesConnection!

  """Reads and enables pagination through a set of `TemplateSection`."""
  templateSectionsByTemplateId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplateSection`."""
    orderBy: [TemplateSectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplateSectionCondition
  ): TemplateSectionsConnection!

  """Reads and enables pagination through a set of `TemplatePermission`."""
  templatePermissionsByTemplateId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplatePermission`."""
    orderBy: [TemplatePermissionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplatePermissionCondition
  ): TemplatePermissionsConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByTemplateId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!

  """Reads and enables pagination through a set of `TemplateAction`."""
  templateActionsByTemplateId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplateAction`."""
    orderBy: [TemplateActionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplateActionCondition
  ): TemplateActionsConnection!
}

type TemplateAction implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  templateId: Int
  actionCode: String
  previousActionId: Int
  trigger: Trigger
  condition: JSON
  parameterQueries: JSON

  """Reads a single `Template` that is related to this `TemplateAction`."""
  templateByTemplateId: Template

  """
  Reads a single `TemplateAction` that is related to this `TemplateAction`.
  """
  templateActionByPreviousActionId: TemplateAction

  """Reads and enables pagination through a set of `TemplateAction`."""
  templateActionsByPreviousActionId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplateAction`."""
    orderBy: [TemplateActionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplateActionCondition
  ): TemplateActionsConnection!
}

"""
A condition to be used against `TemplateAction` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TemplateActionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `templateId` field."""
  templateId: Int

  """Checks for equality with the object’s `actionCode` field."""
  actionCode: String

  """Checks for equality with the object’s `previousActionId` field."""
  previousActionId: Int

  """Checks for equality with the object’s `trigger` field."""
  trigger: Trigger

  """Checks for equality with the object’s `condition` field."""
  condition: JSON

  """Checks for equality with the object’s `parameterQueries` field."""
  parameterQueries: JSON
}

"""An input for mutations affecting `TemplateAction`"""
input TemplateActionInput {
  id: Int
  templateId: Int
  actionCode: String
  previousActionId: Int
  trigger: Trigger
  condition: JSON
  parameterQueries: JSON
  templateToTemplateId: TemplateActionTemplateIdFkeyInput
  templateActionToPreviousActionId: TemplateActionPreviousActionIdFkeyInput
}

"""The globally unique `ID` look up for the row to connect."""
input TemplateActionNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `templateAction` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input TemplateActionNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `templateAction` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateActionOnTemplateActionForTemplateActionPreviousActionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `templateAction` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `templateAction` being updated.
  """
  templateActionPatch: TemplateActionPatch!
}

"""The fields on `templateAction` to look up the row to update."""
input TemplateActionOnTemplateActionForTemplateActionPreviousActionIdFkeyUsingTemplateActionPkeyUpdate {
  """
  An object where the defined keys will be set on the `templateAction` being updated.
  """
  templateActionPatch: updateTemplateActionOnTemplateActionForTemplateActionPreviousActionIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `template` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `template` being updated.
  """
  templatePatch: TemplatePatch!
}

"""The fields on `templateAction` to look up the row to update."""
input TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplateActionPkeyUpdate {
  """
  An object where the defined keys will be set on the `templateAction` being updated.
  """
  templateActionPatch: updateTemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `TemplateAction`. Fields that are set will be updated.
"""
input TemplateActionPatch {
  id: Int
  templateId: Int
  actionCode: String
  previousActionId: Int
  trigger: Trigger
  condition: JSON
  parameterQueries: JSON
  templateToTemplateId: TemplateActionTemplateIdFkeyInput
  templateActionToPreviousActionId: TemplateActionPreviousActionIdFkeyInput
}

"""
Input for the nested mutation of `templateAction` in the `TemplateActionInput` mutation.
"""
input TemplateActionPreviousActionIdFkeyInput {
  """
  The primary key(s) for `templateAction` for the far side of the relationship.
  """
  connectById: TemplateActionTemplateActionPkeyConnect

  """
  The primary key(s) for `templateAction` for the far side of the relationship.
  """
  connectByNodeId: TemplateActionNodeIdConnect

  """
  The primary key(s) for `templateAction` for the far side of the relationship.
  """
  deleteById: TemplateActionTemplateActionPkeyDelete

  """
  The primary key(s) for `templateAction` for the far side of the relationship.
  """
  deleteByNodeId: TemplateActionNodeIdDelete

  """
  The primary key(s) and patch data for `templateAction` for the far side of the relationship.
  """
  updateById: TemplateActionOnTemplateActionForTemplateActionPreviousActionIdFkeyUsingTemplateActionPkeyUpdate

  """
  The primary key(s) and patch data for `templateAction` for the far side of the relationship.
  """
  updateByNodeId: TemplateActionOnTemplateActionForTemplateActionPreviousActionIdFkeyNodeIdUpdate

  """
  A `TemplateActionInput` object that will be created and connected to this object.
  """
  create: TemplateActionPreviousActionIdFkeyTemplateActionCreateInput
}

"""The `templateAction` to be created by this mutation."""
input TemplateActionPreviousActionIdFkeyTemplateActionCreateInput {
  id: Int
  templateId: Int
  actionCode: String
  trigger: Trigger
  condition: JSON
  parameterQueries: JSON
  templateToTemplateId: TemplateActionTemplateIdFkeyInput
  templateActionToPreviousActionId: TemplateActionPreviousActionIdFkeyInput
}

"""A connection to a list of `TemplateAction` values."""
type TemplateActionsConnection {
  """A list of `TemplateAction` objects."""
  nodes: [TemplateAction]!

  """
  A list of edges which contains the `TemplateAction` and cursor to aid in pagination.
  """
  edges: [TemplateActionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TemplateAction` you could get from the connection."""
  totalCount: Int!
}

"""A `TemplateAction` edge in the connection."""
type TemplateActionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TemplateAction` at the end of the edge."""
  node: TemplateAction
}

"""Methods to use when ordering `TemplateAction`."""
enum TemplateActionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TEMPLATE_ID_ASC
  TEMPLATE_ID_DESC
  ACTION_CODE_ASC
  ACTION_CODE_DESC
  PREVIOUS_ACTION_ID_ASC
  PREVIOUS_ACTION_ID_DESC
  TRIGGER_ASC
  TRIGGER_DESC
  CONDITION_ASC
  CONDITION_DESC
  PARAMETER_QUERIES_ASC
  PARAMETER_QUERIES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The fields on `templateAction` to look up the row to connect."""
input TemplateActionTemplateActionPkeyConnect {
  id: Int!
}

"""The fields on `templateAction` to look up the row to delete."""
input TemplateActionTemplateActionPkeyDelete {
  id: Int!
}

"""
Input for the nested mutation of `template` in the `TemplateActionInput` mutation.
"""
input TemplateActionTemplateIdFkeyInput {
  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  connectById: TemplateTemplatePkeyConnect

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  connectByNodeId: TemplateNodeIdConnect

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  deleteById: TemplateTemplatePkeyDelete

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  deleteByNodeId: TemplateNodeIdDelete

  """
  The primary key(s) and patch data for `template` for the far side of the relationship.
  """
  updateById: TemplateOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplatePkeyUpdate

  """
  The primary key(s) and patch data for `template` for the far side of the relationship.
  """
  updateByNodeId: TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate

  """
  A `TemplateInput` object that will be created and connected to this object.
  """
  create: TemplateActionTemplateIdFkeyTemplateCreateInput
}

"""
Input for the nested mutation of `templateAction` in the `TemplateInput` mutation.
"""
input TemplateActionTemplateIdFkeyInverseInput {
  """
  Flag indicating whether all other `templateAction` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `templateAction` for the far side of the relationship.
  """
  connectById: [TemplateActionTemplateActionPkeyConnect!]

  """
  The primary key(s) for `templateAction` for the far side of the relationship.
  """
  connectByNodeId: [TemplateActionNodeIdConnect!]

  """
  The primary key(s) for `templateAction` for the far side of the relationship.
  """
  deleteById: [TemplateActionTemplateActionPkeyDelete!]

  """
  The primary key(s) for `templateAction` for the far side of the relationship.
  """
  deleteByNodeId: [TemplateActionNodeIdDelete!]

  """
  The primary key(s) and patch data for `templateAction` for the far side of the relationship.
  """
  updateById: [TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplateActionPkeyUpdate!]

  """
  The primary key(s) and patch data for `templateAction` for the far side of the relationship.
  """
  updateByNodeId: [TemplateOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate!]

  """
  A `TemplateActionInput` object that will be created and connected to this object.
  """
  create: [TemplateActionTemplateIdFkeyTemplateActionCreateInput!]
}

"""The `templateAction` to be created by this mutation."""
input TemplateActionTemplateIdFkeyTemplateActionCreateInput {
  id: Int
  actionCode: String
  previousActionId: Int
  trigger: Trigger
  condition: JSON
  parameterQueries: JSON
  templateToTemplateId: TemplateActionTemplateIdFkeyInput
  templateActionToPreviousActionId: TemplateActionPreviousActionIdFkeyInput
}

"""The `template` to be created by this mutation."""
input TemplateActionTemplateIdFkeyTemplateCreateInput {
  id: Int
  versionId: Int
  templateName: String
  code: String!
  status: TemplateStatus
  templateVersionToVersionId: TemplateVersionIdFkeyInput
  templateStagesUsingId: TemplateStageTamplateIdFkeyInverseInput
  templateSectionsUsingId: TemplateSectionTemplateIdFkeyInverseInput
  templatePermissionsUsingId: TemplatePermissionTemplateIdFkeyInverseInput
  applicationsUsingId: ApplicationTemplateIdFkeyInverseInput
  templateActionsUsingId: TemplateActionTemplateIdFkeyInverseInput
}

"""
A condition to be used against `Template` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TemplateCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `versionId` field."""
  versionId: Int

  """Checks for equality with the object’s `templateName` field."""
  templateName: String

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `status` field."""
  status: TemplateStatus
}

type TemplateElement implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  sectionId: Int
  code: String!
  nextElementCode: String
  title: String
  category: TemplateElementCategory
  visibilityCondition: JSON
  elementTypePluginCode: String
  isRequired: Boolean
  isEditable: Boolean
  parameters: JSON
  defaultValue: JSON
  validation: JSON

  """
  Reads a single `TemplateSection` that is related to this `TemplateElement`.
  """
  templateSectionBySectionId: TemplateSection

  """Reads and enables pagination through a set of `ApplicationResponse`."""
  applicationResponsesByTemplateQuestionId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationResponse`."""
    orderBy: [ApplicationResponsesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationResponseCondition
  ): ApplicationResponsesConnection!
}

enum TemplateElementCategory {
  QUESTION
  INFORMATION
}

"""
A condition to be used against `TemplateElement` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TemplateElementCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `sectionId` field."""
  sectionId: Int

  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `nextElementCode` field."""
  nextElementCode: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `category` field."""
  category: TemplateElementCategory

  """Checks for equality with the object’s `visibilityCondition` field."""
  visibilityCondition: JSON

  """Checks for equality with the object’s `elementTypePluginCode` field."""
  elementTypePluginCode: String

  """Checks for equality with the object’s `isRequired` field."""
  isRequired: Boolean

  """Checks for equality with the object’s `isEditable` field."""
  isEditable: Boolean

  """Checks for equality with the object’s `parameters` field."""
  parameters: JSON

  """Checks for equality with the object’s `defaultValue` field."""
  defaultValue: JSON

  """Checks for equality with the object’s `validation` field."""
  validation: JSON
}

"""An input for mutations affecting `TemplateElement`"""
input TemplateElementInput {
  id: Int
  sectionId: Int
  code: String!
  nextElementCode: String
  title: String
  category: TemplateElementCategory
  visibilityCondition: JSON
  elementTypePluginCode: String
  isRequired: Boolean
  isEditable: Boolean
  parameters: JSON
  defaultValue: JSON
  validation: JSON
  templateSectionToSectionId: TemplateElementSectionIdFkeyInput
  applicationResponsesUsingId: ApplicationResponseTemplateQuestionIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input TemplateElementNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `templateElement` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input TemplateElementNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `templateElement` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateElementOnApplicationResponseForApplicationResponseTemplateQuestionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `applicationResponse` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `applicationResponse` being updated.
  """
  applicationResponsePatch: ApplicationResponsePatch!
}

"""The fields on `templateElement` to look up the row to update."""
input TemplateElementOnApplicationResponseForApplicationResponseTemplateQuestionIdFkeyUsingTemplateElementPkeyUpdate {
  """
  An object where the defined keys will be set on the `templateElement` being updated.
  """
  templateElementPatch: updateTemplateElementOnApplicationResponseForApplicationResponseTemplateQuestionIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `templateSection` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `templateSection` being updated.
  """
  templateSectionPatch: TemplateSectionPatch!
}

"""The fields on `templateElement` to look up the row to update."""
input TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateElementPkeyUpdate {
  """
  An object where the defined keys will be set on the `templateElement` being updated.
  """
  templateElementPatch: updateTemplateElementOnTemplateElementForTemplateElementSectionIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `TemplateElement`. Fields that are set will be updated.
"""
input TemplateElementPatch {
  id: Int
  sectionId: Int
  code: String
  nextElementCode: String
  title: String
  category: TemplateElementCategory
  visibilityCondition: JSON
  elementTypePluginCode: String
  isRequired: Boolean
  isEditable: Boolean
  parameters: JSON
  defaultValue: JSON
  validation: JSON
  templateSectionToSectionId: TemplateElementSectionIdFkeyInput
  applicationResponsesUsingId: ApplicationResponseTemplateQuestionIdFkeyInverseInput
}

"""A connection to a list of `TemplateElement` values."""
type TemplateElementsConnection {
  """A list of `TemplateElement` objects."""
  nodes: [TemplateElement]!

  """
  A list of edges which contains the `TemplateElement` and cursor to aid in pagination.
  """
  edges: [TemplateElementsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TemplateElement` you could get from the connection.
  """
  totalCount: Int!
}

"""
Input for the nested mutation of `templateSection` in the `TemplateElementInput` mutation.
"""
input TemplateElementSectionIdFkeyInput {
  """
  The primary key(s) for `templateSection` for the far side of the relationship.
  """
  connectById: TemplateSectionTemplateSectionPkeyConnect

  """
  The primary key(s) for `templateSection` for the far side of the relationship.
  """
  connectByNodeId: TemplateSectionNodeIdConnect

  """
  The primary key(s) for `templateSection` for the far side of the relationship.
  """
  deleteById: TemplateSectionTemplateSectionPkeyDelete

  """
  The primary key(s) for `templateSection` for the far side of the relationship.
  """
  deleteByNodeId: TemplateSectionNodeIdDelete

  """
  The primary key(s) and patch data for `templateSection` for the far side of the relationship.
  """
  updateById: TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateSectionPkeyUpdate

  """
  The primary key(s) and patch data for `templateSection` for the far side of the relationship.
  """
  updateByNodeId: TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate

  """
  A `TemplateSectionInput` object that will be created and connected to this object.
  """
  create: TemplateElementSectionIdFkeyTemplateSectionCreateInput
}

"""
Input for the nested mutation of `templateElement` in the `TemplateSectionInput` mutation.
"""
input TemplateElementSectionIdFkeyInverseInput {
  """
  Flag indicating whether all other `templateElement` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `templateElement` for the far side of the relationship.
  """
  connectById: [TemplateElementTemplateElementPkeyConnect!]

  """
  The primary key(s) for `templateElement` for the far side of the relationship.
  """
  connectByNodeId: [TemplateElementNodeIdConnect!]

  """
  The primary key(s) for `templateElement` for the far side of the relationship.
  """
  deleteById: [TemplateElementTemplateElementPkeyDelete!]

  """
  The primary key(s) for `templateElement` for the far side of the relationship.
  """
  deleteByNodeId: [TemplateElementNodeIdDelete!]

  """
  The primary key(s) and patch data for `templateElement` for the far side of the relationship.
  """
  updateById: [TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateElementPkeyUpdate!]

  """
  The primary key(s) and patch data for `templateElement` for the far side of the relationship.
  """
  updateByNodeId: [TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate!]

  """
  A `TemplateElementInput` object that will be created and connected to this object.
  """
  create: [TemplateElementSectionIdFkeyTemplateElementCreateInput!]
}

"""The `templateElement` to be created by this mutation."""
input TemplateElementSectionIdFkeyTemplateElementCreateInput {
  id: Int
  code: String!
  nextElementCode: String
  title: String
  category: TemplateElementCategory
  visibilityCondition: JSON
  elementTypePluginCode: String
  isRequired: Boolean
  isEditable: Boolean
  parameters: JSON
  defaultValue: JSON
  validation: JSON
  templateSectionToSectionId: TemplateElementSectionIdFkeyInput
  applicationResponsesUsingId: ApplicationResponseTemplateQuestionIdFkeyInverseInput
}

"""The `templateSection` to be created by this mutation."""
input TemplateElementSectionIdFkeyTemplateSectionCreateInput {
  id: Int
  templateId: Int
  title: String
  code: String
  templateToTemplateId: TemplateSectionTemplateIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionTemplateSectionIdFkeyInverseInput
  templateElementsUsingId: TemplateElementSectionIdFkeyInverseInput
  applicationSectionsUsingId: ApplicationSectionTemplateSectionIdFkeyInverseInput
}

"""A `TemplateElement` edge in the connection."""
type TemplateElementsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TemplateElement` at the end of the edge."""
  node: TemplateElement
}

"""Methods to use when ordering `TemplateElement`."""
enum TemplateElementsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SECTION_ID_ASC
  SECTION_ID_DESC
  CODE_ASC
  CODE_DESC
  NEXT_ELEMENT_CODE_ASC
  NEXT_ELEMENT_CODE_DESC
  TITLE_ASC
  TITLE_DESC
  CATEGORY_ASC
  CATEGORY_DESC
  VISIBILITY_CONDITION_ASC
  VISIBILITY_CONDITION_DESC
  ELEMENT_TYPE_PLUGIN_CODE_ASC
  ELEMENT_TYPE_PLUGIN_CODE_DESC
  IS_REQUIRED_ASC
  IS_REQUIRED_DESC
  IS_EDITABLE_ASC
  IS_EDITABLE_DESC
  PARAMETERS_ASC
  PARAMETERS_DESC
  DEFAULT_VALUE_ASC
  DEFAULT_VALUE_DESC
  VALIDATION_ASC
  VALIDATION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The fields on `templateElement` to look up the row to connect."""
input TemplateElementTemplateElementPkeyConnect {
  id: Int!
}

"""The fields on `templateElement` to look up the row to delete."""
input TemplateElementTemplateElementPkeyDelete {
  id: Int!
}

"""An input for mutations affecting `Template`"""
input TemplateInput {
  id: Int
  versionId: Int
  templateName: String
  code: String!
  status: TemplateStatus
  templateVersionToVersionId: TemplateVersionIdFkeyInput
  templateStagesUsingId: TemplateStageTamplateIdFkeyInverseInput
  templateSectionsUsingId: TemplateSectionTemplateIdFkeyInverseInput
  templatePermissionsUsingId: TemplatePermissionTemplateIdFkeyInverseInput
  applicationsUsingId: ApplicationTemplateIdFkeyInverseInput
  templateActionsUsingId: TemplateActionTemplateIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input TemplateNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `template` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input TemplateNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `template` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `application` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `application` being updated.
  """
  applicationPatch: ApplicationPatch!
}

"""The fields on `template` to look up the row to update."""
input TemplateOnApplicationForApplicationTemplateIdFkeyUsingTemplatePkeyUpdate {
  """
  An object where the defined keys will be set on the `template` being updated.
  """
  templatePatch: updateTemplateOnApplicationForApplicationTemplateIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `templateAction` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `templateAction` being updated.
  """
  templateActionPatch: TemplateActionPatch!
}

"""The fields on `template` to look up the row to update."""
input TemplateOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplatePkeyUpdate {
  """
  An object where the defined keys will be set on the `template` being updated.
  """
  templatePatch: updateTemplateOnTemplateActionForTemplateActionTemplateIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateOnTemplateForTemplateVersionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `templateVersion` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `templateVersion` being updated.
  """
  templateVersionPatch: TemplateVersionPatch!
}

"""The fields on `template` to look up the row to update."""
input TemplateOnTemplateForTemplateVersionIdFkeyUsingTemplatePkeyUpdate {
  """
  An object where the defined keys will be set on the `template` being updated.
  """
  templatePatch: updateTemplateOnTemplateForTemplateVersionIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `templatePermission` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `templatePermission` being updated.
  """
  templatePermissionPatch: TemplatePermissionPatch!
}

"""The fields on `template` to look up the row to update."""
input TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePkeyUpdate {
  """
  An object where the defined keys will be set on the `template` being updated.
  """
  templatePatch: updateTemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `templateSection` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `templateSection` being updated.
  """
  templateSectionPatch: TemplateSectionPatch!
}

"""The fields on `template` to look up the row to update."""
input TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplatePkeyUpdate {
  """
  An object where the defined keys will be set on the `template` being updated.
  """
  templatePatch: updateTemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateOnTemplateStageForTemplateStageTamplateIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `templateStage` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `templateStage` being updated.
  """
  templateStagePatch: TemplateStagePatch!
}

"""The fields on `template` to look up the row to update."""
input TemplateOnTemplateStageForTemplateStageTamplateIdFkeyUsingTemplatePkeyUpdate {
  """
  An object where the defined keys will be set on the `template` being updated.
  """
  templatePatch: updateTemplateOnTemplateStageForTemplateStageTamplateIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `Template`. Fields that are set will be updated.
"""
input TemplatePatch {
  id: Int
  versionId: Int
  templateName: String
  code: String
  status: TemplateStatus
  templateVersionToVersionId: TemplateVersionIdFkeyInput
  templateStagesUsingId: TemplateStageTamplateIdFkeyInverseInput
  templateSectionsUsingId: TemplateSectionTemplateIdFkeyInverseInput
  templatePermissionsUsingId: TemplatePermissionTemplateIdFkeyInverseInput
  applicationsUsingId: ApplicationTemplateIdFkeyInverseInput
  templateActionsUsingId: TemplateActionTemplateIdFkeyInverseInput
}

type TemplatePermission implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  permissionJoinId: Int
  templateId: Int
  templateSectionId: Int
  permissionPolicyId: Int
  restrictions: JSON

  """
  Reads a single `PermissionJoin` that is related to this `TemplatePermission`.
  """
  permissionJoinByPermissionJoinId: PermissionJoin

  """
  Reads a single `Template` that is related to this `TemplatePermission`.
  """
  templateByTemplateId: Template

  """
  Reads a single `TemplateSection` that is related to this `TemplatePermission`.
  """
  templateSectionByTemplateSectionId: TemplateSection

  """
  Reads a single `PermissionPolicy` that is related to this `TemplatePermission`.
  """
  permissionPolicyByPermissionPolicyId: PermissionPolicy
}

"""
A condition to be used against `TemplatePermission` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TemplatePermissionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `permissionJoinId` field."""
  permissionJoinId: Int

  """Checks for equality with the object’s `templateId` field."""
  templateId: Int

  """Checks for equality with the object’s `templateSectionId` field."""
  templateSectionId: Int

  """Checks for equality with the object’s `permissionPolicyId` field."""
  permissionPolicyId: Int

  """Checks for equality with the object’s `restrictions` field."""
  restrictions: JSON
}

"""An input for mutations affecting `TemplatePermission`"""
input TemplatePermissionInput {
  id: Int
  permissionJoinId: Int
  templateId: Int
  templateSectionId: Int
  permissionPolicyId: Int
  restrictions: JSON
  permissionJoinToPermissionJoinId: TemplatePermissionPermissionJoinIdFkeyInput
  templateToTemplateId: TemplatePermissionTemplateIdFkeyInput
  templateSectionToTemplateSectionId: TemplatePermissionTemplateSectionIdFkeyInput
  permissionPolicyToPermissionPolicyId: TemplatePermissionPermissionPolicyIdFkeyInput
}

"""The globally unique `ID` look up for the row to connect."""
input TemplatePermissionNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `templatePermission` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input TemplatePermissionNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `templatePermission` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionJoinIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `permissionJoin` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `permissionJoin` being updated.
  """
  permissionJoinPatch: PermissionJoinPatch!
}

"""The fields on `templatePermission` to look up the row to update."""
input TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionJoinIdFkeyUsingTemplatePermissionPkeyUpdate {
  """
  An object where the defined keys will be set on the `templatePermission` being updated.
  """
  templatePermissionPatch: updateTemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionJoinIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionPolicyIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `permissionPolicy` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `permissionPolicy` being updated.
  """
  permissionPolicyPatch: PermissionPolicyPatch!
}

"""The fields on `templatePermission` to look up the row to update."""
input TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionPolicyIdFkeyUsingTemplatePermissionPkeyUpdate {
  """
  An object where the defined keys will be set on the `templatePermission` being updated.
  """
  templatePermissionPatch: updateTemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionPolicyIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `template` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `template` being updated.
  """
  templatePatch: TemplatePatch!
}

"""The fields on `templatePermission` to look up the row to update."""
input TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePermissionPkeyUpdate {
  """
  An object where the defined keys will be set on the `templatePermission` being updated.
  """
  templatePermissionPatch: updateTemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateSectionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `templateSection` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `templateSection` being updated.
  """
  templateSectionPatch: TemplateSectionPatch!
}

"""The fields on `templatePermission` to look up the row to update."""
input TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateSectionIdFkeyUsingTemplatePermissionPkeyUpdate {
  """
  An object where the defined keys will be set on the `templatePermission` being updated.
  """
  templatePermissionPatch: updateTemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateSectionIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `TemplatePermission`. Fields that are set will be updated.
"""
input TemplatePermissionPatch {
  id: Int
  permissionJoinId: Int
  templateId: Int
  templateSectionId: Int
  permissionPolicyId: Int
  restrictions: JSON
  permissionJoinToPermissionJoinId: TemplatePermissionPermissionJoinIdFkeyInput
  templateToTemplateId: TemplatePermissionTemplateIdFkeyInput
  templateSectionToTemplateSectionId: TemplatePermissionTemplateSectionIdFkeyInput
  permissionPolicyToPermissionPolicyId: TemplatePermissionPermissionPolicyIdFkeyInput
}

"""
Input for the nested mutation of `permissionJoin` in the `TemplatePermissionInput` mutation.
"""
input TemplatePermissionPermissionJoinIdFkeyInput {
  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  connectById: PermissionJoinPermissionJoinPkeyConnect

  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  connectByNodeId: PermissionJoinNodeIdConnect

  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  deleteById: PermissionJoinPermissionJoinPkeyDelete

  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  deleteByNodeId: PermissionJoinNodeIdDelete

  """
  The primary key(s) and patch data for `permissionJoin` for the far side of the relationship.
  """
  updateById: PermissionJoinOnTemplatePermissionForTemplatePermissionPermissionJoinIdFkeyUsingPermissionJoinPkeyUpdate

  """
  The primary key(s) and patch data for `permissionJoin` for the far side of the relationship.
  """
  updateByNodeId: TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionJoinIdFkeyNodeIdUpdate

  """
  A `PermissionJoinInput` object that will be created and connected to this object.
  """
  create: TemplatePermissionPermissionJoinIdFkeyPermissionJoinCreateInput
}

"""
Input for the nested mutation of `templatePermission` in the `PermissionJoinInput` mutation.
"""
input TemplatePermissionPermissionJoinIdFkeyInverseInput {
  """
  Flag indicating whether all other `templatePermission` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `templatePermission` for the far side of the relationship.
  """
  connectById: [TemplatePermissionTemplatePermissionPkeyConnect!]

  """
  The primary key(s) for `templatePermission` for the far side of the relationship.
  """
  connectByNodeId: [TemplatePermissionNodeIdConnect!]

  """
  The primary key(s) for `templatePermission` for the far side of the relationship.
  """
  deleteById: [TemplatePermissionTemplatePermissionPkeyDelete!]

  """
  The primary key(s) for `templatePermission` for the far side of the relationship.
  """
  deleteByNodeId: [TemplatePermissionNodeIdDelete!]

  """
  The primary key(s) and patch data for `templatePermission` for the far side of the relationship.
  """
  updateById: [TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionJoinIdFkeyUsingTemplatePermissionPkeyUpdate!]

  """
  The primary key(s) and patch data for `templatePermission` for the far side of the relationship.
  """
  updateByNodeId: [PermissionJoinOnTemplatePermissionForTemplatePermissionPermissionJoinIdFkeyNodeIdUpdate!]

  """
  A `TemplatePermissionInput` object that will be created and connected to this object.
  """
  create: [TemplatePermissionPermissionJoinIdFkeyTemplatePermissionCreateInput!]
}

"""The `permissionJoin` to be created by this mutation."""
input TemplatePermissionPermissionJoinIdFkeyPermissionJoinCreateInput {
  id: Int
  userId: Int
  userOrganisationId: Int
  permissionNameId: Int
  userToUserId: PermissionJoinUserIdFkeyInput
  userOrganisationToUserOrganisationId: PermissionJoinUserOrganisationIdFkeyInput
  permissionNameToPermissionNameId: PermissionJoinPermissionNameIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionPermissionJoinIdFkeyInverseInput
  templateReviewStagesUsingId: TemplateReviewStagePermissionJoinIdFkeyInverseInput
}

"""The `templatePermission` to be created by this mutation."""
input TemplatePermissionPermissionJoinIdFkeyTemplatePermissionCreateInput {
  id: Int
  templateId: Int
  templateSectionId: Int
  permissionPolicyId: Int
  restrictions: JSON
  permissionJoinToPermissionJoinId: TemplatePermissionPermissionJoinIdFkeyInput
  templateToTemplateId: TemplatePermissionTemplateIdFkeyInput
  templateSectionToTemplateSectionId: TemplatePermissionTemplateSectionIdFkeyInput
  permissionPolicyToPermissionPolicyId: TemplatePermissionPermissionPolicyIdFkeyInput
}

"""
Input for the nested mutation of `permissionPolicy` in the `TemplatePermissionInput` mutation.
"""
input TemplatePermissionPermissionPolicyIdFkeyInput {
  """
  The primary key(s) for `permissionPolicy` for the far side of the relationship.
  """
  connectById: PermissionPolicyPermissionPolicyPkeyConnect

  """
  The primary key(s) for `permissionPolicy` for the far side of the relationship.
  """
  connectByNodeId: PermissionPolicyNodeIdConnect

  """
  The primary key(s) for `permissionPolicy` for the far side of the relationship.
  """
  deleteById: PermissionPolicyPermissionPolicyPkeyDelete

  """
  The primary key(s) for `permissionPolicy` for the far side of the relationship.
  """
  deleteByNodeId: PermissionPolicyNodeIdDelete

  """
  The primary key(s) and patch data for `permissionPolicy` for the far side of the relationship.
  """
  updateById: PermissionPolicyOnTemplatePermissionForTemplatePermissionPermissionPolicyIdFkeyUsingPermissionPolicyPkeyUpdate

  """
  The primary key(s) and patch data for `permissionPolicy` for the far side of the relationship.
  """
  updateByNodeId: TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionPolicyIdFkeyNodeIdUpdate

  """
  A `PermissionPolicyInput` object that will be created and connected to this object.
  """
  create: TemplatePermissionPermissionPolicyIdFkeyPermissionPolicyCreateInput
}

"""
Input for the nested mutation of `templatePermission` in the `PermissionPolicyInput` mutation.
"""
input TemplatePermissionPermissionPolicyIdFkeyInverseInput {
  """
  Flag indicating whether all other `templatePermission` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `templatePermission` for the far side of the relationship.
  """
  connectById: [TemplatePermissionTemplatePermissionPkeyConnect!]

  """
  The primary key(s) for `templatePermission` for the far side of the relationship.
  """
  connectByNodeId: [TemplatePermissionNodeIdConnect!]

  """
  The primary key(s) for `templatePermission` for the far side of the relationship.
  """
  deleteById: [TemplatePermissionTemplatePermissionPkeyDelete!]

  """
  The primary key(s) for `templatePermission` for the far side of the relationship.
  """
  deleteByNodeId: [TemplatePermissionNodeIdDelete!]

  """
  The primary key(s) and patch data for `templatePermission` for the far side of the relationship.
  """
  updateById: [TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionPolicyIdFkeyUsingTemplatePermissionPkeyUpdate!]

  """
  The primary key(s) and patch data for `templatePermission` for the far side of the relationship.
  """
  updateByNodeId: [PermissionPolicyOnTemplatePermissionForTemplatePermissionPermissionPolicyIdFkeyNodeIdUpdate!]

  """
  A `TemplatePermissionInput` object that will be created and connected to this object.
  """
  create: [TemplatePermissionPermissionPolicyIdFkeyTemplatePermissionCreateInput!]
}

"""The `permissionPolicy` to be created by this mutation."""
input TemplatePermissionPermissionPolicyIdFkeyPermissionPolicyCreateInput {
  id: Int
  name: String
  rules: JSON
  description: String
  type: PermissionPolicyType
  templatePermissionsUsingId: TemplatePermissionPermissionPolicyIdFkeyInverseInput
}

"""The `templatePermission` to be created by this mutation."""
input TemplatePermissionPermissionPolicyIdFkeyTemplatePermissionCreateInput {
  id: Int
  permissionJoinId: Int
  templateId: Int
  templateSectionId: Int
  restrictions: JSON
  permissionJoinToPermissionJoinId: TemplatePermissionPermissionJoinIdFkeyInput
  templateToTemplateId: TemplatePermissionTemplateIdFkeyInput
  templateSectionToTemplateSectionId: TemplatePermissionTemplateSectionIdFkeyInput
  permissionPolicyToPermissionPolicyId: TemplatePermissionPermissionPolicyIdFkeyInput
}

"""A connection to a list of `TemplatePermission` values."""
type TemplatePermissionsConnection {
  """A list of `TemplatePermission` objects."""
  nodes: [TemplatePermission]!

  """
  A list of edges which contains the `TemplatePermission` and cursor to aid in pagination.
  """
  edges: [TemplatePermissionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TemplatePermission` you could get from the connection.
  """
  totalCount: Int!
}

"""A `TemplatePermission` edge in the connection."""
type TemplatePermissionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TemplatePermission` at the end of the edge."""
  node: TemplatePermission
}

"""Methods to use when ordering `TemplatePermission`."""
enum TemplatePermissionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PERMISSION_JOIN_ID_ASC
  PERMISSION_JOIN_ID_DESC
  TEMPLATE_ID_ASC
  TEMPLATE_ID_DESC
  TEMPLATE_SECTION_ID_ASC
  TEMPLATE_SECTION_ID_DESC
  PERMISSION_POLICY_ID_ASC
  PERMISSION_POLICY_ID_DESC
  RESTRICTIONS_ASC
  RESTRICTIONS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Input for the nested mutation of `template` in the `TemplatePermissionInput` mutation.
"""
input TemplatePermissionTemplateIdFkeyInput {
  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  connectById: TemplateTemplatePkeyConnect

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  connectByNodeId: TemplateNodeIdConnect

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  deleteById: TemplateTemplatePkeyDelete

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  deleteByNodeId: TemplateNodeIdDelete

  """
  The primary key(s) and patch data for `template` for the far side of the relationship.
  """
  updateById: TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePkeyUpdate

  """
  The primary key(s) and patch data for `template` for the far side of the relationship.
  """
  updateByNodeId: TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate

  """
  A `TemplateInput` object that will be created and connected to this object.
  """
  create: TemplatePermissionTemplateIdFkeyTemplateCreateInput
}

"""
Input for the nested mutation of `templatePermission` in the `TemplateInput` mutation.
"""
input TemplatePermissionTemplateIdFkeyInverseInput {
  """
  Flag indicating whether all other `templatePermission` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `templatePermission` for the far side of the relationship.
  """
  connectById: [TemplatePermissionTemplatePermissionPkeyConnect!]

  """
  The primary key(s) for `templatePermission` for the far side of the relationship.
  """
  connectByNodeId: [TemplatePermissionNodeIdConnect!]

  """
  The primary key(s) for `templatePermission` for the far side of the relationship.
  """
  deleteById: [TemplatePermissionTemplatePermissionPkeyDelete!]

  """
  The primary key(s) for `templatePermission` for the far side of the relationship.
  """
  deleteByNodeId: [TemplatePermissionNodeIdDelete!]

  """
  The primary key(s) and patch data for `templatePermission` for the far side of the relationship.
  """
  updateById: [TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePermissionPkeyUpdate!]

  """
  The primary key(s) and patch data for `templatePermission` for the far side of the relationship.
  """
  updateByNodeId: [TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate!]

  """
  A `TemplatePermissionInput` object that will be created and connected to this object.
  """
  create: [TemplatePermissionTemplateIdFkeyTemplatePermissionCreateInput!]
}

"""The `template` to be created by this mutation."""
input TemplatePermissionTemplateIdFkeyTemplateCreateInput {
  id: Int
  versionId: Int
  templateName: String
  code: String!
  status: TemplateStatus
  templateVersionToVersionId: TemplateVersionIdFkeyInput
  templateStagesUsingId: TemplateStageTamplateIdFkeyInverseInput
  templateSectionsUsingId: TemplateSectionTemplateIdFkeyInverseInput
  templatePermissionsUsingId: TemplatePermissionTemplateIdFkeyInverseInput
  applicationsUsingId: ApplicationTemplateIdFkeyInverseInput
  templateActionsUsingId: TemplateActionTemplateIdFkeyInverseInput
}

"""The `templatePermission` to be created by this mutation."""
input TemplatePermissionTemplateIdFkeyTemplatePermissionCreateInput {
  id: Int
  permissionJoinId: Int
  templateSectionId: Int
  permissionPolicyId: Int
  restrictions: JSON
  permissionJoinToPermissionJoinId: TemplatePermissionPermissionJoinIdFkeyInput
  templateToTemplateId: TemplatePermissionTemplateIdFkeyInput
  templateSectionToTemplateSectionId: TemplatePermissionTemplateSectionIdFkeyInput
  permissionPolicyToPermissionPolicyId: TemplatePermissionPermissionPolicyIdFkeyInput
}

"""The fields on `templatePermission` to look up the row to connect."""
input TemplatePermissionTemplatePermissionPkeyConnect {
  id: Int!
}

"""The fields on `templatePermission` to look up the row to delete."""
input TemplatePermissionTemplatePermissionPkeyDelete {
  id: Int!
}

"""
Input for the nested mutation of `templateSection` in the `TemplatePermissionInput` mutation.
"""
input TemplatePermissionTemplateSectionIdFkeyInput {
  """
  The primary key(s) for `templateSection` for the far side of the relationship.
  """
  connectById: TemplateSectionTemplateSectionPkeyConnect

  """
  The primary key(s) for `templateSection` for the far side of the relationship.
  """
  connectByNodeId: TemplateSectionNodeIdConnect

  """
  The primary key(s) for `templateSection` for the far side of the relationship.
  """
  deleteById: TemplateSectionTemplateSectionPkeyDelete

  """
  The primary key(s) for `templateSection` for the far side of the relationship.
  """
  deleteByNodeId: TemplateSectionNodeIdDelete

  """
  The primary key(s) and patch data for `templateSection` for the far side of the relationship.
  """
  updateById: TemplateSectionOnTemplatePermissionForTemplatePermissionTemplateSectionIdFkeyUsingTemplateSectionPkeyUpdate

  """
  The primary key(s) and patch data for `templateSection` for the far side of the relationship.
  """
  updateByNodeId: TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateSectionIdFkeyNodeIdUpdate

  """
  A `TemplateSectionInput` object that will be created and connected to this object.
  """
  create: TemplatePermissionTemplateSectionIdFkeyTemplateSectionCreateInput
}

"""
Input for the nested mutation of `templatePermission` in the `TemplateSectionInput` mutation.
"""
input TemplatePermissionTemplateSectionIdFkeyInverseInput {
  """
  Flag indicating whether all other `templatePermission` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `templatePermission` for the far side of the relationship.
  """
  connectById: [TemplatePermissionTemplatePermissionPkeyConnect!]

  """
  The primary key(s) for `templatePermission` for the far side of the relationship.
  """
  connectByNodeId: [TemplatePermissionNodeIdConnect!]

  """
  The primary key(s) for `templatePermission` for the far side of the relationship.
  """
  deleteById: [TemplatePermissionTemplatePermissionPkeyDelete!]

  """
  The primary key(s) for `templatePermission` for the far side of the relationship.
  """
  deleteByNodeId: [TemplatePermissionNodeIdDelete!]

  """
  The primary key(s) and patch data for `templatePermission` for the far side of the relationship.
  """
  updateById: [TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateSectionIdFkeyUsingTemplatePermissionPkeyUpdate!]

  """
  The primary key(s) and patch data for `templatePermission` for the far side of the relationship.
  """
  updateByNodeId: [TemplateSectionOnTemplatePermissionForTemplatePermissionTemplateSectionIdFkeyNodeIdUpdate!]

  """
  A `TemplatePermissionInput` object that will be created and connected to this object.
  """
  create: [TemplatePermissionTemplateSectionIdFkeyTemplatePermissionCreateInput!]
}

"""The `templatePermission` to be created by this mutation."""
input TemplatePermissionTemplateSectionIdFkeyTemplatePermissionCreateInput {
  id: Int
  permissionJoinId: Int
  templateId: Int
  permissionPolicyId: Int
  restrictions: JSON
  permissionJoinToPermissionJoinId: TemplatePermissionPermissionJoinIdFkeyInput
  templateToTemplateId: TemplatePermissionTemplateIdFkeyInput
  templateSectionToTemplateSectionId: TemplatePermissionTemplateSectionIdFkeyInput
  permissionPolicyToPermissionPolicyId: TemplatePermissionPermissionPolicyIdFkeyInput
}

"""The `templateSection` to be created by this mutation."""
input TemplatePermissionTemplateSectionIdFkeyTemplateSectionCreateInput {
  id: Int
  templateId: Int
  title: String
  code: String
  templateToTemplateId: TemplateSectionTemplateIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionTemplateSectionIdFkeyInverseInput
  templateElementsUsingId: TemplateElementSectionIdFkeyInverseInput
  applicationSectionsUsingId: ApplicationSectionTemplateSectionIdFkeyInverseInput
}

type TemplateReviewStage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  templateStageId: Int
  permissionJoinId: Int
  nextReviewStageId: Int
  name: String

  """
  Reads a single `TemplateStage` that is related to this `TemplateReviewStage`.
  """
  templateStageByTemplateStageId: TemplateStage

  """
  Reads a single `PermissionJoin` that is related to this `TemplateReviewStage`.
  """
  permissionJoinByPermissionJoinId: PermissionJoin

  """
  Reads a single `TemplateReviewStage` that is related to this `TemplateReviewStage`.
  """
  templateReviewStageByNextReviewStageId: TemplateReviewStage

  """Reads and enables pagination through a set of `TemplateReviewStage`."""
  templateReviewStagesByNextReviewStageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplateReviewStage`."""
    orderBy: [TemplateReviewStagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplateReviewStageCondition
  ): TemplateReviewStagesConnection!
}

"""
A condition to be used against `TemplateReviewStage` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input TemplateReviewStageCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `templateStageId` field."""
  templateStageId: Int

  """Checks for equality with the object’s `permissionJoinId` field."""
  permissionJoinId: Int

  """Checks for equality with the object’s `nextReviewStageId` field."""
  nextReviewStageId: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `TemplateReviewStage`"""
input TemplateReviewStageInput {
  id: Int
  templateStageId: Int
  permissionJoinId: Int
  nextReviewStageId: Int
  name: String
  templateStageToTemplateStageId: TemplateReviewStageTemplateStageIdFkeyInput
  permissionJoinToPermissionJoinId: TemplateReviewStagePermissionJoinIdFkeyInput
  templateReviewStageToNextReviewStageId: TemplateReviewStageNextReviewStageIdFkeyInput
}

"""
Input for the nested mutation of `templateReviewStage` in the `TemplateReviewStageInput` mutation.
"""
input TemplateReviewStageNextReviewStageIdFkeyInput {
  """
  The primary key(s) for `templateReviewStage` for the far side of the relationship.
  """
  connectById: TemplateReviewStageTemplateReviewStagePkeyConnect

  """
  The primary key(s) for `templateReviewStage` for the far side of the relationship.
  """
  connectByNodeId: TemplateReviewStageNodeIdConnect

  """
  The primary key(s) for `templateReviewStage` for the far side of the relationship.
  """
  deleteById: TemplateReviewStageTemplateReviewStagePkeyDelete

  """
  The primary key(s) for `templateReviewStage` for the far side of the relationship.
  """
  deleteByNodeId: TemplateReviewStageNodeIdDelete

  """
  The primary key(s) and patch data for `templateReviewStage` for the far side of the relationship.
  """
  updateById: TemplateReviewStageOnTemplateReviewStageForTemplateReviewStageNextReviewStageIdFkeyUsingTemplateReviewStagePkeyUpdate

  """
  The primary key(s) and patch data for `templateReviewStage` for the far side of the relationship.
  """
  updateByNodeId: TemplateReviewStageOnTemplateReviewStageForTemplateReviewStageNextReviewStageIdFkeyNodeIdUpdate

  """
  A `TemplateReviewStageInput` object that will be created and connected to this object.
  """
  create: TemplateReviewStageNextReviewStageIdFkeyTemplateReviewStageCreateInput
}

"""The `templateReviewStage` to be created by this mutation."""
input TemplateReviewStageNextReviewStageIdFkeyTemplateReviewStageCreateInput {
  id: Int
  templateStageId: Int
  permissionJoinId: Int
  name: String
  templateStageToTemplateStageId: TemplateReviewStageTemplateStageIdFkeyInput
  permissionJoinToPermissionJoinId: TemplateReviewStagePermissionJoinIdFkeyInput
  templateReviewStageToNextReviewStageId: TemplateReviewStageNextReviewStageIdFkeyInput
}

"""The globally unique `ID` look up for the row to connect."""
input TemplateReviewStageNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `templateReviewStage` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input TemplateReviewStageNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `templateReviewStage` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateReviewStageOnTemplateReviewStageForTemplateReviewStageNextReviewStageIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `templateReviewStage` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `templateReviewStage` being updated.
  """
  templateReviewStagePatch: TemplateReviewStagePatch!
}

"""The fields on `templateReviewStage` to look up the row to update."""
input TemplateReviewStageOnTemplateReviewStageForTemplateReviewStageNextReviewStageIdFkeyUsingTemplateReviewStagePkeyUpdate {
  """
  An object where the defined keys will be set on the `templateReviewStage` being updated.
  """
  templateReviewStagePatch: updateTemplateReviewStageOnTemplateReviewStageForTemplateReviewStageNextReviewStageIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateReviewStageOnTemplateReviewStageForTemplateReviewStagePermissionJoinIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `permissionJoin` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `permissionJoin` being updated.
  """
  permissionJoinPatch: PermissionJoinPatch!
}

"""The fields on `templateReviewStage` to look up the row to update."""
input TemplateReviewStageOnTemplateReviewStageForTemplateReviewStagePermissionJoinIdFkeyUsingTemplateReviewStagePkeyUpdate {
  """
  An object where the defined keys will be set on the `templateReviewStage` being updated.
  """
  templateReviewStagePatch: updateTemplateReviewStageOnTemplateReviewStageForTemplateReviewStagePermissionJoinIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateReviewStageOnTemplateReviewStageForTemplateReviewStageTemplateStageIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `templateStage` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `templateStage` being updated.
  """
  templateStagePatch: TemplateStagePatch!
}

"""The fields on `templateReviewStage` to look up the row to update."""
input TemplateReviewStageOnTemplateReviewStageForTemplateReviewStageTemplateStageIdFkeyUsingTemplateReviewStagePkeyUpdate {
  """
  An object where the defined keys will be set on the `templateReviewStage` being updated.
  """
  templateReviewStagePatch: updateTemplateReviewStageOnTemplateReviewStageForTemplateReviewStageTemplateStageIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `TemplateReviewStage`. Fields that are set will be updated.
"""
input TemplateReviewStagePatch {
  id: Int
  templateStageId: Int
  permissionJoinId: Int
  nextReviewStageId: Int
  name: String
  templateStageToTemplateStageId: TemplateReviewStageTemplateStageIdFkeyInput
  permissionJoinToPermissionJoinId: TemplateReviewStagePermissionJoinIdFkeyInput
  templateReviewStageToNextReviewStageId: TemplateReviewStageNextReviewStageIdFkeyInput
}

"""
Input for the nested mutation of `permissionJoin` in the `TemplateReviewStageInput` mutation.
"""
input TemplateReviewStagePermissionJoinIdFkeyInput {
  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  connectById: PermissionJoinPermissionJoinPkeyConnect

  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  connectByNodeId: PermissionJoinNodeIdConnect

  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  deleteById: PermissionJoinPermissionJoinPkeyDelete

  """
  The primary key(s) for `permissionJoin` for the far side of the relationship.
  """
  deleteByNodeId: PermissionJoinNodeIdDelete

  """
  The primary key(s) and patch data for `permissionJoin` for the far side of the relationship.
  """
  updateById: PermissionJoinOnTemplateReviewStageForTemplateReviewStagePermissionJoinIdFkeyUsingPermissionJoinPkeyUpdate

  """
  The primary key(s) and patch data for `permissionJoin` for the far side of the relationship.
  """
  updateByNodeId: TemplateReviewStageOnTemplateReviewStageForTemplateReviewStagePermissionJoinIdFkeyNodeIdUpdate

  """
  A `PermissionJoinInput` object that will be created and connected to this object.
  """
  create: TemplateReviewStagePermissionJoinIdFkeyPermissionJoinCreateInput
}

"""
Input for the nested mutation of `templateReviewStage` in the `PermissionJoinInput` mutation.
"""
input TemplateReviewStagePermissionJoinIdFkeyInverseInput {
  """
  Flag indicating whether all other `templateReviewStage` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `templateReviewStage` for the far side of the relationship.
  """
  connectById: [TemplateReviewStageTemplateReviewStagePkeyConnect!]

  """
  The primary key(s) for `templateReviewStage` for the far side of the relationship.
  """
  connectByNodeId: [TemplateReviewStageNodeIdConnect!]

  """
  The primary key(s) for `templateReviewStage` for the far side of the relationship.
  """
  deleteById: [TemplateReviewStageTemplateReviewStagePkeyDelete!]

  """
  The primary key(s) for `templateReviewStage` for the far side of the relationship.
  """
  deleteByNodeId: [TemplateReviewStageNodeIdDelete!]

  """
  The primary key(s) and patch data for `templateReviewStage` for the far side of the relationship.
  """
  updateById: [TemplateReviewStageOnTemplateReviewStageForTemplateReviewStagePermissionJoinIdFkeyUsingTemplateReviewStagePkeyUpdate!]

  """
  The primary key(s) and patch data for `templateReviewStage` for the far side of the relationship.
  """
  updateByNodeId: [PermissionJoinOnTemplateReviewStageForTemplateReviewStagePermissionJoinIdFkeyNodeIdUpdate!]

  """
  A `TemplateReviewStageInput` object that will be created and connected to this object.
  """
  create: [TemplateReviewStagePermissionJoinIdFkeyTemplateReviewStageCreateInput!]
}

"""The `permissionJoin` to be created by this mutation."""
input TemplateReviewStagePermissionJoinIdFkeyPermissionJoinCreateInput {
  id: Int
  userId: Int
  userOrganisationId: Int
  permissionNameId: Int
  userToUserId: PermissionJoinUserIdFkeyInput
  userOrganisationToUserOrganisationId: PermissionJoinUserOrganisationIdFkeyInput
  permissionNameToPermissionNameId: PermissionJoinPermissionNameIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionPermissionJoinIdFkeyInverseInput
  templateReviewStagesUsingId: TemplateReviewStagePermissionJoinIdFkeyInverseInput
}

"""The `templateReviewStage` to be created by this mutation."""
input TemplateReviewStagePermissionJoinIdFkeyTemplateReviewStageCreateInput {
  id: Int
  templateStageId: Int
  nextReviewStageId: Int
  name: String
  templateStageToTemplateStageId: TemplateReviewStageTemplateStageIdFkeyInput
  permissionJoinToPermissionJoinId: TemplateReviewStagePermissionJoinIdFkeyInput
  templateReviewStageToNextReviewStageId: TemplateReviewStageNextReviewStageIdFkeyInput
}

"""A connection to a list of `TemplateReviewStage` values."""
type TemplateReviewStagesConnection {
  """A list of `TemplateReviewStage` objects."""
  nodes: [TemplateReviewStage]!

  """
  A list of edges which contains the `TemplateReviewStage` and cursor to aid in pagination.
  """
  edges: [TemplateReviewStagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TemplateReviewStage` you could get from the connection.
  """
  totalCount: Int!
}

"""A `TemplateReviewStage` edge in the connection."""
type TemplateReviewStagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TemplateReviewStage` at the end of the edge."""
  node: TemplateReviewStage
}

"""Methods to use when ordering `TemplateReviewStage`."""
enum TemplateReviewStagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TEMPLATE_STAGE_ID_ASC
  TEMPLATE_STAGE_ID_DESC
  PERMISSION_JOIN_ID_ASC
  PERMISSION_JOIN_ID_DESC
  NEXT_REVIEW_STAGE_ID_ASC
  NEXT_REVIEW_STAGE_ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The fields on `templateReviewStage` to look up the row to connect."""
input TemplateReviewStageTemplateReviewStagePkeyConnect {
  id: Int!
}

"""The fields on `templateReviewStage` to look up the row to delete."""
input TemplateReviewStageTemplateReviewStagePkeyDelete {
  id: Int!
}

"""
Input for the nested mutation of `templateStage` in the `TemplateReviewStageInput` mutation.
"""
input TemplateReviewStageTemplateStageIdFkeyInput {
  """
  The primary key(s) for `templateStage` for the far side of the relationship.
  """
  connectById: TemplateStageTemplateStagePkeyConnect

  """
  The primary key(s) for `templateStage` for the far side of the relationship.
  """
  connectByNodeId: TemplateStageNodeIdConnect

  """
  The primary key(s) for `templateStage` for the far side of the relationship.
  """
  deleteById: TemplateStageTemplateStagePkeyDelete

  """
  The primary key(s) for `templateStage` for the far side of the relationship.
  """
  deleteByNodeId: TemplateStageNodeIdDelete

  """
  The primary key(s) and patch data for `templateStage` for the far side of the relationship.
  """
  updateById: TemplateStageOnTemplateReviewStageForTemplateReviewStageTemplateStageIdFkeyUsingTemplateStagePkeyUpdate

  """
  The primary key(s) and patch data for `templateStage` for the far side of the relationship.
  """
  updateByNodeId: TemplateReviewStageOnTemplateReviewStageForTemplateReviewStageTemplateStageIdFkeyNodeIdUpdate

  """
  A `TemplateStageInput` object that will be created and connected to this object.
  """
  create: TemplateReviewStageTemplateStageIdFkeyTemplateStageCreateInput
}

"""
Input for the nested mutation of `templateReviewStage` in the `TemplateStageInput` mutation.
"""
input TemplateReviewStageTemplateStageIdFkeyInverseInput {
  """
  Flag indicating whether all other `templateReviewStage` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `templateReviewStage` for the far side of the relationship.
  """
  connectById: [TemplateReviewStageTemplateReviewStagePkeyConnect!]

  """
  The primary key(s) for `templateReviewStage` for the far side of the relationship.
  """
  connectByNodeId: [TemplateReviewStageNodeIdConnect!]

  """
  The primary key(s) for `templateReviewStage` for the far side of the relationship.
  """
  deleteById: [TemplateReviewStageTemplateReviewStagePkeyDelete!]

  """
  The primary key(s) for `templateReviewStage` for the far side of the relationship.
  """
  deleteByNodeId: [TemplateReviewStageNodeIdDelete!]

  """
  The primary key(s) and patch data for `templateReviewStage` for the far side of the relationship.
  """
  updateById: [TemplateReviewStageOnTemplateReviewStageForTemplateReviewStageTemplateStageIdFkeyUsingTemplateReviewStagePkeyUpdate!]

  """
  The primary key(s) and patch data for `templateReviewStage` for the far side of the relationship.
  """
  updateByNodeId: [TemplateStageOnTemplateReviewStageForTemplateReviewStageTemplateStageIdFkeyNodeIdUpdate!]

  """
  A `TemplateReviewStageInput` object that will be created and connected to this object.
  """
  create: [TemplateReviewStageTemplateStageIdFkeyTemplateReviewStageCreateInput!]
}

"""The `templateReviewStage` to be created by this mutation."""
input TemplateReviewStageTemplateStageIdFkeyTemplateReviewStageCreateInput {
  id: Int
  permissionJoinId: Int
  nextReviewStageId: Int
  name: String
  templateStageToTemplateStageId: TemplateReviewStageTemplateStageIdFkeyInput
  permissionJoinToPermissionJoinId: TemplateReviewStagePermissionJoinIdFkeyInput
  templateReviewStageToNextReviewStageId: TemplateReviewStageNextReviewStageIdFkeyInput
}

"""The `templateStage` to be created by this mutation."""
input TemplateReviewStageTemplateStageIdFkeyTemplateStageCreateInput {
  id: Int
  tamplateId: Int
  templateToTamplateId: TemplateStageTamplateIdFkeyInput
  templateReviewStagesUsingId: TemplateReviewStageTemplateStageIdFkeyInverseInput
}

"""A connection to a list of `Template` values."""
type TemplatesConnection {
  """A list of `Template` objects."""
  nodes: [Template]!

  """
  A list of edges which contains the `Template` and cursor to aid in pagination.
  """
  edges: [TemplatesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Template` you could get from the connection."""
  totalCount: Int!
}

type TemplateSection implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  templateId: Int
  title: String
  code: String

  """Reads a single `Template` that is related to this `TemplateSection`."""
  templateByTemplateId: Template

  """Reads and enables pagination through a set of `TemplatePermission`."""
  templatePermissionsByTemplateSectionId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplatePermission`."""
    orderBy: [TemplatePermissionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplatePermissionCondition
  ): TemplatePermissionsConnection!

  """Reads and enables pagination through a set of `TemplateElement`."""
  templateElementsBySectionId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplateElement`."""
    orderBy: [TemplateElementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplateElementCondition
  ): TemplateElementsConnection!

  """Reads and enables pagination through a set of `ApplicationSection`."""
  applicationSectionsByTemplateSectionId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationSection`."""
    orderBy: [ApplicationSectionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationSectionCondition
  ): ApplicationSectionsConnection!
}

"""
A condition to be used against `TemplateSection` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TemplateSectionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `templateId` field."""
  templateId: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `code` field."""
  code: String
}

"""An input for mutations affecting `TemplateSection`"""
input TemplateSectionInput {
  id: Int
  templateId: Int
  title: String
  code: String
  templateToTemplateId: TemplateSectionTemplateIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionTemplateSectionIdFkeyInverseInput
  templateElementsUsingId: TemplateElementSectionIdFkeyInverseInput
  applicationSectionsUsingId: ApplicationSectionTemplateSectionIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input TemplateSectionNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `templateSection` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input TemplateSectionNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `templateSection` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateSectionOnApplicationSectionForApplicationSectionTemplateSectionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `applicationSection` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `applicationSection` being updated.
  """
  applicationSectionPatch: ApplicationSectionPatch!
}

"""The fields on `templateSection` to look up the row to update."""
input TemplateSectionOnApplicationSectionForApplicationSectionTemplateSectionIdFkeyUsingTemplateSectionPkeyUpdate {
  """
  An object where the defined keys will be set on the `templateSection` being updated.
  """
  templateSectionPatch: updateTemplateSectionOnApplicationSectionForApplicationSectionTemplateSectionIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `templateElement` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `templateElement` being updated.
  """
  templateElementPatch: TemplateElementPatch!
}

"""The fields on `templateSection` to look up the row to update."""
input TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateSectionPkeyUpdate {
  """
  An object where the defined keys will be set on the `templateSection` being updated.
  """
  templateSectionPatch: updateTemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateSectionOnTemplatePermissionForTemplatePermissionTemplateSectionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `templatePermission` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `templatePermission` being updated.
  """
  templatePermissionPatch: TemplatePermissionPatch!
}

"""The fields on `templateSection` to look up the row to update."""
input TemplateSectionOnTemplatePermissionForTemplatePermissionTemplateSectionIdFkeyUsingTemplateSectionPkeyUpdate {
  """
  An object where the defined keys will be set on the `templateSection` being updated.
  """
  templateSectionPatch: updateTemplateSectionOnTemplatePermissionForTemplatePermissionTemplateSectionIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `template` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `template` being updated.
  """
  templatePatch: TemplatePatch!
}

"""The fields on `templateSection` to look up the row to update."""
input TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateSectionPkeyUpdate {
  """
  An object where the defined keys will be set on the `templateSection` being updated.
  """
  templateSectionPatch: updateTemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `TemplateSection`. Fields that are set will be updated.
"""
input TemplateSectionPatch {
  id: Int
  templateId: Int
  title: String
  code: String
  templateToTemplateId: TemplateSectionTemplateIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionTemplateSectionIdFkeyInverseInput
  templateElementsUsingId: TemplateElementSectionIdFkeyInverseInput
  applicationSectionsUsingId: ApplicationSectionTemplateSectionIdFkeyInverseInput
}

"""A connection to a list of `TemplateSection` values."""
type TemplateSectionsConnection {
  """A list of `TemplateSection` objects."""
  nodes: [TemplateSection]!

  """
  A list of edges which contains the `TemplateSection` and cursor to aid in pagination.
  """
  edges: [TemplateSectionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TemplateSection` you could get from the connection.
  """
  totalCount: Int!
}

"""A `TemplateSection` edge in the connection."""
type TemplateSectionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TemplateSection` at the end of the edge."""
  node: TemplateSection
}

"""Methods to use when ordering `TemplateSection`."""
enum TemplateSectionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TEMPLATE_ID_ASC
  TEMPLATE_ID_DESC
  TITLE_ASC
  TITLE_DESC
  CODE_ASC
  CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Input for the nested mutation of `template` in the `TemplateSectionInput` mutation.
"""
input TemplateSectionTemplateIdFkeyInput {
  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  connectById: TemplateTemplatePkeyConnect

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  connectByNodeId: TemplateNodeIdConnect

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  deleteById: TemplateTemplatePkeyDelete

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  deleteByNodeId: TemplateNodeIdDelete

  """
  The primary key(s) and patch data for `template` for the far side of the relationship.
  """
  updateById: TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplatePkeyUpdate

  """
  The primary key(s) and patch data for `template` for the far side of the relationship.
  """
  updateByNodeId: TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate

  """
  A `TemplateInput` object that will be created and connected to this object.
  """
  create: TemplateSectionTemplateIdFkeyTemplateCreateInput
}

"""
Input for the nested mutation of `templateSection` in the `TemplateInput` mutation.
"""
input TemplateSectionTemplateIdFkeyInverseInput {
  """
  Flag indicating whether all other `templateSection` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `templateSection` for the far side of the relationship.
  """
  connectById: [TemplateSectionTemplateSectionPkeyConnect!]

  """
  The primary key(s) for `templateSection` for the far side of the relationship.
  """
  connectByNodeId: [TemplateSectionNodeIdConnect!]

  """
  The primary key(s) for `templateSection` for the far side of the relationship.
  """
  deleteById: [TemplateSectionTemplateSectionPkeyDelete!]

  """
  The primary key(s) for `templateSection` for the far side of the relationship.
  """
  deleteByNodeId: [TemplateSectionNodeIdDelete!]

  """
  The primary key(s) and patch data for `templateSection` for the far side of the relationship.
  """
  updateById: [TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateSectionPkeyUpdate!]

  """
  The primary key(s) and patch data for `templateSection` for the far side of the relationship.
  """
  updateByNodeId: [TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate!]

  """
  A `TemplateSectionInput` object that will be created and connected to this object.
  """
  create: [TemplateSectionTemplateIdFkeyTemplateSectionCreateInput!]
}

"""The `template` to be created by this mutation."""
input TemplateSectionTemplateIdFkeyTemplateCreateInput {
  id: Int
  versionId: Int
  templateName: String
  code: String!
  status: TemplateStatus
  templateVersionToVersionId: TemplateVersionIdFkeyInput
  templateStagesUsingId: TemplateStageTamplateIdFkeyInverseInput
  templateSectionsUsingId: TemplateSectionTemplateIdFkeyInverseInput
  templatePermissionsUsingId: TemplatePermissionTemplateIdFkeyInverseInput
  applicationsUsingId: ApplicationTemplateIdFkeyInverseInput
  templateActionsUsingId: TemplateActionTemplateIdFkeyInverseInput
}

"""The `templateSection` to be created by this mutation."""
input TemplateSectionTemplateIdFkeyTemplateSectionCreateInput {
  id: Int
  title: String
  code: String
  templateToTemplateId: TemplateSectionTemplateIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionTemplateSectionIdFkeyInverseInput
  templateElementsUsingId: TemplateElementSectionIdFkeyInverseInput
  applicationSectionsUsingId: ApplicationSectionTemplateSectionIdFkeyInverseInput
}

"""The fields on `templateSection` to look up the row to connect."""
input TemplateSectionTemplateSectionPkeyConnect {
  id: Int!
}

"""The fields on `templateSection` to look up the row to delete."""
input TemplateSectionTemplateSectionPkeyDelete {
  id: Int!
}

"""A `Template` edge in the connection."""
type TemplatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Template` at the end of the edge."""
  node: Template
}

"""Methods to use when ordering `Template`."""
enum TemplatesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  VERSION_ID_ASC
  VERSION_ID_DESC
  TEMPLATE_NAME_ASC
  TEMPLATE_NAME_DESC
  CODE_ASC
  CODE_DESC
  STATUS_ASC
  STATUS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type TemplateStage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  tamplateId: Int

  """Reads a single `Template` that is related to this `TemplateStage`."""
  templateByTamplateId: Template

  """Reads and enables pagination through a set of `TemplateReviewStage`."""
  templateReviewStagesByTemplateStageId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TemplateReviewStage`."""
    orderBy: [TemplateReviewStagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplateReviewStageCondition
  ): TemplateReviewStagesConnection!
}

"""
A condition to be used against `TemplateStage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TemplateStageCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `tamplateId` field."""
  tamplateId: Int
}

"""An input for mutations affecting `TemplateStage`"""
input TemplateStageInput {
  id: Int
  tamplateId: Int
  templateToTamplateId: TemplateStageTamplateIdFkeyInput
  templateReviewStagesUsingId: TemplateReviewStageTemplateStageIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input TemplateStageNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `templateStage` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input TemplateStageNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `templateStage` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateStageOnTemplateReviewStageForTemplateReviewStageTemplateStageIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `templateReviewStage` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `templateReviewStage` being updated.
  """
  templateReviewStagePatch: TemplateReviewStagePatch!
}

"""The fields on `templateStage` to look up the row to update."""
input TemplateStageOnTemplateReviewStageForTemplateReviewStageTemplateStageIdFkeyUsingTemplateStagePkeyUpdate {
  """
  An object where the defined keys will be set on the `templateStage` being updated.
  """
  templateStagePatch: updateTemplateStageOnTemplateReviewStageForTemplateReviewStageTemplateStageIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateStageOnTemplateStageForTemplateStageTamplateIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `template` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `template` being updated.
  """
  templatePatch: TemplatePatch!
}

"""The fields on `templateStage` to look up the row to update."""
input TemplateStageOnTemplateStageForTemplateStageTamplateIdFkeyUsingTemplateStagePkeyUpdate {
  """
  An object where the defined keys will be set on the `templateStage` being updated.
  """
  templateStagePatch: updateTemplateStageOnTemplateStageForTemplateStageTamplateIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `TemplateStage`. Fields that are set will be updated.
"""
input TemplateStagePatch {
  id: Int
  tamplateId: Int
  templateToTamplateId: TemplateStageTamplateIdFkeyInput
  templateReviewStagesUsingId: TemplateReviewStageTemplateStageIdFkeyInverseInput
}

"""A connection to a list of `TemplateStage` values."""
type TemplateStagesConnection {
  """A list of `TemplateStage` objects."""
  nodes: [TemplateStage]!

  """
  A list of edges which contains the `TemplateStage` and cursor to aid in pagination.
  """
  edges: [TemplateStagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TemplateStage` you could get from the connection."""
  totalCount: Int!
}

"""A `TemplateStage` edge in the connection."""
type TemplateStagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TemplateStage` at the end of the edge."""
  node: TemplateStage
}

"""Methods to use when ordering `TemplateStage`."""
enum TemplateStagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TAMPLATE_ID_ASC
  TAMPLATE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Input for the nested mutation of `template` in the `TemplateStageInput` mutation.
"""
input TemplateStageTamplateIdFkeyInput {
  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  connectById: TemplateTemplatePkeyConnect

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  connectByNodeId: TemplateNodeIdConnect

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  deleteById: TemplateTemplatePkeyDelete

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  deleteByNodeId: TemplateNodeIdDelete

  """
  The primary key(s) and patch data for `template` for the far side of the relationship.
  """
  updateById: TemplateOnTemplateStageForTemplateStageTamplateIdFkeyUsingTemplatePkeyUpdate

  """
  The primary key(s) and patch data for `template` for the far side of the relationship.
  """
  updateByNodeId: TemplateStageOnTemplateStageForTemplateStageTamplateIdFkeyNodeIdUpdate

  """
  A `TemplateInput` object that will be created and connected to this object.
  """
  create: TemplateStageTamplateIdFkeyTemplateCreateInput
}

"""
Input for the nested mutation of `templateStage` in the `TemplateInput` mutation.
"""
input TemplateStageTamplateIdFkeyInverseInput {
  """
  Flag indicating whether all other `templateStage` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `templateStage` for the far side of the relationship.
  """
  connectById: [TemplateStageTemplateStagePkeyConnect!]

  """
  The primary key(s) for `templateStage` for the far side of the relationship.
  """
  connectByNodeId: [TemplateStageNodeIdConnect!]

  """
  The primary key(s) for `templateStage` for the far side of the relationship.
  """
  deleteById: [TemplateStageTemplateStagePkeyDelete!]

  """
  The primary key(s) for `templateStage` for the far side of the relationship.
  """
  deleteByNodeId: [TemplateStageNodeIdDelete!]

  """
  The primary key(s) and patch data for `templateStage` for the far side of the relationship.
  """
  updateById: [TemplateStageOnTemplateStageForTemplateStageTamplateIdFkeyUsingTemplateStagePkeyUpdate!]

  """
  The primary key(s) and patch data for `templateStage` for the far side of the relationship.
  """
  updateByNodeId: [TemplateOnTemplateStageForTemplateStageTamplateIdFkeyNodeIdUpdate!]

  """
  A `TemplateStageInput` object that will be created and connected to this object.
  """
  create: [TemplateStageTamplateIdFkeyTemplateStageCreateInput!]
}

"""The `template` to be created by this mutation."""
input TemplateStageTamplateIdFkeyTemplateCreateInput {
  id: Int
  versionId: Int
  templateName: String
  code: String!
  status: TemplateStatus
  templateVersionToVersionId: TemplateVersionIdFkeyInput
  templateStagesUsingId: TemplateStageTamplateIdFkeyInverseInput
  templateSectionsUsingId: TemplateSectionTemplateIdFkeyInverseInput
  templatePermissionsUsingId: TemplatePermissionTemplateIdFkeyInverseInput
  applicationsUsingId: ApplicationTemplateIdFkeyInverseInput
  templateActionsUsingId: TemplateActionTemplateIdFkeyInverseInput
}

"""The `templateStage` to be created by this mutation."""
input TemplateStageTamplateIdFkeyTemplateStageCreateInput {
  id: Int
  templateToTamplateId: TemplateStageTamplateIdFkeyInput
  templateReviewStagesUsingId: TemplateReviewStageTemplateStageIdFkeyInverseInput
}

"""The fields on `templateStage` to look up the row to connect."""
input TemplateStageTemplateStagePkeyConnect {
  id: Int!
}

"""The fields on `templateStage` to look up the row to delete."""
input TemplateStageTemplateStagePkeyDelete {
  id: Int!
}

enum TemplateStatus {
  DRAFT
  AVAILABLE
  DISABLED
}

"""The fields on `template` to look up the row to connect."""
input TemplateTemplatePkeyConnect {
  id: Int!
}

"""The fields on `template` to look up the row to delete."""
input TemplateTemplatePkeyDelete {
  id: Int!
}

type TemplateVersion implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  number: Int
  timeCreated: Datetime
  isCurrent: Boolean

  """Reads and enables pagination through a set of `Template`."""
  templatesByVersionId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Template`."""
    orderBy: [TemplatesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TemplateCondition
  ): TemplatesConnection!
}

"""
A condition to be used against `TemplateVersion` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TemplateVersionCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `number` field."""
  number: Int

  """Checks for equality with the object’s `timeCreated` field."""
  timeCreated: Datetime

  """Checks for equality with the object’s `isCurrent` field."""
  isCurrent: Boolean
}

"""
Input for the nested mutation of `templateVersion` in the `TemplateInput` mutation.
"""
input TemplateVersionIdFkeyInput {
  """
  The primary key(s) for `templateVersion` for the far side of the relationship.
  """
  connectById: TemplateVersionTemplateVersionPkeyConnect

  """
  The primary key(s) for `templateVersion` for the far side of the relationship.
  """
  connectByNodeId: TemplateVersionNodeIdConnect

  """
  The primary key(s) for `templateVersion` for the far side of the relationship.
  """
  deleteById: TemplateVersionTemplateVersionPkeyDelete

  """
  The primary key(s) for `templateVersion` for the far side of the relationship.
  """
  deleteByNodeId: TemplateVersionNodeIdDelete

  """
  The primary key(s) and patch data for `templateVersion` for the far side of the relationship.
  """
  updateById: TemplateVersionOnTemplateForTemplateVersionIdFkeyUsingTemplateVersionPkeyUpdate

  """
  The primary key(s) and patch data for `templateVersion` for the far side of the relationship.
  """
  updateByNodeId: TemplateOnTemplateForTemplateVersionIdFkeyNodeIdUpdate

  """
  A `TemplateVersionInput` object that will be created and connected to this object.
  """
  create: TemplateVersionIdFkeyTemplateVersionCreateInput
}

"""
Input for the nested mutation of `template` in the `TemplateVersionInput` mutation.
"""
input TemplateVersionIdFkeyInverseInput {
  """
  Flag indicating whether all other `template` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  connectById: [TemplateTemplatePkeyConnect!]

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  connectByNodeId: [TemplateNodeIdConnect!]

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  deleteById: [TemplateTemplatePkeyDelete!]

  """
  The primary key(s) for `template` for the far side of the relationship.
  """
  deleteByNodeId: [TemplateNodeIdDelete!]

  """
  The primary key(s) and patch data for `template` for the far side of the relationship.
  """
  updateById: [TemplateOnTemplateForTemplateVersionIdFkeyUsingTemplatePkeyUpdate!]

  """
  The primary key(s) and patch data for `template` for the far side of the relationship.
  """
  updateByNodeId: [TemplateVersionOnTemplateForTemplateVersionIdFkeyNodeIdUpdate!]

  """
  A `TemplateInput` object that will be created and connected to this object.
  """
  create: [TemplateVersionIdFkeyTemplateCreateInput!]
}

"""The `template` to be created by this mutation."""
input TemplateVersionIdFkeyTemplateCreateInput {
  id: Int
  templateName: String
  code: String!
  status: TemplateStatus
  templateVersionToVersionId: TemplateVersionIdFkeyInput
  templateStagesUsingId: TemplateStageTamplateIdFkeyInverseInput
  templateSectionsUsingId: TemplateSectionTemplateIdFkeyInverseInput
  templatePermissionsUsingId: TemplatePermissionTemplateIdFkeyInverseInput
  applicationsUsingId: ApplicationTemplateIdFkeyInverseInput
  templateActionsUsingId: TemplateActionTemplateIdFkeyInverseInput
}

"""The `templateVersion` to be created by this mutation."""
input TemplateVersionIdFkeyTemplateVersionCreateInput {
  id: Int
  number: Int
  timeCreated: Datetime
  isCurrent: Boolean
  templatesUsingId: TemplateVersionIdFkeyInverseInput
}

"""An input for mutations affecting `TemplateVersion`"""
input TemplateVersionInput {
  id: Int
  number: Int
  timeCreated: Datetime
  isCurrent: Boolean
  templatesUsingId: TemplateVersionIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input TemplateVersionNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `templateVersion` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input TemplateVersionNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `templateVersion` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input TemplateVersionOnTemplateForTemplateVersionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `template` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `template` being updated.
  """
  templatePatch: TemplatePatch!
}

"""The fields on `templateVersion` to look up the row to update."""
input TemplateVersionOnTemplateForTemplateVersionIdFkeyUsingTemplateVersionPkeyUpdate {
  """
  An object where the defined keys will be set on the `templateVersion` being updated.
  """
  templateVersionPatch: updateTemplateVersionOnTemplateForTemplateVersionIdFkeyPatch!
  id: Int!
}

"""
Represents an update to a `TemplateVersion`. Fields that are set will be updated.
"""
input TemplateVersionPatch {
  id: Int
  number: Int
  timeCreated: Datetime
  isCurrent: Boolean
  templatesUsingId: TemplateVersionIdFkeyInverseInput
}

"""A connection to a list of `TemplateVersion` values."""
type TemplateVersionsConnection {
  """A list of `TemplateVersion` objects."""
  nodes: [TemplateVersion]!

  """
  A list of edges which contains the `TemplateVersion` and cursor to aid in pagination.
  """
  edges: [TemplateVersionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TemplateVersion` you could get from the connection.
  """
  totalCount: Int!
}

"""A `TemplateVersion` edge in the connection."""
type TemplateVersionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TemplateVersion` at the end of the edge."""
  node: TemplateVersion
}

"""Methods to use when ordering `TemplateVersion`."""
enum TemplateVersionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NUMBER_ASC
  NUMBER_DESC
  TIME_CREATED_ASC
  TIME_CREATED_DESC
  IS_CURRENT_ASC
  IS_CURRENT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The fields on `templateVersion` to look up the row to connect."""
input TemplateVersionTemplateVersionPkeyConnect {
  id: Int!
}

"""The fields on `templateVersion` to look up the row to delete."""
input TemplateVersionTemplateVersionPkeyDelete {
  id: Int!
}

enum Trigger {
  ON_APPLICATION_CREATE
  ON_APPLICATION_SUBMIT
  ON_APPLICATION_SAVE
  ON_APPLICATION_WITHDRAWN
  ON_REVIEW_START
  ON_REVIEW_EDIT_COMMENT
  ON_REVIEW_SAVE
  ON_REVIEW_ASSIGN
  ON_APPROVAL_SUBMIT
  ON_SCHEDULE_TIME
}

type TriggerQueue implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  triggerType: Trigger
  table: String
  recordId: Int
  timestamp: Datetime
  payload: JSON
  status: TriggerQueueStatus
  log: JSON

  """Reads and enables pagination through a set of `ActionQueue`."""
  actionQueuesByTriggerEvent(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ActionQueue`."""
    orderBy: [ActionQueuesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionQueueCondition
  ): ActionQueuesConnection!
}

"""
A condition to be used against `TriggerQueue` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TriggerQueueCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `triggerType` field."""
  triggerType: Trigger

  """Checks for equality with the object’s `table` field."""
  table: String

  """Checks for equality with the object’s `recordId` field."""
  recordId: Int

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime

  """Checks for equality with the object’s `payload` field."""
  payload: JSON

  """Checks for equality with the object’s `status` field."""
  status: TriggerQueueStatus

  """Checks for equality with the object’s `log` field."""
  log: JSON
}

"""An input for mutations affecting `TriggerQueue`"""
input TriggerQueueInput {
  id: Int
  triggerType: Trigger
  table: String
  recordId: Int
  timestamp: Datetime
  payload: JSON
  status: TriggerQueueStatus
  log: JSON
  actionQueuesUsingId: ActionQueueTriggerEventFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input TriggerQueueNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `triggerQueue` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input TriggerQueueNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `triggerQueue` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `actionQueue` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `actionQueue` being updated.
  """
  actionQueuePatch: ActionQueuePatch!
}

"""The fields on `triggerQueue` to look up the row to update."""
input TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyUsingTriggerQueuePkeyUpdate {
  """
  An object where the defined keys will be set on the `triggerQueue` being updated.
  """
  triggerQueuePatch: updateTriggerQueueOnActionQueueForActionQueueTriggerEventFkeyPatch!
  id: Int!
}

"""
Represents an update to a `TriggerQueue`. Fields that are set will be updated.
"""
input TriggerQueuePatch {
  id: Int
  triggerType: Trigger
  table: String
  recordId: Int
  timestamp: Datetime
  payload: JSON
  status: TriggerQueueStatus
  log: JSON
  actionQueuesUsingId: ActionQueueTriggerEventFkeyInverseInput
}

"""A connection to a list of `TriggerQueue` values."""
type TriggerQueuesConnection {
  """A list of `TriggerQueue` objects."""
  nodes: [TriggerQueue]!

  """
  A list of edges which contains the `TriggerQueue` and cursor to aid in pagination.
  """
  edges: [TriggerQueuesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TriggerQueue` you could get from the connection."""
  totalCount: Int!
}

"""A `TriggerQueue` edge in the connection."""
type TriggerQueuesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TriggerQueue` at the end of the edge."""
  node: TriggerQueue
}

"""Methods to use when ordering `TriggerQueue`."""
enum TriggerQueuesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  TRIGGER_TYPE_ASC
  TRIGGER_TYPE_DESC
  TABLE_ASC
  TABLE_DESC
  RECORD_ID_ASC
  RECORD_ID_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  PAYLOAD_ASC
  PAYLOAD_DESC
  STATUS_ASC
  STATUS_DESC
  LOG_ASC
  LOG_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

enum TriggerQueueStatus {
  TRIGGERED
  ACTION_DISPATCHED
  ERROR
}

"""The fields on `triggerQueue` to look up the row to connect."""
input TriggerQueueTriggerQueuePkeyConnect {
  id: Int!
}

"""The fields on `triggerQueue` to look up the row to delete."""
input TriggerQueueTriggerQueuePkeyDelete {
  id: Int!
}

"""All input for the `updateActionPluginByCode` mutation."""
input UpdateActionPluginByCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ActionPlugin` being updated.
  """
  actionPluginPatch: ActionPluginPatch!
  code: String!
}

"""All input for the `updateActionPlugin` mutation."""
input UpdateActionPluginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ActionPlugin` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ActionPlugin` being updated.
  """
  actionPluginPatch: ActionPluginPatch!
}

"""The output of our update `ActionPlugin` mutation."""
type UpdateActionPluginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActionPlugin` that was updated by this mutation."""
  actionPlugin: ActionPlugin

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ActionPlugin`. May be used by Relay 1."""
  actionPluginEdge(
    """The method to use when ordering `ActionPlugin`."""
    orderBy: [ActionPluginsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActionPluginsEdge
}

"""All input for the `updateActionQueueById` mutation."""
input UpdateActionQueueByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ActionQueue` being updated.
  """
  actionQueuePatch: ActionQueuePatch!
  id: Int!
}

"""All input for the `updateActionQueue` mutation."""
input UpdateActionQueueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ActionQueue` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ActionQueue` being updated.
  """
  actionQueuePatch: ActionQueuePatch!
}

"""
An object where the defined keys will be set on the `actionQueue` being updated.
"""
input updateActionQueueOnActionQueueForActionQueueTriggerEventFkeyPatch {
  id: Int
  actionCode: String
  parameters: JSON
  status: ActionQueueStatus
  timeQueued: Datetime
  timeExecuted: Datetime
  errorLog: String
  triggerQueueToTriggerEvent: ActionQueueTriggerEventFkeyInput
}

"""The output of our update `ActionQueue` mutation."""
type UpdateActionQueuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ActionQueue` that was updated by this mutation."""
  actionQueue: ActionQueue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TriggerQueue` that is related to this `ActionQueue`."""
  triggerQueueByTriggerEvent: TriggerQueue

  """An edge for our `ActionQueue`. May be used by Relay 1."""
  actionQueueEdge(
    """The method to use when ordering `ActionQueue`."""
    orderBy: [ActionQueuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActionQueuesEdge
}

"""All input for the `updateApplicationById` mutation."""
input UpdateApplicationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!
  id: Int!
}

"""All input for the `updateApplication` mutation."""
input UpdateApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Application` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!
}

"""
An object where the defined keys will be set on the `application` being updated.
"""
input updateApplicationOnApplicationForApplicationTemplateIdFkeyPatch {
  id: Int
  uniqueIdentifier: String
  userId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger
  templateToTemplateId: ApplicationTemplateIdFkeyInput
  userToUserId: ApplicationUserIdFkeyInput
  applicationSectionsUsingId: ApplicationSectionApplicationIdFkeyInverseInput
  applicationStageHistoriesUsingId: ApplicationStageHistoryApplicationIdFkeyInverseInput
  applicationResponsesUsingId: ApplicationResponseApplicationIdFkeyInverseInput
  reviewsUsingId: ReviewApplicationIdFkeyInverseInput
  filesUsingId: FileApplicationIdFkeyInverseInput
  notificationsUsingId: NotificationApplicationIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `application` being updated.
"""
input updateApplicationOnApplicationForApplicationUserIdFkeyPatch {
  id: Int
  uniqueIdentifier: String
  templateId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger
  templateToTemplateId: ApplicationTemplateIdFkeyInput
  userToUserId: ApplicationUserIdFkeyInput
  applicationSectionsUsingId: ApplicationSectionApplicationIdFkeyInverseInput
  applicationStageHistoriesUsingId: ApplicationStageHistoryApplicationIdFkeyInverseInput
  applicationResponsesUsingId: ApplicationResponseApplicationIdFkeyInverseInput
  reviewsUsingId: ReviewApplicationIdFkeyInverseInput
  filesUsingId: FileApplicationIdFkeyInverseInput
  notificationsUsingId: NotificationApplicationIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `application` being updated.
"""
input updateApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch {
  id: Int
  uniqueIdentifier: String
  templateId: Int
  userId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger
  templateToTemplateId: ApplicationTemplateIdFkeyInput
  userToUserId: ApplicationUserIdFkeyInput
  applicationSectionsUsingId: ApplicationSectionApplicationIdFkeyInverseInput
  applicationStageHistoriesUsingId: ApplicationStageHistoryApplicationIdFkeyInverseInput
  applicationResponsesUsingId: ApplicationResponseApplicationIdFkeyInverseInput
  reviewsUsingId: ReviewApplicationIdFkeyInverseInput
  filesUsingId: FileApplicationIdFkeyInverseInput
  notificationsUsingId: NotificationApplicationIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `application` being updated.
"""
input updateApplicationOnApplicationSectionForApplicationSectionApplicationIdFkeyPatch {
  id: Int
  uniqueIdentifier: String
  templateId: Int
  userId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger
  templateToTemplateId: ApplicationTemplateIdFkeyInput
  userToUserId: ApplicationUserIdFkeyInput
  applicationSectionsUsingId: ApplicationSectionApplicationIdFkeyInverseInput
  applicationStageHistoriesUsingId: ApplicationStageHistoryApplicationIdFkeyInverseInput
  applicationResponsesUsingId: ApplicationResponseApplicationIdFkeyInverseInput
  reviewsUsingId: ReviewApplicationIdFkeyInverseInput
  filesUsingId: FileApplicationIdFkeyInverseInput
  notificationsUsingId: NotificationApplicationIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `application` being updated.
"""
input updateApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch {
  id: Int
  uniqueIdentifier: String
  templateId: Int
  userId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger
  templateToTemplateId: ApplicationTemplateIdFkeyInput
  userToUserId: ApplicationUserIdFkeyInput
  applicationSectionsUsingId: ApplicationSectionApplicationIdFkeyInverseInput
  applicationStageHistoriesUsingId: ApplicationStageHistoryApplicationIdFkeyInverseInput
  applicationResponsesUsingId: ApplicationResponseApplicationIdFkeyInverseInput
  reviewsUsingId: ReviewApplicationIdFkeyInverseInput
  filesUsingId: FileApplicationIdFkeyInverseInput
  notificationsUsingId: NotificationApplicationIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `application` being updated.
"""
input updateApplicationOnFileForFileApplicationIdFkeyPatch {
  id: Int
  uniqueIdentifier: String
  templateId: Int
  userId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger
  templateToTemplateId: ApplicationTemplateIdFkeyInput
  userToUserId: ApplicationUserIdFkeyInput
  applicationSectionsUsingId: ApplicationSectionApplicationIdFkeyInverseInput
  applicationStageHistoriesUsingId: ApplicationStageHistoryApplicationIdFkeyInverseInput
  applicationResponsesUsingId: ApplicationResponseApplicationIdFkeyInverseInput
  reviewsUsingId: ReviewApplicationIdFkeyInverseInput
  filesUsingId: FileApplicationIdFkeyInverseInput
  notificationsUsingId: NotificationApplicationIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `application` being updated.
"""
input updateApplicationOnNotificationForNotificationApplicationIdFkeyPatch {
  id: Int
  uniqueIdentifier: String
  templateId: Int
  userId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger
  templateToTemplateId: ApplicationTemplateIdFkeyInput
  userToUserId: ApplicationUserIdFkeyInput
  applicationSectionsUsingId: ApplicationSectionApplicationIdFkeyInverseInput
  applicationStageHistoriesUsingId: ApplicationStageHistoryApplicationIdFkeyInverseInput
  applicationResponsesUsingId: ApplicationResponseApplicationIdFkeyInverseInput
  reviewsUsingId: ReviewApplicationIdFkeyInverseInput
  filesUsingId: FileApplicationIdFkeyInverseInput
  notificationsUsingId: NotificationApplicationIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `application` being updated.
"""
input updateApplicationOnReviewForReviewApplicationIdFkeyPatch {
  id: Int
  uniqueIdentifier: String
  templateId: Int
  userId: Int
  serial: Int
  name: String
  outcome: ApplicationOutcome
  isActive: Boolean
  trigger: Trigger
  templateToTemplateId: ApplicationTemplateIdFkeyInput
  userToUserId: ApplicationUserIdFkeyInput
  applicationSectionsUsingId: ApplicationSectionApplicationIdFkeyInverseInput
  applicationStageHistoriesUsingId: ApplicationStageHistoryApplicationIdFkeyInverseInput
  applicationResponsesUsingId: ApplicationResponseApplicationIdFkeyInverseInput
  reviewsUsingId: ReviewApplicationIdFkeyInverseInput
  filesUsingId: FileApplicationIdFkeyInverseInput
  notificationsUsingId: NotificationApplicationIdFkeyInverseInput
}

"""The output of our update `Application` mutation."""
type UpdateApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was updated by this mutation."""
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Template` that is related to this `Application`."""
  templateByTemplateId: Template

  """Reads a single `User` that is related to this `Application`."""
  userByUserId: User

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationsEdge
}

"""All input for the `updateApplicationResponseById` mutation."""
input UpdateApplicationResponseByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationResponse` being updated.
  """
  applicationResponsePatch: ApplicationResponsePatch!
  id: Int!
}

"""All input for the `updateApplicationResponse` mutation."""
input UpdateApplicationResponseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationResponse` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ApplicationResponse` being updated.
  """
  applicationResponsePatch: ApplicationResponsePatch!
}

"""
An object where the defined keys will be set on the `applicationResponse` being updated.
"""
input updateApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch {
  id: Int
  templateQuestionId: Int
  value: JSON
  timeCreated: Datetime
  templateElementToTemplateQuestionId: ApplicationResponseTemplateQuestionIdFkeyInput
  applicationToApplicationId: ApplicationResponseApplicationIdFkeyInput
  reviewResponsesUsingId: ReviewResponseApplicationResponseIdFkeyInverseInput
  filesUsingId: FileApplicationResponseIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `applicationResponse` being updated.
"""
input updateApplicationResponseOnApplicationResponseForApplicationResponseTemplateQuestionIdFkeyPatch {
  id: Int
  applicationId: Int
  value: JSON
  timeCreated: Datetime
  templateElementToTemplateQuestionId: ApplicationResponseTemplateQuestionIdFkeyInput
  applicationToApplicationId: ApplicationResponseApplicationIdFkeyInput
  reviewResponsesUsingId: ReviewResponseApplicationResponseIdFkeyInverseInput
  filesUsingId: FileApplicationResponseIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `applicationResponse` being updated.
"""
input updateApplicationResponseOnFileForFileApplicationResponseIdFkeyPatch {
  id: Int
  templateQuestionId: Int
  applicationId: Int
  value: JSON
  timeCreated: Datetime
  templateElementToTemplateQuestionId: ApplicationResponseTemplateQuestionIdFkeyInput
  applicationToApplicationId: ApplicationResponseApplicationIdFkeyInput
  reviewResponsesUsingId: ReviewResponseApplicationResponseIdFkeyInverseInput
  filesUsingId: FileApplicationResponseIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `applicationResponse` being updated.
"""
input updateApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch {
  id: Int
  templateQuestionId: Int
  applicationId: Int
  value: JSON
  timeCreated: Datetime
  templateElementToTemplateQuestionId: ApplicationResponseTemplateQuestionIdFkeyInput
  applicationToApplicationId: ApplicationResponseApplicationIdFkeyInput
  reviewResponsesUsingId: ReviewResponseApplicationResponseIdFkeyInverseInput
  filesUsingId: FileApplicationResponseIdFkeyInverseInput
}

"""The output of our update `ApplicationResponse` mutation."""
type UpdateApplicationResponsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationResponse` that was updated by this mutation."""
  applicationResponse: ApplicationResponse

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TemplateElement` that is related to this `ApplicationResponse`.
  """
  templateElementByTemplateQuestionId: TemplateElement

  """
  Reads a single `Application` that is related to this `ApplicationResponse`.
  """
  applicationByApplicationId: Application

  """An edge for our `ApplicationResponse`. May be used by Relay 1."""
  applicationResponseEdge(
    """The method to use when ordering `ApplicationResponse`."""
    orderBy: [ApplicationResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationResponsesEdge
}

"""All input for the `updateApplicationSectionById` mutation."""
input UpdateApplicationSectionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationSection` being updated.
  """
  applicationSectionPatch: ApplicationSectionPatch!
  id: Int!
}

"""All input for the `updateApplicationSection` mutation."""
input UpdateApplicationSectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationSection` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ApplicationSection` being updated.
  """
  applicationSectionPatch: ApplicationSectionPatch!
}

"""
An object where the defined keys will be set on the `applicationSection` being updated.
"""
input updateApplicationSectionOnApplicationSectionForApplicationSectionApplicationIdFkeyPatch {
  id: Int
  templateSectionId: Int
  applicationToApplicationId: ApplicationSectionApplicationIdFkeyInput
  templateSectionToTemplateSectionId: ApplicationSectionTemplateSectionIdFkeyInput
  reviewSectionAssignmentsUsingId: ReviewSectionAssignmentSectionIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `applicationSection` being updated.
"""
input updateApplicationSectionOnApplicationSectionForApplicationSectionTemplateSectionIdFkeyPatch {
  id: Int
  applicationId: Int
  applicationToApplicationId: ApplicationSectionApplicationIdFkeyInput
  templateSectionToTemplateSectionId: ApplicationSectionTemplateSectionIdFkeyInput
  reviewSectionAssignmentsUsingId: ReviewSectionAssignmentSectionIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `applicationSection` being updated.
"""
input updateApplicationSectionOnReviewSectionAssignmentForReviewSectionAssignmentSectionIdFkeyPatch {
  id: Int
  applicationId: Int
  templateSectionId: Int
  applicationToApplicationId: ApplicationSectionApplicationIdFkeyInput
  templateSectionToTemplateSectionId: ApplicationSectionTemplateSectionIdFkeyInput
  reviewSectionAssignmentsUsingId: ReviewSectionAssignmentSectionIdFkeyInverseInput
}

"""The output of our update `ApplicationSection` mutation."""
type UpdateApplicationSectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationSection` that was updated by this mutation."""
  applicationSection: ApplicationSection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationSection`.
  """
  applicationByApplicationId: Application

  """
  Reads a single `TemplateSection` that is related to this `ApplicationSection`.
  """
  templateSectionByTemplateSectionId: TemplateSection

  """An edge for our `ApplicationSection`. May be used by Relay 1."""
  applicationSectionEdge(
    """The method to use when ordering `ApplicationSection`."""
    orderBy: [ApplicationSectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationSectionsEdge
}

"""All input for the `updateApplicationStageHistoryById` mutation."""
input UpdateApplicationStageHistoryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationStageHistory` being updated.
  """
  applicationStageHistoryPatch: ApplicationStageHistoryPatch!
  id: Int!
}

"""All input for the `updateApplicationStageHistory` mutation."""
input UpdateApplicationStageHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationStageHistory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ApplicationStageHistory` being updated.
  """
  applicationStageHistoryPatch: ApplicationStageHistoryPatch!
}

"""
An object where the defined keys will be set on the `applicationStageHistory` being updated.
"""
input updateApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch {
  id: Int
  stage: ApplicationStage
  timeCreated: Datetime
  isCurrent: Boolean
  applicationToApplicationId: ApplicationStageHistoryApplicationIdFkeyInput
  applicationStatusHistoriesUsingId: ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput
  reviewSectionAssignmentsUsingId: ReviewSectionAssignmentStageIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `applicationStageHistory` being updated.
"""
input updateApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch {
  id: Int
  applicationId: Int
  stage: ApplicationStage
  timeCreated: Datetime
  isCurrent: Boolean
  applicationToApplicationId: ApplicationStageHistoryApplicationIdFkeyInput
  applicationStatusHistoriesUsingId: ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput
  reviewSectionAssignmentsUsingId: ReviewSectionAssignmentStageIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `applicationStageHistory` being updated.
"""
input updateApplicationStageHistoryOnReviewSectionAssignmentForReviewSectionAssignmentStageIdFkeyPatch {
  id: Int
  applicationId: Int
  stage: ApplicationStage
  timeCreated: Datetime
  isCurrent: Boolean
  applicationToApplicationId: ApplicationStageHistoryApplicationIdFkeyInput
  applicationStatusHistoriesUsingId: ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput
  reviewSectionAssignmentsUsingId: ReviewSectionAssignmentStageIdFkeyInverseInput
}

"""The output of our update `ApplicationStageHistory` mutation."""
type UpdateApplicationStageHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStageHistory` that was updated by this mutation."""
  applicationStageHistory: ApplicationStageHistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationStageHistory`.
  """
  applicationByApplicationId: Application

  """An edge for our `ApplicationStageHistory`. May be used by Relay 1."""
  applicationStageHistoryEdge(
    """The method to use when ordering `ApplicationStageHistory`."""
    orderBy: [ApplicationStageHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStageHistoriesEdge
}

"""All input for the `updateApplicationStatusHistoryById` mutation."""
input UpdateApplicationStatusHistoryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationStatusHistory` being updated.
  """
  applicationStatusHistoryPatch: ApplicationStatusHistoryPatch!
  id: Int!
}

"""All input for the `updateApplicationStatusHistory` mutation."""
input UpdateApplicationStatusHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationStatusHistory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ApplicationStatusHistory` being updated.
  """
  applicationStatusHistoryPatch: ApplicationStatusHistoryPatch!
}

"""
An object where the defined keys will be set on the `applicationStatusHistory` being updated.
"""
input updateApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch {
  id: Int
  status: ApplicationStatus
  timeCreated: Datetime
  isCurrent: Boolean
  applicationStageHistoryToApplicationStageHistoryId: ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput
}

"""The output of our update `ApplicationStatusHistory` mutation."""
type UpdateApplicationStatusHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationStatusHistory` that was updated by this mutation."""
  applicationStatusHistory: ApplicationStatusHistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ApplicationStageHistory` that is related to this `ApplicationStatusHistory`.
  """
  applicationStageHistoryByApplicationStageHistoryId: ApplicationStageHistory

  """An edge for our `ApplicationStatusHistory`. May be used by Relay 1."""
  applicationStatusHistoryEdge(
    """The method to use when ordering `ApplicationStatusHistory`."""
    orderBy: [ApplicationStatusHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ApplicationStatusHistoriesEdge
}

"""All input for the `updateElementTypePluginByCode` mutation."""
input UpdateElementTypePluginByCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ElementTypePlugin` being updated.
  """
  elementTypePluginPatch: ElementTypePluginPatch!
  code: String!
}

"""All input for the `updateElementTypePlugin` mutation."""
input UpdateElementTypePluginInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ElementTypePlugin` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ElementTypePlugin` being updated.
  """
  elementTypePluginPatch: ElementTypePluginPatch!
}

"""The output of our update `ElementTypePlugin` mutation."""
type UpdateElementTypePluginPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ElementTypePlugin` that was updated by this mutation."""
  elementTypePlugin: ElementTypePlugin

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ElementTypePlugin`. May be used by Relay 1."""
  elementTypePluginEdge(
    """The method to use when ordering `ElementTypePlugin`."""
    orderBy: [ElementTypePluginsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ElementTypePluginsEdge
}

"""All input for the `updateFileById` mutation."""
input UpdateFileByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `File` being updated.
  """
  filePatch: FilePatch!
  id: Int!
}

"""All input for the `updateFile` mutation."""
input UpdateFileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `File` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `File` being updated.
  """
  filePatch: FilePatch!
}

"""
An object where the defined keys will be set on the `file` being updated.
"""
input updateFileOnFileForFileApplicationIdFkeyPatch {
  id: Int
  userId: Int
  originalFilename: String
  path: String
  mimetype: String
  applicationResponseId: Int
  userToUserId: FileUserIdFkeyInput
  applicationToApplicationId: FileApplicationIdFkeyInput
  applicationResponseToApplicationResponseId: FileApplicationResponseIdFkeyInput
  notificationsUsingId: NotificationDocumentIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `file` being updated.
"""
input updateFileOnFileForFileApplicationResponseIdFkeyPatch {
  id: Int
  userId: Int
  originalFilename: String
  path: String
  mimetype: String
  applicationId: Int
  userToUserId: FileUserIdFkeyInput
  applicationToApplicationId: FileApplicationIdFkeyInput
  applicationResponseToApplicationResponseId: FileApplicationResponseIdFkeyInput
  notificationsUsingId: NotificationDocumentIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `file` being updated.
"""
input updateFileOnFileForFileUserIdFkeyPatch {
  id: Int
  originalFilename: String
  path: String
  mimetype: String
  applicationId: Int
  applicationResponseId: Int
  userToUserId: FileUserIdFkeyInput
  applicationToApplicationId: FileApplicationIdFkeyInput
  applicationResponseToApplicationResponseId: FileApplicationResponseIdFkeyInput
  notificationsUsingId: NotificationDocumentIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `file` being updated.
"""
input updateFileOnNotificationForNotificationDocumentIdFkeyPatch {
  id: Int
  userId: Int
  originalFilename: String
  path: String
  mimetype: String
  applicationId: Int
  applicationResponseId: Int
  userToUserId: FileUserIdFkeyInput
  applicationToApplicationId: FileApplicationIdFkeyInput
  applicationResponseToApplicationResponseId: FileApplicationResponseIdFkeyInput
  notificationsUsingId: NotificationDocumentIdFkeyInverseInput
}

"""The output of our update `File` mutation."""
type UpdateFilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `File` that was updated by this mutation."""
  file: File

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `File`."""
  userByUserId: User

  """Reads a single `Application` that is related to this `File`."""
  applicationByApplicationId: Application

  """Reads a single `ApplicationResponse` that is related to this `File`."""
  applicationResponseByApplicationResponseId: ApplicationResponse

  """An edge for our `File`. May be used by Relay 1."""
  fileEdge(
    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilesEdge
}

"""All input for the `updateNotificationById` mutation."""
input UpdateNotificationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Notification` being updated.
  """
  notificationPatch: NotificationPatch!
  id: Int!
}

"""All input for the `updateNotification` mutation."""
input UpdateNotificationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Notification` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Notification` being updated.
  """
  notificationPatch: NotificationPatch!
}

"""
An object where the defined keys will be set on the `notification` being updated.
"""
input updateNotificationOnNotificationForNotificationApplicationIdFkeyPatch {
  id: Int
  userId: Int
  reviewId: Int
  subject: String
  message: String
  documentId: Int
  isRead: Boolean
  userToUserId: NotificationUserIdFkeyInput
  applicationToApplicationId: NotificationApplicationIdFkeyInput
  reviewToReviewId: NotificationReviewIdFkeyInput
  fileToDocumentId: NotificationDocumentIdFkeyInput
}

"""
An object where the defined keys will be set on the `notification` being updated.
"""
input updateNotificationOnNotificationForNotificationDocumentIdFkeyPatch {
  id: Int
  userId: Int
  applicationId: Int
  reviewId: Int
  subject: String
  message: String
  isRead: Boolean
  userToUserId: NotificationUserIdFkeyInput
  applicationToApplicationId: NotificationApplicationIdFkeyInput
  reviewToReviewId: NotificationReviewIdFkeyInput
  fileToDocumentId: NotificationDocumentIdFkeyInput
}

"""
An object where the defined keys will be set on the `notification` being updated.
"""
input updateNotificationOnNotificationForNotificationReviewIdFkeyPatch {
  id: Int
  userId: Int
  applicationId: Int
  subject: String
  message: String
  documentId: Int
  isRead: Boolean
  userToUserId: NotificationUserIdFkeyInput
  applicationToApplicationId: NotificationApplicationIdFkeyInput
  reviewToReviewId: NotificationReviewIdFkeyInput
  fileToDocumentId: NotificationDocumentIdFkeyInput
}

"""
An object where the defined keys will be set on the `notification` being updated.
"""
input updateNotificationOnNotificationForNotificationUserIdFkeyPatch {
  id: Int
  applicationId: Int
  reviewId: Int
  subject: String
  message: String
  documentId: Int
  isRead: Boolean
  userToUserId: NotificationUserIdFkeyInput
  applicationToApplicationId: NotificationApplicationIdFkeyInput
  reviewToReviewId: NotificationReviewIdFkeyInput
  fileToDocumentId: NotificationDocumentIdFkeyInput
}

"""The output of our update `Notification` mutation."""
type UpdateNotificationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Notification` that was updated by this mutation."""
  notification: Notification

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Notification`."""
  userByUserId: User

  """Reads a single `Application` that is related to this `Notification`."""
  applicationByApplicationId: Application

  """Reads a single `Review` that is related to this `Notification`."""
  reviewByReviewId: Review

  """Reads a single `File` that is related to this `Notification`."""
  fileByDocumentId: File

  """An edge for our `Notification`. May be used by Relay 1."""
  notificationEdge(
    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): NotificationsEdge
}

"""All input for the `updateOrganisationById` mutation."""
input UpdateOrganisationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Organisation` being updated.
  """
  organisationPatch: OrganisationPatch!
  id: Int!
}

"""All input for the `updateOrganisation` mutation."""
input UpdateOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Organisation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Organisation` being updated.
  """
  organisationPatch: OrganisationPatch!
}

"""
An object where the defined keys will be set on the `organisation` being updated.
"""
input updateOrganisationOnUserOrganisationForUserOrganisationOrganistionIdFkeyPatch {
  id: Int
  name: String
  licenceNumber: Int
  address: String
  userOrganisationsUsingId: UserOrganisationOrganistionIdFkeyInverseInput
}

"""The output of our update `Organisation` mutation."""
type UpdateOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Organisation` that was updated by this mutation."""
  organisation: Organisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Organisation`. May be used by Relay 1."""
  organisationEdge(
    """The method to use when ordering `Organisation`."""
    orderBy: [OrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrganisationsEdge
}

"""All input for the `updatePermissionJoinById` mutation."""
input UpdatePermissionJoinByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PermissionJoin` being updated.
  """
  permissionJoinPatch: PermissionJoinPatch!
  id: Int!
}

"""All input for the `updatePermissionJoin` mutation."""
input UpdatePermissionJoinInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PermissionJoin` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PermissionJoin` being updated.
  """
  permissionJoinPatch: PermissionJoinPatch!
}

"""
An object where the defined keys will be set on the `permissionJoin` being updated.
"""
input updatePermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch {
  id: Int
  userId: Int
  userOrganisationId: Int
  userToUserId: PermissionJoinUserIdFkeyInput
  userOrganisationToUserOrganisationId: PermissionJoinUserOrganisationIdFkeyInput
  permissionNameToPermissionNameId: PermissionJoinPermissionNameIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionPermissionJoinIdFkeyInverseInput
  templateReviewStagesUsingId: TemplateReviewStagePermissionJoinIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `permissionJoin` being updated.
"""
input updatePermissionJoinOnPermissionJoinForPermissionJoinUserIdFkeyPatch {
  id: Int
  userOrganisationId: Int
  permissionNameId: Int
  userToUserId: PermissionJoinUserIdFkeyInput
  userOrganisationToUserOrganisationId: PermissionJoinUserOrganisationIdFkeyInput
  permissionNameToPermissionNameId: PermissionJoinPermissionNameIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionPermissionJoinIdFkeyInverseInput
  templateReviewStagesUsingId: TemplateReviewStagePermissionJoinIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `permissionJoin` being updated.
"""
input updatePermissionJoinOnPermissionJoinForPermissionJoinUserOrganisationIdFkeyPatch {
  id: Int
  userId: Int
  permissionNameId: Int
  userToUserId: PermissionJoinUserIdFkeyInput
  userOrganisationToUserOrganisationId: PermissionJoinUserOrganisationIdFkeyInput
  permissionNameToPermissionNameId: PermissionJoinPermissionNameIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionPermissionJoinIdFkeyInverseInput
  templateReviewStagesUsingId: TemplateReviewStagePermissionJoinIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `permissionJoin` being updated.
"""
input updatePermissionJoinOnTemplatePermissionForTemplatePermissionPermissionJoinIdFkeyPatch {
  id: Int
  userId: Int
  userOrganisationId: Int
  permissionNameId: Int
  userToUserId: PermissionJoinUserIdFkeyInput
  userOrganisationToUserOrganisationId: PermissionJoinUserOrganisationIdFkeyInput
  permissionNameToPermissionNameId: PermissionJoinPermissionNameIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionPermissionJoinIdFkeyInverseInput
  templateReviewStagesUsingId: TemplateReviewStagePermissionJoinIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `permissionJoin` being updated.
"""
input updatePermissionJoinOnTemplateReviewStageForTemplateReviewStagePermissionJoinIdFkeyPatch {
  id: Int
  userId: Int
  userOrganisationId: Int
  permissionNameId: Int
  userToUserId: PermissionJoinUserIdFkeyInput
  userOrganisationToUserOrganisationId: PermissionJoinUserOrganisationIdFkeyInput
  permissionNameToPermissionNameId: PermissionJoinPermissionNameIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionPermissionJoinIdFkeyInverseInput
  templateReviewStagesUsingId: TemplateReviewStagePermissionJoinIdFkeyInverseInput
}

"""The output of our update `PermissionJoin` mutation."""
type UpdatePermissionJoinPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PermissionJoin` that was updated by this mutation."""
  permissionJoin: PermissionJoin

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `PermissionJoin`."""
  userByUserId: User

  """
  Reads a single `UserOrganisation` that is related to this `PermissionJoin`.
  """
  userOrganisationByUserOrganisationId: UserOrganisation

  """
  Reads a single `PermissionName` that is related to this `PermissionJoin`.
  """
  permissionNameByPermissionNameId: PermissionName

  """An edge for our `PermissionJoin`. May be used by Relay 1."""
  permissionJoinEdge(
    """The method to use when ordering `PermissionJoin`."""
    orderBy: [PermissionJoinsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermissionJoinsEdge
}

"""All input for the `updatePermissionNameById` mutation."""
input UpdatePermissionNameByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PermissionName` being updated.
  """
  permissionNamePatch: PermissionNamePatch!
  id: Int!
}

"""All input for the `updatePermissionName` mutation."""
input UpdatePermissionNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PermissionName` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PermissionName` being updated.
  """
  permissionNamePatch: PermissionNamePatch!
}

"""
An object where the defined keys will be set on the `permissionName` being updated.
"""
input updatePermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch {
  id: Int
  name: String
  permissionJoinsUsingId: PermissionJoinPermissionNameIdFkeyInverseInput
}

"""The output of our update `PermissionName` mutation."""
type UpdatePermissionNamePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PermissionName` that was updated by this mutation."""
  permissionName: PermissionName

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `PermissionName`. May be used by Relay 1."""
  permissionNameEdge(
    """The method to use when ordering `PermissionName`."""
    orderBy: [PermissionNamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermissionNamesEdge
}

"""All input for the `updatePermissionPolicyById` mutation."""
input UpdatePermissionPolicyByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PermissionPolicy` being updated.
  """
  permissionPolicyPatch: PermissionPolicyPatch!
  id: Int!
}

"""All input for the `updatePermissionPolicy` mutation."""
input UpdatePermissionPolicyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PermissionPolicy` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PermissionPolicy` being updated.
  """
  permissionPolicyPatch: PermissionPolicyPatch!
}

"""
An object where the defined keys will be set on the `permissionPolicy` being updated.
"""
input updatePermissionPolicyOnTemplatePermissionForTemplatePermissionPermissionPolicyIdFkeyPatch {
  id: Int
  name: String
  rules: JSON
  description: String
  type: PermissionPolicyType
  templatePermissionsUsingId: TemplatePermissionPermissionPolicyIdFkeyInverseInput
}

"""The output of our update `PermissionPolicy` mutation."""
type UpdatePermissionPolicyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PermissionPolicy` that was updated by this mutation."""
  permissionPolicy: PermissionPolicy

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `PermissionPolicy`. May be used by Relay 1."""
  permissionPolicyEdge(
    """The method to use when ordering `PermissionPolicy`."""
    orderBy: [PermissionPoliciesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PermissionPoliciesEdge
}

"""All input for the `updateReviewById` mutation."""
input UpdateReviewByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Review` being updated.
  """
  reviewPatch: ReviewPatch!
  id: Int!
}

"""All input for the `updateReview` mutation."""
input UpdateReviewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Review` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Review` being updated.
  """
  reviewPatch: ReviewPatch!
}

"""
An object where the defined keys will be set on the `review` being updated.
"""
input updateReviewOnNotificationForNotificationReviewIdFkeyPatch {
  id: Int
  applicationId: Int
  status: ReviewStatus
  comment: String
  timeCreated: Datetime
  trigger: Trigger
  applicationToApplicationId: ReviewApplicationIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinReviewIdFkeyInverseInput
  notificationsUsingId: NotificationReviewIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `review` being updated.
"""
input updateReviewOnReviewForReviewApplicationIdFkeyPatch {
  id: Int
  status: ReviewStatus
  comment: String
  timeCreated: Datetime
  trigger: Trigger
  applicationToApplicationId: ReviewApplicationIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinReviewIdFkeyInverseInput
  notificationsUsingId: NotificationReviewIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `review` being updated.
"""
input updateReviewOnReviewSectionJoinForReviewSectionJoinReviewIdFkeyPatch {
  id: Int
  applicationId: Int
  status: ReviewStatus
  comment: String
  timeCreated: Datetime
  trigger: Trigger
  applicationToApplicationId: ReviewApplicationIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinReviewIdFkeyInverseInput
  notificationsUsingId: NotificationReviewIdFkeyInverseInput
}

"""The output of our update `Review` mutation."""
type UpdateReviewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Review` that was updated by this mutation."""
  review: Review

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `Review`."""
  applicationByApplicationId: Application

  """An edge for our `Review`. May be used by Relay 1."""
  reviewEdge(
    """The method to use when ordering `Review`."""
    orderBy: [ReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewsEdge
}

"""All input for the `updateReviewResponseById` mutation."""
input UpdateReviewResponseByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ReviewResponse` being updated.
  """
  reviewResponsePatch: ReviewResponsePatch!
  id: Int!
}

"""All input for the `updateReviewResponse` mutation."""
input UpdateReviewResponseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReviewResponse` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ReviewResponse` being updated.
  """
  reviewResponsePatch: ReviewResponsePatch!
}

"""
An object where the defined keys will be set on the `reviewResponse` being updated.
"""
input updateReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch {
  id: Int
  reviewDecision: ReviewDecision
  comment: String
  trigger: Trigger
  applicationResponseToApplicationResponseId: ReviewResponseApplicationResponseIdFkeyInput
  reviewSectionResponseJoinsUsingId: ReviewSectionResponseJoinReviewResponseIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `reviewResponse` being updated.
"""
input updateReviewResponseOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewResponseIdFkeyPatch {
  id: Int
  applicationResponseId: Int
  reviewDecision: ReviewDecision
  comment: String
  trigger: Trigger
  applicationResponseToApplicationResponseId: ReviewResponseApplicationResponseIdFkeyInput
  reviewSectionResponseJoinsUsingId: ReviewSectionResponseJoinReviewResponseIdFkeyInverseInput
}

"""The output of our update `ReviewResponse` mutation."""
type UpdateReviewResponsePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReviewResponse` that was updated by this mutation."""
  reviewResponse: ReviewResponse

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ApplicationResponse` that is related to this `ReviewResponse`.
  """
  applicationResponseByApplicationResponseId: ApplicationResponse

  """An edge for our `ReviewResponse`. May be used by Relay 1."""
  reviewResponseEdge(
    """The method to use when ordering `ReviewResponse`."""
    orderBy: [ReviewResponsesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewResponsesEdge
}

"""All input for the `updateReviewSectionAssignmentById` mutation."""
input UpdateReviewSectionAssignmentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ReviewSectionAssignment` being updated.
  """
  reviewSectionAssignmentPatch: ReviewSectionAssignmentPatch!
  id: Int!
}

"""All input for the `updateReviewSectionAssignment` mutation."""
input UpdateReviewSectionAssignmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReviewSectionAssignment` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ReviewSectionAssignment` being updated.
  """
  reviewSectionAssignmentPatch: ReviewSectionAssignmentPatch!
}

"""
An object where the defined keys will be set on the `reviewSectionAssignment` being updated.
"""
input updateReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentAssignerIdFkeyPatch {
  id: Int
  reviewerId: Int
  stageId: Int
  sectionId: Int
  level: String
  userToReviewerId: ReviewSectionAssignmentReviewerIdFkeyInput
  userToAssignerId: ReviewSectionAssignmentAssignerIdFkeyInput
  applicationStageHistoryToStageId: ReviewSectionAssignmentStageIdFkeyInput
  applicationSectionToSectionId: ReviewSectionAssignmentSectionIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinSectionAssignmentIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `reviewSectionAssignment` being updated.
"""
input updateReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentReviewerIdFkeyPatch {
  id: Int
  assignerId: Int
  stageId: Int
  sectionId: Int
  level: String
  userToReviewerId: ReviewSectionAssignmentReviewerIdFkeyInput
  userToAssignerId: ReviewSectionAssignmentAssignerIdFkeyInput
  applicationStageHistoryToStageId: ReviewSectionAssignmentStageIdFkeyInput
  applicationSectionToSectionId: ReviewSectionAssignmentSectionIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinSectionAssignmentIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `reviewSectionAssignment` being updated.
"""
input updateReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentSectionIdFkeyPatch {
  id: Int
  reviewerId: Int
  assignerId: Int
  stageId: Int
  level: String
  userToReviewerId: ReviewSectionAssignmentReviewerIdFkeyInput
  userToAssignerId: ReviewSectionAssignmentAssignerIdFkeyInput
  applicationStageHistoryToStageId: ReviewSectionAssignmentStageIdFkeyInput
  applicationSectionToSectionId: ReviewSectionAssignmentSectionIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinSectionAssignmentIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `reviewSectionAssignment` being updated.
"""
input updateReviewSectionAssignmentOnReviewSectionAssignmentForReviewSectionAssignmentStageIdFkeyPatch {
  id: Int
  reviewerId: Int
  assignerId: Int
  sectionId: Int
  level: String
  userToReviewerId: ReviewSectionAssignmentReviewerIdFkeyInput
  userToAssignerId: ReviewSectionAssignmentAssignerIdFkeyInput
  applicationStageHistoryToStageId: ReviewSectionAssignmentStageIdFkeyInput
  applicationSectionToSectionId: ReviewSectionAssignmentSectionIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinSectionAssignmentIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `reviewSectionAssignment` being updated.
"""
input updateReviewSectionAssignmentOnReviewSectionJoinForReviewSectionJoinSectionAssignmentIdFkeyPatch {
  id: Int
  reviewerId: Int
  assignerId: Int
  stageId: Int
  sectionId: Int
  level: String
  userToReviewerId: ReviewSectionAssignmentReviewerIdFkeyInput
  userToAssignerId: ReviewSectionAssignmentAssignerIdFkeyInput
  applicationStageHistoryToStageId: ReviewSectionAssignmentStageIdFkeyInput
  applicationSectionToSectionId: ReviewSectionAssignmentSectionIdFkeyInput
  reviewSectionJoinsUsingId: ReviewSectionJoinSectionAssignmentIdFkeyInverseInput
}

"""The output of our update `ReviewSectionAssignment` mutation."""
type UpdateReviewSectionAssignmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReviewSectionAssignment` that was updated by this mutation."""
  reviewSectionAssignment: ReviewSectionAssignment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `User` that is related to this `ReviewSectionAssignment`.
  """
  userByReviewerId: User

  """
  Reads a single `User` that is related to this `ReviewSectionAssignment`.
  """
  userByAssignerId: User

  """
  Reads a single `ApplicationStageHistory` that is related to this `ReviewSectionAssignment`.
  """
  applicationStageHistoryByStageId: ApplicationStageHistory

  """
  Reads a single `ApplicationSection` that is related to this `ReviewSectionAssignment`.
  """
  applicationSectionBySectionId: ApplicationSection

  """An edge for our `ReviewSectionAssignment`. May be used by Relay 1."""
  reviewSectionAssignmentEdge(
    """The method to use when ordering `ReviewSectionAssignment`."""
    orderBy: [ReviewSectionAssignmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewSectionAssignmentsEdge
}

"""All input for the `updateReviewSectionById` mutation."""
input UpdateReviewSectionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ReviewSection` being updated.
  """
  reviewSectionPatch: ReviewSectionPatch!
  id: Int!
}

"""All input for the `updateReviewSection` mutation."""
input UpdateReviewSectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReviewSection` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ReviewSection` being updated.
  """
  reviewSectionPatch: ReviewSectionPatch!
}

"""All input for the `updateReviewSectionJoinById` mutation."""
input UpdateReviewSectionJoinByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ReviewSectionJoin` being updated.
  """
  reviewSectionJoinPatch: ReviewSectionJoinPatch!
  id: Int!
}

"""All input for the `updateReviewSectionJoin` mutation."""
input UpdateReviewSectionJoinInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReviewSectionJoin` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ReviewSectionJoin` being updated.
  """
  reviewSectionJoinPatch: ReviewSectionJoinPatch!
}

"""
An object where the defined keys will be set on the `reviewSectionJoin` being updated.
"""
input updateReviewSectionJoinOnReviewSectionJoinForReviewSectionJoinReviewIdFkeyPatch {
  id: Int
  sectionAssignmentId: Int
  reviewSectionId: Int
  sendToApplicant: Boolean
  reviewToReviewId: ReviewSectionJoinReviewIdFkeyInput
  reviewSectionAssignmentToSectionAssignmentId: ReviewSectionJoinSectionAssignmentIdFkeyInput
  reviewSectionToReviewSectionId: ReviewSectionJoinReviewSectionIdFkeyInput
  reviewSectionResponseJoinsUsingId: ReviewSectionResponseJoinReviewSectionJoinIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `reviewSectionJoin` being updated.
"""
input updateReviewSectionJoinOnReviewSectionJoinForReviewSectionJoinReviewSectionIdFkeyPatch {
  id: Int
  reviewId: Int
  sectionAssignmentId: Int
  sendToApplicant: Boolean
  reviewToReviewId: ReviewSectionJoinReviewIdFkeyInput
  reviewSectionAssignmentToSectionAssignmentId: ReviewSectionJoinSectionAssignmentIdFkeyInput
  reviewSectionToReviewSectionId: ReviewSectionJoinReviewSectionIdFkeyInput
  reviewSectionResponseJoinsUsingId: ReviewSectionResponseJoinReviewSectionJoinIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `reviewSectionJoin` being updated.
"""
input updateReviewSectionJoinOnReviewSectionJoinForReviewSectionJoinSectionAssignmentIdFkeyPatch {
  id: Int
  reviewId: Int
  reviewSectionId: Int
  sendToApplicant: Boolean
  reviewToReviewId: ReviewSectionJoinReviewIdFkeyInput
  reviewSectionAssignmentToSectionAssignmentId: ReviewSectionJoinSectionAssignmentIdFkeyInput
  reviewSectionToReviewSectionId: ReviewSectionJoinReviewSectionIdFkeyInput
  reviewSectionResponseJoinsUsingId: ReviewSectionResponseJoinReviewSectionJoinIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `reviewSectionJoin` being updated.
"""
input updateReviewSectionJoinOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewSectionJoinIdFkeyPatch {
  id: Int
  reviewId: Int
  sectionAssignmentId: Int
  reviewSectionId: Int
  sendToApplicant: Boolean
  reviewToReviewId: ReviewSectionJoinReviewIdFkeyInput
  reviewSectionAssignmentToSectionAssignmentId: ReviewSectionJoinSectionAssignmentIdFkeyInput
  reviewSectionToReviewSectionId: ReviewSectionJoinReviewSectionIdFkeyInput
  reviewSectionResponseJoinsUsingId: ReviewSectionResponseJoinReviewSectionJoinIdFkeyInverseInput
}

"""The output of our update `ReviewSectionJoin` mutation."""
type UpdateReviewSectionJoinPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReviewSectionJoin` that was updated by this mutation."""
  reviewSectionJoin: ReviewSectionJoin

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Review` that is related to this `ReviewSectionJoin`."""
  reviewByReviewId: Review

  """
  Reads a single `ReviewSectionAssignment` that is related to this `ReviewSectionJoin`.
  """
  reviewSectionAssignmentBySectionAssignmentId: ReviewSectionAssignment

  """
  Reads a single `ReviewSection` that is related to this `ReviewSectionJoin`.
  """
  reviewSectionByReviewSectionId: ReviewSection

  """An edge for our `ReviewSectionJoin`. May be used by Relay 1."""
  reviewSectionJoinEdge(
    """The method to use when ordering `ReviewSectionJoin`."""
    orderBy: [ReviewSectionJoinsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewSectionJoinsEdge
}

"""
An object where the defined keys will be set on the `reviewSection` being updated.
"""
input updateReviewSectionOnReviewSectionJoinForReviewSectionJoinReviewSectionIdFkeyPatch {
  id: Int
  reviewDecision: ReviewDecision
  comment: String
  reviewSectionJoinsUsingId: ReviewSectionJoinReviewSectionIdFkeyInverseInput
}

"""The output of our update `ReviewSection` mutation."""
type UpdateReviewSectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReviewSection` that was updated by this mutation."""
  reviewSection: ReviewSection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ReviewSection`. May be used by Relay 1."""
  reviewSectionEdge(
    """The method to use when ordering `ReviewSection`."""
    orderBy: [ReviewSectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewSectionsEdge
}

"""All input for the `updateReviewSectionResponseJoinById` mutation."""
input UpdateReviewSectionResponseJoinByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ReviewSectionResponseJoin` being updated.
  """
  reviewSectionResponseJoinPatch: ReviewSectionResponseJoinPatch!
  id: Int!
}

"""All input for the `updateReviewSectionResponseJoin` mutation."""
input UpdateReviewSectionResponseJoinInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReviewSectionResponseJoin` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ReviewSectionResponseJoin` being updated.
  """
  reviewSectionResponseJoinPatch: ReviewSectionResponseJoinPatch!
}

"""
An object where the defined keys will be set on the `reviewSectionResponseJoin` being updated.
"""
input updateReviewSectionResponseJoinOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewResponseIdFkeyPatch {
  id: Int
  reviewSectionJoinId: Int
  sendToApplicant: Boolean
  reviewSectionJoinToReviewSectionJoinId: ReviewSectionResponseJoinReviewSectionJoinIdFkeyInput
  reviewResponseToReviewResponseId: ReviewSectionResponseJoinReviewResponseIdFkeyInput
}

"""
An object where the defined keys will be set on the `reviewSectionResponseJoin` being updated.
"""
input updateReviewSectionResponseJoinOnReviewSectionResponseJoinForReviewSectionResponseJoinReviewSectionJoinIdFkeyPatch {
  id: Int
  reviewResponseId: Int
  sendToApplicant: Boolean
  reviewSectionJoinToReviewSectionJoinId: ReviewSectionResponseJoinReviewSectionJoinIdFkeyInput
  reviewResponseToReviewResponseId: ReviewSectionResponseJoinReviewResponseIdFkeyInput
}

"""The output of our update `ReviewSectionResponseJoin` mutation."""
type UpdateReviewSectionResponseJoinPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ReviewSectionResponseJoin` that was updated by this mutation."""
  reviewSectionResponseJoin: ReviewSectionResponseJoin

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ReviewSectionJoin` that is related to this `ReviewSectionResponseJoin`.
  """
  reviewSectionJoinByReviewSectionJoinId: ReviewSectionJoin

  """
  Reads a single `ReviewResponse` that is related to this `ReviewSectionResponseJoin`.
  """
  reviewResponseByReviewResponseId: ReviewResponse

  """An edge for our `ReviewSectionResponseJoin`. May be used by Relay 1."""
  reviewSectionResponseJoinEdge(
    """The method to use when ordering `ReviewSectionResponseJoin`."""
    orderBy: [ReviewSectionResponseJoinsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewSectionResponseJoinsEdge
}

"""All input for the `updateTemplateActionById` mutation."""
input UpdateTemplateActionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TemplateAction` being updated.
  """
  templateActionPatch: TemplateActionPatch!
  id: Int!
}

"""All input for the `updateTemplateAction` mutation."""
input UpdateTemplateActionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TemplateAction` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TemplateAction` being updated.
  """
  templateActionPatch: TemplateActionPatch!
}

"""
An object where the defined keys will be set on the `templateAction` being updated.
"""
input updateTemplateActionOnTemplateActionForTemplateActionPreviousActionIdFkeyPatch {
  id: Int
  templateId: Int
  actionCode: String
  trigger: Trigger
  condition: JSON
  parameterQueries: JSON
  templateToTemplateId: TemplateActionTemplateIdFkeyInput
  templateActionToPreviousActionId: TemplateActionPreviousActionIdFkeyInput
}

"""
An object where the defined keys will be set on the `templateAction` being updated.
"""
input updateTemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyPatch {
  id: Int
  actionCode: String
  previousActionId: Int
  trigger: Trigger
  condition: JSON
  parameterQueries: JSON
  templateToTemplateId: TemplateActionTemplateIdFkeyInput
  templateActionToPreviousActionId: TemplateActionPreviousActionIdFkeyInput
}

"""The output of our update `TemplateAction` mutation."""
type UpdateTemplateActionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplateAction` that was updated by this mutation."""
  templateAction: TemplateAction

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Template` that is related to this `TemplateAction`."""
  templateByTemplateId: Template

  """
  Reads a single `TemplateAction` that is related to this `TemplateAction`.
  """
  templateActionByPreviousActionId: TemplateAction

  """An edge for our `TemplateAction`. May be used by Relay 1."""
  templateActionEdge(
    """The method to use when ordering `TemplateAction`."""
    orderBy: [TemplateActionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplateActionsEdge
}

"""All input for the `updateTemplateById` mutation."""
input UpdateTemplateByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Template` being updated.
  """
  templatePatch: TemplatePatch!
  id: Int!
}

"""All input for the `updateTemplateElementById` mutation."""
input UpdateTemplateElementByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TemplateElement` being updated.
  """
  templateElementPatch: TemplateElementPatch!
  id: Int!
}

"""All input for the `updateTemplateElement` mutation."""
input UpdateTemplateElementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TemplateElement` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TemplateElement` being updated.
  """
  templateElementPatch: TemplateElementPatch!
}

"""
An object where the defined keys will be set on the `templateElement` being updated.
"""
input updateTemplateElementOnApplicationResponseForApplicationResponseTemplateQuestionIdFkeyPatch {
  id: Int
  sectionId: Int
  code: String
  nextElementCode: String
  title: String
  category: TemplateElementCategory
  visibilityCondition: JSON
  elementTypePluginCode: String
  isRequired: Boolean
  isEditable: Boolean
  parameters: JSON
  defaultValue: JSON
  validation: JSON
  templateSectionToSectionId: TemplateElementSectionIdFkeyInput
  applicationResponsesUsingId: ApplicationResponseTemplateQuestionIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `templateElement` being updated.
"""
input updateTemplateElementOnTemplateElementForTemplateElementSectionIdFkeyPatch {
  id: Int
  code: String
  nextElementCode: String
  title: String
  category: TemplateElementCategory
  visibilityCondition: JSON
  elementTypePluginCode: String
  isRequired: Boolean
  isEditable: Boolean
  parameters: JSON
  defaultValue: JSON
  validation: JSON
  templateSectionToSectionId: TemplateElementSectionIdFkeyInput
  applicationResponsesUsingId: ApplicationResponseTemplateQuestionIdFkeyInverseInput
}

"""The output of our update `TemplateElement` mutation."""
type UpdateTemplateElementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplateElement` that was updated by this mutation."""
  templateElement: TemplateElement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TemplateSection` that is related to this `TemplateElement`.
  """
  templateSectionBySectionId: TemplateSection

  """An edge for our `TemplateElement`. May be used by Relay 1."""
  templateElementEdge(
    """The method to use when ordering `TemplateElement`."""
    orderBy: [TemplateElementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplateElementsEdge
}

"""All input for the `updateTemplate` mutation."""
input UpdateTemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Template` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Template` being updated.
  """
  templatePatch: TemplatePatch!
}

"""
An object where the defined keys will be set on the `template` being updated.
"""
input updateTemplateOnApplicationForApplicationTemplateIdFkeyPatch {
  id: Int
  versionId: Int
  templateName: String
  code: String
  status: TemplateStatus
  templateVersionToVersionId: TemplateVersionIdFkeyInput
  templateStagesUsingId: TemplateStageTamplateIdFkeyInverseInput
  templateSectionsUsingId: TemplateSectionTemplateIdFkeyInverseInput
  templatePermissionsUsingId: TemplatePermissionTemplateIdFkeyInverseInput
  applicationsUsingId: ApplicationTemplateIdFkeyInverseInput
  templateActionsUsingId: TemplateActionTemplateIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `template` being updated.
"""
input updateTemplateOnTemplateActionForTemplateActionTemplateIdFkeyPatch {
  id: Int
  versionId: Int
  templateName: String
  code: String
  status: TemplateStatus
  templateVersionToVersionId: TemplateVersionIdFkeyInput
  templateStagesUsingId: TemplateStageTamplateIdFkeyInverseInput
  templateSectionsUsingId: TemplateSectionTemplateIdFkeyInverseInput
  templatePermissionsUsingId: TemplatePermissionTemplateIdFkeyInverseInput
  applicationsUsingId: ApplicationTemplateIdFkeyInverseInput
  templateActionsUsingId: TemplateActionTemplateIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `template` being updated.
"""
input updateTemplateOnTemplateForTemplateVersionIdFkeyPatch {
  id: Int
  templateName: String
  code: String
  status: TemplateStatus
  templateVersionToVersionId: TemplateVersionIdFkeyInput
  templateStagesUsingId: TemplateStageTamplateIdFkeyInverseInput
  templateSectionsUsingId: TemplateSectionTemplateIdFkeyInverseInput
  templatePermissionsUsingId: TemplatePermissionTemplateIdFkeyInverseInput
  applicationsUsingId: ApplicationTemplateIdFkeyInverseInput
  templateActionsUsingId: TemplateActionTemplateIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `template` being updated.
"""
input updateTemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch {
  id: Int
  versionId: Int
  templateName: String
  code: String
  status: TemplateStatus
  templateVersionToVersionId: TemplateVersionIdFkeyInput
  templateStagesUsingId: TemplateStageTamplateIdFkeyInverseInput
  templateSectionsUsingId: TemplateSectionTemplateIdFkeyInverseInput
  templatePermissionsUsingId: TemplatePermissionTemplateIdFkeyInverseInput
  applicationsUsingId: ApplicationTemplateIdFkeyInverseInput
  templateActionsUsingId: TemplateActionTemplateIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `template` being updated.
"""
input updateTemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch {
  id: Int
  versionId: Int
  templateName: String
  code: String
  status: TemplateStatus
  templateVersionToVersionId: TemplateVersionIdFkeyInput
  templateStagesUsingId: TemplateStageTamplateIdFkeyInverseInput
  templateSectionsUsingId: TemplateSectionTemplateIdFkeyInverseInput
  templatePermissionsUsingId: TemplatePermissionTemplateIdFkeyInverseInput
  applicationsUsingId: ApplicationTemplateIdFkeyInverseInput
  templateActionsUsingId: TemplateActionTemplateIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `template` being updated.
"""
input updateTemplateOnTemplateStageForTemplateStageTamplateIdFkeyPatch {
  id: Int
  versionId: Int
  templateName: String
  code: String
  status: TemplateStatus
  templateVersionToVersionId: TemplateVersionIdFkeyInput
  templateStagesUsingId: TemplateStageTamplateIdFkeyInverseInput
  templateSectionsUsingId: TemplateSectionTemplateIdFkeyInverseInput
  templatePermissionsUsingId: TemplatePermissionTemplateIdFkeyInverseInput
  applicationsUsingId: ApplicationTemplateIdFkeyInverseInput
  templateActionsUsingId: TemplateActionTemplateIdFkeyInverseInput
}

"""The output of our update `Template` mutation."""
type UpdateTemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Template` that was updated by this mutation."""
  template: Template

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `TemplateVersion` that is related to this `Template`."""
  templateVersionByVersionId: TemplateVersion

  """An edge for our `Template`. May be used by Relay 1."""
  templateEdge(
    """The method to use when ordering `Template`."""
    orderBy: [TemplatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplatesEdge
}

"""All input for the `updateTemplatePermissionById` mutation."""
input UpdateTemplatePermissionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TemplatePermission` being updated.
  """
  templatePermissionPatch: TemplatePermissionPatch!
  id: Int!
}

"""All input for the `updateTemplatePermission` mutation."""
input UpdateTemplatePermissionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TemplatePermission` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TemplatePermission` being updated.
  """
  templatePermissionPatch: TemplatePermissionPatch!
}

"""
An object where the defined keys will be set on the `templatePermission` being updated.
"""
input updateTemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionJoinIdFkeyPatch {
  id: Int
  templateId: Int
  templateSectionId: Int
  permissionPolicyId: Int
  restrictions: JSON
  permissionJoinToPermissionJoinId: TemplatePermissionPermissionJoinIdFkeyInput
  templateToTemplateId: TemplatePermissionTemplateIdFkeyInput
  templateSectionToTemplateSectionId: TemplatePermissionTemplateSectionIdFkeyInput
  permissionPolicyToPermissionPolicyId: TemplatePermissionPermissionPolicyIdFkeyInput
}

"""
An object where the defined keys will be set on the `templatePermission` being updated.
"""
input updateTemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionPolicyIdFkeyPatch {
  id: Int
  permissionJoinId: Int
  templateId: Int
  templateSectionId: Int
  restrictions: JSON
  permissionJoinToPermissionJoinId: TemplatePermissionPermissionJoinIdFkeyInput
  templateToTemplateId: TemplatePermissionTemplateIdFkeyInput
  templateSectionToTemplateSectionId: TemplatePermissionTemplateSectionIdFkeyInput
  permissionPolicyToPermissionPolicyId: TemplatePermissionPermissionPolicyIdFkeyInput
}

"""
An object where the defined keys will be set on the `templatePermission` being updated.
"""
input updateTemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch {
  id: Int
  permissionJoinId: Int
  templateSectionId: Int
  permissionPolicyId: Int
  restrictions: JSON
  permissionJoinToPermissionJoinId: TemplatePermissionPermissionJoinIdFkeyInput
  templateToTemplateId: TemplatePermissionTemplateIdFkeyInput
  templateSectionToTemplateSectionId: TemplatePermissionTemplateSectionIdFkeyInput
  permissionPolicyToPermissionPolicyId: TemplatePermissionPermissionPolicyIdFkeyInput
}

"""
An object where the defined keys will be set on the `templatePermission` being updated.
"""
input updateTemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateSectionIdFkeyPatch {
  id: Int
  permissionJoinId: Int
  templateId: Int
  permissionPolicyId: Int
  restrictions: JSON
  permissionJoinToPermissionJoinId: TemplatePermissionPermissionJoinIdFkeyInput
  templateToTemplateId: TemplatePermissionTemplateIdFkeyInput
  templateSectionToTemplateSectionId: TemplatePermissionTemplateSectionIdFkeyInput
  permissionPolicyToPermissionPolicyId: TemplatePermissionPermissionPolicyIdFkeyInput
}

"""The output of our update `TemplatePermission` mutation."""
type UpdateTemplatePermissionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplatePermission` that was updated by this mutation."""
  templatePermission: TemplatePermission

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `PermissionJoin` that is related to this `TemplatePermission`.
  """
  permissionJoinByPermissionJoinId: PermissionJoin

  """
  Reads a single `Template` that is related to this `TemplatePermission`.
  """
  templateByTemplateId: Template

  """
  Reads a single `TemplateSection` that is related to this `TemplatePermission`.
  """
  templateSectionByTemplateSectionId: TemplateSection

  """
  Reads a single `PermissionPolicy` that is related to this `TemplatePermission`.
  """
  permissionPolicyByPermissionPolicyId: PermissionPolicy

  """An edge for our `TemplatePermission`. May be used by Relay 1."""
  templatePermissionEdge(
    """The method to use when ordering `TemplatePermission`."""
    orderBy: [TemplatePermissionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplatePermissionsEdge
}

"""All input for the `updateTemplateReviewStageById` mutation."""
input UpdateTemplateReviewStageByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TemplateReviewStage` being updated.
  """
  templateReviewStagePatch: TemplateReviewStagePatch!
  id: Int!
}

"""All input for the `updateTemplateReviewStage` mutation."""
input UpdateTemplateReviewStageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TemplateReviewStage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TemplateReviewStage` being updated.
  """
  templateReviewStagePatch: TemplateReviewStagePatch!
}

"""
An object where the defined keys will be set on the `templateReviewStage` being updated.
"""
input updateTemplateReviewStageOnTemplateReviewStageForTemplateReviewStageNextReviewStageIdFkeyPatch {
  id: Int
  templateStageId: Int
  permissionJoinId: Int
  name: String
  templateStageToTemplateStageId: TemplateReviewStageTemplateStageIdFkeyInput
  permissionJoinToPermissionJoinId: TemplateReviewStagePermissionJoinIdFkeyInput
  templateReviewStageToNextReviewStageId: TemplateReviewStageNextReviewStageIdFkeyInput
}

"""
An object where the defined keys will be set on the `templateReviewStage` being updated.
"""
input updateTemplateReviewStageOnTemplateReviewStageForTemplateReviewStagePermissionJoinIdFkeyPatch {
  id: Int
  templateStageId: Int
  nextReviewStageId: Int
  name: String
  templateStageToTemplateStageId: TemplateReviewStageTemplateStageIdFkeyInput
  permissionJoinToPermissionJoinId: TemplateReviewStagePermissionJoinIdFkeyInput
  templateReviewStageToNextReviewStageId: TemplateReviewStageNextReviewStageIdFkeyInput
}

"""
An object where the defined keys will be set on the `templateReviewStage` being updated.
"""
input updateTemplateReviewStageOnTemplateReviewStageForTemplateReviewStageTemplateStageIdFkeyPatch {
  id: Int
  permissionJoinId: Int
  nextReviewStageId: Int
  name: String
  templateStageToTemplateStageId: TemplateReviewStageTemplateStageIdFkeyInput
  permissionJoinToPermissionJoinId: TemplateReviewStagePermissionJoinIdFkeyInput
  templateReviewStageToNextReviewStageId: TemplateReviewStageNextReviewStageIdFkeyInput
}

"""The output of our update `TemplateReviewStage` mutation."""
type UpdateTemplateReviewStagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplateReviewStage` that was updated by this mutation."""
  templateReviewStage: TemplateReviewStage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `TemplateStage` that is related to this `TemplateReviewStage`.
  """
  templateStageByTemplateStageId: TemplateStage

  """
  Reads a single `PermissionJoin` that is related to this `TemplateReviewStage`.
  """
  permissionJoinByPermissionJoinId: PermissionJoin

  """
  Reads a single `TemplateReviewStage` that is related to this `TemplateReviewStage`.
  """
  templateReviewStageByNextReviewStageId: TemplateReviewStage

  """An edge for our `TemplateReviewStage`. May be used by Relay 1."""
  templateReviewStageEdge(
    """The method to use when ordering `TemplateReviewStage`."""
    orderBy: [TemplateReviewStagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplateReviewStagesEdge
}

"""All input for the `updateTemplateSectionById` mutation."""
input UpdateTemplateSectionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TemplateSection` being updated.
  """
  templateSectionPatch: TemplateSectionPatch!
  id: Int!
}

"""All input for the `updateTemplateSection` mutation."""
input UpdateTemplateSectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TemplateSection` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TemplateSection` being updated.
  """
  templateSectionPatch: TemplateSectionPatch!
}

"""
An object where the defined keys will be set on the `templateSection` being updated.
"""
input updateTemplateSectionOnApplicationSectionForApplicationSectionTemplateSectionIdFkeyPatch {
  id: Int
  templateId: Int
  title: String
  code: String
  templateToTemplateId: TemplateSectionTemplateIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionTemplateSectionIdFkeyInverseInput
  templateElementsUsingId: TemplateElementSectionIdFkeyInverseInput
  applicationSectionsUsingId: ApplicationSectionTemplateSectionIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `templateSection` being updated.
"""
input updateTemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyPatch {
  id: Int
  templateId: Int
  title: String
  code: String
  templateToTemplateId: TemplateSectionTemplateIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionTemplateSectionIdFkeyInverseInput
  templateElementsUsingId: TemplateElementSectionIdFkeyInverseInput
  applicationSectionsUsingId: ApplicationSectionTemplateSectionIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `templateSection` being updated.
"""
input updateTemplateSectionOnTemplatePermissionForTemplatePermissionTemplateSectionIdFkeyPatch {
  id: Int
  templateId: Int
  title: String
  code: String
  templateToTemplateId: TemplateSectionTemplateIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionTemplateSectionIdFkeyInverseInput
  templateElementsUsingId: TemplateElementSectionIdFkeyInverseInput
  applicationSectionsUsingId: ApplicationSectionTemplateSectionIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `templateSection` being updated.
"""
input updateTemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch {
  id: Int
  title: String
  code: String
  templateToTemplateId: TemplateSectionTemplateIdFkeyInput
  templatePermissionsUsingId: TemplatePermissionTemplateSectionIdFkeyInverseInput
  templateElementsUsingId: TemplateElementSectionIdFkeyInverseInput
  applicationSectionsUsingId: ApplicationSectionTemplateSectionIdFkeyInverseInput
}

"""The output of our update `TemplateSection` mutation."""
type UpdateTemplateSectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplateSection` that was updated by this mutation."""
  templateSection: TemplateSection

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Template` that is related to this `TemplateSection`."""
  templateByTemplateId: Template

  """An edge for our `TemplateSection`. May be used by Relay 1."""
  templateSectionEdge(
    """The method to use when ordering `TemplateSection`."""
    orderBy: [TemplateSectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplateSectionsEdge
}

"""All input for the `updateTemplateStageById` mutation."""
input UpdateTemplateStageByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TemplateStage` being updated.
  """
  templateStagePatch: TemplateStagePatch!
  id: Int!
}

"""All input for the `updateTemplateStage` mutation."""
input UpdateTemplateStageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TemplateStage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TemplateStage` being updated.
  """
  templateStagePatch: TemplateStagePatch!
}

"""
An object where the defined keys will be set on the `templateStage` being updated.
"""
input updateTemplateStageOnTemplateReviewStageForTemplateReviewStageTemplateStageIdFkeyPatch {
  id: Int
  tamplateId: Int
  templateToTamplateId: TemplateStageTamplateIdFkeyInput
  templateReviewStagesUsingId: TemplateReviewStageTemplateStageIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `templateStage` being updated.
"""
input updateTemplateStageOnTemplateStageForTemplateStageTamplateIdFkeyPatch {
  id: Int
  templateToTamplateId: TemplateStageTamplateIdFkeyInput
  templateReviewStagesUsingId: TemplateReviewStageTemplateStageIdFkeyInverseInput
}

"""The output of our update `TemplateStage` mutation."""
type UpdateTemplateStagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplateStage` that was updated by this mutation."""
  templateStage: TemplateStage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Template` that is related to this `TemplateStage`."""
  templateByTamplateId: Template

  """An edge for our `TemplateStage`. May be used by Relay 1."""
  templateStageEdge(
    """The method to use when ordering `TemplateStage`."""
    orderBy: [TemplateStagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplateStagesEdge
}

"""All input for the `updateTemplateVersionById` mutation."""
input UpdateTemplateVersionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TemplateVersion` being updated.
  """
  templateVersionPatch: TemplateVersionPatch!
  id: Int!
}

"""All input for the `updateTemplateVersion` mutation."""
input UpdateTemplateVersionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TemplateVersion` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TemplateVersion` being updated.
  """
  templateVersionPatch: TemplateVersionPatch!
}

"""
An object where the defined keys will be set on the `templateVersion` being updated.
"""
input updateTemplateVersionOnTemplateForTemplateVersionIdFkeyPatch {
  id: Int
  number: Int
  timeCreated: Datetime
  isCurrent: Boolean
  templatesUsingId: TemplateVersionIdFkeyInverseInput
}

"""The output of our update `TemplateVersion` mutation."""
type UpdateTemplateVersionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TemplateVersion` that was updated by this mutation."""
  templateVersion: TemplateVersion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TemplateVersion`. May be used by Relay 1."""
  templateVersionEdge(
    """The method to use when ordering `TemplateVersion`."""
    orderBy: [TemplateVersionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TemplateVersionsEdge
}

"""All input for the `updateTriggerQueueById` mutation."""
input UpdateTriggerQueueByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TriggerQueue` being updated.
  """
  triggerQueuePatch: TriggerQueuePatch!
  id: Int!
}

"""All input for the `updateTriggerQueue` mutation."""
input UpdateTriggerQueueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TriggerQueue` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TriggerQueue` being updated.
  """
  triggerQueuePatch: TriggerQueuePatch!
}

"""
An object where the defined keys will be set on the `triggerQueue` being updated.
"""
input updateTriggerQueueOnActionQueueForActionQueueTriggerEventFkeyPatch {
  id: Int
  triggerType: Trigger
  table: String
  recordId: Int
  timestamp: Datetime
  payload: JSON
  status: TriggerQueueStatus
  log: JSON
  actionQueuesUsingId: ActionQueueTriggerEventFkeyInverseInput
}

"""The output of our update `TriggerQueue` mutation."""
type UpdateTriggerQueuePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TriggerQueue` that was updated by this mutation."""
  triggerQueue: TriggerQueue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TriggerQueue`. May be used by Relay 1."""
  triggerQueueEdge(
    """The method to use when ordering `TriggerQueue`."""
    orderBy: [TriggerQueuesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TriggerQueuesEdge
}

"""All input for the `updateUserById` mutation."""
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  id: Int!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""
An object where the defined keys will be set on the `user` being updated.
"""
input updateUserOnApplicationForApplicationUserIdFkeyPatch {
  id: Int
  username: String
  password: String
  email: String
  role: UserRole
  userOrganisationsUsingId: UserOrganisationUserIdFkeyInverseInput
  permissionJoinsUsingId: PermissionJoinUserIdFkeyInverseInput
  applicationsUsingId: ApplicationUserIdFkeyInverseInput
  reviewSectionAssignmentsToReviewerIdUsingId: ReviewSectionAssignmentReviewerIdFkeyInverseInput
  reviewSectionAssignmentsToAssignerIdUsingId: ReviewSectionAssignmentAssignerIdFkeyInverseInput
  filesUsingId: FileUserIdFkeyInverseInput
  notificationsUsingId: NotificationUserIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `user` being updated.
"""
input updateUserOnFileForFileUserIdFkeyPatch {
  id: Int
  username: String
  password: String
  email: String
  role: UserRole
  userOrganisationsUsingId: UserOrganisationUserIdFkeyInverseInput
  permissionJoinsUsingId: PermissionJoinUserIdFkeyInverseInput
  applicationsUsingId: ApplicationUserIdFkeyInverseInput
  reviewSectionAssignmentsToReviewerIdUsingId: ReviewSectionAssignmentReviewerIdFkeyInverseInput
  reviewSectionAssignmentsToAssignerIdUsingId: ReviewSectionAssignmentAssignerIdFkeyInverseInput
  filesUsingId: FileUserIdFkeyInverseInput
  notificationsUsingId: NotificationUserIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `user` being updated.
"""
input updateUserOnNotificationForNotificationUserIdFkeyPatch {
  id: Int
  username: String
  password: String
  email: String
  role: UserRole
  userOrganisationsUsingId: UserOrganisationUserIdFkeyInverseInput
  permissionJoinsUsingId: PermissionJoinUserIdFkeyInverseInput
  applicationsUsingId: ApplicationUserIdFkeyInverseInput
  reviewSectionAssignmentsToReviewerIdUsingId: ReviewSectionAssignmentReviewerIdFkeyInverseInput
  reviewSectionAssignmentsToAssignerIdUsingId: ReviewSectionAssignmentAssignerIdFkeyInverseInput
  filesUsingId: FileUserIdFkeyInverseInput
  notificationsUsingId: NotificationUserIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `user` being updated.
"""
input updateUserOnPermissionJoinForPermissionJoinUserIdFkeyPatch {
  id: Int
  username: String
  password: String
  email: String
  role: UserRole
  userOrganisationsUsingId: UserOrganisationUserIdFkeyInverseInput
  permissionJoinsUsingId: PermissionJoinUserIdFkeyInverseInput
  applicationsUsingId: ApplicationUserIdFkeyInverseInput
  reviewSectionAssignmentsToReviewerIdUsingId: ReviewSectionAssignmentReviewerIdFkeyInverseInput
  reviewSectionAssignmentsToAssignerIdUsingId: ReviewSectionAssignmentAssignerIdFkeyInverseInput
  filesUsingId: FileUserIdFkeyInverseInput
  notificationsUsingId: NotificationUserIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `user` being updated.
"""
input updateUserOnReviewSectionAssignmentForReviewSectionAssignmentAssignerIdFkeyPatch {
  id: Int
  username: String
  password: String
  email: String
  role: UserRole
  userOrganisationsUsingId: UserOrganisationUserIdFkeyInverseInput
  permissionJoinsUsingId: PermissionJoinUserIdFkeyInverseInput
  applicationsUsingId: ApplicationUserIdFkeyInverseInput
  reviewSectionAssignmentsToReviewerIdUsingId: ReviewSectionAssignmentReviewerIdFkeyInverseInput
  reviewSectionAssignmentsToAssignerIdUsingId: ReviewSectionAssignmentAssignerIdFkeyInverseInput
  filesUsingId: FileUserIdFkeyInverseInput
  notificationsUsingId: NotificationUserIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `user` being updated.
"""
input updateUserOnReviewSectionAssignmentForReviewSectionAssignmentReviewerIdFkeyPatch {
  id: Int
  username: String
  password: String
  email: String
  role: UserRole
  userOrganisationsUsingId: UserOrganisationUserIdFkeyInverseInput
  permissionJoinsUsingId: PermissionJoinUserIdFkeyInverseInput
  applicationsUsingId: ApplicationUserIdFkeyInverseInput
  reviewSectionAssignmentsToReviewerIdUsingId: ReviewSectionAssignmentReviewerIdFkeyInverseInput
  reviewSectionAssignmentsToAssignerIdUsingId: ReviewSectionAssignmentAssignerIdFkeyInverseInput
  filesUsingId: FileUserIdFkeyInverseInput
  notificationsUsingId: NotificationUserIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `user` being updated.
"""
input updateUserOnUserOrganisationForUserOrganisationUserIdFkeyPatch {
  id: Int
  username: String
  password: String
  email: String
  role: UserRole
  userOrganisationsUsingId: UserOrganisationUserIdFkeyInverseInput
  permissionJoinsUsingId: PermissionJoinUserIdFkeyInverseInput
  applicationsUsingId: ApplicationUserIdFkeyInverseInput
  reviewSectionAssignmentsToReviewerIdUsingId: ReviewSectionAssignmentReviewerIdFkeyInverseInput
  reviewSectionAssignmentsToAssignerIdUsingId: ReviewSectionAssignmentAssignerIdFkeyInverseInput
  filesUsingId: FileUserIdFkeyInverseInput
  notificationsUsingId: NotificationUserIdFkeyInverseInput
}

"""All input for the `updateUserOrganisationById` mutation."""
input UpdateUserOrganisationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserOrganisation` being updated.
  """
  userOrganisationPatch: UserOrganisationPatch!
  id: Int!
}

"""All input for the `updateUserOrganisation` mutation."""
input UpdateUserOrganisationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserOrganisation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserOrganisation` being updated.
  """
  userOrganisationPatch: UserOrganisationPatch!
}

"""
An object where the defined keys will be set on the `userOrganisation` being updated.
"""
input updateUserOrganisationOnPermissionJoinForPermissionJoinUserOrganisationIdFkeyPatch {
  id: Int
  userId: Int
  organistionId: Int
  job: String
  userToUserId: UserOrganisationUserIdFkeyInput
  organisationToOrganistionId: UserOrganisationOrganistionIdFkeyInput
  permissionJoinsUsingId: PermissionJoinUserOrganisationIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `userOrganisation` being updated.
"""
input updateUserOrganisationOnUserOrganisationForUserOrganisationOrganistionIdFkeyPatch {
  id: Int
  userId: Int
  job: String
  userToUserId: UserOrganisationUserIdFkeyInput
  organisationToOrganistionId: UserOrganisationOrganistionIdFkeyInput
  permissionJoinsUsingId: PermissionJoinUserOrganisationIdFkeyInverseInput
}

"""
An object where the defined keys will be set on the `userOrganisation` being updated.
"""
input updateUserOrganisationOnUserOrganisationForUserOrganisationUserIdFkeyPatch {
  id: Int
  organistionId: Int
  job: String
  userToUserId: UserOrganisationUserIdFkeyInput
  organisationToOrganistionId: UserOrganisationOrganistionIdFkeyInput
  permissionJoinsUsingId: PermissionJoinUserOrganisationIdFkeyInverseInput
}

"""The output of our update `UserOrganisation` mutation."""
type UpdateUserOrganisationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserOrganisation` that was updated by this mutation."""
  userOrganisation: UserOrganisation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `UserOrganisation`."""
  userByUserId: User

  """
  Reads a single `Organisation` that is related to this `UserOrganisation`.
  """
  organisationByOrganistionId: Organisation

  """An edge for our `UserOrganisation`. May be used by Relay 1."""
  userOrganisationEdge(
    """The method to use when ordering `UserOrganisation`."""
    orderBy: [UserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserOrganisationsEdge
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  username: String
  password: String
  email: String
  role: UserRole

  """Reads and enables pagination through a set of `UserOrganisation`."""
  userOrganisationsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserOrganisation`."""
    orderBy: [UserOrganisationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserOrganisationCondition
  ): UserOrganisationsConnection!

  """Reads and enables pagination through a set of `PermissionJoin`."""
  permissionJoinsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PermissionJoin`."""
    orderBy: [PermissionJoinsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PermissionJoinCondition
  ): PermissionJoinsConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!

  """
  Reads and enables pagination through a set of `ReviewSectionAssignment`.
  """
  reviewSectionAssignmentsByReviewerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReviewSectionAssignment`."""
    orderBy: [ReviewSectionAssignmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewSectionAssignmentCondition
  ): ReviewSectionAssignmentsConnection!

  """
  Reads and enables pagination through a set of `ReviewSectionAssignment`.
  """
  reviewSectionAssignmentsByAssignerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ReviewSectionAssignment`."""
    orderBy: [ReviewSectionAssignmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewSectionAssignmentCondition
  ): ReviewSectionAssignmentsConnection!

  """Reads and enables pagination through a set of `File`."""
  filesByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition
  ): FilesConnection!

  """Reads and enables pagination through a set of `Notification`."""
  notificationsByUserId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Notification`."""
    orderBy: [NotificationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NotificationCondition
  ): NotificationsConnection!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `password` field."""
  password: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `role` field."""
  role: UserRole
}

"""An input for mutations affecting `User`"""
input UserInput {
  id: Int
  username: String
  password: String
  email: String
  role: UserRole
  userOrganisationsUsingId: UserOrganisationUserIdFkeyInverseInput
  permissionJoinsUsingId: PermissionJoinUserIdFkeyInverseInput
  applicationsUsingId: ApplicationUserIdFkeyInverseInput
  reviewSectionAssignmentsToReviewerIdUsingId: ReviewSectionAssignmentReviewerIdFkeyInverseInput
  reviewSectionAssignmentsToAssignerIdUsingId: ReviewSectionAssignmentAssignerIdFkeyInverseInput
  filesUsingId: FileUserIdFkeyInverseInput
  notificationsUsingId: NotificationUserIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input UserNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `user` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input UserNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `user` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input UserOnApplicationForApplicationUserIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `application` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `application` being updated.
  """
  applicationPatch: ApplicationPatch!
}

"""The fields on `user` to look up the row to update."""
input UserOnApplicationForApplicationUserIdFkeyUsingUserPkeyUpdate {
  """
  An object where the defined keys will be set on the `user` being updated.
  """
  userPatch: updateUserOnApplicationForApplicationUserIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input UserOnFileForFileUserIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `file` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `file` being updated.
  """
  filePatch: FilePatch!
}

"""The fields on `user` to look up the row to update."""
input UserOnFileForFileUserIdFkeyUsingUserPkeyUpdate {
  """
  An object where the defined keys will be set on the `user` being updated.
  """
  userPatch: updateUserOnFileForFileUserIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input UserOnNotificationForNotificationUserIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `notification` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `notification` being updated.
  """
  notificationPatch: NotificationPatch!
}

"""The fields on `user` to look up the row to update."""
input UserOnNotificationForNotificationUserIdFkeyUsingUserPkeyUpdate {
  """
  An object where the defined keys will be set on the `user` being updated.
  """
  userPatch: updateUserOnNotificationForNotificationUserIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input UserOnPermissionJoinForPermissionJoinUserIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `permissionJoin` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `permissionJoin` being updated.
  """
  permissionJoinPatch: PermissionJoinPatch!
}

"""The fields on `user` to look up the row to update."""
input UserOnPermissionJoinForPermissionJoinUserIdFkeyUsingUserPkeyUpdate {
  """
  An object where the defined keys will be set on the `user` being updated.
  """
  userPatch: updateUserOnPermissionJoinForPermissionJoinUserIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input UserOnReviewSectionAssignmentForReviewSectionAssignmentAssignerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `reviewSectionAssignment` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `reviewSectionAssignment` being updated.
  """
  reviewSectionAssignmentPatch: ReviewSectionAssignmentPatch!
}

"""The fields on `user` to look up the row to update."""
input UserOnReviewSectionAssignmentForReviewSectionAssignmentAssignerIdFkeyUsingUserPkeyUpdate {
  """
  An object where the defined keys will be set on the `user` being updated.
  """
  userPatch: updateUserOnReviewSectionAssignmentForReviewSectionAssignmentAssignerIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input UserOnReviewSectionAssignmentForReviewSectionAssignmentReviewerIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `reviewSectionAssignment` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `reviewSectionAssignment` being updated.
  """
  reviewSectionAssignmentPatch: ReviewSectionAssignmentPatch!
}

"""The fields on `user` to look up the row to update."""
input UserOnReviewSectionAssignmentForReviewSectionAssignmentReviewerIdFkeyUsingUserPkeyUpdate {
  """
  An object where the defined keys will be set on the `user` being updated.
  """
  userPatch: updateUserOnReviewSectionAssignmentForReviewSectionAssignmentReviewerIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input UserOnUserOrganisationForUserOrganisationUserIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `userOrganisation` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `userOrganisation` being updated.
  """
  userOrganisationPatch: UserOrganisationPatch!
}

"""The fields on `user` to look up the row to update."""
input UserOnUserOrganisationForUserOrganisationUserIdFkeyUsingUserPkeyUpdate {
  """
  An object where the defined keys will be set on the `user` being updated.
  """
  userPatch: updateUserOnUserOrganisationForUserOrganisationUserIdFkeyPatch!
  id: Int!
}

type UserOrganisation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userId: Int
  organistionId: Int
  job: String

  """Reads a single `User` that is related to this `UserOrganisation`."""
  userByUserId: User

  """
  Reads a single `Organisation` that is related to this `UserOrganisation`.
  """
  organisationByOrganistionId: Organisation

  """Reads and enables pagination through a set of `PermissionJoin`."""
  permissionJoinsByUserOrganisationId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PermissionJoin`."""
    orderBy: [PermissionJoinsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PermissionJoinCondition
  ): PermissionJoinsConnection!
}

"""
A condition to be used against `UserOrganisation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserOrganisationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `organistionId` field."""
  organistionId: Int

  """Checks for equality with the object’s `job` field."""
  job: String
}

"""An input for mutations affecting `UserOrganisation`"""
input UserOrganisationInput {
  id: Int
  userId: Int
  organistionId: Int
  job: String
  userToUserId: UserOrganisationUserIdFkeyInput
  organisationToOrganistionId: UserOrganisationOrganistionIdFkeyInput
  permissionJoinsUsingId: PermissionJoinUserOrganisationIdFkeyInverseInput
}

"""The globally unique `ID` look up for the row to connect."""
input UserOrganisationNodeIdConnect {
  """
  The globally unique `ID` which identifies a single `userOrganisation` to be connected.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to delete."""
input UserOrganisationNodeIdDelete {
  """
  The globally unique `ID` which identifies a single `userOrganisation` to be deleted.
  """
  nodeId: ID!
}

"""The globally unique `ID` look up for the row to update."""
input UserOrganisationOnPermissionJoinForPermissionJoinUserOrganisationIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `permissionJoin` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `permissionJoin` being updated.
  """
  permissionJoinPatch: PermissionJoinPatch!
}

"""The fields on `userOrganisation` to look up the row to update."""
input UserOrganisationOnPermissionJoinForPermissionJoinUserOrganisationIdFkeyUsingUserOrganisationPkeyUpdate {
  """
  An object where the defined keys will be set on the `userOrganisation` being updated.
  """
  userOrganisationPatch: updateUserOrganisationOnPermissionJoinForPermissionJoinUserOrganisationIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input UserOrganisationOnUserOrganisationForUserOrganisationOrganistionIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `organisation` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `organisation` being updated.
  """
  organisationPatch: OrganisationPatch!
}

"""The fields on `userOrganisation` to look up the row to update."""
input UserOrganisationOnUserOrganisationForUserOrganisationOrganistionIdFkeyUsingUserOrganisationPkeyUpdate {
  """
  An object where the defined keys will be set on the `userOrganisation` being updated.
  """
  userOrganisationPatch: updateUserOrganisationOnUserOrganisationForUserOrganisationOrganistionIdFkeyPatch!
  id: Int!
}

"""The globally unique `ID` look up for the row to update."""
input UserOrganisationOnUserOrganisationForUserOrganisationUserIdFkeyNodeIdUpdate {
  """
  The globally unique `ID` which identifies a single `user` to be connected.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `user` being updated.
  """
  userPatch: UserPatch!
}

"""The fields on `userOrganisation` to look up the row to update."""
input UserOrganisationOnUserOrganisationForUserOrganisationUserIdFkeyUsingUserOrganisationPkeyUpdate {
  """
  An object where the defined keys will be set on the `userOrganisation` being updated.
  """
  userOrganisationPatch: updateUserOrganisationOnUserOrganisationForUserOrganisationUserIdFkeyPatch!
  id: Int!
}

"""
Input for the nested mutation of `organisation` in the `UserOrganisationInput` mutation.
"""
input UserOrganisationOrganistionIdFkeyInput {
  """
  The primary key(s) for `organisation` for the far side of the relationship.
  """
  connectById: OrganisationOrganisationPkeyConnect

  """
  The primary key(s) for `organisation` for the far side of the relationship.
  """
  connectByNodeId: OrganisationNodeIdConnect

  """
  The primary key(s) for `organisation` for the far side of the relationship.
  """
  deleteById: OrganisationOrganisationPkeyDelete

  """
  The primary key(s) for `organisation` for the far side of the relationship.
  """
  deleteByNodeId: OrganisationNodeIdDelete

  """
  The primary key(s) and patch data for `organisation` for the far side of the relationship.
  """
  updateById: OrganisationOnUserOrganisationForUserOrganisationOrganistionIdFkeyUsingOrganisationPkeyUpdate

  """
  The primary key(s) and patch data for `organisation` for the far side of the relationship.
  """
  updateByNodeId: UserOrganisationOnUserOrganisationForUserOrganisationOrganistionIdFkeyNodeIdUpdate

  """
  A `OrganisationInput` object that will be created and connected to this object.
  """
  create: UserOrganisationOrganistionIdFkeyOrganisationCreateInput
}

"""
Input for the nested mutation of `userOrganisation` in the `OrganisationInput` mutation.
"""
input UserOrganisationOrganistionIdFkeyInverseInput {
  """
  Flag indicating whether all other `userOrganisation` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `userOrganisation` for the far side of the relationship.
  """
  connectById: [UserOrganisationUserOrganisationPkeyConnect!]

  """
  The primary key(s) for `userOrganisation` for the far side of the relationship.
  """
  connectByNodeId: [UserOrganisationNodeIdConnect!]

  """
  The primary key(s) for `userOrganisation` for the far side of the relationship.
  """
  deleteById: [UserOrganisationUserOrganisationPkeyDelete!]

  """
  The primary key(s) for `userOrganisation` for the far side of the relationship.
  """
  deleteByNodeId: [UserOrganisationNodeIdDelete!]

  """
  The primary key(s) and patch data for `userOrganisation` for the far side of the relationship.
  """
  updateById: [UserOrganisationOnUserOrganisationForUserOrganisationOrganistionIdFkeyUsingUserOrganisationPkeyUpdate!]

  """
  The primary key(s) and patch data for `userOrganisation` for the far side of the relationship.
  """
  updateByNodeId: [OrganisationOnUserOrganisationForUserOrganisationOrganistionIdFkeyNodeIdUpdate!]

  """
  A `UserOrganisationInput` object that will be created and connected to this object.
  """
  create: [UserOrganisationOrganistionIdFkeyUserOrganisationCreateInput!]
}

"""The `organisation` to be created by this mutation."""
input UserOrganisationOrganistionIdFkeyOrganisationCreateInput {
  id: Int
  name: String
  licenceNumber: Int
  address: String
  userOrganisationsUsingId: UserOrganisationOrganistionIdFkeyInverseInput
}

"""The `userOrganisation` to be created by this mutation."""
input UserOrganisationOrganistionIdFkeyUserOrganisationCreateInput {
  id: Int
  userId: Int
  job: String
  userToUserId: UserOrganisationUserIdFkeyInput
  organisationToOrganistionId: UserOrganisationOrganistionIdFkeyInput
  permissionJoinsUsingId: PermissionJoinUserOrganisationIdFkeyInverseInput
}

"""
Represents an update to a `UserOrganisation`. Fields that are set will be updated.
"""
input UserOrganisationPatch {
  id: Int
  userId: Int
  organistionId: Int
  job: String
  userToUserId: UserOrganisationUserIdFkeyInput
  organisationToOrganistionId: UserOrganisationOrganistionIdFkeyInput
  permissionJoinsUsingId: PermissionJoinUserOrganisationIdFkeyInverseInput
}

"""A connection to a list of `UserOrganisation` values."""
type UserOrganisationsConnection {
  """A list of `UserOrganisation` objects."""
  nodes: [UserOrganisation]!

  """
  A list of edges which contains the `UserOrganisation` and cursor to aid in pagination.
  """
  edges: [UserOrganisationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UserOrganisation` you could get from the connection.
  """
  totalCount: Int!
}

"""A `UserOrganisation` edge in the connection."""
type UserOrganisationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserOrganisation` at the end of the edge."""
  node: UserOrganisation
}

"""Methods to use when ordering `UserOrganisation`."""
enum UserOrganisationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_ID_ASC
  USER_ID_DESC
  ORGANISTION_ID_ASC
  ORGANISTION_ID_DESC
  JOB_ASC
  JOB_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Input for the nested mutation of `user` in the `UserOrganisationInput` mutation.
"""
input UserOrganisationUserIdFkeyInput {
  """The primary key(s) for `user` for the far side of the relationship."""
  connectById: UserUserPkeyConnect

  """The primary key(s) for `user` for the far side of the relationship."""
  connectByNodeId: UserNodeIdConnect

  """The primary key(s) for `user` for the far side of the relationship."""
  deleteById: UserUserPkeyDelete

  """The primary key(s) for `user` for the far side of the relationship."""
  deleteByNodeId: UserNodeIdDelete

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateById: UserOnUserOrganisationForUserOrganisationUserIdFkeyUsingUserPkeyUpdate

  """
  The primary key(s) and patch data for `user` for the far side of the relationship.
  """
  updateByNodeId: UserOrganisationOnUserOrganisationForUserOrganisationUserIdFkeyNodeIdUpdate

  """
  A `UserInput` object that will be created and connected to this object.
  """
  create: UserOrganisationUserIdFkeyUserCreateInput
}

"""
Input for the nested mutation of `userOrganisation` in the `UserInput` mutation.
"""
input UserOrganisationUserIdFkeyInverseInput {
  """
  Flag indicating whether all other `userOrganisation` records that match this relationship should be removed.
  """
  deleteOthers: Boolean

  """
  The primary key(s) for `userOrganisation` for the far side of the relationship.
  """
  connectById: [UserOrganisationUserOrganisationPkeyConnect!]

  """
  The primary key(s) for `userOrganisation` for the far side of the relationship.
  """
  connectByNodeId: [UserOrganisationNodeIdConnect!]

  """
  The primary key(s) for `userOrganisation` for the far side of the relationship.
  """
  deleteById: [UserOrganisationUserOrganisationPkeyDelete!]

  """
  The primary key(s) for `userOrganisation` for the far side of the relationship.
  """
  deleteByNodeId: [UserOrganisationNodeIdDelete!]

  """
  The primary key(s) and patch data for `userOrganisation` for the far side of the relationship.
  """
  updateById: [UserOrganisationOnUserOrganisationForUserOrganisationUserIdFkeyUsingUserOrganisationPkeyUpdate!]

  """
  The primary key(s) and patch data for `userOrganisation` for the far side of the relationship.
  """
  updateByNodeId: [UserOnUserOrganisationForUserOrganisationUserIdFkeyNodeIdUpdate!]

  """
  A `UserOrganisationInput` object that will be created and connected to this object.
  """
  create: [UserOrganisationUserIdFkeyUserOrganisationCreateInput!]
}

"""The `user` to be created by this mutation."""
input UserOrganisationUserIdFkeyUserCreateInput {
  id: Int
  username: String
  password: String
  email: String
  role: UserRole
  userOrganisationsUsingId: UserOrganisationUserIdFkeyInverseInput
  permissionJoinsUsingId: PermissionJoinUserIdFkeyInverseInput
  applicationsUsingId: ApplicationUserIdFkeyInverseInput
  reviewSectionAssignmentsToReviewerIdUsingId: ReviewSectionAssignmentReviewerIdFkeyInverseInput
  reviewSectionAssignmentsToAssignerIdUsingId: ReviewSectionAssignmentAssignerIdFkeyInverseInput
  filesUsingId: FileUserIdFkeyInverseInput
  notificationsUsingId: NotificationUserIdFkeyInverseInput
}

"""The `userOrganisation` to be created by this mutation."""
input UserOrganisationUserIdFkeyUserOrganisationCreateInput {
  id: Int
  organistionId: Int
  job: String
  userToUserId: UserOrganisationUserIdFkeyInput
  organisationToOrganistionId: UserOrganisationOrganistionIdFkeyInput
  permissionJoinsUsingId: PermissionJoinUserOrganisationIdFkeyInverseInput
}

"""The fields on `userOrganisation` to look up the row to connect."""
input UserOrganisationUserOrganisationPkeyConnect {
  id: Int!
}

"""The fields on `userOrganisation` to look up the row to delete."""
input UserOrganisationUserOrganisationPkeyDelete {
  id: Int!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  id: Int
  username: String
  password: String
  email: String
  role: UserRole
  userOrganisationsUsingId: UserOrganisationUserIdFkeyInverseInput
  permissionJoinsUsingId: PermissionJoinUserIdFkeyInverseInput
  applicationsUsingId: ApplicationUserIdFkeyInverseInput
  reviewSectionAssignmentsToReviewerIdUsingId: ReviewSectionAssignmentReviewerIdFkeyInverseInput
  reviewSectionAssignmentsToAssignerIdUsingId: ReviewSectionAssignmentAssignerIdFkeyInverseInput
  filesUsingId: FileUserIdFkeyInverseInput
  notificationsUsingId: NotificationUserIdFkeyInverseInput
}

enum UserRole {
  APPLICANT
  REVIEWER
  SUPERVISOR
  CHIEF
  DIRECTOR
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USERNAME_ASC
  USERNAME_DESC
  PASSWORD_ASC
  PASSWORD_DESC
  EMAIL_ASC
  EMAIL_DESC
  ROLE_ASC
  ROLE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The fields on `user` to look up the row to connect."""
input UserUserPkeyConnect {
  id: Int!
}

"""The fields on `user` to look up the row to delete."""
input UserUserPkeyDelete {
  id: Int!
}
