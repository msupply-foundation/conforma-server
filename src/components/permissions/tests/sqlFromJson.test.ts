import { getSqlConditionFromJSON } from '../helpersUtilities'
import { compileRowLevelPolicies } from '../rowLevelPolicyHelpers'

//. Tests to quickly check what is generated by row level policy helpers

// Run these test with "yarn test sqlFromJson"

const sqlGenerationTestData = [{ json: { user_id: 1 }, sql: 'user_id = 1' }]
sqlGenerationTestData.forEach(({ json, sql }: any) => {
  test(`Checking generation of SQL condition`, () => {
    return expect(getSqlConditionFromJSON(json)).toEqual(sql)
  })
})

const preCheck = `COALESCE(current_setting('jwt.claims.pp1', true),'') != ''`
const userId = `COALESCE(nullif(current_setting('jwt.claims.userId', true),''),'0')::integer`
const orgId = `COALESCE(nullif(current_setting('jwt.claims.orgId', true),''),'0')::integer`
const rowLevelPolicyCompileTestData = [
  {
    json: { application: { view: { user_id: 'jwtUserDetails_bigint_userId' } } },
    policies: [
      `CREATE POLICY "view_pp1" ON "application" FOR SELECT USING (${preCheck} and user_id = ${userId}) `,
    ],
  },

  {
    json: {
      application: {
        view: {
          user_id: 'jwtUserDetails_bigint_userId',
          template_id: {
            $: {
              __:
                `= ANY (SELECT template_id FROM user_org_policy_template WHERE ` +
                `user_org_policy = jwtUserDetails_bigint_userId::text || '.' || jwtUserDetails_bigint_orgId::text || '.2')`,
            },
          },
        },
      },
    },
    policies: [
      `CREATE POLICY "view_pp1" ON "application" FOR SELECT USING (${preCheck} and user_id = ${userId} AND template_id = ANY ` +
        `(SELECT template_id FROM user_org_policy_template ` +
        `WHERE user_org_policy = ${userId}::text || '.' || ${orgId}::text || '.2')) `,
    ],
  },
]
rowLevelPolicyCompileTestData.forEach(({ json, policies }: any) => {
  test(`Checking generation of row policy SQL condition`, () => {
    console.log(policies)
    return expect(compileRowLevelPolicies('pp1', json)).toEqual(policies)
  })
})
