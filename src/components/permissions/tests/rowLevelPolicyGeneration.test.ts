import { getSqlConditionFromJSON } from '../helpersUtilities'
import { compileRowLevelPolicies } from '../rowLevelPolicyHelpers'

//. Tests to quickly check what is generated by row level policy helpers

// Run these test with "yarn test rowLevelPolicyGeneration"

const sqlGenerationTestData = [{ json: { user_id: 1 }, sql: 'user_id = 1' }]
sqlGenerationTestData.forEach(({ json, sql }: any) => {
  test(`Checking generation of SQL condition`, () => {
    return expect(getSqlConditionFromJSON(json)).toEqual(sql)
  })
})

const preCheck = `COALESCE(current_setting('jwt.claims.pp1', true),'') != ''`
const userId = `COALESCE(nullif(current_setting('jwt.claims.userId', true),''),'0')::integer`
const templateIds = `any(string_to_array(COALESCE(current_setting('jwt.claims.pp1_template_ids',true),'0'),',')::integer[])`
const rowLevelPolicyCompileTestData = [
  {
    json: { application: { view: { user_id: 'jwtUserDetails_bigint_userId' } } },
    policies: [
      `
      CREATE OR REPLACE FUNCTION private.policy_check_pp1_application ()
      RETURNS SETOF application
      SECURITY DEFINER
      AS $$
        SELECT * FROM application WHERE user_id = ${userId}
    $$
    LANGUAGE sql
    STABLE;
    CREATE POLICY "view_pp1" ON "application" 
    FOR SELECT USING (${preCheck} AND id IN (SELECT id FROM private.policy_check_pp1_application()))`,
    ],
  },

  {
    json: {
      application: {
        view: {
          user_id: 'jwtUserDetails_bigint_userId',
          template_id: 'jwtPermission_array_bigint_template_ids',
        },
      },
    },
    policies: [
      `
      CREATE OR REPLACE FUNCTION private.policy_check_pp1_application ()
      RETURNS SETOF application
      SECURITY DEFINER
      AS $$
        SELECT * FROM application WHERE user_id = ${userId} 
        AND template_id = ${templateIds}
    $$
    LANGUAGE sql
    STABLE;
    CREATE POLICY "view_pp1" ON "application" 
    FOR SELECT USING (${preCheck} AND id IN (SELECT id FROM private.policy_check_pp1_application()))`,
    ],
  },
]
rowLevelPolicyCompileTestData.forEach(
  ({ json, policies }: { json: object; policies: string[] }) => {
    test(`Checking generation of row policy SQL condition`, () => {
      return expect(
        compileRowLevelPolicies('pp1', json).map((r) => r.replace(/[ \n]/g, ''))
      ).toEqual(policies.map((r) => r.replace(/[ \n]/g, '')))
    })
  }
)
