import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  BigInt: { input: any; output: any; }
  CharacterData: { input: any; output: any; }
  Cursor: { input: any; output: any; }
  Date: { input: any; output: any; }
  Datetime: { input: any; output: any; }
  JSON: { input: any; output: any; }
  SqlIdentifier: { input: any; output: any; }
  YesOrNo: { input: any; output: any; }
};

export type ActionPlugin = Node & {
  __typename?: 'ActionPlugin';
  code?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  name?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  optionalParameters?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  outputProperties?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  path?: Maybe<Scalars['String']['output']>;
  requiredParameters?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

/**
 * A condition to be used against `ActionPlugin` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type ActionPluginCondition = {
  /** Checks for equality with the object’s `code` field. */
  code?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `description` field. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `name` field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `optionalParameters` field. */
  optionalParameters?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `outputProperties` field. */
  outputProperties?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `path` field. */
  path?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `requiredParameters` field. */
  requiredParameters?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

/** A filter to be used against `ActionPlugin` object types. All fields are combined with a logical ‘and.’ */
export type ActionPluginFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ActionPluginFilter>>;
  /** Filter by the object’s `code` field. */
  code?: InputMaybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `name` field. */
  name?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ActionPluginFilter>;
  /** Filter by the object’s `optionalParameters` field. */
  optionalParameters?: InputMaybe<StringListFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ActionPluginFilter>>;
  /** Filter by the object’s `outputProperties` field. */
  outputProperties?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `path` field. */
  path?: InputMaybe<StringFilter>;
  /** Filter by the object’s `requiredParameters` field. */
  requiredParameters?: InputMaybe<StringListFilter>;
};

/** An input for mutations affecting `ActionPlugin` */
export type ActionPluginInput = {
  code?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  optionalParameters?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  outputProperties?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  path?: InputMaybe<Scalars['String']['input']>;
  requiredParameters?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

/** Represents an update to a `ActionPlugin`. Fields that are set will be updated. */
export type ActionPluginPatch = {
  code?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  optionalParameters?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  outputProperties?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  path?: InputMaybe<Scalars['String']['input']>;
  requiredParameters?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

/** A connection to a list of `ActionPlugin` values. */
export type ActionPluginsConnection = {
  __typename?: 'ActionPluginsConnection';
  /** A list of edges which contains the `ActionPlugin` and cursor to aid in pagination. */
  edges: Array<ActionPluginsEdge>;
  /** A list of `ActionPlugin` objects. */
  nodes: Array<Maybe<ActionPlugin>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ActionPlugin` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ActionPlugin` edge in the connection. */
export type ActionPluginsEdge = {
  __typename?: 'ActionPluginsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ActionPlugin` at the end of the edge. */
  node?: Maybe<ActionPlugin>;
};

/** Methods to use when ordering `ActionPlugin`. */
export enum ActionPluginsOrderBy {
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  Natural = 'NATURAL',
  OptionalParametersAsc = 'OPTIONAL_PARAMETERS_ASC',
  OptionalParametersDesc = 'OPTIONAL_PARAMETERS_DESC',
  OutputPropertiesAsc = 'OUTPUT_PROPERTIES_ASC',
  OutputPropertiesDesc = 'OUTPUT_PROPERTIES_DESC',
  PathAsc = 'PATH_ASC',
  PathDesc = 'PATH_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RequiredParametersAsc = 'REQUIRED_PARAMETERS_ASC',
  RequiredParametersDesc = 'REQUIRED_PARAMETERS_DESC'
}

export type ActionQueue = Node & {
  __typename?: 'ActionQueue';
  actionCode?: Maybe<Scalars['String']['output']>;
  /** Reads a single `Application` that is related to this `ActionQueue`. */
  application?: Maybe<Application>;
  applicationId?: Maybe<Scalars['Int']['output']>;
  conditionExpression?: Maybe<Scalars['JSON']['output']>;
  errorLog?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  output?: Maybe<Scalars['JSON']['output']>;
  parameterQueries?: Maybe<Scalars['JSON']['output']>;
  parametersEvaluated?: Maybe<Scalars['JSON']['output']>;
  sequence?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<ActionQueueStatus>;
  /** Reads a single `Template` that is related to this `ActionQueue`. */
  template?: Maybe<Template>;
  templateId?: Maybe<Scalars['Int']['output']>;
  timeCompleted?: Maybe<Scalars['Datetime']['output']>;
  timeQueued?: Maybe<Scalars['Datetime']['output']>;
  triggerEvent?: Maybe<Scalars['Int']['output']>;
  triggerPayload?: Maybe<Scalars['JSON']['output']>;
  /** Reads a single `TriggerQueue` that is related to this `ActionQueue`. */
  triggerQueueByTriggerEvent?: Maybe<TriggerQueue>;
};

/** The fields on `actionQueue` to look up the row to connect. */
export type ActionQueueActionQueuePkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `actionQueue` to look up the row to delete. */
export type ActionQueueActionQueuePkeyDelete = {
  id: Scalars['Int']['input'];
};

/** The `actionQueue` to be created by this mutation. */
export type ActionQueueApplicationIdFkeyActionQueueCreateInput = {
  actionCode?: InputMaybe<Scalars['String']['input']>;
  applicationToApplicationId?: InputMaybe<ActionQueueApplicationIdFkeyInput>;
  conditionExpression?: InputMaybe<Scalars['JSON']['input']>;
  errorLog?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  output?: InputMaybe<Scalars['JSON']['input']>;
  parameterQueries?: InputMaybe<Scalars['JSON']['input']>;
  parametersEvaluated?: InputMaybe<Scalars['JSON']['input']>;
  sequence?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ActionQueueStatus>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ActionQueueTemplateIdFkeyInput>;
  timeCompleted?: InputMaybe<Scalars['Datetime']['input']>;
  timeQueued?: InputMaybe<Scalars['Datetime']['input']>;
  triggerEvent?: InputMaybe<Scalars['Int']['input']>;
  triggerPayload?: InputMaybe<Scalars['JSON']['input']>;
  triggerQueueToTriggerEvent?: InputMaybe<ActionQueueTriggerEventFkeyInput>;
};

/** The `application` to be created by this mutation. */
export type ActionQueueApplicationIdFkeyApplicationCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `application` in the `ActionQueueInput` mutation. */
export type ActionQueueApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: InputMaybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: InputMaybe<ApplicationApplicationSerialKeyConnect>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: InputMaybe<ActionQueueApplicationIdFkeyApplicationCreateInput>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: InputMaybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ApplicationNodeIdDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: InputMaybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: InputMaybe<ApplicationOnActionQueueForActionQueueApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ActionQueueOnActionQueueForActionQueueApplicationIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByOutcomeRegistration?: InputMaybe<ApplicationOnActionQueueForActionQueueApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: InputMaybe<ApplicationOnActionQueueForActionQueueApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
};

/** Input for the nested mutation of `actionQueue` in the `ApplicationInput` mutation. */
export type ActionQueueApplicationIdFkeyInverseInput = {
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ActionQueueActionQueuePkeyConnect>>;
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ActionQueueNodeIdConnect>>;
  /** A `ActionQueueInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ActionQueueApplicationIdFkeyActionQueueCreateInput>>;
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ActionQueueActionQueuePkeyDelete>>;
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ActionQueueNodeIdDelete>>;
  /** Flag indicating whether all other `actionQueue` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `actionQueue` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ActionQueueOnActionQueueForActionQueueApplicationIdFkeyUsingActionQueuePkeyUpdate>>;
  /** The primary key(s) and patch data for `actionQueue` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ApplicationOnActionQueueForActionQueueApplicationIdFkeyNodeIdUpdate>>;
};

/**
 * A condition to be used against `ActionQueue` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type ActionQueueCondition = {
  /** Checks for equality with the object’s `actionCode` field. */
  actionCode?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `conditionExpression` field. */
  conditionExpression?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `errorLog` field. */
  errorLog?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `output` field. */
  output?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `parameterQueries` field. */
  parameterQueries?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `parametersEvaluated` field. */
  parametersEvaluated?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `sequence` field. */
  sequence?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `status` field. */
  status?: InputMaybe<ActionQueueStatus>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `timeCompleted` field. */
  timeCompleted?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `timeQueued` field. */
  timeQueued?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `triggerEvent` field. */
  triggerEvent?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `triggerPayload` field. */
  triggerPayload?: InputMaybe<Scalars['JSON']['input']>;
};

/** A filter to be used against `ActionQueue` object types. All fields are combined with a logical ‘and.’ */
export type ActionQueueFilter = {
  /** Filter by the object’s `actionCode` field. */
  actionCode?: InputMaybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ActionQueueFilter>>;
  /** Filter by the object’s `application` relation. */
  application?: InputMaybe<ApplicationFilter>;
  /** A related `application` exists. */
  applicationExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `conditionExpression` field. */
  conditionExpression?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `errorLog` field. */
  errorLog?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ActionQueueFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ActionQueueFilter>>;
  /** Filter by the object’s `output` field. */
  output?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `parameterQueries` field. */
  parameterQueries?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `parametersEvaluated` field. */
  parametersEvaluated?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `sequence` field. */
  sequence?: InputMaybe<IntFilter>;
  /** Filter by the object’s `status` field. */
  status?: InputMaybe<ActionQueueStatusFilter>;
  /** Filter by the object’s `template` relation. */
  template?: InputMaybe<TemplateFilter>;
  /** A related `template` exists. */
  templateExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `templateId` field. */
  templateId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `timeCompleted` field. */
  timeCompleted?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `timeQueued` field. */
  timeQueued?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `triggerEvent` field. */
  triggerEvent?: InputMaybe<IntFilter>;
  /** Filter by the object’s `triggerPayload` field. */
  triggerPayload?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `triggerQueueByTriggerEvent` relation. */
  triggerQueueByTriggerEvent?: InputMaybe<TriggerQueueFilter>;
  /** A related `triggerQueueByTriggerEvent` exists. */
  triggerQueueByTriggerEventExists?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An input for mutations affecting `ActionQueue` */
export type ActionQueueInput = {
  actionCode?: InputMaybe<Scalars['String']['input']>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ActionQueueApplicationIdFkeyInput>;
  conditionExpression?: InputMaybe<Scalars['JSON']['input']>;
  errorLog?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  output?: InputMaybe<Scalars['JSON']['input']>;
  parameterQueries?: InputMaybe<Scalars['JSON']['input']>;
  parametersEvaluated?: InputMaybe<Scalars['JSON']['input']>;
  sequence?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ActionQueueStatus>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ActionQueueTemplateIdFkeyInput>;
  timeCompleted?: InputMaybe<Scalars['Datetime']['input']>;
  timeQueued?: InputMaybe<Scalars['Datetime']['input']>;
  triggerEvent?: InputMaybe<Scalars['Int']['input']>;
  triggerPayload?: InputMaybe<Scalars['JSON']['input']>;
  triggerQueueToTriggerEvent?: InputMaybe<ActionQueueTriggerEventFkeyInput>;
};

/** The globally unique `ID` look up for the row to connect. */
export type ActionQueueNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `actionQueue` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ActionQueueNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `actionQueue` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ActionQueueOnActionQueueForActionQueueApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The fields on `actionQueue` to look up the row to update. */
export type ActionQueueOnActionQueueForActionQueueApplicationIdFkeyUsingActionQueuePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `actionQueue` being updated. */
  patch: UpdateActionQueueOnActionQueueForActionQueueApplicationIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type ActionQueueOnActionQueueForActionQueueTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The fields on `actionQueue` to look up the row to update. */
export type ActionQueueOnActionQueueForActionQueueTemplateIdFkeyUsingActionQueuePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `actionQueue` being updated. */
  patch: UpdateActionQueueOnActionQueueForActionQueueTemplateIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type ActionQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `triggerQueue` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `triggerQueue` being updated. */
  patch: TriggerQueuePatch;
};

/** The fields on `actionQueue` to look up the row to update. */
export type ActionQueueOnActionQueueForActionQueueTriggerEventFkeyUsingActionQueuePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `actionQueue` being updated. */
  patch: UpdateActionQueueOnActionQueueForActionQueueTriggerEventFkeyPatch;
};

/** Represents an update to a `ActionQueue`. Fields that are set will be updated. */
export type ActionQueuePatch = {
  actionCode?: InputMaybe<Scalars['String']['input']>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ActionQueueApplicationIdFkeyInput>;
  conditionExpression?: InputMaybe<Scalars['JSON']['input']>;
  errorLog?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  output?: InputMaybe<Scalars['JSON']['input']>;
  parameterQueries?: InputMaybe<Scalars['JSON']['input']>;
  parametersEvaluated?: InputMaybe<Scalars['JSON']['input']>;
  sequence?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ActionQueueStatus>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ActionQueueTemplateIdFkeyInput>;
  timeCompleted?: InputMaybe<Scalars['Datetime']['input']>;
  timeQueued?: InputMaybe<Scalars['Datetime']['input']>;
  triggerEvent?: InputMaybe<Scalars['Int']['input']>;
  triggerPayload?: InputMaybe<Scalars['JSON']['input']>;
  triggerQueueToTriggerEvent?: InputMaybe<ActionQueueTriggerEventFkeyInput>;
};

export enum ActionQueueStatus {
  ConditionNotMet = 'CONDITION_NOT_MET',
  Fail = 'FAIL',
  Processing = 'PROCESSING',
  Queued = 'QUEUED',
  Success = 'SUCCESS'
}

/** A filter to be used against ActionQueueStatus fields. All fields are combined with a logical ‘and.’ */
export type ActionQueueStatusFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<ActionQueueStatus>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<ActionQueueStatus>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<ActionQueueStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<ActionQueueStatus>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<ActionQueueStatus>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<ActionQueueStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<ActionQueueStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<ActionQueueStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<ActionQueueStatus>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<ActionQueueStatus>>;
};

/** The `actionQueue` to be created by this mutation. */
export type ActionQueueTemplateIdFkeyActionQueueCreateInput = {
  actionCode?: InputMaybe<Scalars['String']['input']>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ActionQueueApplicationIdFkeyInput>;
  conditionExpression?: InputMaybe<Scalars['JSON']['input']>;
  errorLog?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  output?: InputMaybe<Scalars['JSON']['input']>;
  parameterQueries?: InputMaybe<Scalars['JSON']['input']>;
  parametersEvaluated?: InputMaybe<Scalars['JSON']['input']>;
  sequence?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ActionQueueStatus>;
  templateToTemplateId?: InputMaybe<ActionQueueTemplateIdFkeyInput>;
  timeCompleted?: InputMaybe<Scalars['Datetime']['input']>;
  timeQueued?: InputMaybe<Scalars['Datetime']['input']>;
  triggerEvent?: InputMaybe<Scalars['Int']['input']>;
  triggerPayload?: InputMaybe<Scalars['JSON']['input']>;
  triggerQueueToTriggerEvent?: InputMaybe<ActionQueueTriggerEventFkeyInput>;
};

/** Input for the nested mutation of `template` in the `ActionQueueInput` mutation. */
export type ActionQueueTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: InputMaybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TemplateNodeIdConnect>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: InputMaybe<ActionQueueTemplateIdFkeyTemplateCreateInput>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: InputMaybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByCodeAndVersionId?: InputMaybe<TemplateOnActionQueueForActionQueueTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: InputMaybe<TemplateOnActionQueueForActionQueueTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ActionQueueOnActionQueueForActionQueueTemplateIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `actionQueue` in the `TemplateInput` mutation. */
export type ActionQueueTemplateIdFkeyInverseInput = {
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ActionQueueActionQueuePkeyConnect>>;
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ActionQueueNodeIdConnect>>;
  /** A `ActionQueueInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ActionQueueTemplateIdFkeyActionQueueCreateInput>>;
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ActionQueueActionQueuePkeyDelete>>;
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ActionQueueNodeIdDelete>>;
  /** Flag indicating whether all other `actionQueue` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `actionQueue` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ActionQueueOnActionQueueForActionQueueTemplateIdFkeyUsingActionQueuePkeyUpdate>>;
  /** The primary key(s) and patch data for `actionQueue` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TemplateOnActionQueueForActionQueueTemplateIdFkeyNodeIdUpdate>>;
};

/** The `template` to be created by this mutation. */
export type ActionQueueTemplateIdFkeyTemplateCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code: Scalars['String']['input'];
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId: Scalars['String']['input'];
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The `actionQueue` to be created by this mutation. */
export type ActionQueueTriggerEventFkeyActionQueueCreateInput = {
  actionCode?: InputMaybe<Scalars['String']['input']>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ActionQueueApplicationIdFkeyInput>;
  conditionExpression?: InputMaybe<Scalars['JSON']['input']>;
  errorLog?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  output?: InputMaybe<Scalars['JSON']['input']>;
  parameterQueries?: InputMaybe<Scalars['JSON']['input']>;
  parametersEvaluated?: InputMaybe<Scalars['JSON']['input']>;
  sequence?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ActionQueueStatus>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ActionQueueTemplateIdFkeyInput>;
  timeCompleted?: InputMaybe<Scalars['Datetime']['input']>;
  timeQueued?: InputMaybe<Scalars['Datetime']['input']>;
  triggerPayload?: InputMaybe<Scalars['JSON']['input']>;
  triggerQueueToTriggerEvent?: InputMaybe<ActionQueueTriggerEventFkeyInput>;
};

/** Input for the nested mutation of `triggerQueue` in the `ActionQueueInput` mutation. */
export type ActionQueueTriggerEventFkeyInput = {
  /** The primary key(s) for `triggerQueue` for the far side of the relationship. */
  connectById?: InputMaybe<TriggerQueueTriggerQueuePkeyConnect>;
  /** The primary key(s) for `triggerQueue` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TriggerQueueNodeIdConnect>;
  /** A `TriggerQueueInput` object that will be created and connected to this object. */
  create?: InputMaybe<ActionQueueTriggerEventFkeyTriggerQueueCreateInput>;
  /** The primary key(s) for `triggerQueue` for the far side of the relationship. */
  deleteById?: InputMaybe<TriggerQueueTriggerQueuePkeyDelete>;
  /** The primary key(s) for `triggerQueue` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TriggerQueueNodeIdDelete>;
  /** The primary key(s) and patch data for `triggerQueue` for the far side of the relationship. */
  updateById?: InputMaybe<TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyUsingTriggerQueuePkeyUpdate>;
  /** The primary key(s) and patch data for `triggerQueue` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ActionQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `actionQueue` in the `TriggerQueueInput` mutation. */
export type ActionQueueTriggerEventFkeyInverseInput = {
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ActionQueueActionQueuePkeyConnect>>;
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ActionQueueNodeIdConnect>>;
  /** A `ActionQueueInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ActionQueueTriggerEventFkeyActionQueueCreateInput>>;
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ActionQueueActionQueuePkeyDelete>>;
  /** The primary key(s) for `actionQueue` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ActionQueueNodeIdDelete>>;
  /** Flag indicating whether all other `actionQueue` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `actionQueue` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ActionQueueOnActionQueueForActionQueueTriggerEventFkeyUsingActionQueuePkeyUpdate>>;
  /** The primary key(s) and patch data for `actionQueue` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate>>;
};

/** The `triggerQueue` to be created by this mutation. */
export type ActionQueueTriggerEventFkeyTriggerQueueCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTriggerEventFkeyInverseInput>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<TriggerQueueApplicationIdFkeyInput>;
  data?: InputMaybe<Scalars['JSON']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  log?: InputMaybe<Scalars['JSON']['input']>;
  recordId?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<TriggerQueueStatus>;
  table?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  triggerType?: InputMaybe<Trigger>;
};

/** A connection to a list of `ActionQueue` values. */
export type ActionQueuesConnection = {
  __typename?: 'ActionQueuesConnection';
  /** A list of edges which contains the `ActionQueue` and cursor to aid in pagination. */
  edges: Array<ActionQueuesEdge>;
  /** A list of `ActionQueue` objects. */
  nodes: Array<Maybe<ActionQueue>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ActionQueue` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ActionQueue` edge in the connection. */
export type ActionQueuesEdge = {
  __typename?: 'ActionQueuesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ActionQueue` at the end of the edge. */
  node?: Maybe<ActionQueue>;
};

/** Methods to use when ordering `ActionQueue`. */
export enum ActionQueuesOrderBy {
  ActionCodeAsc = 'ACTION_CODE_ASC',
  ActionCodeDesc = 'ACTION_CODE_DESC',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  ConditionExpressionAsc = 'CONDITION_EXPRESSION_ASC',
  ConditionExpressionDesc = 'CONDITION_EXPRESSION_DESC',
  ErrorLogAsc = 'ERROR_LOG_ASC',
  ErrorLogDesc = 'ERROR_LOG_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  OutputAsc = 'OUTPUT_ASC',
  OutputDesc = 'OUTPUT_DESC',
  ParametersEvaluatedAsc = 'PARAMETERS_EVALUATED_ASC',
  ParametersEvaluatedDesc = 'PARAMETERS_EVALUATED_DESC',
  ParameterQueriesAsc = 'PARAMETER_QUERIES_ASC',
  ParameterQueriesDesc = 'PARAMETER_QUERIES_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  SequenceAsc = 'SEQUENCE_ASC',
  SequenceDesc = 'SEQUENCE_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  TimeCompletedAsc = 'TIME_COMPLETED_ASC',
  TimeCompletedDesc = 'TIME_COMPLETED_DESC',
  TimeQueuedAsc = 'TIME_QUEUED_ASC',
  TimeQueuedDesc = 'TIME_QUEUED_DESC',
  TriggerEventAsc = 'TRIGGER_EVENT_ASC',
  TriggerEventDesc = 'TRIGGER_EVENT_DESC',
  TriggerPayloadAsc = 'TRIGGER_PAYLOAD_ASC',
  TriggerPayloadDesc = 'TRIGGER_PAYLOAD_DESC'
}

export type ActivityLog = Node & {
  __typename?: 'ActivityLog';
  /** Reads a single `Application` that is related to this `ActivityLog`. */
  application?: Maybe<Application>;
  applicationId?: Maybe<Scalars['Int']['output']>;
  details: Scalars['JSON']['output'];
  id: Scalars['Int']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  recordId?: Maybe<Scalars['Int']['output']>;
  table: Scalars['String']['output'];
  timestamp: Scalars['Datetime']['output'];
  type: EventType;
  value: Scalars['String']['output'];
};

/** The fields on `activityLog` to look up the row to connect. */
export type ActivityLogActivityLogPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `activityLog` to look up the row to delete. */
export type ActivityLogActivityLogPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** The `activityLog` to be created by this mutation. */
export type ActivityLogApplicationIdFkeyActivityLogCreateInput = {
  applicationToApplicationId?: InputMaybe<ActivityLogApplicationIdFkeyInput>;
  details?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  recordId?: InputMaybe<Scalars['Int']['input']>;
  table: Scalars['String']['input'];
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  type: EventType;
  value: Scalars['String']['input'];
};

/** The `application` to be created by this mutation. */
export type ActivityLogApplicationIdFkeyApplicationCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `application` in the `ActivityLogInput` mutation. */
export type ActivityLogApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: InputMaybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: InputMaybe<ApplicationApplicationSerialKeyConnect>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: InputMaybe<ActivityLogApplicationIdFkeyApplicationCreateInput>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: InputMaybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ApplicationNodeIdDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: InputMaybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: InputMaybe<ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ActivityLogOnActivityLogForActivityLogApplicationIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByOutcomeRegistration?: InputMaybe<ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: InputMaybe<ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
};

/** Input for the nested mutation of `activityLog` in the `ApplicationInput` mutation. */
export type ActivityLogApplicationIdFkeyInverseInput = {
  /** The primary key(s) for `activityLog` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ActivityLogActivityLogPkeyConnect>>;
  /** The primary key(s) for `activityLog` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ActivityLogNodeIdConnect>>;
  /** A `ActivityLogInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ActivityLogApplicationIdFkeyActivityLogCreateInput>>;
  /** The primary key(s) for `activityLog` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ActivityLogActivityLogPkeyDelete>>;
  /** The primary key(s) for `activityLog` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ActivityLogNodeIdDelete>>;
  /** Flag indicating whether all other `activityLog` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `activityLog` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ActivityLogOnActivityLogForActivityLogApplicationIdFkeyUsingActivityLogPkeyUpdate>>;
  /** The primary key(s) and patch data for `activityLog` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ApplicationOnActivityLogForActivityLogApplicationIdFkeyNodeIdUpdate>>;
};

/**
 * A condition to be used against `ActivityLog` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type ActivityLogCondition = {
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `details` field. */
  details?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `recordId` field. */
  recordId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `table` field. */
  table?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `timestamp` field. */
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `type` field. */
  type?: InputMaybe<EventType>;
  /** Checks for equality with the object’s `value` field. */
  value?: InputMaybe<Scalars['String']['input']>;
};

/** A filter to be used against `ActivityLog` object types. All fields are combined with a logical ‘and.’ */
export type ActivityLogFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ActivityLogFilter>>;
  /** Filter by the object’s `application` relation. */
  application?: InputMaybe<ApplicationFilter>;
  /** A related `application` exists. */
  applicationExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `details` field. */
  details?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ActivityLogFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ActivityLogFilter>>;
  /** Filter by the object’s `recordId` field. */
  recordId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `table` field. */
  table?: InputMaybe<StringFilter>;
  /** Filter by the object’s `timestamp` field. */
  timestamp?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `type` field. */
  type?: InputMaybe<EventTypeFilter>;
  /** Filter by the object’s `value` field. */
  value?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `ActivityLog` */
export type ActivityLogInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ActivityLogApplicationIdFkeyInput>;
  details?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  recordId?: InputMaybe<Scalars['Int']['input']>;
  table: Scalars['String']['input'];
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  type: EventType;
  value: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to connect. */
export type ActivityLogNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `activityLog` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ActivityLogNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `activityLog` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ActivityLogOnActivityLogForActivityLogApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The fields on `activityLog` to look up the row to update. */
export type ActivityLogOnActivityLogForActivityLogApplicationIdFkeyUsingActivityLogPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `activityLog` being updated. */
  patch: UpdateActivityLogOnActivityLogForActivityLogApplicationIdFkeyPatch;
};

/** Represents an update to a `ActivityLog`. Fields that are set will be updated. */
export type ActivityLogPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ActivityLogApplicationIdFkeyInput>;
  details?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  recordId?: InputMaybe<Scalars['Int']['input']>;
  table?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  type?: InputMaybe<EventType>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** A connection to a list of `ActivityLog` values. */
export type ActivityLogsConnection = {
  __typename?: 'ActivityLogsConnection';
  /** A list of edges which contains the `ActivityLog` and cursor to aid in pagination. */
  edges: Array<ActivityLogsEdge>;
  /** A list of `ActivityLog` objects. */
  nodes: Array<Maybe<ActivityLog>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ActivityLog` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ActivityLog` edge in the connection. */
export type ActivityLogsEdge = {
  __typename?: 'ActivityLogsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ActivityLog` at the end of the edge. */
  node?: Maybe<ActivityLog>;
};

/** Methods to use when ordering `ActivityLog`. */
export enum ActivityLogsOrderBy {
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  DetailsAsc = 'DETAILS_ASC',
  DetailsDesc = 'DETAILS_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RecordIdAsc = 'RECORD_ID_ASC',
  RecordIdDesc = 'RECORD_ID_DESC',
  TableAsc = 'TABLE_ASC',
  TableDesc = 'TABLE_DESC',
  TimestampAsc = 'TIMESTAMP_ASC',
  TimestampDesc = 'TIMESTAMP_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

export type AllowedSelfAssignableSectionsShape = {
  __typename?: 'AllowedSelfAssignableSectionsShape';
  allowedSections?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  reviewAssignmentId?: Maybe<Scalars['Int']['output']>;
};

/**
 * A condition to be used against `AllowedSelfAssignableSectionsShape` object
 * types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type AllowedSelfAssignableSectionsShapeCondition = {
  /** Checks for equality with the object’s `allowedSections` field. */
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `reviewAssignmentId` field. */
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
};

/** A filter to be used against `AllowedSelfAssignableSectionsShape` object types. All fields are combined with a logical ‘and.’ */
export type AllowedSelfAssignableSectionsShapeFilter = {
  /** Filter by the object’s `allowedSections` field. */
  allowedSections?: InputMaybe<StringListFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AllowedSelfAssignableSectionsShapeFilter>>;
  /** Negates the expression. */
  not?: InputMaybe<AllowedSelfAssignableSectionsShapeFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AllowedSelfAssignableSectionsShapeFilter>>;
  /** Filter by the object’s `reviewAssignmentId` field. */
  reviewAssignmentId?: InputMaybe<IntFilter>;
};

/** An input for mutations affecting `AllowedSelfAssignableSectionsShape` */
export type AllowedSelfAssignableSectionsShapeInput = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
};

/** A connection to a list of `AllowedSelfAssignableSectionsShape` values. */
export type AllowedSelfAssignableSectionsShapesConnection = {
  __typename?: 'AllowedSelfAssignableSectionsShapesConnection';
  /** A list of edges which contains the `AllowedSelfAssignableSectionsShape` and cursor to aid in pagination. */
  edges: Array<AllowedSelfAssignableSectionsShapesEdge>;
  /** A list of `AllowedSelfAssignableSectionsShape` objects. */
  nodes: Array<Maybe<AllowedSelfAssignableSectionsShape>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AllowedSelfAssignableSectionsShape` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `AllowedSelfAssignableSectionsShape` edge in the connection. */
export type AllowedSelfAssignableSectionsShapesEdge = {
  __typename?: 'AllowedSelfAssignableSectionsShapesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `AllowedSelfAssignableSectionsShape` at the end of the edge. */
  node?: Maybe<AllowedSelfAssignableSectionsShape>;
};

/** Methods to use when ordering `AllowedSelfAssignableSectionsShape`. */
export enum AllowedSelfAssignableSectionsShapesOrderBy {
  AllowedSectionsAsc = 'ALLOWED_SECTIONS_ASC',
  AllowedSectionsDesc = 'ALLOWED_SECTIONS_DESC',
  Natural = 'NATURAL',
  ReviewAssignmentIdAsc = 'REVIEW_ASSIGNMENT_ID_ASC',
  ReviewAssignmentIdDesc = 'REVIEW_ASSIGNMENT_ID_DESC'
}

export type Application = Node & {
  __typename?: 'Application';
  /** Reads and enables pagination through a set of `ActionQueue`. */
  actionQueues: ActionQueuesConnection;
  /** Reads and enables pagination through a set of `ActivityLog`. */
  activityLogs: ActivityLogsConnection;
  /** Reads and enables pagination through a set of `ApplicationNote`. */
  applicationNotes: ApplicationNotesConnection;
  /** Reads and enables pagination through a set of `ApplicationResponse`. */
  applicationResponses: ApplicationResponsesConnection;
  /** Reads and enables pagination through a set of `ApplicationReviewerAction`. */
  applicationReviewerActions: ApplicationReviewerActionsConnection;
  /** Reads and enables pagination through a set of `ApplicationStageHistory`. */
  applicationStageHistories: ApplicationStageHistoriesConnection;
  assignerList?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** Reads and enables pagination through a set of `DataChangelog`. */
  dataChangelogs: DataChangelogsConnection;
  /** Reads and enables pagination through a set of `File`. */
  filesByApplicationSerial: FilesConnection;
  id: Scalars['Int']['output'];
  isActive?: Maybe<Scalars['Boolean']['output']>;
  isConfig?: Maybe<Scalars['Boolean']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads and enables pagination through a set of `Notification`. */
  notifications: NotificationsConnection;
  /** Reads a single `Organisation` that is related to this `Application`. */
  org?: Maybe<Organisation>;
  orgId?: Maybe<Scalars['Int']['output']>;
  outcome?: Maybe<ApplicationOutcome>;
  outcomeRegistration?: Maybe<Scalars['String']['output']>;
  /** Reads and enables pagination through a set of `ReviewAssignment`. */
  reviewAssignments: ReviewAssignmentsConnection;
  reviewerList?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** Reads and enables pagination through a set of `Review`. */
  reviews: ReviewsConnection;
  serial?: Maybe<Scalars['String']['output']>;
  sessionId?: Maybe<Scalars['String']['output']>;
  stage?: Maybe<Scalars['String']['output']>;
  stageNumber?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<ApplicationStatus>;
  /** Reads a single `Template` that is related to this `Application`. */
  template?: Maybe<Template>;
  templateId: Scalars['Int']['output'];
  trigger?: Maybe<Trigger>;
  /** Reads and enables pagination through a set of `TriggerQueue`. */
  triggerQueues: TriggerQueuesConnection;
  /** Reads and enables pagination through a set of `TriggerSchedule`. */
  triggerSchedules: TriggerSchedulesConnection;
  /** Reads a single `UserList` that is related to this `Application`. */
  user?: Maybe<UserList>;
  userId?: Maybe<Scalars['Int']['output']>;
  /** Reads and enables pagination through a set of `Verification`. */
  verifications: VerificationsConnection;
};


export type ApplicationActionQueuesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ActionQueueCondition>;
  filter?: InputMaybe<ActionQueueFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ActionQueuesOrderBy>>;
};


export type ApplicationActivityLogsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ActivityLogCondition>;
  filter?: InputMaybe<ActivityLogFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ActivityLogsOrderBy>>;
};


export type ApplicationApplicationNotesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationNoteCondition>;
  filter?: InputMaybe<ApplicationNoteFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationNotesOrderBy>>;
};


export type ApplicationApplicationResponsesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationResponseCondition>;
  filter?: InputMaybe<ApplicationResponseFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationResponsesOrderBy>>;
};


export type ApplicationApplicationReviewerActionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationReviewerActionCondition>;
  filter?: InputMaybe<ApplicationReviewerActionFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationReviewerActionsOrderBy>>;
};


export type ApplicationApplicationStageHistoriesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationStageHistoryCondition>;
  filter?: InputMaybe<ApplicationStageHistoryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationStageHistoriesOrderBy>>;
};


export type ApplicationDataChangelogsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<DataChangelogCondition>;
  filter?: InputMaybe<DataChangelogFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DataChangelogsOrderBy>>;
};


export type ApplicationFilesByApplicationSerialArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<FileCondition>;
  filter?: InputMaybe<FileFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<FilesOrderBy>>;
};


export type ApplicationNotificationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<NotificationCondition>;
  filter?: InputMaybe<NotificationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<NotificationsOrderBy>>;
};


export type ApplicationReviewAssignmentsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewAssignmentCondition>;
  filter?: InputMaybe<ReviewAssignmentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewAssignmentsOrderBy>>;
};


export type ApplicationReviewsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewCondition>;
  filter?: InputMaybe<ReviewFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewsOrderBy>>;
};


export type ApplicationTriggerQueuesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TriggerQueueCondition>;
  filter?: InputMaybe<TriggerQueueFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TriggerQueuesOrderBy>>;
};


export type ApplicationTriggerSchedulesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TriggerScheduleCondition>;
  filter?: InputMaybe<TriggerScheduleFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TriggerSchedulesOrderBy>>;
};


export type ApplicationVerificationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<VerificationCondition>;
  filter?: InputMaybe<VerificationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<VerificationsOrderBy>>;
};

/** The fields on `application` to look up the row to connect. */
export type ApplicationApplicationOutcomeRegistrationKeyConnect = {
  outcomeRegistration: Scalars['String']['input'];
};

/** The fields on `application` to look up the row to delete. */
export type ApplicationApplicationOutcomeRegistrationKeyDelete = {
  outcomeRegistration: Scalars['String']['input'];
};

/** The fields on `application` to look up the row to connect. */
export type ApplicationApplicationPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `application` to look up the row to delete. */
export type ApplicationApplicationPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** The fields on `application` to look up the row to connect. */
export type ApplicationApplicationSerialKeyConnect = {
  serial: Scalars['String']['input'];
};

/** The fields on `application` to look up the row to delete. */
export type ApplicationApplicationSerialKeyDelete = {
  serial: Scalars['String']['input'];
};

/**
 * A condition to be used against `Application` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type ApplicationCondition = {
  /** Checks for equality with the object’s `assignerList` field. */
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isActive` field. */
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `isConfig` field. */
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `name` field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `orgId` field. */
  orgId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `outcome` field. */
  outcome?: InputMaybe<ApplicationOutcome>;
  /** Checks for equality with the object’s `outcomeRegistration` field. */
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `reviewerList` field. */
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `serial` field. */
  serial?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `sessionId` field. */
  sessionId?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `trigger` field. */
  trigger?: InputMaybe<Trigger>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** A filter to be used against `Application` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationFilter = {
  /** Filter by the object’s `actionQueues` relation. */
  actionQueues?: InputMaybe<ApplicationToManyActionQueueFilter>;
  /** Some related `actionQueues` exist. */
  actionQueuesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `activityLogs` relation. */
  activityLogs?: InputMaybe<ApplicationToManyActivityLogFilter>;
  /** Some related `activityLogs` exist. */
  activityLogsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ApplicationFilter>>;
  /** Filter by the object’s `applicationNotes` relation. */
  applicationNotes?: InputMaybe<ApplicationToManyApplicationNoteFilter>;
  /** Some related `applicationNotes` exist. */
  applicationNotesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `applicationResponses` relation. */
  applicationResponses?: InputMaybe<ApplicationToManyApplicationResponseFilter>;
  /** Some related `applicationResponses` exist. */
  applicationResponsesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `applicationReviewerActions` relation. */
  applicationReviewerActions?: InputMaybe<ApplicationToManyApplicationReviewerActionFilter>;
  /** Some related `applicationReviewerActions` exist. */
  applicationReviewerActionsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `applicationStageHistories` relation. */
  applicationStageHistories?: InputMaybe<ApplicationToManyApplicationStageHistoryFilter>;
  /** Some related `applicationStageHistories` exist. */
  applicationStageHistoriesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `assignerList` field. */
  assignerList?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `dataChangelogs` relation. */
  dataChangelogs?: InputMaybe<ApplicationToManyDataChangelogFilter>;
  /** Some related `dataChangelogs` exist. */
  dataChangelogsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `filesByApplicationSerial` relation. */
  filesByApplicationSerial?: InputMaybe<ApplicationToManyFileFilter>;
  /** Some related `filesByApplicationSerial` exist. */
  filesByApplicationSerialExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isActive` field. */
  isActive?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `isConfig` field. */
  isConfig?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `name` field. */
  name?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ApplicationFilter>;
  /** Filter by the object’s `notifications` relation. */
  notifications?: InputMaybe<ApplicationToManyNotificationFilter>;
  /** Some related `notifications` exist. */
  notificationsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ApplicationFilter>>;
  /** Filter by the object’s `org` relation. */
  org?: InputMaybe<OrganisationFilter>;
  /** A related `org` exists. */
  orgExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `orgId` field. */
  orgId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `outcome` field. */
  outcome?: InputMaybe<ApplicationOutcomeFilter>;
  /** Filter by the object’s `outcomeRegistration` field. */
  outcomeRegistration?: InputMaybe<StringFilter>;
  /** Filter by the object’s `reviewAssignments` relation. */
  reviewAssignments?: InputMaybe<ApplicationToManyReviewAssignmentFilter>;
  /** Some related `reviewAssignments` exist. */
  reviewAssignmentsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `reviewerList` field. */
  reviewerList?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `reviews` relation. */
  reviews?: InputMaybe<ApplicationToManyReviewFilter>;
  /** Some related `reviews` exist. */
  reviewsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `serial` field. */
  serial?: InputMaybe<StringFilter>;
  /** Filter by the object’s `sessionId` field. */
  sessionId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `stage` field. */
  stage?: InputMaybe<StringFilter>;
  /** Filter by the object’s `stageNumber` field. */
  stageNumber?: InputMaybe<IntFilter>;
  /** Filter by the object’s `status` field. */
  status?: InputMaybe<ApplicationStatusFilter>;
  /** Filter by the object’s `template` relation. */
  template?: InputMaybe<TemplateFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `trigger` field. */
  trigger?: InputMaybe<TriggerFilter>;
  /** Filter by the object’s `triggerQueues` relation. */
  triggerQueues?: InputMaybe<ApplicationToManyTriggerQueueFilter>;
  /** Some related `triggerQueues` exist. */
  triggerQueuesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `triggerSchedules` relation. */
  triggerSchedules?: InputMaybe<ApplicationToManyTriggerScheduleFilter>;
  /** Some related `triggerSchedules` exist. */
  triggerSchedulesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `user` relation. */
  user?: InputMaybe<UserListFilter>;
  /** A related `user` exists. */
  userExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `verifications` relation. */
  verifications?: InputMaybe<ApplicationToManyVerificationFilter>;
  /** Some related `verifications` exist. */
  verificationsExist?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An input for mutations affecting `Application` */
export type ApplicationInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** A connection to a list of `String` values. */
export type ApplicationListFilterApplicantConnection = {
  __typename?: 'ApplicationListFilterApplicantConnection';
  /** A list of edges which contains the `String` and cursor to aid in pagination. */
  edges: Array<ApplicationListFilterApplicantEdge>;
  /** A list of `String` objects. */
  nodes: Array<Maybe<Scalars['String']['output']>>;
  /** The count of *all* `String` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `String` edge in the connection. */
export type ApplicationListFilterApplicantEdge = {
  __typename?: 'ApplicationListFilterApplicantEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `String` at the end of the edge. */
  node?: Maybe<Scalars['String']['output']>;
};

/** A connection to a list of `String` values. */
export type ApplicationListFilterAssignerConnection = {
  __typename?: 'ApplicationListFilterAssignerConnection';
  /** A list of edges which contains the `String` and cursor to aid in pagination. */
  edges: Array<ApplicationListFilterAssignerEdge>;
  /** A list of `String` objects. */
  nodes: Array<Maybe<Scalars['String']['output']>>;
  /** The count of *all* `String` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `String` edge in the connection. */
export type ApplicationListFilterAssignerEdge = {
  __typename?: 'ApplicationListFilterAssignerEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `String` at the end of the edge. */
  node?: Maybe<Scalars['String']['output']>;
};

/** A connection to a list of `String` values. */
export type ApplicationListFilterOrganisationConnection = {
  __typename?: 'ApplicationListFilterOrganisationConnection';
  /** A list of edges which contains the `String` and cursor to aid in pagination. */
  edges: Array<ApplicationListFilterOrganisationEdge>;
  /** A list of `String` objects. */
  nodes: Array<Maybe<Scalars['String']['output']>>;
  /** The count of *all* `String` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `String` edge in the connection. */
export type ApplicationListFilterOrganisationEdge = {
  __typename?: 'ApplicationListFilterOrganisationEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `String` at the end of the edge. */
  node?: Maybe<Scalars['String']['output']>;
};

/** A connection to a list of `String` values. */
export type ApplicationListFilterReviewerConnection = {
  __typename?: 'ApplicationListFilterReviewerConnection';
  /** A list of edges which contains the `String` and cursor to aid in pagination. */
  edges: Array<ApplicationListFilterReviewerEdge>;
  /** A list of `String` objects. */
  nodes: Array<Maybe<Scalars['String']['output']>>;
  /** The count of *all* `String` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `String` edge in the connection. */
export type ApplicationListFilterReviewerEdge = {
  __typename?: 'ApplicationListFilterReviewerEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `String` at the end of the edge. */
  node?: Maybe<Scalars['String']['output']>;
};

/** A connection to a list of `String` values. */
export type ApplicationListFilterStageConnection = {
  __typename?: 'ApplicationListFilterStageConnection';
  /** A list of edges which contains the `String` and cursor to aid in pagination. */
  edges: Array<ApplicationListFilterStageEdge>;
  /** A list of `String` objects. */
  nodes: Array<Maybe<Scalars['String']['output']>>;
  /** The count of *all* `String` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `String` edge in the connection. */
export type ApplicationListFilterStageEdge = {
  __typename?: 'ApplicationListFilterStageEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `String` at the end of the edge. */
  node?: Maybe<Scalars['String']['output']>;
};

export type ApplicationListShape = {
  __typename?: 'ApplicationListShape';
  applicant?: Maybe<Scalars['String']['output']>;
  applicantDeadline?: Maybe<Scalars['Datetime']['output']>;
  assignerAction?: Maybe<AssignerAction>;
  assigners?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  id?: Maybe<Scalars['Int']['output']>;
  lastActiveDate?: Maybe<Scalars['Datetime']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  orgName?: Maybe<Scalars['String']['output']>;
  outcome?: Maybe<ApplicationOutcome>;
  reviewerAction?: Maybe<ReviewerAction>;
  reviewers?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  serial?: Maybe<Scalars['String']['output']>;
  stage?: Maybe<Scalars['String']['output']>;
  stageColour?: Maybe<Scalars['String']['output']>;
  status?: Maybe<ApplicationStatus>;
  templateCode?: Maybe<Scalars['String']['output']>;
  templateName?: Maybe<Scalars['String']['output']>;
};

/**
 * A condition to be used against `ApplicationListShape` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type ApplicationListShapeCondition = {
  /** Checks for equality with the object’s `applicant` field. */
  applicant?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `applicantDeadline` field. */
  applicantDeadline?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `assignerAction` field. */
  assignerAction?: InputMaybe<AssignerAction>;
  /** Checks for equality with the object’s `assigners` field. */
  assigners?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `lastActiveDate` field. */
  lastActiveDate?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `name` field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `orgName` field. */
  orgName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `outcome` field. */
  outcome?: InputMaybe<ApplicationOutcome>;
  /** Checks for equality with the object’s `reviewerAction` field. */
  reviewerAction?: InputMaybe<ReviewerAction>;
  /** Checks for equality with the object’s `reviewers` field. */
  reviewers?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `serial` field. */
  serial?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `stage` field. */
  stage?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `stageColour` field. */
  stageColour?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `status` field. */
  status?: InputMaybe<ApplicationStatus>;
  /** Checks for equality with the object’s `templateCode` field. */
  templateCode?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `templateName` field. */
  templateName?: InputMaybe<Scalars['String']['input']>;
};

/** A filter to be used against `ApplicationListShape` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationListShapeFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ApplicationListShapeFilter>>;
  /** Filter by the object’s `applicant` field. */
  applicant?: InputMaybe<StringFilter>;
  /** Filter by the object’s `applicantDeadline` field. */
  applicantDeadline?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `assignerAction` field. */
  assignerAction?: InputMaybe<AssignerActionFilter>;
  /** Filter by the object’s `assigners` field. */
  assigners?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `lastActiveDate` field. */
  lastActiveDate?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `name` field. */
  name?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ApplicationListShapeFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ApplicationListShapeFilter>>;
  /** Filter by the object’s `orgName` field. */
  orgName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `outcome` field. */
  outcome?: InputMaybe<ApplicationOutcomeFilter>;
  /** Filter by the object’s `reviewerAction` field. */
  reviewerAction?: InputMaybe<ReviewerActionFilter>;
  /** Filter by the object’s `reviewers` field. */
  reviewers?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `serial` field. */
  serial?: InputMaybe<StringFilter>;
  /** Filter by the object’s `stage` field. */
  stage?: InputMaybe<StringFilter>;
  /** Filter by the object’s `stageColour` field. */
  stageColour?: InputMaybe<StringFilter>;
  /** Filter by the object’s `status` field. */
  status?: InputMaybe<ApplicationStatusFilter>;
  /** Filter by the object’s `templateCode` field. */
  templateCode?: InputMaybe<StringFilter>;
  /** Filter by the object’s `templateName` field. */
  templateName?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `ApplicationListShape` */
export type ApplicationListShapeInput = {
  applicant?: InputMaybe<Scalars['String']['input']>;
  applicantDeadline?: InputMaybe<Scalars['Datetime']['input']>;
  assignerAction?: InputMaybe<AssignerAction>;
  assigners?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  id?: InputMaybe<Scalars['Int']['input']>;
  lastActiveDate?: InputMaybe<Scalars['Datetime']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  orgName?: InputMaybe<Scalars['String']['input']>;
  outcome?: InputMaybe<ApplicationOutcome>;
  reviewerAction?: InputMaybe<ReviewerAction>;
  reviewers?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  serial?: InputMaybe<Scalars['String']['input']>;
  stage?: InputMaybe<Scalars['String']['input']>;
  stageColour?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<ApplicationStatus>;
  templateCode?: InputMaybe<Scalars['String']['input']>;
  templateName?: InputMaybe<Scalars['String']['input']>;
};

/** A connection to a list of `ApplicationListShape` values. */
export type ApplicationListShapesConnection = {
  __typename?: 'ApplicationListShapesConnection';
  /** A list of edges which contains the `ApplicationListShape` and cursor to aid in pagination. */
  edges: Array<ApplicationListShapesEdge>;
  /** A list of `ApplicationListShape` objects. */
  nodes: Array<Maybe<ApplicationListShape>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ApplicationListShape` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ApplicationListShape` edge in the connection. */
export type ApplicationListShapesEdge = {
  __typename?: 'ApplicationListShapesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ApplicationListShape` at the end of the edge. */
  node?: Maybe<ApplicationListShape>;
};

/** Methods to use when ordering `ApplicationListShape`. */
export enum ApplicationListShapesOrderBy {
  ApplicantAsc = 'APPLICANT_ASC',
  ApplicantDeadlineAsc = 'APPLICANT_DEADLINE_ASC',
  ApplicantDeadlineDesc = 'APPLICANT_DEADLINE_DESC',
  ApplicantDesc = 'APPLICANT_DESC',
  AssignersAsc = 'ASSIGNERS_ASC',
  AssignersDesc = 'ASSIGNERS_DESC',
  AssignerActionAsc = 'ASSIGNER_ACTION_ASC',
  AssignerActionDesc = 'ASSIGNER_ACTION_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  LastActiveDateAsc = 'LAST_ACTIVE_DATE_ASC',
  LastActiveDateDesc = 'LAST_ACTIVE_DATE_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  Natural = 'NATURAL',
  OrgNameAsc = 'ORG_NAME_ASC',
  OrgNameDesc = 'ORG_NAME_DESC',
  OutcomeAsc = 'OUTCOME_ASC',
  OutcomeDesc = 'OUTCOME_DESC',
  ReviewersAsc = 'REVIEWERS_ASC',
  ReviewersDesc = 'REVIEWERS_DESC',
  ReviewerActionAsc = 'REVIEWER_ACTION_ASC',
  ReviewerActionDesc = 'REVIEWER_ACTION_DESC',
  SerialAsc = 'SERIAL_ASC',
  SerialDesc = 'SERIAL_DESC',
  StageAsc = 'STAGE_ASC',
  StageColourAsc = 'STAGE_COLOUR_ASC',
  StageColourDesc = 'STAGE_COLOUR_DESC',
  StageDesc = 'STAGE_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TemplateCodeAsc = 'TEMPLATE_CODE_ASC',
  TemplateCodeDesc = 'TEMPLATE_CODE_DESC',
  TemplateNameAsc = 'TEMPLATE_NAME_ASC',
  TemplateNameDesc = 'TEMPLATE_NAME_DESC'
}

/** The globally unique `ID` look up for the row to connect. */
export type ApplicationNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ApplicationNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `application` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

export type ApplicationNote = Node & {
  __typename?: 'ApplicationNote';
  /** Reads a single `Application` that is related to this `ApplicationNote`. */
  application?: Maybe<Application>;
  applicationId: Scalars['Int']['output'];
  comment: Scalars['String']['output'];
  /** Reads and enables pagination through a set of `File`. */
  files: FilesConnection;
  id: Scalars['Int']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Organisation` that is related to this `ApplicationNote`. */
  org?: Maybe<Organisation>;
  orgId: Scalars['Int']['output'];
  timestamp?: Maybe<Scalars['Datetime']['output']>;
  /** Reads a single `UserList` that is related to this `ApplicationNote`. */
  user?: Maybe<UserList>;
  userId: Scalars['Int']['output'];
};


export type ApplicationNoteFilesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<FileCondition>;
  filter?: InputMaybe<FileFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<FilesOrderBy>>;
};

/** The `application` to be created by this mutation. */
export type ApplicationNoteApplicationIdFkeyApplicationCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The `applicationNote` to be created by this mutation. */
export type ApplicationNoteApplicationIdFkeyApplicationNoteCreateInput = {
  applicationToApplicationId?: InputMaybe<ApplicationNoteApplicationIdFkeyInput>;
  comment: Scalars['String']['input'];
  filesUsingId?: InputMaybe<FileApplicationNoteIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationNoteOrgIdFkeyInput>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationNoteForeignKey0Input>;
};

/** Input for the nested mutation of `application` in the `ApplicationNoteInput` mutation. */
export type ApplicationNoteApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: InputMaybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: InputMaybe<ApplicationApplicationSerialKeyConnect>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: InputMaybe<ApplicationNoteApplicationIdFkeyApplicationCreateInput>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: InputMaybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ApplicationNodeIdDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: InputMaybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: InputMaybe<ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByOutcomeRegistration?: InputMaybe<ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: InputMaybe<ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
};

/** Input for the nested mutation of `applicationNote` in the `ApplicationInput` mutation. */
export type ApplicationNoteApplicationIdFkeyInverseInput = {
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ApplicationNoteApplicationNotePkeyConnect>>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ApplicationNoteNodeIdConnect>>;
  /** A `ApplicationNoteInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ApplicationNoteApplicationIdFkeyApplicationNoteCreateInput>>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ApplicationNoteApplicationNotePkeyDelete>>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ApplicationNoteNodeIdDelete>>;
  /** Flag indicating whether all other `applicationNote` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `applicationNote` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationNotePkeyUpdate>>;
  /** The primary key(s) and patch data for `applicationNote` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyNodeIdUpdate>>;
};

/** The fields on `applicationNote` to look up the row to connect. */
export type ApplicationNoteApplicationNotePkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `applicationNote` to look up the row to delete. */
export type ApplicationNoteApplicationNotePkeyDelete = {
  id: Scalars['Int']['input'];
};

/**
 * A condition to be used against `ApplicationNote` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type ApplicationNoteCondition = {
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `comment` field. */
  comment?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `orgId` field. */
  orgId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `timestamp` field. */
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** A filter to be used against `ApplicationNote` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationNoteFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ApplicationNoteFilter>>;
  /** Filter by the object’s `application` relation. */
  application?: InputMaybe<ApplicationFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `comment` field. */
  comment?: InputMaybe<StringFilter>;
  /** Filter by the object’s `files` relation. */
  files?: InputMaybe<ApplicationNoteToManyFileFilter>;
  /** Some related `files` exist. */
  filesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ApplicationNoteFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ApplicationNoteFilter>>;
  /** Filter by the object’s `org` relation. */
  org?: InputMaybe<OrganisationFilter>;
  /** Filter by the object’s `orgId` field. */
  orgId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `timestamp` field. */
  timestamp?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `user` relation. */
  user?: InputMaybe<UserListFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<IntFilter>;
};

/** An input for mutations affecting `ApplicationNote` */
export type ApplicationNoteInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ApplicationNoteApplicationIdFkeyInput>;
  comment: Scalars['String']['input'];
  filesUsingId?: InputMaybe<FileApplicationNoteIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationNoteOrgIdFkeyInput>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationNoteForeignKey0Input>;
};

/** The globally unique `ID` look up for the row to connect. */
export type ApplicationNoteNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `applicationNote` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ApplicationNoteNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `applicationNote` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The fields on `applicationNote` to look up the row to update. */
export type ApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationNotePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `applicationNote` being updated. */
  patch: UpdateApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `organisation` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: OrganisationPatch;
};

/** The fields on `applicationNote` to look up the row to update. */
export type ApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyUsingApplicationNotePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `applicationNote` being updated. */
  patch: UpdateApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyPatch;
};

/** The fields on `applicationNote` to look up the row to update. */
export type ApplicationNoteOnApplicationNoteForFakePublicApplicationNoteForeignKey0UsingApplicationNotePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `applicationNote` being updated. */
  patch: UpdateApplicationNoteOnApplicationNoteForFakePublicApplicationNoteForeignKey0Patch;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationNoteOnFileForFileApplicationNoteIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `file` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: FilePatch;
};

/** The fields on `applicationNote` to look up the row to update. */
export type ApplicationNoteOnFileForFileApplicationNoteIdFkeyUsingApplicationNotePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `applicationNote` being updated. */
  patch: UpdateApplicationNoteOnFileForFileApplicationNoteIdFkeyPatch;
};

/** The `applicationNote` to be created by this mutation. */
export type ApplicationNoteOrgIdFkeyApplicationNoteCreateInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ApplicationNoteApplicationIdFkeyInput>;
  comment: Scalars['String']['input'];
  filesUsingId?: InputMaybe<FileApplicationNoteIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationNoteOrgIdFkeyInput>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationNoteForeignKey0Input>;
};

/** Input for the nested mutation of `organisation` in the `ApplicationNoteInput` mutation. */
export type ApplicationNoteOrgIdFkeyInput = {
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectById?: InputMaybe<OrganisationOrganisationPkeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByName?: InputMaybe<OrganisationOrganisationNameKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<OrganisationNodeIdConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByRegistration?: InputMaybe<OrganisationOrganisationRegistrationKeyConnect>;
  /** A `OrganisationInput` object that will be created and connected to this object. */
  create?: InputMaybe<ApplicationNoteOrgIdFkeyOrganisationCreateInput>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteById?: InputMaybe<OrganisationOrganisationPkeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByName?: InputMaybe<OrganisationOrganisationNameKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<OrganisationNodeIdDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByRegistration?: InputMaybe<OrganisationOrganisationRegistrationKeyDelete>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateById?: InputMaybe<OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationPkeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByName?: InputMaybe<OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationNameKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByRegistration?: InputMaybe<OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationRegistrationKeyUpdate>;
};

/** Input for the nested mutation of `applicationNote` in the `OrganisationInput` mutation. */
export type ApplicationNoteOrgIdFkeyInverseInput = {
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ApplicationNoteApplicationNotePkeyConnect>>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ApplicationNoteNodeIdConnect>>;
  /** A `ApplicationNoteInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ApplicationNoteOrgIdFkeyApplicationNoteCreateInput>>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ApplicationNoteApplicationNotePkeyDelete>>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ApplicationNoteNodeIdDelete>>;
  /** Flag indicating whether all other `applicationNote` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `applicationNote` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyUsingApplicationNotePkeyUpdate>>;
  /** The primary key(s) and patch data for `applicationNote` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyNodeIdUpdate>>;
};

/** The `organisation` to be created by this mutation. */
export type ApplicationNoteOrgIdFkeyOrganisationCreateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteOrgIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationOrgIdFkeyInverseInput>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogOrgIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrg?: InputMaybe<Scalars['Boolean']['input']>;
  logoUrl?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  registration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: InputMaybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** Represents an update to a `ApplicationNote`. Fields that are set will be updated. */
export type ApplicationNotePatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ApplicationNoteApplicationIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  filesUsingId?: InputMaybe<FileApplicationNoteIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationNoteOrgIdFkeyInput>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationNoteForeignKey0Input>;
};

/** A filter to be used against many `File` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationNoteToManyFileFilter = {
  /** Every related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<FileFilter>;
  /** No related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<FileFilter>;
  /** Some related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<FileFilter>;
};

/** A connection to a list of `ApplicationNote` values. */
export type ApplicationNotesConnection = {
  __typename?: 'ApplicationNotesConnection';
  /** A list of edges which contains the `ApplicationNote` and cursor to aid in pagination. */
  edges: Array<ApplicationNotesEdge>;
  /** A list of `ApplicationNote` objects. */
  nodes: Array<Maybe<ApplicationNote>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ApplicationNote` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ApplicationNote` edge in the connection. */
export type ApplicationNotesEdge = {
  __typename?: 'ApplicationNotesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ApplicationNote` at the end of the edge. */
  node?: Maybe<ApplicationNote>;
};

/** Methods to use when ordering `ApplicationNote`. */
export enum ApplicationNotesOrderBy {
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  CommentAsc = 'COMMENT_ASC',
  CommentDesc = 'COMMENT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  OrgIdAsc = 'ORG_ID_ASC',
  OrgIdDesc = 'ORG_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  TimestampAsc = 'TIMESTAMP_ASC',
  TimestampDesc = 'TIMESTAMP_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnActionQueueForActionQueueApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `actionQueue` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `actionQueue` being updated. */
  patch: ActionQueuePatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnActionQueueForActionQueueApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate = {
  outcomeRegistration: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnActionQueueForActionQueueApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnActionQueueForActionQueueApplicationIdFkeyUsingApplicationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnActionQueueForActionQueueApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnActionQueueForActionQueueApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnActionQueueForActionQueueApplicationIdFkeyPatch;
  serial: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnActivityLogForActivityLogApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `activityLog` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `activityLog` being updated. */
  patch: ActivityLogPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate = {
  outcomeRegistration: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnActivityLogForActivityLogApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnActivityLogForActivityLogApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnActivityLogForActivityLogApplicationIdFkeyPatch;
  serial: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnApplicationForApplicationOrgIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `organisation` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: OrganisationPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate = {
  outcomeRegistration: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationForApplicationOrgIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationForApplicationOrgIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationForApplicationOrgIdFkeyPatch;
  serial: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate = {
  outcomeRegistration: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationForApplicationTemplateIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationForApplicationTemplateIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationForApplicationTemplateIdFkeyPatch;
  serial: Scalars['String']['input'];
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationForFakePublicApplicationForeignKey0UsingApplicationOutcomeRegistrationKeyUpdate = {
  outcomeRegistration: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationForFakePublicApplicationForeignKey0Patch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationForFakePublicApplicationForeignKey0UsingApplicationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationForFakePublicApplicationForeignKey0Patch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationForFakePublicApplicationForeignKey0UsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationForFakePublicApplicationForeignKey0Patch;
  serial: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationNote` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `applicationNote` being updated. */
  patch: ApplicationNotePatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate = {
  outcomeRegistration: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch;
  serial: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationResponse` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `applicationResponse` being updated. */
  patch: ApplicationResponsePatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate = {
  outcomeRegistration: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch;
  serial: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationReviewerAction` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `applicationReviewerAction` being updated. */
  patch: ApplicationReviewerActionPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate = {
  outcomeRegistration: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyPatch;
  serial: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationStageHistory` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `applicationStageHistory` being updated. */
  patch: ApplicationStageHistoryPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate = {
  outcomeRegistration: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch;
  serial: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `dataChangelog` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `dataChangelog` being updated. */
  patch: DataChangelogPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate = {
  outcomeRegistration: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnDataChangelogForDataChangelogApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyUsingApplicationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnDataChangelogForDataChangelogApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnDataChangelogForDataChangelogApplicationIdFkeyPatch;
  serial: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnFileForFileApplicationSerialFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `file` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: FilePatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationOutcomeRegistrationKeyUpdate = {
  outcomeRegistration: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnFileForFileApplicationSerialFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnFileForFileApplicationSerialFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnFileForFileApplicationSerialFkeyPatch;
  serial: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `notification` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `notification` being updated. */
  patch: NotificationPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate = {
  outcomeRegistration: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnNotificationForNotificationApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnNotificationForNotificationApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnNotificationForNotificationApplicationIdFkeyPatch;
  serial: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate = {
  outcomeRegistration: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch;
  serial: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnReviewForReviewApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `review` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: ReviewPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate = {
  outcomeRegistration: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnReviewForReviewApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnReviewForReviewApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnReviewForReviewApplicationIdFkeyPatch;
  serial: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `triggerQueue` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `triggerQueue` being updated. */
  patch: TriggerQueuePatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate = {
  outcomeRegistration: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingApplicationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyPatch;
  serial: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `triggerSchedule` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `triggerSchedule` being updated. */
  patch: TriggerSchedulePatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate = {
  outcomeRegistration: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch;
  serial: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationOnVerificationForVerificationApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `verification` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `verification` being updated. */
  patch: VerificationPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate = {
  outcomeRegistration: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnVerificationForVerificationApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnVerificationForVerificationApplicationIdFkeyPatch;
};

/** The fields on `application` to look up the row to update. */
export type ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationSerialKeyUpdate = {
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: UpdateApplicationOnVerificationForVerificationApplicationIdFkeyPatch;
  serial: Scalars['String']['input'];
};

/** The `application` to be created by this mutation. */
export type ApplicationOrgIdFkeyApplicationCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `organisation` in the `ApplicationInput` mutation. */
export type ApplicationOrgIdFkeyInput = {
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectById?: InputMaybe<OrganisationOrganisationPkeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByName?: InputMaybe<OrganisationOrganisationNameKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<OrganisationNodeIdConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByRegistration?: InputMaybe<OrganisationOrganisationRegistrationKeyConnect>;
  /** A `OrganisationInput` object that will be created and connected to this object. */
  create?: InputMaybe<ApplicationOrgIdFkeyOrganisationCreateInput>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteById?: InputMaybe<OrganisationOrganisationPkeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByName?: InputMaybe<OrganisationOrganisationNameKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<OrganisationNodeIdDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByRegistration?: InputMaybe<OrganisationOrganisationRegistrationKeyDelete>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateById?: InputMaybe<OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationPkeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByName?: InputMaybe<OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationNameKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ApplicationOnApplicationForApplicationOrgIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByRegistration?: InputMaybe<OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationRegistrationKeyUpdate>;
};

/** Input for the nested mutation of `application` in the `OrganisationInput` mutation. */
export type ApplicationOrgIdFkeyInverseInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ApplicationApplicationPkeyConnect>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ApplicationNodeIdConnect>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByOutcomeRegistration?: InputMaybe<Array<ApplicationApplicationOutcomeRegistrationKeyConnect>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: InputMaybe<Array<ApplicationApplicationSerialKeyConnect>>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ApplicationOrgIdFkeyApplicationCreateInput>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ApplicationApplicationPkeyDelete>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ApplicationNodeIdDelete>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByOutcomeRegistration?: InputMaybe<Array<ApplicationApplicationOutcomeRegistrationKeyDelete>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: InputMaybe<Array<ApplicationApplicationSerialKeyDelete>>;
  /** Flag indicating whether all other `application` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationPkeyUpdate>>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<OrganisationOnApplicationForApplicationOrgIdFkeyNodeIdUpdate>>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByOutcomeRegistration?: InputMaybe<Array<ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate>>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: InputMaybe<Array<ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationSerialKeyUpdate>>;
};

/** The `organisation` to be created by this mutation. */
export type ApplicationOrgIdFkeyOrganisationCreateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteOrgIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationOrgIdFkeyInverseInput>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogOrgIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrg?: InputMaybe<Scalars['Boolean']['input']>;
  logoUrl?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  registration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: InputMaybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

export enum ApplicationOutcome {
  Approved = 'APPROVED',
  Expired = 'EXPIRED',
  Pending = 'PENDING',
  Rejected = 'REJECTED',
  Withdrawn = 'WITHDRAWN'
}

/** A filter to be used against ApplicationOutcome fields. All fields are combined with a logical ‘and.’ */
export type ApplicationOutcomeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<ApplicationOutcome>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<ApplicationOutcome>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<ApplicationOutcome>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<ApplicationOutcome>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<ApplicationOutcome>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<ApplicationOutcome>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<ApplicationOutcome>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<ApplicationOutcome>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<ApplicationOutcome>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<ApplicationOutcome>>;
};

/** Represents an update to a `Application`. Fields that are set will be updated. */
export type ApplicationPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

export type ApplicationResponse = Node & {
  __typename?: 'ApplicationResponse';
  /** Reads a single `Application` that is related to this `ApplicationResponse`. */
  application?: Maybe<Application>;
  applicationId: Scalars['Int']['output'];
  evaluatedParameters?: Maybe<Scalars['JSON']['output']>;
  /** Reads and enables pagination through a set of `File`. */
  files: FilesConnection;
  id: Scalars['Int']['output'];
  isValid?: Maybe<Scalars['Boolean']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads and enables pagination through a set of `ReviewResponse`. */
  reviewResponses: ReviewResponsesConnection;
  stageNumber?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<ApplicationResponseStatus>;
  /** Reads a single `TemplateElement` that is related to this `ApplicationResponse`. */
  templateElement?: Maybe<TemplateElement>;
  templateElementId: Scalars['Int']['output'];
  timeCreated?: Maybe<Scalars['Datetime']['output']>;
  timeSubmitted?: Maybe<Scalars['Datetime']['output']>;
  timeUpdated?: Maybe<Scalars['Datetime']['output']>;
  value?: Maybe<Scalars['JSON']['output']>;
};


export type ApplicationResponseFilesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<FileCondition>;
  filter?: InputMaybe<FileFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<FilesOrderBy>>;
};


export type ApplicationResponseReviewResponsesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewResponseCondition>;
  filter?: InputMaybe<ReviewResponseFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewResponsesOrderBy>>;
};

/** The `application` to be created by this mutation. */
export type ApplicationResponseApplicationIdFkeyApplicationCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The `applicationResponse` to be created by this mutation. */
export type ApplicationResponseApplicationIdFkeyApplicationResponseCreateInput = {
  applicationToApplicationId?: InputMaybe<ApplicationResponseApplicationIdFkeyInput>;
  evaluatedParameters?: InputMaybe<Scalars['JSON']['input']>;
  filesUsingId?: InputMaybe<FileApplicationResponseIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isValid?: InputMaybe<Scalars['Boolean']['input']>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ApplicationResponseStatus>;
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  templateElementToTemplateElementId?: InputMaybe<ApplicationResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  value?: InputMaybe<Scalars['JSON']['input']>;
};

/** Input for the nested mutation of `application` in the `ApplicationResponseInput` mutation. */
export type ApplicationResponseApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: InputMaybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: InputMaybe<ApplicationApplicationSerialKeyConnect>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: InputMaybe<ApplicationResponseApplicationIdFkeyApplicationCreateInput>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: InputMaybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ApplicationNodeIdDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: InputMaybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: InputMaybe<ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByOutcomeRegistration?: InputMaybe<ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: InputMaybe<ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
};

/** Input for the nested mutation of `applicationResponse` in the `ApplicationInput` mutation. */
export type ApplicationResponseApplicationIdFkeyInverseInput = {
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ApplicationResponseApplicationResponsePkeyConnect>>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ApplicationResponseNodeIdConnect>>;
  /** A `ApplicationResponseInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ApplicationResponseApplicationIdFkeyApplicationResponseCreateInput>>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ApplicationResponseApplicationResponsePkeyDelete>>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ApplicationResponseNodeIdDelete>>;
  /** Flag indicating whether all other `applicationResponse` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `applicationResponse` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationResponsePkeyUpdate>>;
  /** The primary key(s) and patch data for `applicationResponse` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate>>;
};

/** The fields on `applicationResponse` to look up the row to connect. */
export type ApplicationResponseApplicationResponsePkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `applicationResponse` to look up the row to delete. */
export type ApplicationResponseApplicationResponsePkeyDelete = {
  id: Scalars['Int']['input'];
};

/**
 * A condition to be used against `ApplicationResponse` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type ApplicationResponseCondition = {
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `evaluatedParameters` field. */
  evaluatedParameters?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isValid` field. */
  isValid?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `stageNumber` field. */
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `status` field. */
  status?: InputMaybe<ApplicationResponseStatus>;
  /** Checks for equality with the object’s `templateElementId` field. */
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `timeCreated` field. */
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `timeSubmitted` field. */
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `timeUpdated` field. */
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `value` field. */
  value?: InputMaybe<Scalars['JSON']['input']>;
};

/** A filter to be used against `ApplicationResponse` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationResponseFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ApplicationResponseFilter>>;
  /** Filter by the object’s `application` relation. */
  application?: InputMaybe<ApplicationFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `evaluatedParameters` field. */
  evaluatedParameters?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `files` relation. */
  files?: InputMaybe<ApplicationResponseToManyFileFilter>;
  /** Some related `files` exist. */
  filesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isValid` field. */
  isValid?: InputMaybe<BooleanFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ApplicationResponseFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ApplicationResponseFilter>>;
  /** Filter by the object’s `reviewResponses` relation. */
  reviewResponses?: InputMaybe<ApplicationResponseToManyReviewResponseFilter>;
  /** Some related `reviewResponses` exist. */
  reviewResponsesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `stageNumber` field. */
  stageNumber?: InputMaybe<IntFilter>;
  /** Filter by the object’s `status` field. */
  status?: InputMaybe<ApplicationResponseStatusFilter>;
  /** Filter by the object’s `templateElement` relation. */
  templateElement?: InputMaybe<TemplateElementFilter>;
  /** Filter by the object’s `templateElementId` field. */
  templateElementId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `timeCreated` field. */
  timeCreated?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `timeSubmitted` field. */
  timeSubmitted?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `timeUpdated` field. */
  timeUpdated?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `value` field. */
  value?: InputMaybe<JsonFilter>;
};

/** An input for mutations affecting `ApplicationResponse` */
export type ApplicationResponseInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ApplicationResponseApplicationIdFkeyInput>;
  evaluatedParameters?: InputMaybe<Scalars['JSON']['input']>;
  filesUsingId?: InputMaybe<FileApplicationResponseIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isValid?: InputMaybe<Scalars['Boolean']['input']>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ApplicationResponseStatus>;
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  templateElementToTemplateElementId?: InputMaybe<ApplicationResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  value?: InputMaybe<Scalars['JSON']['input']>;
};

/** The globally unique `ID` look up for the row to connect. */
export type ApplicationResponseNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `applicationResponse` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ApplicationResponseNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `applicationResponse` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The fields on `applicationResponse` to look up the row to update. */
export type ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationResponsePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `applicationResponse` being updated. */
  patch: UpdateApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateElement` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `templateElement` being updated. */
  patch: TemplateElementPatch;
};

/** The fields on `applicationResponse` to look up the row to update. */
export type ApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingApplicationResponsePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `applicationResponse` being updated. */
  patch: UpdateApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationResponseOnFileForFileApplicationResponseIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `file` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: FilePatch;
};

/** The fields on `applicationResponse` to look up the row to update. */
export type ApplicationResponseOnFileForFileApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `applicationResponse` being updated. */
  patch: UpdateApplicationResponseOnFileForFileApplicationResponseIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewResponse` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: ReviewResponsePatch;
};

/** The fields on `applicationResponse` to look up the row to update. */
export type ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `applicationResponse` being updated. */
  patch: UpdateApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch;
};

/** Represents an update to a `ApplicationResponse`. Fields that are set will be updated. */
export type ApplicationResponsePatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ApplicationResponseApplicationIdFkeyInput>;
  evaluatedParameters?: InputMaybe<Scalars['JSON']['input']>;
  filesUsingId?: InputMaybe<FileApplicationResponseIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isValid?: InputMaybe<Scalars['Boolean']['input']>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ApplicationResponseStatus>;
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  templateElementToTemplateElementId?: InputMaybe<ApplicationResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  value?: InputMaybe<Scalars['JSON']['input']>;
};

export enum ApplicationResponseStatus {
  Draft = 'DRAFT',
  Submitted = 'SUBMITTED'
}

/** A filter to be used against ApplicationResponseStatus fields. All fields are combined with a logical ‘and.’ */
export type ApplicationResponseStatusFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<ApplicationResponseStatus>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<ApplicationResponseStatus>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<ApplicationResponseStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<ApplicationResponseStatus>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<ApplicationResponseStatus>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<ApplicationResponseStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<ApplicationResponseStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<ApplicationResponseStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<ApplicationResponseStatus>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<ApplicationResponseStatus>>;
};

/** The `applicationResponse` to be created by this mutation. */
export type ApplicationResponseTemplateElementIdFkeyApplicationResponseCreateInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ApplicationResponseApplicationIdFkeyInput>;
  evaluatedParameters?: InputMaybe<Scalars['JSON']['input']>;
  filesUsingId?: InputMaybe<FileApplicationResponseIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isValid?: InputMaybe<Scalars['Boolean']['input']>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ApplicationResponseStatus>;
  templateElementToTemplateElementId?: InputMaybe<ApplicationResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  value?: InputMaybe<Scalars['JSON']['input']>;
};

/** Input for the nested mutation of `templateElement` in the `ApplicationResponseInput` mutation. */
export type ApplicationResponseTemplateElementIdFkeyInput = {
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  connectById?: InputMaybe<TemplateElementTemplateElementPkeyConnect>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TemplateElementNodeIdConnect>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  connectByTemplateCodeAndCodeAndTemplateVersion?: InputMaybe<TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyConnect>;
  /** A `TemplateElementInput` object that will be created and connected to this object. */
  create?: InputMaybe<ApplicationResponseTemplateElementIdFkeyTemplateElementCreateInput>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  deleteById?: InputMaybe<TemplateElementTemplateElementPkeyDelete>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TemplateElementNodeIdDelete>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  deleteByTemplateCodeAndCodeAndTemplateVersion?: InputMaybe<TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyDelete>;
  /** The primary key(s) and patch data for `templateElement` for the far side of the relationship. */
  updateById?: InputMaybe<TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingTemplateElementPkeyUpdate>;
  /** The primary key(s) and patch data for `templateElement` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `templateElement` for the far side of the relationship. */
  updateByTemplateCodeAndCodeAndTemplateVersion?: InputMaybe<TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate>;
};

/** Input for the nested mutation of `applicationResponse` in the `TemplateElementInput` mutation. */
export type ApplicationResponseTemplateElementIdFkeyInverseInput = {
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ApplicationResponseApplicationResponsePkeyConnect>>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ApplicationResponseNodeIdConnect>>;
  /** A `ApplicationResponseInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ApplicationResponseTemplateElementIdFkeyApplicationResponseCreateInput>>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ApplicationResponseApplicationResponsePkeyDelete>>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ApplicationResponseNodeIdDelete>>;
  /** Flag indicating whether all other `applicationResponse` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `applicationResponse` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingApplicationResponsePkeyUpdate>>;
  /** The primary key(s) and patch data for `applicationResponse` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyNodeIdUpdate>>;
};

/** The `templateElement` to be created by this mutation. */
export type ApplicationResponseTemplateElementIdFkeyTemplateElementCreateInput = {
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseTemplateElementIdFkeyInverseInput>;
  category?: InputMaybe<TemplateElementCategory>;
  code: Scalars['String']['input'];
  elementTypePluginCode?: InputMaybe<Scalars['String']['input']>;
  helpText?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  index?: InputMaybe<Scalars['Int']['input']>;
  initialValue?: InputMaybe<Scalars['JSON']['input']>;
  isEditable?: InputMaybe<Scalars['JSON']['input']>;
  isRequired?: InputMaybe<Scalars['JSON']['input']>;
  parameters?: InputMaybe<Scalars['JSON']['input']>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInverseInput>;
  reviewability?: InputMaybe<Reviewability>;
  sectionId?: InputMaybe<Scalars['Int']['input']>;
  templateCode: Scalars['String']['input'];
  templateSectionToSectionId?: InputMaybe<TemplateElementSectionIdFkeyInput>;
  templateVersion: Scalars['String']['input'];
  title?: InputMaybe<Scalars['String']['input']>;
  validation?: InputMaybe<Scalars['JSON']['input']>;
  validationMessage?: InputMaybe<Scalars['String']['input']>;
  visibilityCondition?: InputMaybe<Scalars['JSON']['input']>;
};

/** A filter to be used against many `File` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationResponseToManyFileFilter = {
  /** Every related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<FileFilter>;
  /** No related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<FileFilter>;
  /** Some related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<FileFilter>;
};

/** A filter to be used against many `ReviewResponse` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationResponseToManyReviewResponseFilter = {
  /** Every related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ReviewResponseFilter>;
  /** No related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ReviewResponseFilter>;
  /** Some related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ReviewResponseFilter>;
};

/** A connection to a list of `ApplicationResponse` values. */
export type ApplicationResponsesConnection = {
  __typename?: 'ApplicationResponsesConnection';
  /** A list of edges which contains the `ApplicationResponse` and cursor to aid in pagination. */
  edges: Array<ApplicationResponsesEdge>;
  /** A list of `ApplicationResponse` objects. */
  nodes: Array<Maybe<ApplicationResponse>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ApplicationResponse` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ApplicationResponse` edge in the connection. */
export type ApplicationResponsesEdge = {
  __typename?: 'ApplicationResponsesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ApplicationResponse` at the end of the edge. */
  node?: Maybe<ApplicationResponse>;
};

/** Methods to use when ordering `ApplicationResponse`. */
export enum ApplicationResponsesOrderBy {
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  EvaluatedParametersAsc = 'EVALUATED_PARAMETERS_ASC',
  EvaluatedParametersDesc = 'EVALUATED_PARAMETERS_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsValidAsc = 'IS_VALID_ASC',
  IsValidDesc = 'IS_VALID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  StageNumberAsc = 'STAGE_NUMBER_ASC',
  StageNumberDesc = 'STAGE_NUMBER_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TemplateElementIdAsc = 'TEMPLATE_ELEMENT_ID_ASC',
  TemplateElementIdDesc = 'TEMPLATE_ELEMENT_ID_DESC',
  TimeCreatedAsc = 'TIME_CREATED_ASC',
  TimeCreatedDesc = 'TIME_CREATED_DESC',
  TimeSubmittedAsc = 'TIME_SUBMITTED_ASC',
  TimeSubmittedDesc = 'TIME_SUBMITTED_DESC',
  TimeUpdatedAsc = 'TIME_UPDATED_ASC',
  TimeUpdatedDesc = 'TIME_UPDATED_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

export type ApplicationReviewerAction = Node & {
  __typename?: 'ApplicationReviewerAction';
  /** Reads a single `Application` that is related to this `ApplicationReviewerAction`. */
  application?: Maybe<Application>;
  applicationId: Scalars['Int']['output'];
  assignerAction?: Maybe<AssignerAction>;
  id: Scalars['Int']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  reviewerAction?: Maybe<ReviewerAction>;
  userId: Scalars['Int']['output'];
};

/** The `application` to be created by this mutation. */
export type ApplicationReviewerActionApplicationIdFkeyApplicationCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The `applicationReviewerAction` to be created by this mutation. */
export type ApplicationReviewerActionApplicationIdFkeyApplicationReviewerActionCreateInput = {
  applicationToApplicationId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInput>;
  assignerAction?: InputMaybe<AssignerAction>;
  id?: InputMaybe<Scalars['Int']['input']>;
  reviewerAction?: InputMaybe<ReviewerAction>;
  userId: Scalars['Int']['input'];
};

/** Input for the nested mutation of `application` in the `ApplicationReviewerActionInput` mutation. */
export type ApplicationReviewerActionApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: InputMaybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: InputMaybe<ApplicationApplicationSerialKeyConnect>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyApplicationCreateInput>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: InputMaybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ApplicationNodeIdDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: InputMaybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: InputMaybe<ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByOutcomeRegistration?: InputMaybe<ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: InputMaybe<ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
};

/** Input for the nested mutation of `applicationReviewerAction` in the `ApplicationInput` mutation. */
export type ApplicationReviewerActionApplicationIdFkeyInverseInput = {
  /** The primary key(s) for `applicationReviewerAction` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ApplicationReviewerActionApplicationReviewerActionPkeyConnect>>;
  /** The primary key(s) for `applicationReviewerAction` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ApplicationReviewerActionNodeIdConnect>>;
  /** The primary key(s) for `applicationReviewerAction` for the far side of the relationship. */
  connectByUserIdAndApplicationId?: InputMaybe<Array<ApplicationReviewerActionApplicationReviewerActionUserIdApplicationIdKeyConnect>>;
  /** A `ApplicationReviewerActionInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ApplicationReviewerActionApplicationIdFkeyApplicationReviewerActionCreateInput>>;
  /** The primary key(s) for `applicationReviewerAction` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ApplicationReviewerActionApplicationReviewerActionPkeyDelete>>;
  /** The primary key(s) for `applicationReviewerAction` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ApplicationReviewerActionNodeIdDelete>>;
  /** The primary key(s) for `applicationReviewerAction` for the far side of the relationship. */
  deleteByUserIdAndApplicationId?: InputMaybe<Array<ApplicationReviewerActionApplicationReviewerActionUserIdApplicationIdKeyDelete>>;
  /** Flag indicating whether all other `applicationReviewerAction` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `applicationReviewerAction` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationReviewerActionPkeyUpdate>>;
  /** The primary key(s) and patch data for `applicationReviewerAction` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyNodeIdUpdate>>;
  /** The primary key(s) and patch data for `applicationReviewerAction` for the far side of the relationship. */
  updateByUserIdAndApplicationId?: InputMaybe<Array<ApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationReviewerActionUserIdApplicationIdKeyUpdate>>;
};

/** The fields on `applicationReviewerAction` to look up the row to connect. */
export type ApplicationReviewerActionApplicationReviewerActionPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `applicationReviewerAction` to look up the row to delete. */
export type ApplicationReviewerActionApplicationReviewerActionPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** The fields on `applicationReviewerAction` to look up the row to connect. */
export type ApplicationReviewerActionApplicationReviewerActionUserIdApplicationIdKeyConnect = {
  applicationId: Scalars['Int']['input'];
  userId: Scalars['Int']['input'];
};

/** The fields on `applicationReviewerAction` to look up the row to delete. */
export type ApplicationReviewerActionApplicationReviewerActionUserIdApplicationIdKeyDelete = {
  applicationId: Scalars['Int']['input'];
  userId: Scalars['Int']['input'];
};

/**
 * A condition to be used against `ApplicationReviewerAction` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type ApplicationReviewerActionCondition = {
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `assignerAction` field. */
  assignerAction?: InputMaybe<AssignerAction>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `reviewerAction` field. */
  reviewerAction?: InputMaybe<ReviewerAction>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** A filter to be used against `ApplicationReviewerAction` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationReviewerActionFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ApplicationReviewerActionFilter>>;
  /** Filter by the object’s `application` relation. */
  application?: InputMaybe<ApplicationFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `assignerAction` field. */
  assignerAction?: InputMaybe<AssignerActionFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ApplicationReviewerActionFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ApplicationReviewerActionFilter>>;
  /** Filter by the object’s `reviewerAction` field. */
  reviewerAction?: InputMaybe<ReviewerActionFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<IntFilter>;
};

/** An input for mutations affecting `ApplicationReviewerAction` */
export type ApplicationReviewerActionInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInput>;
  assignerAction?: InputMaybe<AssignerAction>;
  id?: InputMaybe<Scalars['Int']['input']>;
  reviewerAction?: InputMaybe<ReviewerAction>;
  userId: Scalars['Int']['input'];
};

/** The globally unique `ID` look up for the row to connect. */
export type ApplicationReviewerActionNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `applicationReviewerAction` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ApplicationReviewerActionNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `applicationReviewerAction` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The fields on `applicationReviewerAction` to look up the row to update. */
export type ApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationReviewerActionPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `applicationReviewerAction` being updated. */
  patch: UpdateApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyPatch;
};

/** The fields on `applicationReviewerAction` to look up the row to update. */
export type ApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationReviewerActionUserIdApplicationIdKeyUpdate = {
  applicationId: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `applicationReviewerAction` being updated. */
  patch: UpdateApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyPatch;
  userId: Scalars['Int']['input'];
};

/** Represents an update to a `ApplicationReviewerAction`. Fields that are set will be updated. */
export type ApplicationReviewerActionPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInput>;
  assignerAction?: InputMaybe<AssignerAction>;
  id?: InputMaybe<Scalars['Int']['input']>;
  reviewerAction?: InputMaybe<ReviewerAction>;
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** A connection to a list of `ApplicationReviewerAction` values. */
export type ApplicationReviewerActionsConnection = {
  __typename?: 'ApplicationReviewerActionsConnection';
  /** A list of edges which contains the `ApplicationReviewerAction` and cursor to aid in pagination. */
  edges: Array<ApplicationReviewerActionsEdge>;
  /** A list of `ApplicationReviewerAction` objects. */
  nodes: Array<Maybe<ApplicationReviewerAction>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ApplicationReviewerAction` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ApplicationReviewerAction` edge in the connection. */
export type ApplicationReviewerActionsEdge = {
  __typename?: 'ApplicationReviewerActionsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ApplicationReviewerAction` at the end of the edge. */
  node?: Maybe<ApplicationReviewerAction>;
};

/** Methods to use when ordering `ApplicationReviewerAction`. */
export enum ApplicationReviewerActionsOrderBy {
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  AssignerActionAsc = 'ASSIGNER_ACTION_ASC',
  AssignerActionDesc = 'ASSIGNER_ACTION_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ReviewerActionAsc = 'REVIEWER_ACTION_ASC',
  ReviewerActionDesc = 'REVIEWER_ACTION_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

/** A connection to a list of `ApplicationStageHistory` values. */
export type ApplicationStageHistoriesConnection = {
  __typename?: 'ApplicationStageHistoriesConnection';
  /** A list of edges which contains the `ApplicationStageHistory` and cursor to aid in pagination. */
  edges: Array<ApplicationStageHistoriesEdge>;
  /** A list of `ApplicationStageHistory` objects. */
  nodes: Array<Maybe<ApplicationStageHistory>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ApplicationStageHistory` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ApplicationStageHistory` edge in the connection. */
export type ApplicationStageHistoriesEdge = {
  __typename?: 'ApplicationStageHistoriesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ApplicationStageHistory` at the end of the edge. */
  node?: Maybe<ApplicationStageHistory>;
};

/** Methods to use when ordering `ApplicationStageHistory`. */
export enum ApplicationStageHistoriesOrderBy {
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsCurrentAsc = 'IS_CURRENT_ASC',
  IsCurrentDesc = 'IS_CURRENT_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  StageIdAsc = 'STAGE_ID_ASC',
  StageIdDesc = 'STAGE_ID_DESC',
  TimeCreatedAsc = 'TIME_CREATED_ASC',
  TimeCreatedDesc = 'TIME_CREATED_DESC'
}

export type ApplicationStageHistory = Node & {
  __typename?: 'ApplicationStageHistory';
  /** Reads a single `Application` that is related to this `ApplicationStageHistory`. */
  application?: Maybe<Application>;
  applicationId: Scalars['Int']['output'];
  /** Reads and enables pagination through a set of `ApplicationStatusHistory`. */
  applicationStatusHistories: ApplicationStatusHistoriesConnection;
  id: Scalars['Int']['output'];
  isCurrent?: Maybe<Scalars['Boolean']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `TemplateStage` that is related to this `ApplicationStageHistory`. */
  stage?: Maybe<TemplateStage>;
  stageId: Scalars['Int']['output'];
  timeCreated?: Maybe<Scalars['Datetime']['output']>;
};


export type ApplicationStageHistoryApplicationStatusHistoriesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationStatusHistoryCondition>;
  filter?: InputMaybe<ApplicationStatusHistoryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationStatusHistoriesOrderBy>>;
};

/** The `application` to be created by this mutation. */
export type ApplicationStageHistoryApplicationIdFkeyApplicationCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The `applicationStageHistory` to be created by this mutation. */
export type ApplicationStageHistoryApplicationIdFkeyApplicationStageHistoryCreateInput = {
  applicationStatusHistoriesUsingId?: InputMaybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput>;
  applicationToApplicationId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  templateStageToStageId?: InputMaybe<ApplicationStageHistoryStageIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** Input for the nested mutation of `application` in the `ApplicationStageHistoryInput` mutation. */
export type ApplicationStageHistoryApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: InputMaybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: InputMaybe<ApplicationApplicationSerialKeyConnect>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyApplicationCreateInput>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: InputMaybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ApplicationNodeIdDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: InputMaybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: InputMaybe<ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByOutcomeRegistration?: InputMaybe<ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: InputMaybe<ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
};

/** Input for the nested mutation of `applicationStageHistory` in the `ApplicationInput` mutation. */
export type ApplicationStageHistoryApplicationIdFkeyInverseInput = {
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ApplicationStageHistoryApplicationStageHistoryPkeyConnect>>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ApplicationStageHistoryNodeIdConnect>>;
  /** A `ApplicationStageHistoryInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ApplicationStageHistoryApplicationIdFkeyApplicationStageHistoryCreateInput>>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ApplicationStageHistoryApplicationStageHistoryPkeyDelete>>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ApplicationStageHistoryNodeIdDelete>>;
  /** Flag indicating whether all other `applicationStageHistory` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `applicationStageHistory` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationStageHistoryPkeyUpdate>>;
  /** The primary key(s) and patch data for `applicationStageHistory` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate>>;
};

/** The fields on `applicationStageHistory` to look up the row to connect. */
export type ApplicationStageHistoryApplicationStageHistoryPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `applicationStageHistory` to look up the row to delete. */
export type ApplicationStageHistoryApplicationStageHistoryPkeyDelete = {
  id: Scalars['Int']['input'];
};

/**
 * A condition to be used against `ApplicationStageHistory` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type ApplicationStageHistoryCondition = {
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isCurrent` field. */
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `stageId` field. */
  stageId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `timeCreated` field. */
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** A filter to be used against `ApplicationStageHistory` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationStageHistoryFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ApplicationStageHistoryFilter>>;
  /** Filter by the object’s `application` relation. */
  application?: InputMaybe<ApplicationFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `applicationStatusHistories` relation. */
  applicationStatusHistories?: InputMaybe<ApplicationStageHistoryToManyApplicationStatusHistoryFilter>;
  /** Some related `applicationStatusHistories` exist. */
  applicationStatusHistoriesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isCurrent` field. */
  isCurrent?: InputMaybe<BooleanFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ApplicationStageHistoryFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ApplicationStageHistoryFilter>>;
  /** Filter by the object’s `stage` relation. */
  stage?: InputMaybe<TemplateStageFilter>;
  /** Filter by the object’s `stageId` field. */
  stageId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `timeCreated` field. */
  timeCreated?: InputMaybe<DatetimeFilter>;
};

/** An input for mutations affecting `ApplicationStageHistory` */
export type ApplicationStageHistoryInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationStatusHistoriesUsingId?: InputMaybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput>;
  applicationToApplicationId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  templateStageToStageId?: InputMaybe<ApplicationStageHistoryStageIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The globally unique `ID` look up for the row to connect. */
export type ApplicationStageHistoryNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `applicationStageHistory` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ApplicationStageHistoryNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `applicationStageHistory` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The fields on `applicationStageHistory` to look up the row to update. */
export type ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationStageHistoryPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `applicationStageHistory` being updated. */
  patch: UpdateApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateStage` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `templateStage` being updated. */
  patch: TemplateStagePatch;
};

/** The fields on `applicationStageHistory` to look up the row to update. */
export type ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyUsingApplicationStageHistoryPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `applicationStageHistory` being updated. */
  patch: UpdateApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationStatusHistory` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `applicationStatusHistory` being updated. */
  patch: ApplicationStatusHistoryPatch;
};

/** The fields on `applicationStageHistory` to look up the row to update. */
export type ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStageHistoryPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `applicationStageHistory` being updated. */
  patch: UpdateApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch;
};

/** Represents an update to a `ApplicationStageHistory`. Fields that are set will be updated. */
export type ApplicationStageHistoryPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationStatusHistoriesUsingId?: InputMaybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput>;
  applicationToApplicationId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  templateStageToStageId?: InputMaybe<ApplicationStageHistoryStageIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The `applicationStageHistory` to be created by this mutation. */
export type ApplicationStageHistoryStageIdFkeyApplicationStageHistoryCreateInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationStatusHistoriesUsingId?: InputMaybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput>;
  applicationToApplicationId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  templateStageToStageId?: InputMaybe<ApplicationStageHistoryStageIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** Input for the nested mutation of `templateStage` in the `ApplicationStageHistoryInput` mutation. */
export type ApplicationStageHistoryStageIdFkeyInput = {
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  connectById?: InputMaybe<TemplateStageTemplateStagePkeyConnect>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TemplateStageNodeIdConnect>;
  /** A `TemplateStageInput` object that will be created and connected to this object. */
  create?: InputMaybe<ApplicationStageHistoryStageIdFkeyTemplateStageCreateInput>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  deleteById?: InputMaybe<TemplateStageTemplateStagePkeyDelete>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TemplateStageNodeIdDelete>;
  /** The primary key(s) and patch data for `templateStage` for the far side of the relationship. */
  updateById?: InputMaybe<TemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyUsingTemplateStagePkeyUpdate>;
  /** The primary key(s) and patch data for `templateStage` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `applicationStageHistory` in the `TemplateStageInput` mutation. */
export type ApplicationStageHistoryStageIdFkeyInverseInput = {
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ApplicationStageHistoryApplicationStageHistoryPkeyConnect>>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ApplicationStageHistoryNodeIdConnect>>;
  /** A `ApplicationStageHistoryInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ApplicationStageHistoryStageIdFkeyApplicationStageHistoryCreateInput>>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ApplicationStageHistoryApplicationStageHistoryPkeyDelete>>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ApplicationStageHistoryNodeIdDelete>>;
  /** Flag indicating whether all other `applicationStageHistory` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `applicationStageHistory` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyUsingApplicationStageHistoryPkeyUpdate>>;
  /** The primary key(s) and patch data for `applicationStageHistory` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyNodeIdUpdate>>;
};

/** The `templateStage` to be created by this mutation. */
export type ApplicationStageHistoryStageIdFkeyTemplateStageCreateInput = {
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  colour?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  number?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelsUsingId?: InputMaybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
  templateToTemplateId?: InputMaybe<TemplateStageTemplateIdFkeyInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** A filter to be used against many `ApplicationStatusHistory` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationStageHistoryToManyApplicationStatusHistoryFilter = {
  /** Every related `ApplicationStatusHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ApplicationStatusHistoryFilter>;
  /** No related `ApplicationStatusHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ApplicationStatusHistoryFilter>;
  /** Some related `ApplicationStatusHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ApplicationStatusHistoryFilter>;
};

export type ApplicationStageStatusAll = {
  __typename?: 'ApplicationStageStatusAll';
  applicationId?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  orgId?: Maybe<Scalars['Int']['output']>;
  outcome?: Maybe<ApplicationOutcome>;
  serial?: Maybe<Scalars['String']['output']>;
  sessionId?: Maybe<Scalars['String']['output']>;
  stage?: Maybe<Scalars['String']['output']>;
  stageColour?: Maybe<Scalars['String']['output']>;
  stageHistoryId?: Maybe<Scalars['Int']['output']>;
  stageHistoryTimeCreated?: Maybe<Scalars['Datetime']['output']>;
  stageId?: Maybe<Scalars['Int']['output']>;
  stageIsCurrent?: Maybe<Scalars['Boolean']['output']>;
  stageNumber?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<ApplicationStatus>;
  statusHistoryId?: Maybe<Scalars['Int']['output']>;
  statusHistoryTimeCreated?: Maybe<Scalars['Datetime']['output']>;
  statusIsCurrent?: Maybe<Scalars['Boolean']['output']>;
  templateCode?: Maybe<Scalars['String']['output']>;
  templateId?: Maybe<Scalars['Int']['output']>;
  templateName?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['Int']['output']>;
};

/**
 * A condition to be used against `ApplicationStageStatusAll` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type ApplicationStageStatusAllCondition = {
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `name` field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `orgId` field. */
  orgId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `outcome` field. */
  outcome?: InputMaybe<ApplicationOutcome>;
  /** Checks for equality with the object’s `serial` field. */
  serial?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `sessionId` field. */
  sessionId?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `stage` field. */
  stage?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `stageColour` field. */
  stageColour?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `stageHistoryId` field. */
  stageHistoryId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `stageHistoryTimeCreated` field. */
  stageHistoryTimeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `stageId` field. */
  stageId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `stageIsCurrent` field. */
  stageIsCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `stageNumber` field. */
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `status` field. */
  status?: InputMaybe<ApplicationStatus>;
  /** Checks for equality with the object’s `statusHistoryId` field. */
  statusHistoryId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `statusHistoryTimeCreated` field. */
  statusHistoryTimeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `statusIsCurrent` field. */
  statusIsCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `templateCode` field. */
  templateCode?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `templateName` field. */
  templateName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** A filter to be used against `ApplicationStageStatusAll` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationStageStatusAllFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ApplicationStageStatusAllFilter>>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `name` field. */
  name?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ApplicationStageStatusAllFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ApplicationStageStatusAllFilter>>;
  /** Filter by the object’s `orgId` field. */
  orgId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `outcome` field. */
  outcome?: InputMaybe<ApplicationOutcomeFilter>;
  /** Filter by the object’s `serial` field. */
  serial?: InputMaybe<StringFilter>;
  /** Filter by the object’s `sessionId` field. */
  sessionId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `stage` field. */
  stage?: InputMaybe<StringFilter>;
  /** Filter by the object’s `stageColour` field. */
  stageColour?: InputMaybe<StringFilter>;
  /** Filter by the object’s `stageHistoryId` field. */
  stageHistoryId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `stageHistoryTimeCreated` field. */
  stageHistoryTimeCreated?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `stageId` field. */
  stageId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `stageIsCurrent` field. */
  stageIsCurrent?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `stageNumber` field. */
  stageNumber?: InputMaybe<IntFilter>;
  /** Filter by the object’s `status` field. */
  status?: InputMaybe<ApplicationStatusFilter>;
  /** Filter by the object’s `statusHistoryId` field. */
  statusHistoryId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `statusHistoryTimeCreated` field. */
  statusHistoryTimeCreated?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `statusIsCurrent` field. */
  statusIsCurrent?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `templateCode` field. */
  templateCode?: InputMaybe<StringFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `templateName` field. */
  templateName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<IntFilter>;
};

/** A connection to a list of `ApplicationStageStatusAll` values. */
export type ApplicationStageStatusAllsConnection = {
  __typename?: 'ApplicationStageStatusAllsConnection';
  /** A list of edges which contains the `ApplicationStageStatusAll` and cursor to aid in pagination. */
  edges: Array<ApplicationStageStatusAllsEdge>;
  /** A list of `ApplicationStageStatusAll` objects. */
  nodes: Array<Maybe<ApplicationStageStatusAll>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ApplicationStageStatusAll` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ApplicationStageStatusAll` edge in the connection. */
export type ApplicationStageStatusAllsEdge = {
  __typename?: 'ApplicationStageStatusAllsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ApplicationStageStatusAll` at the end of the edge. */
  node?: Maybe<ApplicationStageStatusAll>;
};

/** Methods to use when ordering `ApplicationStageStatusAll`. */
export enum ApplicationStageStatusAllsOrderBy {
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  Natural = 'NATURAL',
  OrgIdAsc = 'ORG_ID_ASC',
  OrgIdDesc = 'ORG_ID_DESC',
  OutcomeAsc = 'OUTCOME_ASC',
  OutcomeDesc = 'OUTCOME_DESC',
  SerialAsc = 'SERIAL_ASC',
  SerialDesc = 'SERIAL_DESC',
  SessionIdAsc = 'SESSION_ID_ASC',
  SessionIdDesc = 'SESSION_ID_DESC',
  StageAsc = 'STAGE_ASC',
  StageColourAsc = 'STAGE_COLOUR_ASC',
  StageColourDesc = 'STAGE_COLOUR_DESC',
  StageDesc = 'STAGE_DESC',
  StageHistoryIdAsc = 'STAGE_HISTORY_ID_ASC',
  StageHistoryIdDesc = 'STAGE_HISTORY_ID_DESC',
  StageHistoryTimeCreatedAsc = 'STAGE_HISTORY_TIME_CREATED_ASC',
  StageHistoryTimeCreatedDesc = 'STAGE_HISTORY_TIME_CREATED_DESC',
  StageIdAsc = 'STAGE_ID_ASC',
  StageIdDesc = 'STAGE_ID_DESC',
  StageIsCurrentAsc = 'STAGE_IS_CURRENT_ASC',
  StageIsCurrentDesc = 'STAGE_IS_CURRENT_DESC',
  StageNumberAsc = 'STAGE_NUMBER_ASC',
  StageNumberDesc = 'STAGE_NUMBER_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  StatusHistoryIdAsc = 'STATUS_HISTORY_ID_ASC',
  StatusHistoryIdDesc = 'STATUS_HISTORY_ID_DESC',
  StatusHistoryTimeCreatedAsc = 'STATUS_HISTORY_TIME_CREATED_ASC',
  StatusHistoryTimeCreatedDesc = 'STATUS_HISTORY_TIME_CREATED_DESC',
  StatusIsCurrentAsc = 'STATUS_IS_CURRENT_ASC',
  StatusIsCurrentDesc = 'STATUS_IS_CURRENT_DESC',
  TemplateCodeAsc = 'TEMPLATE_CODE_ASC',
  TemplateCodeDesc = 'TEMPLATE_CODE_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  TemplateNameAsc = 'TEMPLATE_NAME_ASC',
  TemplateNameDesc = 'TEMPLATE_NAME_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

export type ApplicationStageStatusLatest = {
  __typename?: 'ApplicationStageStatusLatest';
  applicationId?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  orgId?: Maybe<Scalars['Int']['output']>;
  outcome?: Maybe<ApplicationOutcome>;
  serial?: Maybe<Scalars['String']['output']>;
  sessionId?: Maybe<Scalars['String']['output']>;
  stage?: Maybe<Scalars['String']['output']>;
  stageColour?: Maybe<Scalars['String']['output']>;
  stageHistoryId?: Maybe<Scalars['Int']['output']>;
  stageHistoryTimeCreated?: Maybe<Scalars['Datetime']['output']>;
  stageId?: Maybe<Scalars['Int']['output']>;
  stageIsCurrent?: Maybe<Scalars['Boolean']['output']>;
  stageNumber?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<ApplicationStatus>;
  statusHistoryId?: Maybe<Scalars['Int']['output']>;
  statusHistoryTimeCreated?: Maybe<Scalars['Datetime']['output']>;
  statusIsCurrent?: Maybe<Scalars['Boolean']['output']>;
  templateCode?: Maybe<Scalars['String']['output']>;
  templateId?: Maybe<Scalars['Int']['output']>;
  templateName?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['Int']['output']>;
};

/**
 * A condition to be used against `ApplicationStageStatusLatest` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type ApplicationStageStatusLatestCondition = {
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `name` field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `orgId` field. */
  orgId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `outcome` field. */
  outcome?: InputMaybe<ApplicationOutcome>;
  /** Checks for equality with the object’s `serial` field. */
  serial?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `sessionId` field. */
  sessionId?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `stage` field. */
  stage?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `stageColour` field. */
  stageColour?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `stageHistoryId` field. */
  stageHistoryId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `stageHistoryTimeCreated` field. */
  stageHistoryTimeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `stageId` field. */
  stageId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `stageIsCurrent` field. */
  stageIsCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `stageNumber` field. */
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `status` field. */
  status?: InputMaybe<ApplicationStatus>;
  /** Checks for equality with the object’s `statusHistoryId` field. */
  statusHistoryId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `statusHistoryTimeCreated` field. */
  statusHistoryTimeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `statusIsCurrent` field. */
  statusIsCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `templateCode` field. */
  templateCode?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `templateName` field. */
  templateName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** A filter to be used against `ApplicationStageStatusLatest` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationStageStatusLatestFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ApplicationStageStatusLatestFilter>>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `name` field. */
  name?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ApplicationStageStatusLatestFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ApplicationStageStatusLatestFilter>>;
  /** Filter by the object’s `orgId` field. */
  orgId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `outcome` field. */
  outcome?: InputMaybe<ApplicationOutcomeFilter>;
  /** Filter by the object’s `serial` field. */
  serial?: InputMaybe<StringFilter>;
  /** Filter by the object’s `sessionId` field. */
  sessionId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `stage` field. */
  stage?: InputMaybe<StringFilter>;
  /** Filter by the object’s `stageColour` field. */
  stageColour?: InputMaybe<StringFilter>;
  /** Filter by the object’s `stageHistoryId` field. */
  stageHistoryId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `stageHistoryTimeCreated` field. */
  stageHistoryTimeCreated?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `stageId` field. */
  stageId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `stageIsCurrent` field. */
  stageIsCurrent?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `stageNumber` field. */
  stageNumber?: InputMaybe<IntFilter>;
  /** Filter by the object’s `status` field. */
  status?: InputMaybe<ApplicationStatusFilter>;
  /** Filter by the object’s `statusHistoryId` field. */
  statusHistoryId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `statusHistoryTimeCreated` field. */
  statusHistoryTimeCreated?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `statusIsCurrent` field. */
  statusIsCurrent?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `templateCode` field. */
  templateCode?: InputMaybe<StringFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `templateName` field. */
  templateName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<IntFilter>;
};

/** A connection to a list of `ApplicationStageStatusLatest` values. */
export type ApplicationStageStatusLatestsConnection = {
  __typename?: 'ApplicationStageStatusLatestsConnection';
  /** A list of edges which contains the `ApplicationStageStatusLatest` and cursor to aid in pagination. */
  edges: Array<ApplicationStageStatusLatestsEdge>;
  /** A list of `ApplicationStageStatusLatest` objects. */
  nodes: Array<Maybe<ApplicationStageStatusLatest>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ApplicationStageStatusLatest` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ApplicationStageStatusLatest` edge in the connection. */
export type ApplicationStageStatusLatestsEdge = {
  __typename?: 'ApplicationStageStatusLatestsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ApplicationStageStatusLatest` at the end of the edge. */
  node?: Maybe<ApplicationStageStatusLatest>;
};

/** Methods to use when ordering `ApplicationStageStatusLatest`. */
export enum ApplicationStageStatusLatestsOrderBy {
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  Natural = 'NATURAL',
  OrgIdAsc = 'ORG_ID_ASC',
  OrgIdDesc = 'ORG_ID_DESC',
  OutcomeAsc = 'OUTCOME_ASC',
  OutcomeDesc = 'OUTCOME_DESC',
  SerialAsc = 'SERIAL_ASC',
  SerialDesc = 'SERIAL_DESC',
  SessionIdAsc = 'SESSION_ID_ASC',
  SessionIdDesc = 'SESSION_ID_DESC',
  StageAsc = 'STAGE_ASC',
  StageColourAsc = 'STAGE_COLOUR_ASC',
  StageColourDesc = 'STAGE_COLOUR_DESC',
  StageDesc = 'STAGE_DESC',
  StageHistoryIdAsc = 'STAGE_HISTORY_ID_ASC',
  StageHistoryIdDesc = 'STAGE_HISTORY_ID_DESC',
  StageHistoryTimeCreatedAsc = 'STAGE_HISTORY_TIME_CREATED_ASC',
  StageHistoryTimeCreatedDesc = 'STAGE_HISTORY_TIME_CREATED_DESC',
  StageIdAsc = 'STAGE_ID_ASC',
  StageIdDesc = 'STAGE_ID_DESC',
  StageIsCurrentAsc = 'STAGE_IS_CURRENT_ASC',
  StageIsCurrentDesc = 'STAGE_IS_CURRENT_DESC',
  StageNumberAsc = 'STAGE_NUMBER_ASC',
  StageNumberDesc = 'STAGE_NUMBER_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  StatusHistoryIdAsc = 'STATUS_HISTORY_ID_ASC',
  StatusHistoryIdDesc = 'STATUS_HISTORY_ID_DESC',
  StatusHistoryTimeCreatedAsc = 'STATUS_HISTORY_TIME_CREATED_ASC',
  StatusHistoryTimeCreatedDesc = 'STATUS_HISTORY_TIME_CREATED_DESC',
  StatusIsCurrentAsc = 'STATUS_IS_CURRENT_ASC',
  StatusIsCurrentDesc = 'STATUS_IS_CURRENT_DESC',
  TemplateCodeAsc = 'TEMPLATE_CODE_ASC',
  TemplateCodeDesc = 'TEMPLATE_CODE_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  TemplateNameAsc = 'TEMPLATE_NAME_ASC',
  TemplateNameDesc = 'TEMPLATE_NAME_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

export enum ApplicationStatus {
  ChangesRequired = 'CHANGES_REQUIRED',
  Completed = 'COMPLETED',
  Draft = 'DRAFT',
  ReSubmitted = 'RE_SUBMITTED',
  Submitted = 'SUBMITTED'
}

/** A filter to be used against ApplicationStatus fields. All fields are combined with a logical ‘and.’ */
export type ApplicationStatusFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<ApplicationStatus>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<ApplicationStatus>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<ApplicationStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<ApplicationStatus>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<ApplicationStatus>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<ApplicationStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<ApplicationStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<ApplicationStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<ApplicationStatus>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<ApplicationStatus>>;
};

/** A connection to a list of `ApplicationStatusHistory` values. */
export type ApplicationStatusHistoriesConnection = {
  __typename?: 'ApplicationStatusHistoriesConnection';
  /** A list of edges which contains the `ApplicationStatusHistory` and cursor to aid in pagination. */
  edges: Array<ApplicationStatusHistoriesEdge>;
  /** A list of `ApplicationStatusHistory` objects. */
  nodes: Array<Maybe<ApplicationStatusHistory>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ApplicationStatusHistory` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ApplicationStatusHistory` edge in the connection. */
export type ApplicationStatusHistoriesEdge = {
  __typename?: 'ApplicationStatusHistoriesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ApplicationStatusHistory` at the end of the edge. */
  node?: Maybe<ApplicationStatusHistory>;
};

/** Methods to use when ordering `ApplicationStatusHistory`. */
export enum ApplicationStatusHistoriesOrderBy {
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  ApplicationStageHistoryIdAsc = 'APPLICATION_STAGE_HISTORY_ID_ASC',
  ApplicationStageHistoryIdDesc = 'APPLICATION_STAGE_HISTORY_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsCurrentAsc = 'IS_CURRENT_ASC',
  IsCurrentDesc = 'IS_CURRENT_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TimeCreatedAsc = 'TIME_CREATED_ASC',
  TimeCreatedDesc = 'TIME_CREATED_DESC'
}

export type ApplicationStatusHistory = Node & {
  __typename?: 'ApplicationStatusHistory';
  applicationId: Scalars['Int']['output'];
  /** Reads a single `ApplicationStageHistory` that is related to this `ApplicationStatusHistory`. */
  applicationStageHistory?: Maybe<ApplicationStageHistory>;
  applicationStageHistoryId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  isCurrent?: Maybe<Scalars['Boolean']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  status?: Maybe<ApplicationStatus>;
  timeCreated?: Maybe<Scalars['Datetime']['output']>;
};

/** The `applicationStageHistory` to be created by this mutation. */
export type ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStageHistoryCreateInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationStatusHistoriesUsingId?: InputMaybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput>;
  applicationToApplicationId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  templateStageToStageId?: InputMaybe<ApplicationStageHistoryStageIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The `applicationStatusHistory` to be created by this mutation. */
export type ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStatusHistoryCreateInput = {
  applicationId: Scalars['Int']['input'];
  applicationStageHistoryToApplicationStageHistoryId?: InputMaybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<ApplicationStatus>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** Input for the nested mutation of `applicationStageHistory` in the `ApplicationStatusHistoryInput` mutation. */
export type ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput = {
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  connectById?: InputMaybe<ApplicationStageHistoryApplicationStageHistoryPkeyConnect>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ApplicationStageHistoryNodeIdConnect>;
  /** A `ApplicationStageHistoryInput` object that will be created and connected to this object. */
  create?: InputMaybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStageHistoryCreateInput>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  deleteById?: InputMaybe<ApplicationStageHistoryApplicationStageHistoryPkeyDelete>;
  /** The primary key(s) for `applicationStageHistory` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ApplicationStageHistoryNodeIdDelete>;
  /** The primary key(s) and patch data for `applicationStageHistory` for the far side of the relationship. */
  updateById?: InputMaybe<ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStageHistoryPkeyUpdate>;
  /** The primary key(s) and patch data for `applicationStageHistory` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `applicationStatusHistory` in the `ApplicationStageHistoryInput` mutation. */
export type ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput = {
  /** The primary key(s) for `applicationStatusHistory` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ApplicationStatusHistoryApplicationStatusHistoryPkeyConnect>>;
  /** The primary key(s) for `applicationStatusHistory` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ApplicationStatusHistoryNodeIdConnect>>;
  /** A `ApplicationStatusHistoryInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStatusHistoryCreateInput>>;
  /** The primary key(s) for `applicationStatusHistory` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ApplicationStatusHistoryApplicationStatusHistoryPkeyDelete>>;
  /** The primary key(s) for `applicationStatusHistory` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ApplicationStatusHistoryNodeIdDelete>>;
  /** Flag indicating whether all other `applicationStatusHistory` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `applicationStatusHistory` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStatusHistoryPkeyUpdate>>;
  /** The primary key(s) and patch data for `applicationStatusHistory` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate>>;
};

/** The fields on `applicationStatusHistory` to look up the row to connect. */
export type ApplicationStatusHistoryApplicationStatusHistoryPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `applicationStatusHistory` to look up the row to delete. */
export type ApplicationStatusHistoryApplicationStatusHistoryPkeyDelete = {
  id: Scalars['Int']['input'];
};

/**
 * A condition to be used against `ApplicationStatusHistory` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type ApplicationStatusHistoryCondition = {
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `applicationStageHistoryId` field. */
  applicationStageHistoryId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isCurrent` field. */
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `status` field. */
  status?: InputMaybe<ApplicationStatus>;
  /** Checks for equality with the object’s `timeCreated` field. */
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** A filter to be used against `ApplicationStatusHistory` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationStatusHistoryFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ApplicationStatusHistoryFilter>>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `applicationStageHistory` relation. */
  applicationStageHistory?: InputMaybe<ApplicationStageHistoryFilter>;
  /** Filter by the object’s `applicationStageHistoryId` field. */
  applicationStageHistoryId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isCurrent` field. */
  isCurrent?: InputMaybe<BooleanFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ApplicationStatusHistoryFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ApplicationStatusHistoryFilter>>;
  /** Filter by the object’s `status` field. */
  status?: InputMaybe<ApplicationStatusFilter>;
  /** Filter by the object’s `timeCreated` field. */
  timeCreated?: InputMaybe<DatetimeFilter>;
};

/** An input for mutations affecting `ApplicationStatusHistory` */
export type ApplicationStatusHistoryInput = {
  applicationId: Scalars['Int']['input'];
  applicationStageHistoryId?: InputMaybe<Scalars['Int']['input']>;
  applicationStageHistoryToApplicationStageHistoryId?: InputMaybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<ApplicationStatus>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The globally unique `ID` look up for the row to connect. */
export type ApplicationStatusHistoryNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `applicationStatusHistory` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ApplicationStatusHistoryNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `applicationStatusHistory` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationStageHistory` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `applicationStageHistory` being updated. */
  patch: ApplicationStageHistoryPatch;
};

/** The fields on `applicationStatusHistory` to look up the row to update. */
export type ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStatusHistoryPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `applicationStatusHistory` being updated. */
  patch: UpdateApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch;
};

/** Represents an update to a `ApplicationStatusHistory`. Fields that are set will be updated. */
export type ApplicationStatusHistoryPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationStageHistoryId?: InputMaybe<Scalars['Int']['input']>;
  applicationStageHistoryToApplicationStageHistoryId?: InputMaybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<ApplicationStatus>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The `application` to be created by this mutation. */
export type ApplicationTemplateIdFkeyApplicationCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `template` in the `ApplicationInput` mutation. */
export type ApplicationTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: InputMaybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TemplateNodeIdConnect>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: InputMaybe<ApplicationTemplateIdFkeyTemplateCreateInput>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: InputMaybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByCodeAndVersionId?: InputMaybe<TemplateOnApplicationForApplicationTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: InputMaybe<TemplateOnApplicationForApplicationTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ApplicationOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `application` in the `TemplateInput` mutation. */
export type ApplicationTemplateIdFkeyInverseInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ApplicationApplicationPkeyConnect>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ApplicationNodeIdConnect>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByOutcomeRegistration?: InputMaybe<Array<ApplicationApplicationOutcomeRegistrationKeyConnect>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: InputMaybe<Array<ApplicationApplicationSerialKeyConnect>>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ApplicationTemplateIdFkeyApplicationCreateInput>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ApplicationApplicationPkeyDelete>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ApplicationNodeIdDelete>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByOutcomeRegistration?: InputMaybe<Array<ApplicationApplicationOutcomeRegistrationKeyDelete>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: InputMaybe<Array<ApplicationApplicationSerialKeyDelete>>;
  /** Flag indicating whether all other `application` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationPkeyUpdate>>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TemplateOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate>>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByOutcomeRegistration?: InputMaybe<Array<ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate>>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: InputMaybe<Array<ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationSerialKeyUpdate>>;
};

/** The `template` to be created by this mutation. */
export type ApplicationTemplateIdFkeyTemplateCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code: Scalars['String']['input'];
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId: Scalars['String']['input'];
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** A filter to be used against many `ActionQueue` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyActionQueueFilter = {
  /** Every related `ActionQueue` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ActionQueueFilter>;
  /** No related `ActionQueue` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ActionQueueFilter>;
  /** Some related `ActionQueue` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ActionQueueFilter>;
};

/** A filter to be used against many `ActivityLog` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyActivityLogFilter = {
  /** Every related `ActivityLog` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ActivityLogFilter>;
  /** No related `ActivityLog` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ActivityLogFilter>;
  /** Some related `ActivityLog` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ActivityLogFilter>;
};

/** A filter to be used against many `ApplicationNote` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyApplicationNoteFilter = {
  /** Every related `ApplicationNote` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ApplicationNoteFilter>;
  /** No related `ApplicationNote` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ApplicationNoteFilter>;
  /** Some related `ApplicationNote` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ApplicationNoteFilter>;
};

/** A filter to be used against many `ApplicationResponse` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyApplicationResponseFilter = {
  /** Every related `ApplicationResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ApplicationResponseFilter>;
  /** No related `ApplicationResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ApplicationResponseFilter>;
  /** Some related `ApplicationResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ApplicationResponseFilter>;
};

/** A filter to be used against many `ApplicationReviewerAction` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyApplicationReviewerActionFilter = {
  /** Every related `ApplicationReviewerAction` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ApplicationReviewerActionFilter>;
  /** No related `ApplicationReviewerAction` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ApplicationReviewerActionFilter>;
  /** Some related `ApplicationReviewerAction` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ApplicationReviewerActionFilter>;
};

/** A filter to be used against many `ApplicationStageHistory` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyApplicationStageHistoryFilter = {
  /** Every related `ApplicationStageHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ApplicationStageHistoryFilter>;
  /** No related `ApplicationStageHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ApplicationStageHistoryFilter>;
  /** Some related `ApplicationStageHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ApplicationStageHistoryFilter>;
};

/** A filter to be used against many `DataChangelog` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyDataChangelogFilter = {
  /** Every related `DataChangelog` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<DataChangelogFilter>;
  /** No related `DataChangelog` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<DataChangelogFilter>;
  /** Some related `DataChangelog` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<DataChangelogFilter>;
};

/** A filter to be used against many `File` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyFileFilter = {
  /** Every related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<FileFilter>;
  /** No related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<FileFilter>;
  /** Some related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<FileFilter>;
};

/** A filter to be used against many `Notification` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyNotificationFilter = {
  /** Every related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<NotificationFilter>;
  /** No related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<NotificationFilter>;
  /** Some related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<NotificationFilter>;
};

/** A filter to be used against many `ReviewAssignment` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyReviewAssignmentFilter = {
  /** Every related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ReviewAssignmentFilter>;
  /** No related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ReviewAssignmentFilter>;
  /** Some related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ReviewAssignmentFilter>;
};

/** A filter to be used against many `Review` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyReviewFilter = {
  /** Every related `Review` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ReviewFilter>;
  /** No related `Review` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ReviewFilter>;
  /** Some related `Review` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ReviewFilter>;
};

/** A filter to be used against many `TriggerQueue` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyTriggerQueueFilter = {
  /** Every related `TriggerQueue` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<TriggerQueueFilter>;
  /** No related `TriggerQueue` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<TriggerQueueFilter>;
  /** Some related `TriggerQueue` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<TriggerQueueFilter>;
};

/** A filter to be used against many `TriggerSchedule` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyTriggerScheduleFilter = {
  /** Every related `TriggerSchedule` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<TriggerScheduleFilter>;
  /** No related `TriggerSchedule` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<TriggerScheduleFilter>;
  /** Some related `TriggerSchedule` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<TriggerScheduleFilter>;
};

/** A filter to be used against many `Verification` object types. All fields are combined with a logical ‘and.’ */
export type ApplicationToManyVerificationFilter = {
  /** Every related `Verification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<VerificationFilter>;
  /** No related `Verification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<VerificationFilter>;
  /** Some related `Verification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<VerificationFilter>;
};

/** A connection to a list of `Application` values. */
export type ApplicationsConnection = {
  __typename?: 'ApplicationsConnection';
  /** A list of edges which contains the `Application` and cursor to aid in pagination. */
  edges: Array<ApplicationsEdge>;
  /** A list of `Application` objects. */
  nodes: Array<Maybe<Application>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Application` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `Application` edge in the connection. */
export type ApplicationsEdge = {
  __typename?: 'ApplicationsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Application` at the end of the edge. */
  node?: Maybe<Application>;
};

/** Methods to use when ordering `Application`. */
export enum ApplicationsOrderBy {
  AssignerListAsc = 'ASSIGNER_LIST_ASC',
  AssignerListDesc = 'ASSIGNER_LIST_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsActiveAsc = 'IS_ACTIVE_ASC',
  IsActiveDesc = 'IS_ACTIVE_DESC',
  IsConfigAsc = 'IS_CONFIG_ASC',
  IsConfigDesc = 'IS_CONFIG_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  Natural = 'NATURAL',
  OrgIdAsc = 'ORG_ID_ASC',
  OrgIdDesc = 'ORG_ID_DESC',
  OutcomeAsc = 'OUTCOME_ASC',
  OutcomeDesc = 'OUTCOME_DESC',
  OutcomeRegistrationAsc = 'OUTCOME_REGISTRATION_ASC',
  OutcomeRegistrationDesc = 'OUTCOME_REGISTRATION_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ReviewerListAsc = 'REVIEWER_LIST_ASC',
  ReviewerListDesc = 'REVIEWER_LIST_DESC',
  SerialAsc = 'SERIAL_ASC',
  SerialDesc = 'SERIAL_DESC',
  SessionIdAsc = 'SESSION_ID_ASC',
  SessionIdDesc = 'SESSION_ID_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  TriggerAsc = 'TRIGGER_ASC',
  TriggerDesc = 'TRIGGER_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

/** A `AssignedQuestionsRecord` edge in the connection. */
export type AssignedQuestionEdge = {
  __typename?: 'AssignedQuestionEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `AssignedQuestionsRecord` at the end of the edge. */
  node?: Maybe<AssignedQuestionsRecord>;
};

/** A connection to a list of `AssignedQuestionsRecord` values. */
export type AssignedQuestionsConnection = {
  __typename?: 'AssignedQuestionsConnection';
  /** A list of edges which contains the `AssignedQuestionsRecord` and cursor to aid in pagination. */
  edges: Array<AssignedQuestionEdge>;
  /** A list of `AssignedQuestionsRecord` objects. */
  nodes: Array<Maybe<AssignedQuestionsRecord>>;
  /** The count of *all* `AssignedQuestionsRecord` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** The return type of our `assignedQuestions` query. */
export type AssignedQuestionsRecord = {
  __typename?: 'AssignedQuestionsRecord';
  decision?: Maybe<ReviewResponseDecision>;
  isLastestReview?: Maybe<Scalars['Boolean']['output']>;
  isOptional?: Maybe<Scalars['Boolean']['output']>;
  responseId?: Maybe<Scalars['Int']['output']>;
  reviewAssignmentId?: Maybe<Scalars['Int']['output']>;
  reviewId?: Maybe<Scalars['Int']['output']>;
  reviewResponseCode?: Maybe<Scalars['String']['output']>;
  reviewResponseStatus?: Maybe<ReviewResponseStatus>;
};

/** A filter to be used against `AssignedQuestionsRecord` object types. All fields are combined with a logical ‘and.’ */
export type AssignedQuestionsRecordFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AssignedQuestionsRecordFilter>>;
  /** Filter by the object’s `decision` field. */
  decision?: InputMaybe<ReviewResponseDecisionFilter>;
  /** Filter by the object’s `isLastestReview` field. */
  isLastestReview?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `isOptional` field. */
  isOptional?: InputMaybe<BooleanFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AssignedQuestionsRecordFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AssignedQuestionsRecordFilter>>;
  /** Filter by the object’s `responseId` field. */
  responseId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `reviewAssignmentId` field. */
  reviewAssignmentId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `reviewId` field. */
  reviewId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `reviewResponseCode` field. */
  reviewResponseCode?: InputMaybe<StringFilter>;
  /** Filter by the object’s `reviewResponseStatus` field. */
  reviewResponseStatus?: InputMaybe<ReviewResponseStatusFilter>;
};

export type AssignedSectionsByStageAndLevel = {
  __typename?: 'AssignedSectionsByStageAndLevel';
  applicationId?: Maybe<Scalars['Int']['output']>;
  assignedInProgressSections?: Maybe<Scalars['BigInt']['output']>;
  assignedSectionForLevel?: Maybe<Scalars['BigInt']['output']>;
  assignerId?: Maybe<Scalars['Int']['output']>;
  levelNumber?: Maybe<Scalars['Int']['output']>;
  stageId?: Maybe<Scalars['Int']['output']>;
};

/**
 * A condition to be used against `AssignedSectionsByStageAndLevel` object types.
 * All fields are tested for equality and combined with a logical ‘and.’
 */
export type AssignedSectionsByStageAndLevelCondition = {
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `assignedInProgressSections` field. */
  assignedInProgressSections?: InputMaybe<Scalars['BigInt']['input']>;
  /** Checks for equality with the object’s `assignedSectionForLevel` field. */
  assignedSectionForLevel?: InputMaybe<Scalars['BigInt']['input']>;
  /** Checks for equality with the object’s `assignerId` field. */
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `levelNumber` field. */
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `stageId` field. */
  stageId?: InputMaybe<Scalars['Int']['input']>;
};

/** A filter to be used against `AssignedSectionsByStageAndLevel` object types. All fields are combined with a logical ‘and.’ */
export type AssignedSectionsByStageAndLevelFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AssignedSectionsByStageAndLevelFilter>>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `assignedInProgressSections` field. */
  assignedInProgressSections?: InputMaybe<BigIntFilter>;
  /** Filter by the object’s `assignedSectionForLevel` field. */
  assignedSectionForLevel?: InputMaybe<BigIntFilter>;
  /** Filter by the object’s `assignerId` field. */
  assignerId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `levelNumber` field. */
  levelNumber?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AssignedSectionsByStageAndLevelFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AssignedSectionsByStageAndLevelFilter>>;
  /** Filter by the object’s `stageId` field. */
  stageId?: InputMaybe<IntFilter>;
};

/** A connection to a list of `AssignedSectionsByStageAndLevel` values. */
export type AssignedSectionsByStageAndLevelsConnection = {
  __typename?: 'AssignedSectionsByStageAndLevelsConnection';
  /** A list of edges which contains the `AssignedSectionsByStageAndLevel` and cursor to aid in pagination. */
  edges: Array<AssignedSectionsByStageAndLevelsEdge>;
  /** A list of `AssignedSectionsByStageAndLevel` objects. */
  nodes: Array<Maybe<AssignedSectionsByStageAndLevel>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `AssignedSectionsByStageAndLevel` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `AssignedSectionsByStageAndLevel` edge in the connection. */
export type AssignedSectionsByStageAndLevelsEdge = {
  __typename?: 'AssignedSectionsByStageAndLevelsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `AssignedSectionsByStageAndLevel` at the end of the edge. */
  node?: Maybe<AssignedSectionsByStageAndLevel>;
};

/** Methods to use when ordering `AssignedSectionsByStageAndLevel`. */
export enum AssignedSectionsByStageAndLevelsOrderBy {
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  AssignedInProgressSectionsAsc = 'ASSIGNED_IN_PROGRESS_SECTIONS_ASC',
  AssignedInProgressSectionsDesc = 'ASSIGNED_IN_PROGRESS_SECTIONS_DESC',
  AssignedSectionForLevelAsc = 'ASSIGNED_SECTION_FOR_LEVEL_ASC',
  AssignedSectionForLevelDesc = 'ASSIGNED_SECTION_FOR_LEVEL_DESC',
  AssignerIdAsc = 'ASSIGNER_ID_ASC',
  AssignerIdDesc = 'ASSIGNER_ID_DESC',
  LevelNumberAsc = 'LEVEL_NUMBER_ASC',
  LevelNumberDesc = 'LEVEL_NUMBER_DESC',
  Natural = 'NATURAL',
  StageIdAsc = 'STAGE_ID_ASC',
  StageIdDesc = 'STAGE_ID_DESC'
}

export enum AssignerAction {
  Assign = 'ASSIGN',
  ReAssign = 'RE_ASSIGN'
}

/** A filter to be used against AssignerAction fields. All fields are combined with a logical ‘and.’ */
export type AssignerActionFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<AssignerAction>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<AssignerAction>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<AssignerAction>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<AssignerAction>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<AssignerAction>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<AssignerAction>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<AssignerAction>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<AssignerAction>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<AssignerAction>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<AssignerAction>>;
};

/** A connection to a list of `AssignerListRecord` values. */
export type AssignerListConnection = {
  __typename?: 'AssignerListConnection';
  /** A list of edges which contains the `AssignerListRecord` and cursor to aid in pagination. */
  edges: Array<AssignerListEdge>;
  /** A list of `AssignerListRecord` objects. */
  nodes: Array<Maybe<AssignerListRecord>>;
  /** The count of *all* `AssignerListRecord` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `AssignerListRecord` edge in the connection. */
export type AssignerListEdge = {
  __typename?: 'AssignerListEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `AssignerListRecord` at the end of the edge. */
  node?: Maybe<AssignerListRecord>;
};

/** The return type of our `assignerList` query. */
export type AssignerListRecord = {
  __typename?: 'AssignerListRecord';
  applicationId?: Maybe<Scalars['Int']['output']>;
  assignerAction?: Maybe<AssignerAction>;
};

/** A filter to be used against `AssignerListRecord` object types. All fields are combined with a logical ‘and.’ */
export type AssignerListRecordFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AssignerListRecordFilter>>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `assignerAction` field. */
  assignerAction?: InputMaybe<AssignerActionFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AssignerListRecordFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AssignerListRecordFilter>>;
};

/** A connection to a list of `AssignmentListRecord` values. */
export type AssignmentListConnection = {
  __typename?: 'AssignmentListConnection';
  /** A list of edges which contains the `AssignmentListRecord` and cursor to aid in pagination. */
  edges: Array<AssignmentListEdge>;
  /** A list of `AssignmentListRecord` objects. */
  nodes: Array<Maybe<AssignmentListRecord>>;
  /** The count of *all* `AssignmentListRecord` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `AssignmentListRecord` edge in the connection. */
export type AssignmentListEdge = {
  __typename?: 'AssignmentListEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `AssignmentListRecord` at the end of the edge. */
  node?: Maybe<AssignmentListRecord>;
};

/** The return type of our `assignmentList` query. */
export type AssignmentListRecord = {
  __typename?: 'AssignmentListRecord';
  applicationId?: Maybe<Scalars['Int']['output']>;
  assigners?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  reviewers?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

/** A filter to be used against `AssignmentListRecord` object types. All fields are combined with a logical ‘and.’ */
export type AssignmentListRecordFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<AssignmentListRecordFilter>>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `assigners` field. */
  assigners?: InputMaybe<StringListFilter>;
  /** Negates the expression. */
  not?: InputMaybe<AssignmentListRecordFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<AssignmentListRecordFilter>>;
  /** Filter by the object’s `reviewers` field. */
  reviewers?: InputMaybe<StringListFilter>;
};

/** A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’ */
export type BigIntFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['BigInt']['input']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['BigInt']['input']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['BigInt']['input']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['BigInt']['input']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['BigInt']['input']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['BigInt']['input']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['BigInt']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['BigInt']['input']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['BigInt']['input']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['BigInt']['input']>>;
};

/** A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’ */
export type BooleanFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['Boolean']['input']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['Boolean']['input']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['Boolean']['input']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['Boolean']['input']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['Boolean']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['Boolean']['input']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['Boolean']['input']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['Boolean']['input']>>;
};

export enum ChangelogType {
  Create = 'CREATE',
  Delete = 'DELETE',
  Update = 'UPDATE'
}

/** A filter to be used against ChangelogType fields. All fields are combined with a logical ‘and.’ */
export type ChangelogTypeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<ChangelogType>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<ChangelogType>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<ChangelogType>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<ChangelogType>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<ChangelogType>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<ChangelogType>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<ChangelogType>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<ChangelogType>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<ChangelogType>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<ChangelogType>>;
};

/** A filter to be used against CharacterData fields. All fields are combined with a logical ‘and.’ */
export type CharacterDataFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Not equal to the specified value, treating null like an ordinary value (case-insensitive). */
  distinctFromInsensitive?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Ends with the specified string (case-sensitive). */
  endsWith?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Ends with the specified string (case-insensitive). */
  endsWithInsensitive?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Equal to the specified value (case-insensitive). */
  equalToInsensitive?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Greater than the specified value (case-insensitive). */
  greaterThanInsensitive?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Greater than or equal to the specified value (case-insensitive). */
  greaterThanOrEqualToInsensitive?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['CharacterData']['input']>>;
  /** Included in the specified list (case-insensitive). */
  inInsensitive?: InputMaybe<Array<Scalars['CharacterData']['input']>>;
  /** Contains the specified string (case-sensitive). */
  includes?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Contains the specified string (case-insensitive). */
  includesInsensitive?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Less than the specified value (case-insensitive). */
  lessThanInsensitive?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Less than or equal to the specified value (case-insensitive). */
  lessThanOrEqualToInsensitive?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  like?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  likeInsensitive?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Equal to the specified value, treating null like an ordinary value (case-insensitive). */
  notDistinctFromInsensitive?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Does not end with the specified string (case-sensitive). */
  notEndsWith?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Does not end with the specified string (case-insensitive). */
  notEndsWithInsensitive?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Not equal to the specified value (case-insensitive). */
  notEqualToInsensitive?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['CharacterData']['input']>>;
  /** Not included in the specified list (case-insensitive). */
  notInInsensitive?: InputMaybe<Array<Scalars['CharacterData']['input']>>;
  /** Does not contain the specified string (case-sensitive). */
  notIncludes?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Does not contain the specified string (case-insensitive). */
  notIncludesInsensitive?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLike?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLikeInsensitive?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Does not start with the specified string (case-sensitive). */
  notStartsWith?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Does not start with the specified string (case-insensitive). */
  notStartsWithInsensitive?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Starts with the specified string (case-sensitive). */
  startsWith?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Starts with the specified string (case-insensitive). */
  startsWithInsensitive?: InputMaybe<Scalars['CharacterData']['input']>;
};

export type ConstraintsInfo = {
  __typename?: 'ConstraintsInfo';
  constraintType?: Maybe<Scalars['CharacterData']['output']>;
  fromColumnName?: Maybe<Scalars['SqlIdentifier']['output']>;
  fromTableName?: Maybe<Scalars['SqlIdentifier']['output']>;
  toColumnName?: Maybe<Scalars['SqlIdentifier']['output']>;
  toTableName?: Maybe<Scalars['SqlIdentifier']['output']>;
};

/**
 * A condition to be used against `ConstraintsInfo` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type ConstraintsInfoCondition = {
  /** Checks for equality with the object’s `constraintType` field. */
  constraintType?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Checks for equality with the object’s `fromColumnName` field. */
  fromColumnName?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Checks for equality with the object’s `fromTableName` field. */
  fromTableName?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Checks for equality with the object’s `toColumnName` field. */
  toColumnName?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Checks for equality with the object’s `toTableName` field. */
  toTableName?: InputMaybe<Scalars['SqlIdentifier']['input']>;
};

/** A filter to be used against `ConstraintsInfo` object types. All fields are combined with a logical ‘and.’ */
export type ConstraintsInfoFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ConstraintsInfoFilter>>;
  /** Filter by the object’s `constraintType` field. */
  constraintType?: InputMaybe<CharacterDataFilter>;
  /** Filter by the object’s `fromColumnName` field. */
  fromColumnName?: InputMaybe<SqlIdentifierFilter>;
  /** Filter by the object’s `fromTableName` field. */
  fromTableName?: InputMaybe<SqlIdentifierFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ConstraintsInfoFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ConstraintsInfoFilter>>;
  /** Filter by the object’s `toColumnName` field. */
  toColumnName?: InputMaybe<SqlIdentifierFilter>;
  /** Filter by the object’s `toTableName` field. */
  toTableName?: InputMaybe<SqlIdentifierFilter>;
};

/** A connection to a list of `ConstraintsInfo` values. */
export type ConstraintsInfosConnection = {
  __typename?: 'ConstraintsInfosConnection';
  /** A list of edges which contains the `ConstraintsInfo` and cursor to aid in pagination. */
  edges: Array<ConstraintsInfosEdge>;
  /** A list of `ConstraintsInfo` objects. */
  nodes: Array<Maybe<ConstraintsInfo>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ConstraintsInfo` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ConstraintsInfo` edge in the connection. */
export type ConstraintsInfosEdge = {
  __typename?: 'ConstraintsInfosEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ConstraintsInfo` at the end of the edge. */
  node?: Maybe<ConstraintsInfo>;
};

/** Methods to use when ordering `ConstraintsInfo`. */
export enum ConstraintsInfosOrderBy {
  ConstraintTypeAsc = 'CONSTRAINT_TYPE_ASC',
  ConstraintTypeDesc = 'CONSTRAINT_TYPE_DESC',
  FromColumnNameAsc = 'FROM_COLUMN_NAME_ASC',
  FromColumnNameDesc = 'FROM_COLUMN_NAME_DESC',
  FromTableNameAsc = 'FROM_TABLE_NAME_ASC',
  FromTableNameDesc = 'FROM_TABLE_NAME_DESC',
  Natural = 'NATURAL',
  ToColumnNameAsc = 'TO_COLUMN_NAME_ASC',
  ToColumnNameDesc = 'TO_COLUMN_NAME_DESC',
  ToTableNameAsc = 'TO_TABLE_NAME_ASC',
  ToTableNameDesc = 'TO_TABLE_NAME_DESC'
}

export type Counter = Node & {
  __typename?: 'Counter';
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  value?: Maybe<Scalars['Int']['output']>;
};

/** A condition to be used against `Counter` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type CounterCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `name` field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `value` field. */
  value?: InputMaybe<Scalars['Int']['input']>;
};

/** A filter to be used against `Counter` object types. All fields are combined with a logical ‘and.’ */
export type CounterFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<CounterFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `name` field. */
  name?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<CounterFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<CounterFilter>>;
  /** Filter by the object’s `value` field. */
  value?: InputMaybe<IntFilter>;
};

/** An input for mutations affecting `Counter` */
export type CounterInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  value?: InputMaybe<Scalars['Int']['input']>;
};

/** Represents an update to a `Counter`. Fields that are set will be updated. */
export type CounterPatch = {
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  value?: InputMaybe<Scalars['Int']['input']>;
};

/** A connection to a list of `Counter` values. */
export type CountersConnection = {
  __typename?: 'CountersConnection';
  /** A list of edges which contains the `Counter` and cursor to aid in pagination. */
  edges: Array<CountersEdge>;
  /** A list of `Counter` objects. */
  nodes: Array<Maybe<Counter>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Counter` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `Counter` edge in the connection. */
export type CountersEdge = {
  __typename?: 'CountersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Counter` at the end of the edge. */
  node?: Maybe<Counter>;
};

/** Methods to use when ordering `Counter`. */
export enum CountersOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

/** All input for the create `ActionPlugin` mutation. */
export type CreateActionPluginInput = {
  /** The `ActionPlugin` to be created by this mutation. */
  actionPlugin: ActionPluginInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** The output of our create `ActionPlugin` mutation. */
export type CreateActionPluginPayload = {
  __typename?: 'CreateActionPluginPayload';
  /** The `ActionPlugin` that was created by this mutation. */
  actionPlugin?: Maybe<ActionPlugin>;
  /** An edge for our `ActionPlugin`. May be used by Relay 1. */
  actionPluginEdge?: Maybe<ActionPluginsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `ActionPlugin` mutation. */
export type CreateActionPluginPayloadActionPluginEdgeArgs = {
  orderBy?: InputMaybe<Array<ActionPluginsOrderBy>>;
};

/** All input for the create `ActionQueue` mutation. */
export type CreateActionQueueInput = {
  /** The `ActionQueue` to be created by this mutation. */
  actionQueue: ActionQueueInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** The output of our create `ActionQueue` mutation. */
export type CreateActionQueuePayload = {
  __typename?: 'CreateActionQueuePayload';
  /** The `ActionQueue` that was created by this mutation. */
  actionQueue?: Maybe<ActionQueue>;
  /** An edge for our `ActionQueue`. May be used by Relay 1. */
  actionQueueEdge?: Maybe<ActionQueuesEdge>;
  /** Reads a single `Application` that is related to this `ActionQueue`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `ActionQueue`. */
  template?: Maybe<Template>;
  /** Reads a single `TriggerQueue` that is related to this `ActionQueue`. */
  triggerQueueByTriggerEvent?: Maybe<TriggerQueue>;
};


/** The output of our create `ActionQueue` mutation. */
export type CreateActionQueuePayloadActionQueueEdgeArgs = {
  orderBy?: InputMaybe<Array<ActionQueuesOrderBy>>;
};

/** All input for the create `ActivityLog` mutation. */
export type CreateActivityLogInput = {
  /** The `ActivityLog` to be created by this mutation. */
  activityLog: ActivityLogInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** The output of our create `ActivityLog` mutation. */
export type CreateActivityLogPayload = {
  __typename?: 'CreateActivityLogPayload';
  /** The `ActivityLog` that was created by this mutation. */
  activityLog?: Maybe<ActivityLog>;
  /** An edge for our `ActivityLog`. May be used by Relay 1. */
  activityLogEdge?: Maybe<ActivityLogsEdge>;
  /** Reads a single `Application` that is related to this `ActivityLog`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `ActivityLog` mutation. */
export type CreateActivityLogPayloadActivityLogEdgeArgs = {
  orderBy?: InputMaybe<Array<ActivityLogsOrderBy>>;
};

/** All input for the create `AllowedSelfAssignableSectionsShape` mutation. */
export type CreateAllowedSelfAssignableSectionsShapeInput = {
  /** The `AllowedSelfAssignableSectionsShape` to be created by this mutation. */
  allowedSelfAssignableSectionsShape: AllowedSelfAssignableSectionsShapeInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** The output of our create `AllowedSelfAssignableSectionsShape` mutation. */
export type CreateAllowedSelfAssignableSectionsShapePayload = {
  __typename?: 'CreateAllowedSelfAssignableSectionsShapePayload';
  /** The `AllowedSelfAssignableSectionsShape` that was created by this mutation. */
  allowedSelfAssignableSectionsShape?: Maybe<AllowedSelfAssignableSectionsShape>;
  /** An edge for our `AllowedSelfAssignableSectionsShape`. May be used by Relay 1. */
  allowedSelfAssignableSectionsShapeEdge?: Maybe<AllowedSelfAssignableSectionsShapesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `AllowedSelfAssignableSectionsShape` mutation. */
export type CreateAllowedSelfAssignableSectionsShapePayloadAllowedSelfAssignableSectionsShapeEdgeArgs = {
  orderBy?: InputMaybe<Array<AllowedSelfAssignableSectionsShapesOrderBy>>;
};

/** All input for the create `Application` mutation. */
export type CreateApplicationInput = {
  /** The `Application` to be created by this mutation. */
  application: ApplicationInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** All input for the create `ApplicationListShape` mutation. */
export type CreateApplicationListShapeInput = {
  /** The `ApplicationListShape` to be created by this mutation. */
  applicationListShape: ApplicationListShapeInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** The output of our create `ApplicationListShape` mutation. */
export type CreateApplicationListShapePayload = {
  __typename?: 'CreateApplicationListShapePayload';
  /** The `ApplicationListShape` that was created by this mutation. */
  applicationListShape?: Maybe<ApplicationListShape>;
  /** An edge for our `ApplicationListShape`. May be used by Relay 1. */
  applicationListShapeEdge?: Maybe<ApplicationListShapesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `ApplicationListShape` mutation. */
export type CreateApplicationListShapePayloadApplicationListShapeEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationListShapesOrderBy>>;
};

/** All input for the create `ApplicationNote` mutation. */
export type CreateApplicationNoteInput = {
  /** The `ApplicationNote` to be created by this mutation. */
  applicationNote: ApplicationNoteInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** The output of our create `ApplicationNote` mutation. */
export type CreateApplicationNotePayload = {
  __typename?: 'CreateApplicationNotePayload';
  /** Reads a single `Application` that is related to this `ApplicationNote`. */
  application?: Maybe<Application>;
  /** The `ApplicationNote` that was created by this mutation. */
  applicationNote?: Maybe<ApplicationNote>;
  /** An edge for our `ApplicationNote`. May be used by Relay 1. */
  applicationNoteEdge?: Maybe<ApplicationNotesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Reads a single `Organisation` that is related to this `ApplicationNote`. */
  org?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `UserList` that is related to this `ApplicationNote`. */
  user?: Maybe<UserList>;
};


/** The output of our create `ApplicationNote` mutation. */
export type CreateApplicationNotePayloadApplicationNoteEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationNotesOrderBy>>;
};

/** The output of our create `Application` mutation. */
export type CreateApplicationPayload = {
  __typename?: 'CreateApplicationPayload';
  /** The `Application` that was created by this mutation. */
  application?: Maybe<Application>;
  /** An edge for our `Application`. May be used by Relay 1. */
  applicationEdge?: Maybe<ApplicationsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Reads a single `Organisation` that is related to this `Application`. */
  org?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `Application`. */
  template?: Maybe<Template>;
  /** Reads a single `UserList` that is related to this `Application`. */
  user?: Maybe<UserList>;
};


/** The output of our create `Application` mutation. */
export type CreateApplicationPayloadApplicationEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationsOrderBy>>;
};

/** All input for the create `ApplicationResponse` mutation. */
export type CreateApplicationResponseInput = {
  /** The `ApplicationResponse` to be created by this mutation. */
  applicationResponse: ApplicationResponseInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** The output of our create `ApplicationResponse` mutation. */
export type CreateApplicationResponsePayload = {
  __typename?: 'CreateApplicationResponsePayload';
  /** Reads a single `Application` that is related to this `ApplicationResponse`. */
  application?: Maybe<Application>;
  /** The `ApplicationResponse` that was created by this mutation. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /** An edge for our `ApplicationResponse`. May be used by Relay 1. */
  applicationResponseEdge?: Maybe<ApplicationResponsesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateElement` that is related to this `ApplicationResponse`. */
  templateElement?: Maybe<TemplateElement>;
};


/** The output of our create `ApplicationResponse` mutation. */
export type CreateApplicationResponsePayloadApplicationResponseEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationResponsesOrderBy>>;
};

/** All input for the create `ApplicationReviewerAction` mutation. */
export type CreateApplicationReviewerActionInput = {
  /** The `ApplicationReviewerAction` to be created by this mutation. */
  applicationReviewerAction: ApplicationReviewerActionInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** The output of our create `ApplicationReviewerAction` mutation. */
export type CreateApplicationReviewerActionPayload = {
  __typename?: 'CreateApplicationReviewerActionPayload';
  /** Reads a single `Application` that is related to this `ApplicationReviewerAction`. */
  application?: Maybe<Application>;
  /** The `ApplicationReviewerAction` that was created by this mutation. */
  applicationReviewerAction?: Maybe<ApplicationReviewerAction>;
  /** An edge for our `ApplicationReviewerAction`. May be used by Relay 1. */
  applicationReviewerActionEdge?: Maybe<ApplicationReviewerActionsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `ApplicationReviewerAction` mutation. */
export type CreateApplicationReviewerActionPayloadApplicationReviewerActionEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationReviewerActionsOrderBy>>;
};

/** All input for the create `ApplicationStageHistory` mutation. */
export type CreateApplicationStageHistoryInput = {
  /** The `ApplicationStageHistory` to be created by this mutation. */
  applicationStageHistory: ApplicationStageHistoryInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** The output of our create `ApplicationStageHistory` mutation. */
export type CreateApplicationStageHistoryPayload = {
  __typename?: 'CreateApplicationStageHistoryPayload';
  /** Reads a single `Application` that is related to this `ApplicationStageHistory`. */
  application?: Maybe<Application>;
  /** The `ApplicationStageHistory` that was created by this mutation. */
  applicationStageHistory?: Maybe<ApplicationStageHistory>;
  /** An edge for our `ApplicationStageHistory`. May be used by Relay 1. */
  applicationStageHistoryEdge?: Maybe<ApplicationStageHistoriesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateStage` that is related to this `ApplicationStageHistory`. */
  stage?: Maybe<TemplateStage>;
};


/** The output of our create `ApplicationStageHistory` mutation. */
export type CreateApplicationStageHistoryPayloadApplicationStageHistoryEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationStageHistoriesOrderBy>>;
};

/** All input for the create `ApplicationStatusHistory` mutation. */
export type CreateApplicationStatusHistoryInput = {
  /** The `ApplicationStatusHistory` to be created by this mutation. */
  applicationStatusHistory: ApplicationStatusHistoryInput;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** The output of our create `ApplicationStatusHistory` mutation. */
export type CreateApplicationStatusHistoryPayload = {
  __typename?: 'CreateApplicationStatusHistoryPayload';
  /** Reads a single `ApplicationStageHistory` that is related to this `ApplicationStatusHistory`. */
  applicationStageHistory?: Maybe<ApplicationStageHistory>;
  /** The `ApplicationStatusHistory` that was created by this mutation. */
  applicationStatusHistory?: Maybe<ApplicationStatusHistory>;
  /** An edge for our `ApplicationStatusHistory`. May be used by Relay 1. */
  applicationStatusHistoryEdge?: Maybe<ApplicationStatusHistoriesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `ApplicationStatusHistory` mutation. */
export type CreateApplicationStatusHistoryPayloadApplicationStatusHistoryEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationStatusHistoriesOrderBy>>;
};

/** All input for the create `Counter` mutation. */
export type CreateCounterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `Counter` to be created by this mutation. */
  counter: CounterInput;
};

/** The output of our create `Counter` mutation. */
export type CreateCounterPayload = {
  __typename?: 'CreateCounterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `Counter` that was created by this mutation. */
  counter?: Maybe<Counter>;
  /** An edge for our `Counter`. May be used by Relay 1. */
  counterEdge?: Maybe<CountersEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `Counter` mutation. */
export type CreateCounterPayloadCounterEdgeArgs = {
  orderBy?: InputMaybe<Array<CountersOrderBy>>;
};

/** All input for the create `DataChangelog` mutation. */
export type CreateDataChangelogInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `DataChangelog` to be created by this mutation. */
  dataChangelog: DataChangelogInput;
};

/** The output of our create `DataChangelog` mutation. */
export type CreateDataChangelogPayload = {
  __typename?: 'CreateDataChangelogPayload';
  /** Reads a single `Application` that is related to this `DataChangelog`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `DataChangelog` that was created by this mutation. */
  dataChangelog?: Maybe<DataChangelog>;
  /** An edge for our `DataChangelog`. May be used by Relay 1. */
  dataChangelogEdge?: Maybe<DataChangelogsEdge>;
  /** Reads a single `Organisation` that is related to this `DataChangelog`. */
  org?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `DataChangelog` mutation. */
export type CreateDataChangelogPayloadDataChangelogEdgeArgs = {
  orderBy?: InputMaybe<Array<DataChangelogsOrderBy>>;
};

/** All input for the create `DataTable` mutation. */
export type CreateDataTableInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `DataTable` to be created by this mutation. */
  dataTable: DataTableInput;
};

/** The output of our create `DataTable` mutation. */
export type CreateDataTablePayload = {
  __typename?: 'CreateDataTablePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `DataTable` that was created by this mutation. */
  dataTable?: Maybe<DataTable>;
  /** An edge for our `DataTable`. May be used by Relay 1. */
  dataTableEdge?: Maybe<DataTablesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `DataTable` mutation. */
export type CreateDataTablePayloadDataTableEdgeArgs = {
  orderBy?: InputMaybe<Array<DataTablesOrderBy>>;
};

/** All input for the create `DataViewColumnDefinition` mutation. */
export type CreateDataViewColumnDefinitionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `DataViewColumnDefinition` to be created by this mutation. */
  dataViewColumnDefinition: DataViewColumnDefinitionInput;
};

/** The output of our create `DataViewColumnDefinition` mutation. */
export type CreateDataViewColumnDefinitionPayload = {
  __typename?: 'CreateDataViewColumnDefinitionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `DataViewColumnDefinition` that was created by this mutation. */
  dataViewColumnDefinition?: Maybe<DataViewColumnDefinition>;
  /** An edge for our `DataViewColumnDefinition`. May be used by Relay 1. */
  dataViewColumnDefinitionEdge?: Maybe<DataViewColumnDefinitionsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `DataViewColumnDefinition` mutation. */
export type CreateDataViewColumnDefinitionPayloadDataViewColumnDefinitionEdgeArgs = {
  orderBy?: InputMaybe<Array<DataViewColumnDefinitionsOrderBy>>;
};

/** All input for the create `DataView` mutation. */
export type CreateDataViewInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `DataView` to be created by this mutation. */
  dataView: DataViewInput;
};

/** The output of our create `DataView` mutation. */
export type CreateDataViewPayload = {
  __typename?: 'CreateDataViewPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `DataView` that was created by this mutation. */
  dataView?: Maybe<DataView>;
  /** An edge for our `DataView`. May be used by Relay 1. */
  dataViewEdge?: Maybe<DataViewsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `DataView` mutation. */
export type CreateDataViewPayloadDataViewEdgeArgs = {
  orderBy?: InputMaybe<Array<DataViewsOrderBy>>;
};

/** All input for the create `ElementTypePlugin` mutation. */
export type CreateElementTypePluginInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `ElementTypePlugin` to be created by this mutation. */
  elementTypePlugin: ElementTypePluginInput;
};

/** The output of our create `ElementTypePlugin` mutation. */
export type CreateElementTypePluginPayload = {
  __typename?: 'CreateElementTypePluginPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `ElementTypePlugin` that was created by this mutation. */
  elementTypePlugin?: Maybe<ElementTypePlugin>;
  /** An edge for our `ElementTypePlugin`. May be used by Relay 1. */
  elementTypePluginEdge?: Maybe<ElementTypePluginsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `ElementTypePlugin` mutation. */
export type CreateElementTypePluginPayloadElementTypePluginEdgeArgs = {
  orderBy?: InputMaybe<Array<ElementTypePluginsOrderBy>>;
};

/** All input for the create `File` mutation. */
export type CreateFileInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `File` to be created by this mutation. */
  file: FileInput;
};

/** The output of our create `File` mutation. */
export type CreateFilePayload = {
  __typename?: 'CreateFilePayload';
  /** Reads a single `Application` that is related to this `File`. */
  applicationByApplicationSerial?: Maybe<Application>;
  /** Reads a single `ApplicationNote` that is related to this `File`. */
  applicationNote?: Maybe<ApplicationNote>;
  /** Reads a single `ApplicationResponse` that is related to this `File`. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `File` that was created by this mutation. */
  file?: Maybe<File>;
  /** An edge for our `File`. May be used by Relay 1. */
  fileEdge?: Maybe<FilesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `File`. */
  template?: Maybe<Template>;
};


/** The output of our create `File` mutation. */
export type CreateFilePayloadFileEdgeArgs = {
  orderBy?: InputMaybe<Array<FilesOrderBy>>;
};

/** All input for the create `Filter` mutation. */
export type CreateFilterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `Filter` to be created by this mutation. */
  filter: FilterInput;
};

/** The output of our create `Filter` mutation. */
export type CreateFilterPayload = {
  __typename?: 'CreateFilterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `Filter` that was created by this mutation. */
  filter?: Maybe<Filter>;
  /** An edge for our `Filter`. May be used by Relay 1. */
  filterEdge?: Maybe<FiltersEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `Filter` mutation. */
export type CreateFilterPayloadFilterEdgeArgs = {
  orderBy?: InputMaybe<Array<FiltersOrderBy>>;
};

/** All input for the create `Notification` mutation. */
export type CreateNotificationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `Notification` to be created by this mutation. */
  notification: NotificationInput;
};

/** The output of our create `Notification` mutation. */
export type CreateNotificationPayload = {
  __typename?: 'CreateNotificationPayload';
  /** Reads a single `Application` that is related to this `Notification`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `Notification` that was created by this mutation. */
  notification?: Maybe<Notification>;
  /** An edge for our `Notification`. May be used by Relay 1. */
  notificationEdge?: Maybe<NotificationsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Review` that is related to this `Notification`. */
  review?: Maybe<Review>;
};


/** The output of our create `Notification` mutation. */
export type CreateNotificationPayloadNotificationEdgeArgs = {
  orderBy?: InputMaybe<Array<NotificationsOrderBy>>;
};

/** All input for the create `Organisation` mutation. */
export type CreateOrganisationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `Organisation` to be created by this mutation. */
  organisation: OrganisationInput;
};

/** The output of our create `Organisation` mutation. */
export type CreateOrganisationPayload = {
  __typename?: 'CreateOrganisationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `Organisation` that was created by this mutation. */
  organisation?: Maybe<Organisation>;
  /** An edge for our `Organisation`. May be used by Relay 1. */
  organisationEdge?: Maybe<OrganisationsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `Organisation` mutation. */
export type CreateOrganisationPayloadOrganisationEdgeArgs = {
  orderBy?: InputMaybe<Array<OrganisationsOrderBy>>;
};

/** All input for the create `PermissionJoin` mutation. */
export type CreatePermissionJoinInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `PermissionJoin` to be created by this mutation. */
  permissionJoin: PermissionJoinInput;
};

/** The output of our create `PermissionJoin` mutation. */
export type CreatePermissionJoinPayload = {
  __typename?: 'CreatePermissionJoinPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Reads a single `Organisation` that is related to this `PermissionJoin`. */
  organisation?: Maybe<Organisation>;
  /** The `PermissionJoin` that was created by this mutation. */
  permissionJoin?: Maybe<PermissionJoin>;
  /** An edge for our `PermissionJoin`. May be used by Relay 1. */
  permissionJoinEdge?: Maybe<PermissionJoinsEdge>;
  /** Reads a single `PermissionName` that is related to this `PermissionJoin`. */
  permissionName?: Maybe<PermissionName>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `UserList` that is related to this `PermissionJoin`. */
  user?: Maybe<UserList>;
};


/** The output of our create `PermissionJoin` mutation. */
export type CreatePermissionJoinPayloadPermissionJoinEdgeArgs = {
  orderBy?: InputMaybe<Array<PermissionJoinsOrderBy>>;
};

/** All input for the create `PermissionName` mutation. */
export type CreatePermissionNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `PermissionName` to be created by this mutation. */
  permissionName: PermissionNameInput;
};

/** The output of our create `PermissionName` mutation. */
export type CreatePermissionNamePayload = {
  __typename?: 'CreatePermissionNamePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `PermissionName` that was created by this mutation. */
  permissionName?: Maybe<PermissionName>;
  /** An edge for our `PermissionName`. May be used by Relay 1. */
  permissionNameEdge?: Maybe<PermissionNamesEdge>;
  /** Reads a single `PermissionPolicy` that is related to this `PermissionName`. */
  permissionPolicy?: Maybe<PermissionPolicy>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `PermissionName` mutation. */
export type CreatePermissionNamePayloadPermissionNameEdgeArgs = {
  orderBy?: InputMaybe<Array<PermissionNamesOrderBy>>;
};

/** All input for the create `PermissionPolicy` mutation. */
export type CreatePermissionPolicyInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `PermissionPolicy` to be created by this mutation. */
  permissionPolicy: PermissionPolicyInput;
};

/** The output of our create `PermissionPolicy` mutation. */
export type CreatePermissionPolicyPayload = {
  __typename?: 'CreatePermissionPolicyPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `PermissionPolicy` that was created by this mutation. */
  permissionPolicy?: Maybe<PermissionPolicy>;
  /** An edge for our `PermissionPolicy`. May be used by Relay 1. */
  permissionPolicyEdge?: Maybe<PermissionPoliciesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our create `PermissionPolicy` mutation. */
export type CreatePermissionPolicyPayloadPermissionPolicyEdgeArgs = {
  orderBy?: InputMaybe<Array<PermissionPoliciesOrderBy>>;
};

/** All input for the create `ReviewAssignmentAssignedSectionsShape` mutation. */
export type CreateReviewAssignmentAssignedSectionsShapeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `ReviewAssignmentAssignedSectionsShape` to be created by this mutation. */
  reviewAssignmentAssignedSectionsShape: ReviewAssignmentAssignedSectionsShapeInput;
};

/** The output of our create `ReviewAssignmentAssignedSectionsShape` mutation. */
export type CreateReviewAssignmentAssignedSectionsShapePayload = {
  __typename?: 'CreateReviewAssignmentAssignedSectionsShapePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `ReviewAssignmentAssignedSectionsShape` that was created by this mutation. */
  reviewAssignmentAssignedSectionsShape?: Maybe<ReviewAssignmentAssignedSectionsShape>;
  /** An edge for our `ReviewAssignmentAssignedSectionsShape`. May be used by Relay 1. */
  reviewAssignmentAssignedSectionsShapeEdge?: Maybe<ReviewAssignmentAssignedSectionsShapesEdge>;
};


/** The output of our create `ReviewAssignmentAssignedSectionsShape` mutation. */
export type CreateReviewAssignmentAssignedSectionsShapePayloadReviewAssignmentAssignedSectionsShapeEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewAssignmentAssignedSectionsShapesOrderBy>>;
};

/** All input for the create `ReviewAssignmentAssignerJoin` mutation. */
export type CreateReviewAssignmentAssignerJoinInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `ReviewAssignmentAssignerJoin` to be created by this mutation. */
  reviewAssignmentAssignerJoin: ReviewAssignmentAssignerJoinInput;
};

/** The output of our create `ReviewAssignmentAssignerJoin` mutation. */
export type CreateReviewAssignmentAssignerJoinPayload = {
  __typename?: 'CreateReviewAssignmentAssignerJoinPayload';
  /** Reads a single `UserList` that is related to this `ReviewAssignmentAssignerJoin`. */
  assigner?: Maybe<UserList>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Reads a single `Organisation` that is related to this `ReviewAssignmentAssignerJoin`. */
  organisation?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `ReviewAssignment` that is related to this `ReviewAssignmentAssignerJoin`. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** The `ReviewAssignmentAssignerJoin` that was created by this mutation. */
  reviewAssignmentAssignerJoin?: Maybe<ReviewAssignmentAssignerJoin>;
  /** An edge for our `ReviewAssignmentAssignerJoin`. May be used by Relay 1. */
  reviewAssignmentAssignerJoinEdge?: Maybe<ReviewAssignmentAssignerJoinsEdge>;
};


/** The output of our create `ReviewAssignmentAssignerJoin` mutation. */
export type CreateReviewAssignmentAssignerJoinPayloadReviewAssignmentAssignerJoinEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewAssignmentAssignerJoinsOrderBy>>;
};

/** All input for the create `ReviewAssignment` mutation. */
export type CreateReviewAssignmentInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `ReviewAssignment` to be created by this mutation. */
  reviewAssignment: ReviewAssignmentInput;
};

/** The output of our create `ReviewAssignment` mutation. */
export type CreateReviewAssignmentPayload = {
  __typename?: 'CreateReviewAssignmentPayload';
  /** Reads a single `Application` that is related to this `ReviewAssignment`. */
  application?: Maybe<Application>;
  /** Reads a single `UserList` that is related to this `ReviewAssignment`. */
  assigner?: Maybe<UserList>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Reads a single `TemplateStageReviewLevel` that is related to this `ReviewAssignment`. */
  level?: Maybe<TemplateStageReviewLevel>;
  /** Reads a single `Organisation` that is related to this `ReviewAssignment`. */
  organisation?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `ReviewAssignment` that was created by this mutation. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** An edge for our `ReviewAssignment`. May be used by Relay 1. */
  reviewAssignmentEdge?: Maybe<ReviewAssignmentsEdge>;
  /** Reads a single `UserList` that is related to this `ReviewAssignment`. */
  reviewer?: Maybe<UserList>;
  /** Reads a single `TemplateStage` that is related to this `ReviewAssignment`. */
  stage?: Maybe<TemplateStage>;
  /** Reads a single `Template` that is related to this `ReviewAssignment`. */
  template?: Maybe<Template>;
};


/** The output of our create `ReviewAssignment` mutation. */
export type CreateReviewAssignmentPayloadReviewAssignmentEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewAssignmentsOrderBy>>;
};

/** All input for the create `ReviewDecision` mutation. */
export type CreateReviewDecisionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `ReviewDecision` to be created by this mutation. */
  reviewDecision: ReviewDecisionInput;
};

/** The output of our create `ReviewDecision` mutation. */
export type CreateReviewDecisionPayload = {
  __typename?: 'CreateReviewDecisionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Review` that is related to this `ReviewDecision`. */
  review?: Maybe<Review>;
  /** The `ReviewDecision` that was created by this mutation. */
  reviewDecision?: Maybe<ReviewDecision>;
  /** An edge for our `ReviewDecision`. May be used by Relay 1. */
  reviewDecisionEdge?: Maybe<ReviewDecisionsEdge>;
};


/** The output of our create `ReviewDecision` mutation. */
export type CreateReviewDecisionPayloadReviewDecisionEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewDecisionsOrderBy>>;
};

/** All input for the create `Review` mutation. */
export type CreateReviewInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `Review` to be created by this mutation. */
  review: ReviewInput;
};

/** The output of our create `Review` mutation. */
export type CreateReviewPayload = {
  __typename?: 'CreateReviewPayload';
  /** Reads a single `Application` that is related to this `Review`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Review` that was created by this mutation. */
  review?: Maybe<Review>;
  /** Reads a single `ReviewAssignment` that is related to this `Review`. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** An edge for our `Review`. May be used by Relay 1. */
  reviewEdge?: Maybe<ReviewsEdge>;
  /** Reads a single `UserList` that is related to this `Review`. */
  reviewer?: Maybe<UserList>;
};


/** The output of our create `Review` mutation. */
export type CreateReviewPayloadReviewEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewsOrderBy>>;
};

/** All input for the create `ReviewResponse` mutation. */
export type CreateReviewResponseInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `ReviewResponse` to be created by this mutation. */
  reviewResponse: ReviewResponseInput;
};

/** The output of our create `ReviewResponse` mutation. */
export type CreateReviewResponsePayload = {
  __typename?: 'CreateReviewResponsePayload';
  /** Reads a single `ApplicationResponse` that is related to this `ReviewResponse`. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Reads a single `ReviewResponse` that is related to this `ReviewResponse`. */
  originalReviewResponse?: Maybe<ReviewResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Review` that is related to this `ReviewResponse`. */
  review?: Maybe<Review>;
  /** The `ReviewResponse` that was created by this mutation. */
  reviewResponse?: Maybe<ReviewResponse>;
  /** An edge for our `ReviewResponse`. May be used by Relay 1. */
  reviewResponseEdge?: Maybe<ReviewResponsesEdge>;
  /** Reads a single `ReviewResponse` that is related to this `ReviewResponse`. */
  reviewResponseLink?: Maybe<ReviewResponse>;
  /** Reads a single `TemplateElement` that is related to this `ReviewResponse`. */
  templateElement?: Maybe<TemplateElement>;
};


/** The output of our create `ReviewResponse` mutation. */
export type CreateReviewResponsePayloadReviewResponseEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewResponsesOrderBy>>;
};

/** All input for the create `ReviewStatusHistory` mutation. */
export type CreateReviewStatusHistoryInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `ReviewStatusHistory` to be created by this mutation. */
  reviewStatusHistory: ReviewStatusHistoryInput;
};

/** The output of our create `ReviewStatusHistory` mutation. */
export type CreateReviewStatusHistoryPayload = {
  __typename?: 'CreateReviewStatusHistoryPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Review` that is related to this `ReviewStatusHistory`. */
  review?: Maybe<Review>;
  /** The `ReviewStatusHistory` that was created by this mutation. */
  reviewStatusHistory?: Maybe<ReviewStatusHistory>;
  /** An edge for our `ReviewStatusHistory`. May be used by Relay 1. */
  reviewStatusHistoryEdge?: Maybe<ReviewStatusHistoriesEdge>;
};


/** The output of our create `ReviewStatusHistory` mutation. */
export type CreateReviewStatusHistoryPayloadReviewStatusHistoryEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewStatusHistoriesOrderBy>>;
};

/** All input for the create `SystemInfo` mutation. */
export type CreateSystemInfoInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `SystemInfo` to be created by this mutation. */
  systemInfo: SystemInfoInput;
};

/** The output of our create `SystemInfo` mutation. */
export type CreateSystemInfoPayload = {
  __typename?: 'CreateSystemInfoPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `SystemInfo` that was created by this mutation. */
  systemInfo?: Maybe<SystemInfo>;
  /** An edge for our `SystemInfo`. May be used by Relay 1. */
  systemInfoEdge?: Maybe<SystemInfosEdge>;
};


/** The output of our create `SystemInfo` mutation. */
export type CreateSystemInfoPayloadSystemInfoEdgeArgs = {
  orderBy?: InputMaybe<Array<SystemInfosOrderBy>>;
};

/** All input for the create `TemplateAction` mutation. */
export type CreateTemplateActionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `TemplateAction` to be created by this mutation. */
  templateAction: TemplateActionInput;
};

/** The output of our create `TemplateAction` mutation. */
export type CreateTemplateActionPayload = {
  __typename?: 'CreateTemplateActionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateAction`. */
  template?: Maybe<Template>;
  /** The `TemplateAction` that was created by this mutation. */
  templateAction?: Maybe<TemplateAction>;
  /** An edge for our `TemplateAction`. May be used by Relay 1. */
  templateActionEdge?: Maybe<TemplateActionsEdge>;
};


/** The output of our create `TemplateAction` mutation. */
export type CreateTemplateActionPayloadTemplateActionEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateActionsOrderBy>>;
};

/** All input for the create `TemplateCategory` mutation. */
export type CreateTemplateCategoryInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `TemplateCategory` to be created by this mutation. */
  templateCategory: TemplateCategoryInput;
};

/** The output of our create `TemplateCategory` mutation. */
export type CreateTemplateCategoryPayload = {
  __typename?: 'CreateTemplateCategoryPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `TemplateCategory` that was created by this mutation. */
  templateCategory?: Maybe<TemplateCategory>;
  /** An edge for our `TemplateCategory`. May be used by Relay 1. */
  templateCategoryEdge?: Maybe<TemplateCategoriesEdge>;
};


/** The output of our create `TemplateCategory` mutation. */
export type CreateTemplateCategoryPayloadTemplateCategoryEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateCategoriesOrderBy>>;
};

/** All input for the create `TemplateElement` mutation. */
export type CreateTemplateElementInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `TemplateElement` to be created by this mutation. */
  templateElement: TemplateElementInput;
};

/** The output of our create `TemplateElement` mutation. */
export type CreateTemplateElementPayload = {
  __typename?: 'CreateTemplateElementPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateSection` that is related to this `TemplateElement`. */
  section?: Maybe<TemplateSection>;
  /** The `TemplateElement` that was created by this mutation. */
  templateElement?: Maybe<TemplateElement>;
  /** An edge for our `TemplateElement`. May be used by Relay 1. */
  templateElementEdge?: Maybe<TemplateElementsEdge>;
};


/** The output of our create `TemplateElement` mutation. */
export type CreateTemplateElementPayloadTemplateElementEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateElementsOrderBy>>;
};

/** All input for the create `TemplateFilterJoin` mutation. */
export type CreateTemplateFilterJoinInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `TemplateFilterJoin` to be created by this mutation. */
  templateFilterJoin: TemplateFilterJoinInput;
};

/** The output of our create `TemplateFilterJoin` mutation. */
export type CreateTemplateFilterJoinPayload = {
  __typename?: 'CreateTemplateFilterJoinPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Reads a single `Filter` that is related to this `TemplateFilterJoin`. */
  filter?: Maybe<Filter>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateFilterJoin`. */
  template?: Maybe<Template>;
  /** The `TemplateFilterJoin` that was created by this mutation. */
  templateFilterJoin?: Maybe<TemplateFilterJoin>;
  /** An edge for our `TemplateFilterJoin`. May be used by Relay 1. */
  templateFilterJoinEdge?: Maybe<TemplateFilterJoinsEdge>;
};


/** The output of our create `TemplateFilterJoin` mutation. */
export type CreateTemplateFilterJoinPayloadTemplateFilterJoinEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateFilterJoinsOrderBy>>;
};

/** All input for the create `Template` mutation. */
export type CreateTemplateInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `Template` to be created by this mutation. */
  template: TemplateInput;
};

/** The output of our create `Template` mutation. */
export type CreateTemplatePayload = {
  __typename?: 'CreateTemplatePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Template` that was created by this mutation. */
  template?: Maybe<Template>;
  /** Reads a single `TemplateCategory` that is related to this `Template`. */
  templateCategory?: Maybe<TemplateCategory>;
  /** An edge for our `Template`. May be used by Relay 1. */
  templateEdge?: Maybe<TemplatesEdge>;
};


/** The output of our create `Template` mutation. */
export type CreateTemplatePayloadTemplateEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplatesOrderBy>>;
};

/** All input for the create `TemplatePermission` mutation. */
export type CreateTemplatePermissionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `TemplatePermission` to be created by this mutation. */
  templatePermission: TemplatePermissionInput;
};

/** The output of our create `TemplatePermission` mutation. */
export type CreateTemplatePermissionPayload = {
  __typename?: 'CreateTemplatePermissionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Reads a single `PermissionName` that is related to this `TemplatePermission`. */
  permissionName?: Maybe<PermissionName>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplatePermission`. */
  template?: Maybe<Template>;
  /** The `TemplatePermission` that was created by this mutation. */
  templatePermission?: Maybe<TemplatePermission>;
  /** An edge for our `TemplatePermission`. May be used by Relay 1. */
  templatePermissionEdge?: Maybe<TemplatePermissionsEdge>;
};


/** The output of our create `TemplatePermission` mutation. */
export type CreateTemplatePermissionPayloadTemplatePermissionEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplatePermissionsOrderBy>>;
};

/** All input for the create `TemplateSection` mutation. */
export type CreateTemplateSectionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `TemplateSection` to be created by this mutation. */
  templateSection: TemplateSectionInput;
};

/** The output of our create `TemplateSection` mutation. */
export type CreateTemplateSectionPayload = {
  __typename?: 'CreateTemplateSectionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateSection`. */
  template?: Maybe<Template>;
  /** The `TemplateSection` that was created by this mutation. */
  templateSection?: Maybe<TemplateSection>;
  /** An edge for our `TemplateSection`. May be used by Relay 1. */
  templateSectionEdge?: Maybe<TemplateSectionsEdge>;
};


/** The output of our create `TemplateSection` mutation. */
export type CreateTemplateSectionPayloadTemplateSectionEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateSectionsOrderBy>>;
};

/** All input for the create `TemplateStage` mutation. */
export type CreateTemplateStageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `TemplateStage` to be created by this mutation. */
  templateStage: TemplateStageInput;
};

/** The output of our create `TemplateStage` mutation. */
export type CreateTemplateStagePayload = {
  __typename?: 'CreateTemplateStagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateStage`. */
  template?: Maybe<Template>;
  /** The `TemplateStage` that was created by this mutation. */
  templateStage?: Maybe<TemplateStage>;
  /** An edge for our `TemplateStage`. May be used by Relay 1. */
  templateStageEdge?: Maybe<TemplateStagesEdge>;
};


/** The output of our create `TemplateStage` mutation. */
export type CreateTemplateStagePayloadTemplateStageEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateStagesOrderBy>>;
};

/** All input for the create `TemplateStageReviewLevel` mutation. */
export type CreateTemplateStageReviewLevelInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `TemplateStageReviewLevel` to be created by this mutation. */
  templateStageReviewLevel: TemplateStageReviewLevelInput;
};

/** The output of our create `TemplateStageReviewLevel` mutation. */
export type CreateTemplateStageReviewLevelPayload = {
  __typename?: 'CreateTemplateStageReviewLevelPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateStage` that is related to this `TemplateStageReviewLevel`. */
  stage?: Maybe<TemplateStage>;
  /** The `TemplateStageReviewLevel` that was created by this mutation. */
  templateStageReviewLevel?: Maybe<TemplateStageReviewLevel>;
  /** An edge for our `TemplateStageReviewLevel`. May be used by Relay 1. */
  templateStageReviewLevelEdge?: Maybe<TemplateStageReviewLevelsEdge>;
};


/** The output of our create `TemplateStageReviewLevel` mutation. */
export type CreateTemplateStageReviewLevelPayloadTemplateStageReviewLevelEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateStageReviewLevelsOrderBy>>;
};

/** All input for the create `TriggerQueue` mutation. */
export type CreateTriggerQueueInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `TriggerQueue` to be created by this mutation. */
  triggerQueue: TriggerQueueInput;
};

/** The output of our create `TriggerQueue` mutation. */
export type CreateTriggerQueuePayload = {
  __typename?: 'CreateTriggerQueuePayload';
  /** Reads a single `Application` that is related to this `TriggerQueue`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `TriggerQueue` that was created by this mutation. */
  triggerQueue?: Maybe<TriggerQueue>;
  /** An edge for our `TriggerQueue`. May be used by Relay 1. */
  triggerQueueEdge?: Maybe<TriggerQueuesEdge>;
};


/** The output of our create `TriggerQueue` mutation. */
export type CreateTriggerQueuePayloadTriggerQueueEdgeArgs = {
  orderBy?: InputMaybe<Array<TriggerQueuesOrderBy>>;
};

/** All input for the create `TriggerSchedule` mutation. */
export type CreateTriggerScheduleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `TriggerSchedule` to be created by this mutation. */
  triggerSchedule: TriggerScheduleInput;
};

/** The output of our create `TriggerSchedule` mutation. */
export type CreateTriggerSchedulePayload = {
  __typename?: 'CreateTriggerSchedulePayload';
  /** Reads a single `Application` that is related to this `TriggerSchedule`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TriggerSchedule`. */
  template?: Maybe<Template>;
  /** The `TriggerSchedule` that was created by this mutation. */
  triggerSchedule?: Maybe<TriggerSchedule>;
  /** An edge for our `TriggerSchedule`. May be used by Relay 1. */
  triggerScheduleEdge?: Maybe<TriggerSchedulesEdge>;
};


/** The output of our create `TriggerSchedule` mutation. */
export type CreateTriggerSchedulePayloadTriggerScheduleEdgeArgs = {
  orderBy?: InputMaybe<Array<TriggerSchedulesOrderBy>>;
};

/** All input for the create `User` mutation. */
export type CreateUserInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `User` to be created by this mutation. */
  user: UserInput;
};

/** All input for the create `UserList` mutation. */
export type CreateUserListInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `UserList` to be created by this mutation. */
  userList: UserListInput;
};

/** The output of our create `UserList` mutation. */
export type CreateUserListPayload = {
  __typename?: 'CreateUserListPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `UserList` that was created by this mutation. */
  userList?: Maybe<UserList>;
  /** An edge for our `UserList`. May be used by Relay 1. */
  userListEdge?: Maybe<UserListsEdge>;
};


/** The output of our create `UserList` mutation. */
export type CreateUserListPayloadUserListEdgeArgs = {
  orderBy?: InputMaybe<Array<UserListsOrderBy>>;
};

/** All input for the create `UserOrganisation` mutation. */
export type CreateUserOrganisationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `UserOrganisation` to be created by this mutation. */
  userOrganisation: UserOrganisationInput;
};

/** The output of our create `UserOrganisation` mutation. */
export type CreateUserOrganisationPayload = {
  __typename?: 'CreateUserOrganisationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Reads a single `Organisation` that is related to this `UserOrganisation`. */
  organisation?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserOrganisation`. */
  user?: Maybe<User>;
  /** The `UserOrganisation` that was created by this mutation. */
  userOrganisation?: Maybe<UserOrganisation>;
  /** An edge for our `UserOrganisation`. May be used by Relay 1. */
  userOrganisationEdge?: Maybe<UserOrganisationsEdge>;
};


/** The output of our create `UserOrganisation` mutation. */
export type CreateUserOrganisationPayloadUserOrganisationEdgeArgs = {
  orderBy?: InputMaybe<Array<UserOrganisationsOrderBy>>;
};

/** The output of our create `User` mutation. */
export type CreateUserPayload = {
  __typename?: 'CreateUserPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `User` that was created by this mutation. */
  user?: Maybe<User>;
  /** An edge for our `User`. May be used by Relay 1. */
  userEdge?: Maybe<UsersEdge>;
};


/** The output of our create `User` mutation. */
export type CreateUserPayloadUserEdgeArgs = {
  orderBy?: InputMaybe<Array<UsersOrderBy>>;
};

/** All input for the create `Verification` mutation. */
export type CreateVerificationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The `Verification` to be created by this mutation. */
  verification: VerificationInput;
};

/** The output of our create `Verification` mutation. */
export type CreateVerificationPayload = {
  __typename?: 'CreateVerificationPayload';
  /** Reads a single `Application` that is related to this `Verification`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Verification` that was created by this mutation. */
  verification?: Maybe<Verification>;
  /** An edge for our `Verification`. May be used by Relay 1. */
  verificationEdge?: Maybe<VerificationsEdge>;
};


/** The output of our create `Verification` mutation. */
export type CreateVerificationPayloadVerificationEdgeArgs = {
  orderBy?: InputMaybe<Array<VerificationsOrderBy>>;
};

export type DataChangelog = Node & {
  __typename?: 'DataChangelog';
  /** Reads a single `Application` that is related to this `DataChangelog`. */
  application?: Maybe<Application>;
  applicationId?: Maybe<Scalars['Int']['output']>;
  comment?: Maybe<Scalars['String']['output']>;
  dataTable: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  newData?: Maybe<Scalars['JSON']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  oldData?: Maybe<Scalars['JSON']['output']>;
  /** Reads a single `Organisation` that is related to this `DataChangelog`. */
  org?: Maybe<Organisation>;
  orgId?: Maybe<Scalars['Int']['output']>;
  recordId: Scalars['Int']['output'];
  timestamp?: Maybe<Scalars['Datetime']['output']>;
  updateType: ChangelogType;
  userId?: Maybe<Scalars['Int']['output']>;
  username?: Maybe<Scalars['String']['output']>;
};

/** The `application` to be created by this mutation. */
export type DataChangelogApplicationIdFkeyApplicationCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The `dataChangelog` to be created by this mutation. */
export type DataChangelogApplicationIdFkeyDataChangelogCreateInput = {
  applicationToApplicationId?: InputMaybe<DataChangelogApplicationIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  dataTable: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  newData?: InputMaybe<Scalars['JSON']['input']>;
  oldData?: InputMaybe<Scalars['JSON']['input']>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<DataChangelogOrgIdFkeyInput>;
  recordId: Scalars['Int']['input'];
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  updateType: ChangelogType;
  userId?: InputMaybe<Scalars['Int']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/** Input for the nested mutation of `application` in the `DataChangelogInput` mutation. */
export type DataChangelogApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: InputMaybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: InputMaybe<ApplicationApplicationSerialKeyConnect>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: InputMaybe<DataChangelogApplicationIdFkeyApplicationCreateInput>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: InputMaybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ApplicationNodeIdDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: InputMaybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: InputMaybe<ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<DataChangelogOnDataChangelogForDataChangelogApplicationIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByOutcomeRegistration?: InputMaybe<ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: InputMaybe<ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
};

/** Input for the nested mutation of `dataChangelog` in the `ApplicationInput` mutation. */
export type DataChangelogApplicationIdFkeyInverseInput = {
  /** The primary key(s) for `dataChangelog` for the far side of the relationship. */
  connectById?: InputMaybe<Array<DataChangelogDataChangelogPkeyConnect>>;
  /** The primary key(s) for `dataChangelog` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<DataChangelogNodeIdConnect>>;
  /** A `DataChangelogInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<DataChangelogApplicationIdFkeyDataChangelogCreateInput>>;
  /** The primary key(s) for `dataChangelog` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<DataChangelogDataChangelogPkeyDelete>>;
  /** The primary key(s) for `dataChangelog` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<DataChangelogNodeIdDelete>>;
  /** Flag indicating whether all other `dataChangelog` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `dataChangelog` for the far side of the relationship. */
  updateById?: InputMaybe<Array<DataChangelogOnDataChangelogForDataChangelogApplicationIdFkeyUsingDataChangelogPkeyUpdate>>;
  /** The primary key(s) and patch data for `dataChangelog` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyNodeIdUpdate>>;
};

/**
 * A condition to be used against `DataChangelog` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type DataChangelogCondition = {
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `comment` field. */
  comment?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `dataTable` field. */
  dataTable?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `newData` field. */
  newData?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `oldData` field. */
  oldData?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `orgId` field. */
  orgId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `recordId` field. */
  recordId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `timestamp` field. */
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `updateType` field. */
  updateType?: InputMaybe<ChangelogType>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `username` field. */
  username?: InputMaybe<Scalars['String']['input']>;
};

/** The fields on `dataChangelog` to look up the row to connect. */
export type DataChangelogDataChangelogPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `dataChangelog` to look up the row to delete. */
export type DataChangelogDataChangelogPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** A filter to be used against `DataChangelog` object types. All fields are combined with a logical ‘and.’ */
export type DataChangelogFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<DataChangelogFilter>>;
  /** Filter by the object’s `application` relation. */
  application?: InputMaybe<ApplicationFilter>;
  /** A related `application` exists. */
  applicationExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `comment` field. */
  comment?: InputMaybe<StringFilter>;
  /** Filter by the object’s `dataTable` field. */
  dataTable?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `newData` field. */
  newData?: InputMaybe<JsonFilter>;
  /** Negates the expression. */
  not?: InputMaybe<DataChangelogFilter>;
  /** Filter by the object’s `oldData` field. */
  oldData?: InputMaybe<JsonFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<DataChangelogFilter>>;
  /** Filter by the object’s `org` relation. */
  org?: InputMaybe<OrganisationFilter>;
  /** A related `org` exists. */
  orgExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `orgId` field. */
  orgId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `recordId` field. */
  recordId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `timestamp` field. */
  timestamp?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `updateType` field. */
  updateType?: InputMaybe<ChangelogTypeFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `username` field. */
  username?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `DataChangelog` */
export type DataChangelogInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<DataChangelogApplicationIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  dataTable: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  newData?: InputMaybe<Scalars['JSON']['input']>;
  oldData?: InputMaybe<Scalars['JSON']['input']>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<DataChangelogOrgIdFkeyInput>;
  recordId: Scalars['Int']['input'];
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  updateType: ChangelogType;
  userId?: InputMaybe<Scalars['Int']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/** The globally unique `ID` look up for the row to connect. */
export type DataChangelogNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `dataChangelog` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type DataChangelogNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `dataChangelog` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type DataChangelogOnDataChangelogForDataChangelogApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The fields on `dataChangelog` to look up the row to update. */
export type DataChangelogOnDataChangelogForDataChangelogApplicationIdFkeyUsingDataChangelogPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `dataChangelog` being updated. */
  patch: UpdateDataChangelogOnDataChangelogForDataChangelogApplicationIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type DataChangelogOnDataChangelogForDataChangelogOrgIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `organisation` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: OrganisationPatch;
};

/** The fields on `dataChangelog` to look up the row to update. */
export type DataChangelogOnDataChangelogForDataChangelogOrgIdFkeyUsingDataChangelogPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `dataChangelog` being updated. */
  patch: UpdateDataChangelogOnDataChangelogForDataChangelogOrgIdFkeyPatch;
};

/** The `dataChangelog` to be created by this mutation. */
export type DataChangelogOrgIdFkeyDataChangelogCreateInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<DataChangelogApplicationIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  dataTable: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  newData?: InputMaybe<Scalars['JSON']['input']>;
  oldData?: InputMaybe<Scalars['JSON']['input']>;
  organisationToOrgId?: InputMaybe<DataChangelogOrgIdFkeyInput>;
  recordId: Scalars['Int']['input'];
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  updateType: ChangelogType;
  userId?: InputMaybe<Scalars['Int']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/** Input for the nested mutation of `organisation` in the `DataChangelogInput` mutation. */
export type DataChangelogOrgIdFkeyInput = {
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectById?: InputMaybe<OrganisationOrganisationPkeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByName?: InputMaybe<OrganisationOrganisationNameKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<OrganisationNodeIdConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByRegistration?: InputMaybe<OrganisationOrganisationRegistrationKeyConnect>;
  /** A `OrganisationInput` object that will be created and connected to this object. */
  create?: InputMaybe<DataChangelogOrgIdFkeyOrganisationCreateInput>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteById?: InputMaybe<OrganisationOrganisationPkeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByName?: InputMaybe<OrganisationOrganisationNameKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<OrganisationNodeIdDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByRegistration?: InputMaybe<OrganisationOrganisationRegistrationKeyDelete>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateById?: InputMaybe<OrganisationOnDataChangelogForDataChangelogOrgIdFkeyUsingOrganisationPkeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByName?: InputMaybe<OrganisationOnDataChangelogForDataChangelogOrgIdFkeyUsingOrganisationNameKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<DataChangelogOnDataChangelogForDataChangelogOrgIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByRegistration?: InputMaybe<OrganisationOnDataChangelogForDataChangelogOrgIdFkeyUsingOrganisationRegistrationKeyUpdate>;
};

/** Input for the nested mutation of `dataChangelog` in the `OrganisationInput` mutation. */
export type DataChangelogOrgIdFkeyInverseInput = {
  /** The primary key(s) for `dataChangelog` for the far side of the relationship. */
  connectById?: InputMaybe<Array<DataChangelogDataChangelogPkeyConnect>>;
  /** The primary key(s) for `dataChangelog` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<DataChangelogNodeIdConnect>>;
  /** A `DataChangelogInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<DataChangelogOrgIdFkeyDataChangelogCreateInput>>;
  /** The primary key(s) for `dataChangelog` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<DataChangelogDataChangelogPkeyDelete>>;
  /** The primary key(s) for `dataChangelog` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<DataChangelogNodeIdDelete>>;
  /** Flag indicating whether all other `dataChangelog` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `dataChangelog` for the far side of the relationship. */
  updateById?: InputMaybe<Array<DataChangelogOnDataChangelogForDataChangelogOrgIdFkeyUsingDataChangelogPkeyUpdate>>;
  /** The primary key(s) and patch data for `dataChangelog` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<OrganisationOnDataChangelogForDataChangelogOrgIdFkeyNodeIdUpdate>>;
};

/** The `organisation` to be created by this mutation. */
export type DataChangelogOrgIdFkeyOrganisationCreateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteOrgIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationOrgIdFkeyInverseInput>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogOrgIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrg?: InputMaybe<Scalars['Boolean']['input']>;
  logoUrl?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  registration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: InputMaybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** Represents an update to a `DataChangelog`. Fields that are set will be updated. */
export type DataChangelogPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<DataChangelogApplicationIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  dataTable?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  newData?: InputMaybe<Scalars['JSON']['input']>;
  oldData?: InputMaybe<Scalars['JSON']['input']>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<DataChangelogOrgIdFkeyInput>;
  recordId?: InputMaybe<Scalars['Int']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  updateType?: InputMaybe<ChangelogType>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/** A connection to a list of `DataChangelog` values. */
export type DataChangelogsConnection = {
  __typename?: 'DataChangelogsConnection';
  /** A list of edges which contains the `DataChangelog` and cursor to aid in pagination. */
  edges: Array<DataChangelogsEdge>;
  /** A list of `DataChangelog` objects. */
  nodes: Array<Maybe<DataChangelog>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataChangelog` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `DataChangelog` edge in the connection. */
export type DataChangelogsEdge = {
  __typename?: 'DataChangelogsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `DataChangelog` at the end of the edge. */
  node?: Maybe<DataChangelog>;
};

/** Methods to use when ordering `DataChangelog`. */
export enum DataChangelogsOrderBy {
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  CommentAsc = 'COMMENT_ASC',
  CommentDesc = 'COMMENT_DESC',
  DataTableAsc = 'DATA_TABLE_ASC',
  DataTableDesc = 'DATA_TABLE_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  NewDataAsc = 'NEW_DATA_ASC',
  NewDataDesc = 'NEW_DATA_DESC',
  OldDataAsc = 'OLD_DATA_ASC',
  OldDataDesc = 'OLD_DATA_DESC',
  OrgIdAsc = 'ORG_ID_ASC',
  OrgIdDesc = 'ORG_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RecordIdAsc = 'RECORD_ID_ASC',
  RecordIdDesc = 'RECORD_ID_DESC',
  TimestampAsc = 'TIMESTAMP_ASC',
  TimestampDesc = 'TIMESTAMP_DESC',
  UpdateTypeAsc = 'UPDATE_TYPE_ASC',
  UpdateTypeDesc = 'UPDATE_TYPE_DESC',
  UsernameAsc = 'USERNAME_ASC',
  UsernameDesc = 'USERNAME_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

export type DataTable = Node & {
  __typename?: 'DataTable';
  dataViewCode?: Maybe<Scalars['String']['output']>;
  displayName?: Maybe<Scalars['String']['output']>;
  fieldMap?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['Int']['output'];
  isLookupTable?: Maybe<Scalars['Boolean']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  tableName: Scalars['String']['output'];
};

/**
 * A condition to be used against `DataTable` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type DataTableCondition = {
  /** Checks for equality with the object’s `dataViewCode` field. */
  dataViewCode?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `displayName` field. */
  displayName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `fieldMap` field. */
  fieldMap?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isLookupTable` field. */
  isLookupTable?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `tableName` field. */
  tableName?: InputMaybe<Scalars['String']['input']>;
};

/** A filter to be used against `DataTable` object types. All fields are combined with a logical ‘and.’ */
export type DataTableFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<DataTableFilter>>;
  /** Filter by the object’s `dataViewCode` field. */
  dataViewCode?: InputMaybe<StringFilter>;
  /** Filter by the object’s `displayName` field. */
  displayName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `fieldMap` field. */
  fieldMap?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isLookupTable` field. */
  isLookupTable?: InputMaybe<BooleanFilter>;
  /** Negates the expression. */
  not?: InputMaybe<DataTableFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<DataTableFilter>>;
  /** Filter by the object’s `tableName` field. */
  tableName?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `DataTable` */
export type DataTableInput = {
  dataViewCode?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  fieldMap?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLookupTable?: InputMaybe<Scalars['Boolean']['input']>;
  tableName: Scalars['String']['input'];
};

/** Represents an update to a `DataTable`. Fields that are set will be updated. */
export type DataTablePatch = {
  dataViewCode?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  fieldMap?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLookupTable?: InputMaybe<Scalars['Boolean']['input']>;
  tableName?: InputMaybe<Scalars['String']['input']>;
};

/** A connection to a list of `DataTable` values. */
export type DataTablesConnection = {
  __typename?: 'DataTablesConnection';
  /** A list of edges which contains the `DataTable` and cursor to aid in pagination. */
  edges: Array<DataTablesEdge>;
  /** A list of `DataTable` objects. */
  nodes: Array<Maybe<DataTable>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataTable` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `DataTable` edge in the connection. */
export type DataTablesEdge = {
  __typename?: 'DataTablesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `DataTable` at the end of the edge. */
  node?: Maybe<DataTable>;
};

/** Methods to use when ordering `DataTable`. */
export enum DataTablesOrderBy {
  DataViewCodeAsc = 'DATA_VIEW_CODE_ASC',
  DataViewCodeDesc = 'DATA_VIEW_CODE_DESC',
  DisplayNameAsc = 'DISPLAY_NAME_ASC',
  DisplayNameDesc = 'DISPLAY_NAME_DESC',
  FieldMapAsc = 'FIELD_MAP_ASC',
  FieldMapDesc = 'FIELD_MAP_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsLookupTableAsc = 'IS_LOOKUP_TABLE_ASC',
  IsLookupTableDesc = 'IS_LOOKUP_TABLE_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  TableNameAsc = 'TABLE_NAME_ASC',
  TableNameDesc = 'TABLE_NAME_DESC'
}

export type DataView = Node & {
  __typename?: 'DataView';
  code: Scalars['String']['output'];
  defaultFilterString?: Maybe<Scalars['String']['output']>;
  defaultSortColumn?: Maybe<Scalars['String']['output']>;
  detailViewExcludeColumns?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  detailViewHeaderColumn: Scalars['String']['output'];
  detailViewIncludeColumns?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  enabled: Scalars['Boolean']['output'];
  filterExcludeColumns?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  filterIncludeColumns?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  id: Scalars['Int']['output'];
  identifier: Scalars['String']['output'];
  menuName?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  permissionNames?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  priority?: Maybe<Scalars['Int']['output']>;
  rawDataExcludeColumns?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  rawDataIncludeColumns?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  rowRestrictions?: Maybe<Scalars['JSON']['output']>;
  showLinkedApplications: Scalars['Boolean']['output'];
  submenu?: Maybe<Scalars['String']['output']>;
  tableName: Scalars['String']['output'];
  tableSearchColumns?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  tableViewExcludeColumns?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  tableViewIncludeColumns?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  title?: Maybe<Scalars['String']['output']>;
};

export type DataViewColumnDefinition = Node & {
  __typename?: 'DataViewColumnDefinition';
  additionalFormatting?: Maybe<Scalars['JSON']['output']>;
  columnName: Scalars['String']['output'];
  elementParameters?: Maybe<Scalars['JSON']['output']>;
  elementTypePluginCode?: Maybe<Scalars['String']['output']>;
  filterDataType?: Maybe<Scalars['String']['output']>;
  filterExpression?: Maybe<Scalars['JSON']['output']>;
  filterParameters?: Maybe<Scalars['JSON']['output']>;
  hideIfNull?: Maybe<Scalars['Boolean']['output']>;
  id: Scalars['Int']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  sortColumn?: Maybe<Scalars['String']['output']>;
  tableName?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  valueExpression?: Maybe<Scalars['JSON']['output']>;
};

/**
 * A condition to be used against `DataViewColumnDefinition` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type DataViewColumnDefinitionCondition = {
  /** Checks for equality with the object’s `additionalFormatting` field. */
  additionalFormatting?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `columnName` field. */
  columnName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `elementParameters` field. */
  elementParameters?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `elementTypePluginCode` field. */
  elementTypePluginCode?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `filterDataType` field. */
  filterDataType?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `filterExpression` field. */
  filterExpression?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `filterParameters` field. */
  filterParameters?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `hideIfNull` field. */
  hideIfNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `sortColumn` field. */
  sortColumn?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `tableName` field. */
  tableName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `title` field. */
  title?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `valueExpression` field. */
  valueExpression?: InputMaybe<Scalars['JSON']['input']>;
};

/** A filter to be used against `DataViewColumnDefinition` object types. All fields are combined with a logical ‘and.’ */
export type DataViewColumnDefinitionFilter = {
  /** Filter by the object’s `additionalFormatting` field. */
  additionalFormatting?: InputMaybe<JsonFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<DataViewColumnDefinitionFilter>>;
  /** Filter by the object’s `columnName` field. */
  columnName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `elementParameters` field. */
  elementParameters?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `elementTypePluginCode` field. */
  elementTypePluginCode?: InputMaybe<StringFilter>;
  /** Filter by the object’s `filterDataType` field. */
  filterDataType?: InputMaybe<StringFilter>;
  /** Filter by the object’s `filterExpression` field. */
  filterExpression?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `filterParameters` field. */
  filterParameters?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `hideIfNull` field. */
  hideIfNull?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<DataViewColumnDefinitionFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<DataViewColumnDefinitionFilter>>;
  /** Filter by the object’s `sortColumn` field. */
  sortColumn?: InputMaybe<StringFilter>;
  /** Filter by the object’s `tableName` field. */
  tableName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
  /** Filter by the object’s `valueExpression` field. */
  valueExpression?: InputMaybe<JsonFilter>;
};

/** An input for mutations affecting `DataViewColumnDefinition` */
export type DataViewColumnDefinitionInput = {
  additionalFormatting?: InputMaybe<Scalars['JSON']['input']>;
  columnName: Scalars['String']['input'];
  elementParameters?: InputMaybe<Scalars['JSON']['input']>;
  elementTypePluginCode?: InputMaybe<Scalars['String']['input']>;
  filterDataType?: InputMaybe<Scalars['String']['input']>;
  filterExpression?: InputMaybe<Scalars['JSON']['input']>;
  filterParameters?: InputMaybe<Scalars['JSON']['input']>;
  hideIfNull?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  sortColumn?: InputMaybe<Scalars['String']['input']>;
  tableName?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  valueExpression?: InputMaybe<Scalars['JSON']['input']>;
};

/** Represents an update to a `DataViewColumnDefinition`. Fields that are set will be updated. */
export type DataViewColumnDefinitionPatch = {
  additionalFormatting?: InputMaybe<Scalars['JSON']['input']>;
  columnName?: InputMaybe<Scalars['String']['input']>;
  elementParameters?: InputMaybe<Scalars['JSON']['input']>;
  elementTypePluginCode?: InputMaybe<Scalars['String']['input']>;
  filterDataType?: InputMaybe<Scalars['String']['input']>;
  filterExpression?: InputMaybe<Scalars['JSON']['input']>;
  filterParameters?: InputMaybe<Scalars['JSON']['input']>;
  hideIfNull?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  sortColumn?: InputMaybe<Scalars['String']['input']>;
  tableName?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  valueExpression?: InputMaybe<Scalars['JSON']['input']>;
};

/** A connection to a list of `DataViewColumnDefinition` values. */
export type DataViewColumnDefinitionsConnection = {
  __typename?: 'DataViewColumnDefinitionsConnection';
  /** A list of edges which contains the `DataViewColumnDefinition` and cursor to aid in pagination. */
  edges: Array<DataViewColumnDefinitionsEdge>;
  /** A list of `DataViewColumnDefinition` objects. */
  nodes: Array<Maybe<DataViewColumnDefinition>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataViewColumnDefinition` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `DataViewColumnDefinition` edge in the connection. */
export type DataViewColumnDefinitionsEdge = {
  __typename?: 'DataViewColumnDefinitionsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `DataViewColumnDefinition` at the end of the edge. */
  node?: Maybe<DataViewColumnDefinition>;
};

/** Methods to use when ordering `DataViewColumnDefinition`. */
export enum DataViewColumnDefinitionsOrderBy {
  AdditionalFormattingAsc = 'ADDITIONAL_FORMATTING_ASC',
  AdditionalFormattingDesc = 'ADDITIONAL_FORMATTING_DESC',
  ColumnNameAsc = 'COLUMN_NAME_ASC',
  ColumnNameDesc = 'COLUMN_NAME_DESC',
  ElementParametersAsc = 'ELEMENT_PARAMETERS_ASC',
  ElementParametersDesc = 'ELEMENT_PARAMETERS_DESC',
  ElementTypePluginCodeAsc = 'ELEMENT_TYPE_PLUGIN_CODE_ASC',
  ElementTypePluginCodeDesc = 'ELEMENT_TYPE_PLUGIN_CODE_DESC',
  FilterDataTypeAsc = 'FILTER_DATA_TYPE_ASC',
  FilterDataTypeDesc = 'FILTER_DATA_TYPE_DESC',
  FilterExpressionAsc = 'FILTER_EXPRESSION_ASC',
  FilterExpressionDesc = 'FILTER_EXPRESSION_DESC',
  FilterParametersAsc = 'FILTER_PARAMETERS_ASC',
  FilterParametersDesc = 'FILTER_PARAMETERS_DESC',
  HideIfNullAsc = 'HIDE_IF_NULL_ASC',
  HideIfNullDesc = 'HIDE_IF_NULL_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  SortColumnAsc = 'SORT_COLUMN_ASC',
  SortColumnDesc = 'SORT_COLUMN_DESC',
  TableNameAsc = 'TABLE_NAME_ASC',
  TableNameDesc = 'TABLE_NAME_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  ValueExpressionAsc = 'VALUE_EXPRESSION_ASC',
  ValueExpressionDesc = 'VALUE_EXPRESSION_DESC'
}

/**
 * A condition to be used against `DataView` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type DataViewCondition = {
  /** Checks for equality with the object’s `code` field. */
  code?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `defaultFilterString` field. */
  defaultFilterString?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `defaultSortColumn` field. */
  defaultSortColumn?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `detailViewExcludeColumns` field. */
  detailViewExcludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `detailViewHeaderColumn` field. */
  detailViewHeaderColumn?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `detailViewIncludeColumns` field. */
  detailViewIncludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `enabled` field. */
  enabled?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `filterExcludeColumns` field. */
  filterExcludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `filterIncludeColumns` field. */
  filterIncludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `identifier` field. */
  identifier?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `menuName` field. */
  menuName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `permissionNames` field. */
  permissionNames?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `priority` field. */
  priority?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `rawDataExcludeColumns` field. */
  rawDataExcludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `rawDataIncludeColumns` field. */
  rawDataIncludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `rowRestrictions` field. */
  rowRestrictions?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `showLinkedApplications` field. */
  showLinkedApplications?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `submenu` field. */
  submenu?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `tableName` field. */
  tableName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `tableSearchColumns` field. */
  tableSearchColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `tableViewExcludeColumns` field. */
  tableViewExcludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `tableViewIncludeColumns` field. */
  tableViewIncludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `title` field. */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** A filter to be used against `DataView` object types. All fields are combined with a logical ‘and.’ */
export type DataViewFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<DataViewFilter>>;
  /** Filter by the object’s `code` field. */
  code?: InputMaybe<StringFilter>;
  /** Filter by the object’s `defaultFilterString` field. */
  defaultFilterString?: InputMaybe<StringFilter>;
  /** Filter by the object’s `defaultSortColumn` field. */
  defaultSortColumn?: InputMaybe<StringFilter>;
  /** Filter by the object’s `detailViewExcludeColumns` field. */
  detailViewExcludeColumns?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `detailViewHeaderColumn` field. */
  detailViewHeaderColumn?: InputMaybe<StringFilter>;
  /** Filter by the object’s `detailViewIncludeColumns` field. */
  detailViewIncludeColumns?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `enabled` field. */
  enabled?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `filterExcludeColumns` field. */
  filterExcludeColumns?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `filterIncludeColumns` field. */
  filterIncludeColumns?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `identifier` field. */
  identifier?: InputMaybe<StringFilter>;
  /** Filter by the object’s `menuName` field. */
  menuName?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<DataViewFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<DataViewFilter>>;
  /** Filter by the object’s `permissionNames` field. */
  permissionNames?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `priority` field. */
  priority?: InputMaybe<IntFilter>;
  /** Filter by the object’s `rawDataExcludeColumns` field. */
  rawDataExcludeColumns?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `rawDataIncludeColumns` field. */
  rawDataIncludeColumns?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `rowRestrictions` field. */
  rowRestrictions?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `showLinkedApplications` field. */
  showLinkedApplications?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `submenu` field. */
  submenu?: InputMaybe<StringFilter>;
  /** Filter by the object’s `tableName` field. */
  tableName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `tableSearchColumns` field. */
  tableSearchColumns?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `tableViewExcludeColumns` field. */
  tableViewExcludeColumns?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `tableViewIncludeColumns` field. */
  tableViewIncludeColumns?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `DataView` */
export type DataViewInput = {
  code: Scalars['String']['input'];
  defaultFilterString?: InputMaybe<Scalars['String']['input']>;
  defaultSortColumn?: InputMaybe<Scalars['String']['input']>;
  detailViewExcludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  detailViewHeaderColumn: Scalars['String']['input'];
  detailViewIncludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  enabled?: InputMaybe<Scalars['Boolean']['input']>;
  filterExcludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filterIncludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  id?: InputMaybe<Scalars['Int']['input']>;
  identifier: Scalars['String']['input'];
  menuName?: InputMaybe<Scalars['String']['input']>;
  permissionNames?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  rawDataExcludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  rawDataIncludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  rowRestrictions?: InputMaybe<Scalars['JSON']['input']>;
  showLinkedApplications?: InputMaybe<Scalars['Boolean']['input']>;
  submenu?: InputMaybe<Scalars['String']['input']>;
  tableName: Scalars['String']['input'];
  tableSearchColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  tableViewExcludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  tableViewIncludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Represents an update to a `DataView`. Fields that are set will be updated. */
export type DataViewPatch = {
  code?: InputMaybe<Scalars['String']['input']>;
  defaultFilterString?: InputMaybe<Scalars['String']['input']>;
  defaultSortColumn?: InputMaybe<Scalars['String']['input']>;
  detailViewExcludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  detailViewHeaderColumn?: InputMaybe<Scalars['String']['input']>;
  detailViewIncludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  enabled?: InputMaybe<Scalars['Boolean']['input']>;
  filterExcludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filterIncludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  id?: InputMaybe<Scalars['Int']['input']>;
  identifier?: InputMaybe<Scalars['String']['input']>;
  menuName?: InputMaybe<Scalars['String']['input']>;
  permissionNames?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  rawDataExcludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  rawDataIncludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  rowRestrictions?: InputMaybe<Scalars['JSON']['input']>;
  showLinkedApplications?: InputMaybe<Scalars['Boolean']['input']>;
  submenu?: InputMaybe<Scalars['String']['input']>;
  tableName?: InputMaybe<Scalars['String']['input']>;
  tableSearchColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  tableViewExcludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  tableViewIncludeColumns?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** A connection to a list of `DataView` values. */
export type DataViewsConnection = {
  __typename?: 'DataViewsConnection';
  /** A list of edges which contains the `DataView` and cursor to aid in pagination. */
  edges: Array<DataViewsEdge>;
  /** A list of `DataView` objects. */
  nodes: Array<Maybe<DataView>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `DataView` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `DataView` edge in the connection. */
export type DataViewsEdge = {
  __typename?: 'DataViewsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `DataView` at the end of the edge. */
  node?: Maybe<DataView>;
};

/** Methods to use when ordering `DataView`. */
export enum DataViewsOrderBy {
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  DefaultFilterStringAsc = 'DEFAULT_FILTER_STRING_ASC',
  DefaultFilterStringDesc = 'DEFAULT_FILTER_STRING_DESC',
  DefaultSortColumnAsc = 'DEFAULT_SORT_COLUMN_ASC',
  DefaultSortColumnDesc = 'DEFAULT_SORT_COLUMN_DESC',
  DetailViewExcludeColumnsAsc = 'DETAIL_VIEW_EXCLUDE_COLUMNS_ASC',
  DetailViewExcludeColumnsDesc = 'DETAIL_VIEW_EXCLUDE_COLUMNS_DESC',
  DetailViewHeaderColumnAsc = 'DETAIL_VIEW_HEADER_COLUMN_ASC',
  DetailViewHeaderColumnDesc = 'DETAIL_VIEW_HEADER_COLUMN_DESC',
  DetailViewIncludeColumnsAsc = 'DETAIL_VIEW_INCLUDE_COLUMNS_ASC',
  DetailViewIncludeColumnsDesc = 'DETAIL_VIEW_INCLUDE_COLUMNS_DESC',
  EnabledAsc = 'ENABLED_ASC',
  EnabledDesc = 'ENABLED_DESC',
  FilterExcludeColumnsAsc = 'FILTER_EXCLUDE_COLUMNS_ASC',
  FilterExcludeColumnsDesc = 'FILTER_EXCLUDE_COLUMNS_DESC',
  FilterIncludeColumnsAsc = 'FILTER_INCLUDE_COLUMNS_ASC',
  FilterIncludeColumnsDesc = 'FILTER_INCLUDE_COLUMNS_DESC',
  IdentifierAsc = 'IDENTIFIER_ASC',
  IdentifierDesc = 'IDENTIFIER_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  MenuNameAsc = 'MENU_NAME_ASC',
  MenuNameDesc = 'MENU_NAME_DESC',
  Natural = 'NATURAL',
  PermissionNamesAsc = 'PERMISSION_NAMES_ASC',
  PermissionNamesDesc = 'PERMISSION_NAMES_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  PriorityAsc = 'PRIORITY_ASC',
  PriorityDesc = 'PRIORITY_DESC',
  RawDataExcludeColumnsAsc = 'RAW_DATA_EXCLUDE_COLUMNS_ASC',
  RawDataExcludeColumnsDesc = 'RAW_DATA_EXCLUDE_COLUMNS_DESC',
  RawDataIncludeColumnsAsc = 'RAW_DATA_INCLUDE_COLUMNS_ASC',
  RawDataIncludeColumnsDesc = 'RAW_DATA_INCLUDE_COLUMNS_DESC',
  RowRestrictionsAsc = 'ROW_RESTRICTIONS_ASC',
  RowRestrictionsDesc = 'ROW_RESTRICTIONS_DESC',
  ShowLinkedApplicationsAsc = 'SHOW_LINKED_APPLICATIONS_ASC',
  ShowLinkedApplicationsDesc = 'SHOW_LINKED_APPLICATIONS_DESC',
  SubmenuAsc = 'SUBMENU_ASC',
  SubmenuDesc = 'SUBMENU_DESC',
  TableNameAsc = 'TABLE_NAME_ASC',
  TableNameDesc = 'TABLE_NAME_DESC',
  TableSearchColumnsAsc = 'TABLE_SEARCH_COLUMNS_ASC',
  TableSearchColumnsDesc = 'TABLE_SEARCH_COLUMNS_DESC',
  TableViewExcludeColumnsAsc = 'TABLE_VIEW_EXCLUDE_COLUMNS_ASC',
  TableViewExcludeColumnsDesc = 'TABLE_VIEW_EXCLUDE_COLUMNS_DESC',
  TableViewIncludeColumnsAsc = 'TABLE_VIEW_INCLUDE_COLUMNS_ASC',
  TableViewIncludeColumnsDesc = 'TABLE_VIEW_INCLUDE_COLUMNS_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC'
}

/** A filter to be used against Date fields. All fields are combined with a logical ‘and.’ */
export type DateFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['Date']['input']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['Date']['input']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['Date']['input']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['Date']['input']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['Date']['input']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['Date']['input']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['Date']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['Date']['input']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['Date']['input']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['Date']['input']>>;
};

/** A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’ */
export type DatetimeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['Datetime']['input']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['Datetime']['input']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['Datetime']['input']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['Datetime']['input']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['Datetime']['input']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['Datetime']['input']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['Datetime']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['Datetime']['input']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['Datetime']['input']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['Datetime']['input']>>;
};

export enum Decision {
  ChangesRequested = 'CHANGES_REQUESTED',
  Conform = 'CONFORM',
  ListOfQuestions = 'LIST_OF_QUESTIONS',
  NonConform = 'NON_CONFORM',
  NoDecision = 'NO_DECISION'
}

/** A filter to be used against Decision fields. All fields are combined with a logical ‘and.’ */
export type DecisionFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Decision>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Decision>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Decision>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Decision>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Decision>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Decision>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Decision>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Decision>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Decision>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Decision>>;
};

/** All input for the `deleteActionPluginByCode` mutation. */
export type DeleteActionPluginByCodeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  code: Scalars['String']['input'];
};

/** All input for the `deleteActionPluginByNodeId` mutation. */
export type DeleteActionPluginByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ActionPlugin` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteActionPlugin` mutation. */
export type DeleteActionPluginInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `ActionPlugin` mutation. */
export type DeleteActionPluginPayload = {
  __typename?: 'DeleteActionPluginPayload';
  /** The `ActionPlugin` that was deleted by this mutation. */
  actionPlugin?: Maybe<ActionPlugin>;
  /** An edge for our `ActionPlugin`. May be used by Relay 1. */
  actionPluginEdge?: Maybe<ActionPluginsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedActionPluginNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `ActionPlugin` mutation. */
export type DeleteActionPluginPayloadActionPluginEdgeArgs = {
  orderBy?: InputMaybe<Array<ActionPluginsOrderBy>>;
};

/** All input for the `deleteActionQueueByNodeId` mutation. */
export type DeleteActionQueueByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ActionQueue` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteActionQueue` mutation. */
export type DeleteActionQueueInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `ActionQueue` mutation. */
export type DeleteActionQueuePayload = {
  __typename?: 'DeleteActionQueuePayload';
  /** The `ActionQueue` that was deleted by this mutation. */
  actionQueue?: Maybe<ActionQueue>;
  /** An edge for our `ActionQueue`. May be used by Relay 1. */
  actionQueueEdge?: Maybe<ActionQueuesEdge>;
  /** Reads a single `Application` that is related to this `ActionQueue`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedActionQueueNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `ActionQueue`. */
  template?: Maybe<Template>;
  /** Reads a single `TriggerQueue` that is related to this `ActionQueue`. */
  triggerQueueByTriggerEvent?: Maybe<TriggerQueue>;
};


/** The output of our delete `ActionQueue` mutation. */
export type DeleteActionQueuePayloadActionQueueEdgeArgs = {
  orderBy?: InputMaybe<Array<ActionQueuesOrderBy>>;
};

/** All input for the `deleteActivityLogByNodeId` mutation. */
export type DeleteActivityLogByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ActivityLog` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteActivityLog` mutation. */
export type DeleteActivityLogInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `ActivityLog` mutation. */
export type DeleteActivityLogPayload = {
  __typename?: 'DeleteActivityLogPayload';
  /** The `ActivityLog` that was deleted by this mutation. */
  activityLog?: Maybe<ActivityLog>;
  /** An edge for our `ActivityLog`. May be used by Relay 1. */
  activityLogEdge?: Maybe<ActivityLogsEdge>;
  /** Reads a single `Application` that is related to this `ActivityLog`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedActivityLogNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `ActivityLog` mutation. */
export type DeleteActivityLogPayloadActivityLogEdgeArgs = {
  orderBy?: InputMaybe<Array<ActivityLogsOrderBy>>;
};

/** All input for the `deleteApplicationByNodeId` mutation. */
export type DeleteApplicationByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `Application` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteApplicationByOutcomeRegistration` mutation. */
export type DeleteApplicationByOutcomeRegistrationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  outcomeRegistration: Scalars['String']['input'];
};

/** All input for the `deleteApplicationBySerial` mutation. */
export type DeleteApplicationBySerialInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  serial: Scalars['String']['input'];
};

/** All input for the `deleteApplication` mutation. */
export type DeleteApplicationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** All input for the `deleteApplicationNoteByNodeId` mutation. */
export type DeleteApplicationNoteByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ApplicationNote` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteApplicationNote` mutation. */
export type DeleteApplicationNoteInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `ApplicationNote` mutation. */
export type DeleteApplicationNotePayload = {
  __typename?: 'DeleteApplicationNotePayload';
  /** Reads a single `Application` that is related to this `ApplicationNote`. */
  application?: Maybe<Application>;
  /** The `ApplicationNote` that was deleted by this mutation. */
  applicationNote?: Maybe<ApplicationNote>;
  /** An edge for our `ApplicationNote`. May be used by Relay 1. */
  applicationNoteEdge?: Maybe<ApplicationNotesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedApplicationNoteNodeId?: Maybe<Scalars['ID']['output']>;
  /** Reads a single `Organisation` that is related to this `ApplicationNote`. */
  org?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `UserList` that is related to this `ApplicationNote`. */
  user?: Maybe<UserList>;
};


/** The output of our delete `ApplicationNote` mutation. */
export type DeleteApplicationNotePayloadApplicationNoteEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationNotesOrderBy>>;
};

/** The output of our delete `Application` mutation. */
export type DeleteApplicationPayload = {
  __typename?: 'DeleteApplicationPayload';
  /** The `Application` that was deleted by this mutation. */
  application?: Maybe<Application>;
  /** An edge for our `Application`. May be used by Relay 1. */
  applicationEdge?: Maybe<ApplicationsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedApplicationNodeId?: Maybe<Scalars['ID']['output']>;
  /** Reads a single `Organisation` that is related to this `Application`. */
  org?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `Application`. */
  template?: Maybe<Template>;
  /** Reads a single `UserList` that is related to this `Application`. */
  user?: Maybe<UserList>;
};


/** The output of our delete `Application` mutation. */
export type DeleteApplicationPayloadApplicationEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationsOrderBy>>;
};

/** All input for the `deleteApplicationResponseByNodeId` mutation. */
export type DeleteApplicationResponseByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ApplicationResponse` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteApplicationResponse` mutation. */
export type DeleteApplicationResponseInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `ApplicationResponse` mutation. */
export type DeleteApplicationResponsePayload = {
  __typename?: 'DeleteApplicationResponsePayload';
  /** Reads a single `Application` that is related to this `ApplicationResponse`. */
  application?: Maybe<Application>;
  /** The `ApplicationResponse` that was deleted by this mutation. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /** An edge for our `ApplicationResponse`. May be used by Relay 1. */
  applicationResponseEdge?: Maybe<ApplicationResponsesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedApplicationResponseNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateElement` that is related to this `ApplicationResponse`. */
  templateElement?: Maybe<TemplateElement>;
};


/** The output of our delete `ApplicationResponse` mutation. */
export type DeleteApplicationResponsePayloadApplicationResponseEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationResponsesOrderBy>>;
};

/** All input for the `deleteApplicationReviewerActionByNodeId` mutation. */
export type DeleteApplicationReviewerActionByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ApplicationReviewerAction` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteApplicationReviewerActionByUserIdAndApplicationId` mutation. */
export type DeleteApplicationReviewerActionByUserIdAndApplicationIdInput = {
  applicationId: Scalars['Int']['input'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  userId: Scalars['Int']['input'];
};

/** All input for the `deleteApplicationReviewerAction` mutation. */
export type DeleteApplicationReviewerActionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `ApplicationReviewerAction` mutation. */
export type DeleteApplicationReviewerActionPayload = {
  __typename?: 'DeleteApplicationReviewerActionPayload';
  /** Reads a single `Application` that is related to this `ApplicationReviewerAction`. */
  application?: Maybe<Application>;
  /** The `ApplicationReviewerAction` that was deleted by this mutation. */
  applicationReviewerAction?: Maybe<ApplicationReviewerAction>;
  /** An edge for our `ApplicationReviewerAction`. May be used by Relay 1. */
  applicationReviewerActionEdge?: Maybe<ApplicationReviewerActionsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedApplicationReviewerActionNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `ApplicationReviewerAction` mutation. */
export type DeleteApplicationReviewerActionPayloadApplicationReviewerActionEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationReviewerActionsOrderBy>>;
};

/** All input for the `deleteApplicationStageHistoryByNodeId` mutation. */
export type DeleteApplicationStageHistoryByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ApplicationStageHistory` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteApplicationStageHistory` mutation. */
export type DeleteApplicationStageHistoryInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `ApplicationStageHistory` mutation. */
export type DeleteApplicationStageHistoryPayload = {
  __typename?: 'DeleteApplicationStageHistoryPayload';
  /** Reads a single `Application` that is related to this `ApplicationStageHistory`. */
  application?: Maybe<Application>;
  /** The `ApplicationStageHistory` that was deleted by this mutation. */
  applicationStageHistory?: Maybe<ApplicationStageHistory>;
  /** An edge for our `ApplicationStageHistory`. May be used by Relay 1. */
  applicationStageHistoryEdge?: Maybe<ApplicationStageHistoriesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedApplicationStageHistoryNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateStage` that is related to this `ApplicationStageHistory`. */
  stage?: Maybe<TemplateStage>;
};


/** The output of our delete `ApplicationStageHistory` mutation. */
export type DeleteApplicationStageHistoryPayloadApplicationStageHistoryEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationStageHistoriesOrderBy>>;
};

/** All input for the `deleteApplicationStatusHistoryByNodeId` mutation. */
export type DeleteApplicationStatusHistoryByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ApplicationStatusHistory` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteApplicationStatusHistory` mutation. */
export type DeleteApplicationStatusHistoryInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `ApplicationStatusHistory` mutation. */
export type DeleteApplicationStatusHistoryPayload = {
  __typename?: 'DeleteApplicationStatusHistoryPayload';
  /** Reads a single `ApplicationStageHistory` that is related to this `ApplicationStatusHistory`. */
  applicationStageHistory?: Maybe<ApplicationStageHistory>;
  /** The `ApplicationStatusHistory` that was deleted by this mutation. */
  applicationStatusHistory?: Maybe<ApplicationStatusHistory>;
  /** An edge for our `ApplicationStatusHistory`. May be used by Relay 1. */
  applicationStatusHistoryEdge?: Maybe<ApplicationStatusHistoriesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedApplicationStatusHistoryNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `ApplicationStatusHistory` mutation. */
export type DeleteApplicationStatusHistoryPayloadApplicationStatusHistoryEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationStatusHistoriesOrderBy>>;
};

/** All input for the `deleteCounterByName` mutation. */
export type DeleteCounterByNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
};

/** All input for the `deleteCounterByNodeId` mutation. */
export type DeleteCounterByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `Counter` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteCounter` mutation. */
export type DeleteCounterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `Counter` mutation. */
export type DeleteCounterPayload = {
  __typename?: 'DeleteCounterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `Counter` that was deleted by this mutation. */
  counter?: Maybe<Counter>;
  /** An edge for our `Counter`. May be used by Relay 1. */
  counterEdge?: Maybe<CountersEdge>;
  deletedCounterNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `Counter` mutation. */
export type DeleteCounterPayloadCounterEdgeArgs = {
  orderBy?: InputMaybe<Array<CountersOrderBy>>;
};

/** All input for the `deleteDataChangelogByNodeId` mutation. */
export type DeleteDataChangelogByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `DataChangelog` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteDataChangelog` mutation. */
export type DeleteDataChangelogInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `DataChangelog` mutation. */
export type DeleteDataChangelogPayload = {
  __typename?: 'DeleteDataChangelogPayload';
  /** Reads a single `Application` that is related to this `DataChangelog`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `DataChangelog` that was deleted by this mutation. */
  dataChangelog?: Maybe<DataChangelog>;
  /** An edge for our `DataChangelog`. May be used by Relay 1. */
  dataChangelogEdge?: Maybe<DataChangelogsEdge>;
  deletedDataChangelogNodeId?: Maybe<Scalars['ID']['output']>;
  /** Reads a single `Organisation` that is related to this `DataChangelog`. */
  org?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `DataChangelog` mutation. */
export type DeleteDataChangelogPayloadDataChangelogEdgeArgs = {
  orderBy?: InputMaybe<Array<DataChangelogsOrderBy>>;
};

/** All input for the `deleteDataTableByNodeId` mutation. */
export type DeleteDataTableByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `DataTable` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteDataTableByTableName` mutation. */
export type DeleteDataTableByTableNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  tableName: Scalars['String']['input'];
};

/** All input for the `deleteDataTable` mutation. */
export type DeleteDataTableInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `DataTable` mutation. */
export type DeleteDataTablePayload = {
  __typename?: 'DeleteDataTablePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `DataTable` that was deleted by this mutation. */
  dataTable?: Maybe<DataTable>;
  /** An edge for our `DataTable`. May be used by Relay 1. */
  dataTableEdge?: Maybe<DataTablesEdge>;
  deletedDataTableNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `DataTable` mutation. */
export type DeleteDataTablePayloadDataTableEdgeArgs = {
  orderBy?: InputMaybe<Array<DataTablesOrderBy>>;
};

/** All input for the `deleteDataViewByIdentifier` mutation. */
export type DeleteDataViewByIdentifierInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  identifier: Scalars['String']['input'];
};

/** All input for the `deleteDataViewByNodeId` mutation. */
export type DeleteDataViewByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `DataView` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteDataViewColumnDefinitionByNodeId` mutation. */
export type DeleteDataViewColumnDefinitionByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `DataViewColumnDefinition` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteDataViewColumnDefinitionByTableNameAndColumnName` mutation. */
export type DeleteDataViewColumnDefinitionByTableNameAndColumnNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  columnName: Scalars['String']['input'];
  tableName: Scalars['String']['input'];
};

/** All input for the `deleteDataViewColumnDefinition` mutation. */
export type DeleteDataViewColumnDefinitionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `DataViewColumnDefinition` mutation. */
export type DeleteDataViewColumnDefinitionPayload = {
  __typename?: 'DeleteDataViewColumnDefinitionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `DataViewColumnDefinition` that was deleted by this mutation. */
  dataViewColumnDefinition?: Maybe<DataViewColumnDefinition>;
  /** An edge for our `DataViewColumnDefinition`. May be used by Relay 1. */
  dataViewColumnDefinitionEdge?: Maybe<DataViewColumnDefinitionsEdge>;
  deletedDataViewColumnDefinitionNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `DataViewColumnDefinition` mutation. */
export type DeleteDataViewColumnDefinitionPayloadDataViewColumnDefinitionEdgeArgs = {
  orderBy?: InputMaybe<Array<DataViewColumnDefinitionsOrderBy>>;
};

/** All input for the `deleteDataView` mutation. */
export type DeleteDataViewInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `DataView` mutation. */
export type DeleteDataViewPayload = {
  __typename?: 'DeleteDataViewPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `DataView` that was deleted by this mutation. */
  dataView?: Maybe<DataView>;
  /** An edge for our `DataView`. May be used by Relay 1. */
  dataViewEdge?: Maybe<DataViewsEdge>;
  deletedDataViewNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `DataView` mutation. */
export type DeleteDataViewPayloadDataViewEdgeArgs = {
  orderBy?: InputMaybe<Array<DataViewsOrderBy>>;
};

/** All input for the `deleteElementTypePluginByNodeId` mutation. */
export type DeleteElementTypePluginByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ElementTypePlugin` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteElementTypePlugin` mutation. */
export type DeleteElementTypePluginInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  code: Scalars['String']['input'];
};

/** The output of our delete `ElementTypePlugin` mutation. */
export type DeleteElementTypePluginPayload = {
  __typename?: 'DeleteElementTypePluginPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedElementTypePluginNodeId?: Maybe<Scalars['ID']['output']>;
  /** The `ElementTypePlugin` that was deleted by this mutation. */
  elementTypePlugin?: Maybe<ElementTypePlugin>;
  /** An edge for our `ElementTypePlugin`. May be used by Relay 1. */
  elementTypePluginEdge?: Maybe<ElementTypePluginsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `ElementTypePlugin` mutation. */
export type DeleteElementTypePluginPayloadElementTypePluginEdgeArgs = {
  orderBy?: InputMaybe<Array<ElementTypePluginsOrderBy>>;
};

/** All input for the `deleteFileByNodeId` mutation. */
export type DeleteFileByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `File` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteFileByUniqueId` mutation. */
export type DeleteFileByUniqueIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  uniqueId: Scalars['String']['input'];
};

/** All input for the `deleteFile` mutation. */
export type DeleteFileInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `File` mutation. */
export type DeleteFilePayload = {
  __typename?: 'DeleteFilePayload';
  /** Reads a single `Application` that is related to this `File`. */
  applicationByApplicationSerial?: Maybe<Application>;
  /** Reads a single `ApplicationNote` that is related to this `File`. */
  applicationNote?: Maybe<ApplicationNote>;
  /** Reads a single `ApplicationResponse` that is related to this `File`. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedFileNodeId?: Maybe<Scalars['ID']['output']>;
  /** The `File` that was deleted by this mutation. */
  file?: Maybe<File>;
  /** An edge for our `File`. May be used by Relay 1. */
  fileEdge?: Maybe<FilesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `File`. */
  template?: Maybe<Template>;
};


/** The output of our delete `File` mutation. */
export type DeleteFilePayloadFileEdgeArgs = {
  orderBy?: InputMaybe<Array<FilesOrderBy>>;
};

/** All input for the `deleteFilterByCode` mutation. */
export type DeleteFilterByCodeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  code: Scalars['String']['input'];
};

/** All input for the `deleteFilterByNodeId` mutation. */
export type DeleteFilterByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `Filter` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteFilter` mutation. */
export type DeleteFilterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `Filter` mutation. */
export type DeleteFilterPayload = {
  __typename?: 'DeleteFilterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedFilterNodeId?: Maybe<Scalars['ID']['output']>;
  /** The `Filter` that was deleted by this mutation. */
  filter?: Maybe<Filter>;
  /** An edge for our `Filter`. May be used by Relay 1. */
  filterEdge?: Maybe<FiltersEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `Filter` mutation. */
export type DeleteFilterPayloadFilterEdgeArgs = {
  orderBy?: InputMaybe<Array<FiltersOrderBy>>;
};

/** All input for the `deleteNotificationByNodeId` mutation. */
export type DeleteNotificationByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `Notification` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteNotification` mutation. */
export type DeleteNotificationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `Notification` mutation. */
export type DeleteNotificationPayload = {
  __typename?: 'DeleteNotificationPayload';
  /** Reads a single `Application` that is related to this `Notification`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedNotificationNodeId?: Maybe<Scalars['ID']['output']>;
  /** The `Notification` that was deleted by this mutation. */
  notification?: Maybe<Notification>;
  /** An edge for our `Notification`. May be used by Relay 1. */
  notificationEdge?: Maybe<NotificationsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Review` that is related to this `Notification`. */
  review?: Maybe<Review>;
};


/** The output of our delete `Notification` mutation. */
export type DeleteNotificationPayloadNotificationEdgeArgs = {
  orderBy?: InputMaybe<Array<NotificationsOrderBy>>;
};

/** All input for the `deleteOrganisationByName` mutation. */
export type DeleteOrganisationByNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
};

/** All input for the `deleteOrganisationByNodeId` mutation. */
export type DeleteOrganisationByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `Organisation` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteOrganisationByRegistration` mutation. */
export type DeleteOrganisationByRegistrationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  registration: Scalars['String']['input'];
};

/** All input for the `deleteOrganisation` mutation. */
export type DeleteOrganisationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `Organisation` mutation. */
export type DeleteOrganisationPayload = {
  __typename?: 'DeleteOrganisationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedOrganisationNodeId?: Maybe<Scalars['ID']['output']>;
  /** The `Organisation` that was deleted by this mutation. */
  organisation?: Maybe<Organisation>;
  /** An edge for our `Organisation`. May be used by Relay 1. */
  organisationEdge?: Maybe<OrganisationsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `Organisation` mutation. */
export type DeleteOrganisationPayloadOrganisationEdgeArgs = {
  orderBy?: InputMaybe<Array<OrganisationsOrderBy>>;
};

/** All input for the `deletePermissionJoinByNodeId` mutation. */
export type DeletePermissionJoinByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `PermissionJoin` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deletePermissionJoin` mutation. */
export type DeletePermissionJoinInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `PermissionJoin` mutation. */
export type DeletePermissionJoinPayload = {
  __typename?: 'DeletePermissionJoinPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedPermissionJoinNodeId?: Maybe<Scalars['ID']['output']>;
  /** Reads a single `Organisation` that is related to this `PermissionJoin`. */
  organisation?: Maybe<Organisation>;
  /** The `PermissionJoin` that was deleted by this mutation. */
  permissionJoin?: Maybe<PermissionJoin>;
  /** An edge for our `PermissionJoin`. May be used by Relay 1. */
  permissionJoinEdge?: Maybe<PermissionJoinsEdge>;
  /** Reads a single `PermissionName` that is related to this `PermissionJoin`. */
  permissionName?: Maybe<PermissionName>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `UserList` that is related to this `PermissionJoin`. */
  user?: Maybe<UserList>;
};


/** The output of our delete `PermissionJoin` mutation. */
export type DeletePermissionJoinPayloadPermissionJoinEdgeArgs = {
  orderBy?: InputMaybe<Array<PermissionJoinsOrderBy>>;
};

/** All input for the `deletePermissionNameByName` mutation. */
export type DeletePermissionNameByNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
};

/** All input for the `deletePermissionNameByNodeId` mutation. */
export type DeletePermissionNameByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `PermissionName` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deletePermissionName` mutation. */
export type DeletePermissionNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `PermissionName` mutation. */
export type DeletePermissionNamePayload = {
  __typename?: 'DeletePermissionNamePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedPermissionNameNodeId?: Maybe<Scalars['ID']['output']>;
  /** The `PermissionName` that was deleted by this mutation. */
  permissionName?: Maybe<PermissionName>;
  /** An edge for our `PermissionName`. May be used by Relay 1. */
  permissionNameEdge?: Maybe<PermissionNamesEdge>;
  /** Reads a single `PermissionPolicy` that is related to this `PermissionName`. */
  permissionPolicy?: Maybe<PermissionPolicy>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `PermissionName` mutation. */
export type DeletePermissionNamePayloadPermissionNameEdgeArgs = {
  orderBy?: InputMaybe<Array<PermissionNamesOrderBy>>;
};

/** All input for the `deletePermissionPolicyByName` mutation. */
export type DeletePermissionPolicyByNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
};

/** All input for the `deletePermissionPolicyByNodeId` mutation. */
export type DeletePermissionPolicyByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `PermissionPolicy` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deletePermissionPolicy` mutation. */
export type DeletePermissionPolicyInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `PermissionPolicy` mutation. */
export type DeletePermissionPolicyPayload = {
  __typename?: 'DeletePermissionPolicyPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedPermissionPolicyNodeId?: Maybe<Scalars['ID']['output']>;
  /** The `PermissionPolicy` that was deleted by this mutation. */
  permissionPolicy?: Maybe<PermissionPolicy>;
  /** An edge for our `PermissionPolicy`. May be used by Relay 1. */
  permissionPolicyEdge?: Maybe<PermissionPoliciesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our delete `PermissionPolicy` mutation. */
export type DeletePermissionPolicyPayloadPermissionPolicyEdgeArgs = {
  orderBy?: InputMaybe<Array<PermissionPoliciesOrderBy>>;
};

/** All input for the `deleteReviewAssignmentAssignerJoinByNodeId` mutation. */
export type DeleteReviewAssignmentAssignerJoinByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ReviewAssignmentAssignerJoin` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteReviewAssignmentAssignerJoin` mutation. */
export type DeleteReviewAssignmentAssignerJoinInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `ReviewAssignmentAssignerJoin` mutation. */
export type DeleteReviewAssignmentAssignerJoinPayload = {
  __typename?: 'DeleteReviewAssignmentAssignerJoinPayload';
  /** Reads a single `UserList` that is related to this `ReviewAssignmentAssignerJoin`. */
  assigner?: Maybe<UserList>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedReviewAssignmentAssignerJoinNodeId?: Maybe<Scalars['ID']['output']>;
  /** Reads a single `Organisation` that is related to this `ReviewAssignmentAssignerJoin`. */
  organisation?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `ReviewAssignment` that is related to this `ReviewAssignmentAssignerJoin`. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** The `ReviewAssignmentAssignerJoin` that was deleted by this mutation. */
  reviewAssignmentAssignerJoin?: Maybe<ReviewAssignmentAssignerJoin>;
  /** An edge for our `ReviewAssignmentAssignerJoin`. May be used by Relay 1. */
  reviewAssignmentAssignerJoinEdge?: Maybe<ReviewAssignmentAssignerJoinsEdge>;
};


/** The output of our delete `ReviewAssignmentAssignerJoin` mutation. */
export type DeleteReviewAssignmentAssignerJoinPayloadReviewAssignmentAssignerJoinEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewAssignmentAssignerJoinsOrderBy>>;
};

/** All input for the `deleteReviewAssignmentByNodeId` mutation. */
export type DeleteReviewAssignmentByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ReviewAssignment` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteReviewAssignment` mutation. */
export type DeleteReviewAssignmentInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `ReviewAssignment` mutation. */
export type DeleteReviewAssignmentPayload = {
  __typename?: 'DeleteReviewAssignmentPayload';
  /** Reads a single `Application` that is related to this `ReviewAssignment`. */
  application?: Maybe<Application>;
  /** Reads a single `UserList` that is related to this `ReviewAssignment`. */
  assigner?: Maybe<UserList>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedReviewAssignmentNodeId?: Maybe<Scalars['ID']['output']>;
  /** Reads a single `TemplateStageReviewLevel` that is related to this `ReviewAssignment`. */
  level?: Maybe<TemplateStageReviewLevel>;
  /** Reads a single `Organisation` that is related to this `ReviewAssignment`. */
  organisation?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `ReviewAssignment` that was deleted by this mutation. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** An edge for our `ReviewAssignment`. May be used by Relay 1. */
  reviewAssignmentEdge?: Maybe<ReviewAssignmentsEdge>;
  /** Reads a single `UserList` that is related to this `ReviewAssignment`. */
  reviewer?: Maybe<UserList>;
  /** Reads a single `TemplateStage` that is related to this `ReviewAssignment`. */
  stage?: Maybe<TemplateStage>;
  /** Reads a single `Template` that is related to this `ReviewAssignment`. */
  template?: Maybe<Template>;
};


/** The output of our delete `ReviewAssignment` mutation. */
export type DeleteReviewAssignmentPayloadReviewAssignmentEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewAssignmentsOrderBy>>;
};

/** All input for the `deleteReviewByNodeId` mutation. */
export type DeleteReviewByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `Review` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteReviewByReviewAssignmentId` mutation. */
export type DeleteReviewByReviewAssignmentIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentId: Scalars['Int']['input'];
};

/** All input for the `deleteReviewDecisionByNodeId` mutation. */
export type DeleteReviewDecisionByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ReviewDecision` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteReviewDecision` mutation. */
export type DeleteReviewDecisionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `ReviewDecision` mutation. */
export type DeleteReviewDecisionPayload = {
  __typename?: 'DeleteReviewDecisionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedReviewDecisionNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Review` that is related to this `ReviewDecision`. */
  review?: Maybe<Review>;
  /** The `ReviewDecision` that was deleted by this mutation. */
  reviewDecision?: Maybe<ReviewDecision>;
  /** An edge for our `ReviewDecision`. May be used by Relay 1. */
  reviewDecisionEdge?: Maybe<ReviewDecisionsEdge>;
};


/** The output of our delete `ReviewDecision` mutation. */
export type DeleteReviewDecisionPayloadReviewDecisionEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewDecisionsOrderBy>>;
};

/** All input for the `deleteReview` mutation. */
export type DeleteReviewInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `Review` mutation. */
export type DeleteReviewPayload = {
  __typename?: 'DeleteReviewPayload';
  /** Reads a single `Application` that is related to this `Review`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedReviewNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Review` that was deleted by this mutation. */
  review?: Maybe<Review>;
  /** Reads a single `ReviewAssignment` that is related to this `Review`. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** An edge for our `Review`. May be used by Relay 1. */
  reviewEdge?: Maybe<ReviewsEdge>;
  /** Reads a single `UserList` that is related to this `Review`. */
  reviewer?: Maybe<UserList>;
};


/** The output of our delete `Review` mutation. */
export type DeleteReviewPayloadReviewEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewsOrderBy>>;
};

/** All input for the `deleteReviewResponseByNodeId` mutation. */
export type DeleteReviewResponseByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ReviewResponse` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteReviewResponse` mutation. */
export type DeleteReviewResponseInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `ReviewResponse` mutation. */
export type DeleteReviewResponsePayload = {
  __typename?: 'DeleteReviewResponsePayload';
  /** Reads a single `ApplicationResponse` that is related to this `ReviewResponse`. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedReviewResponseNodeId?: Maybe<Scalars['ID']['output']>;
  /** Reads a single `ReviewResponse` that is related to this `ReviewResponse`. */
  originalReviewResponse?: Maybe<ReviewResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Review` that is related to this `ReviewResponse`. */
  review?: Maybe<Review>;
  /** The `ReviewResponse` that was deleted by this mutation. */
  reviewResponse?: Maybe<ReviewResponse>;
  /** An edge for our `ReviewResponse`. May be used by Relay 1. */
  reviewResponseEdge?: Maybe<ReviewResponsesEdge>;
  /** Reads a single `ReviewResponse` that is related to this `ReviewResponse`. */
  reviewResponseLink?: Maybe<ReviewResponse>;
  /** Reads a single `TemplateElement` that is related to this `ReviewResponse`. */
  templateElement?: Maybe<TemplateElement>;
};


/** The output of our delete `ReviewResponse` mutation. */
export type DeleteReviewResponsePayloadReviewResponseEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewResponsesOrderBy>>;
};

/** All input for the `deleteReviewStatusHistoryByNodeId` mutation. */
export type DeleteReviewStatusHistoryByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ReviewStatusHistory` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteReviewStatusHistory` mutation. */
export type DeleteReviewStatusHistoryInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `ReviewStatusHistory` mutation. */
export type DeleteReviewStatusHistoryPayload = {
  __typename?: 'DeleteReviewStatusHistoryPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedReviewStatusHistoryNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Review` that is related to this `ReviewStatusHistory`. */
  review?: Maybe<Review>;
  /** The `ReviewStatusHistory` that was deleted by this mutation. */
  reviewStatusHistory?: Maybe<ReviewStatusHistory>;
  /** An edge for our `ReviewStatusHistory`. May be used by Relay 1. */
  reviewStatusHistoryEdge?: Maybe<ReviewStatusHistoriesEdge>;
};


/** The output of our delete `ReviewStatusHistory` mutation. */
export type DeleteReviewStatusHistoryPayloadReviewStatusHistoryEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewStatusHistoriesOrderBy>>;
};

/** All input for the `deleteSystemInfoByNodeId` mutation. */
export type DeleteSystemInfoByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `SystemInfo` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteSystemInfo` mutation. */
export type DeleteSystemInfoInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `SystemInfo` mutation. */
export type DeleteSystemInfoPayload = {
  __typename?: 'DeleteSystemInfoPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedSystemInfoNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `SystemInfo` that was deleted by this mutation. */
  systemInfo?: Maybe<SystemInfo>;
  /** An edge for our `SystemInfo`. May be used by Relay 1. */
  systemInfoEdge?: Maybe<SystemInfosEdge>;
};


/** The output of our delete `SystemInfo` mutation. */
export type DeleteSystemInfoPayloadSystemInfoEdgeArgs = {
  orderBy?: InputMaybe<Array<SystemInfosOrderBy>>;
};

/** All input for the `deleteTemplateActionByNodeId` mutation. */
export type DeleteTemplateActionByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TemplateAction` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteTemplateAction` mutation. */
export type DeleteTemplateActionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `TemplateAction` mutation. */
export type DeleteTemplateActionPayload = {
  __typename?: 'DeleteTemplateActionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedTemplateActionNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateAction`. */
  template?: Maybe<Template>;
  /** The `TemplateAction` that was deleted by this mutation. */
  templateAction?: Maybe<TemplateAction>;
  /** An edge for our `TemplateAction`. May be used by Relay 1. */
  templateActionEdge?: Maybe<TemplateActionsEdge>;
};


/** The output of our delete `TemplateAction` mutation. */
export type DeleteTemplateActionPayloadTemplateActionEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateActionsOrderBy>>;
};

/** All input for the `deleteTemplateByCodeAndVersionId` mutation. */
export type DeleteTemplateByCodeAndVersionIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  code: Scalars['String']['input'];
  versionId: Scalars['String']['input'];
};

/** All input for the `deleteTemplateByNodeId` mutation. */
export type DeleteTemplateByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `Template` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteTemplateCategoryByCode` mutation. */
export type DeleteTemplateCategoryByCodeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  code: Scalars['String']['input'];
};

/** All input for the `deleteTemplateCategoryByNodeId` mutation. */
export type DeleteTemplateCategoryByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TemplateCategory` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteTemplateCategory` mutation. */
export type DeleteTemplateCategoryInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `TemplateCategory` mutation. */
export type DeleteTemplateCategoryPayload = {
  __typename?: 'DeleteTemplateCategoryPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedTemplateCategoryNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `TemplateCategory` that was deleted by this mutation. */
  templateCategory?: Maybe<TemplateCategory>;
  /** An edge for our `TemplateCategory`. May be used by Relay 1. */
  templateCategoryEdge?: Maybe<TemplateCategoriesEdge>;
};


/** The output of our delete `TemplateCategory` mutation. */
export type DeleteTemplateCategoryPayloadTemplateCategoryEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateCategoriesOrderBy>>;
};

/** All input for the `deleteTemplateElementByNodeId` mutation. */
export type DeleteTemplateElementByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TemplateElement` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteTemplateElementByTemplateCodeAndCodeAndTemplateVersion` mutation. */
export type DeleteTemplateElementByTemplateCodeAndCodeAndTemplateVersionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  code: Scalars['String']['input'];
  templateCode: Scalars['String']['input'];
  templateVersion: Scalars['String']['input'];
};

/** All input for the `deleteTemplateElement` mutation. */
export type DeleteTemplateElementInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `TemplateElement` mutation. */
export type DeleteTemplateElementPayload = {
  __typename?: 'DeleteTemplateElementPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedTemplateElementNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateSection` that is related to this `TemplateElement`. */
  section?: Maybe<TemplateSection>;
  /** The `TemplateElement` that was deleted by this mutation. */
  templateElement?: Maybe<TemplateElement>;
  /** An edge for our `TemplateElement`. May be used by Relay 1. */
  templateElementEdge?: Maybe<TemplateElementsEdge>;
};


/** The output of our delete `TemplateElement` mutation. */
export type DeleteTemplateElementPayloadTemplateElementEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateElementsOrderBy>>;
};

/** All input for the `deleteTemplateFilterJoinByNodeId` mutation. */
export type DeleteTemplateFilterJoinByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TemplateFilterJoin` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteTemplateFilterJoin` mutation. */
export type DeleteTemplateFilterJoinInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `TemplateFilterJoin` mutation. */
export type DeleteTemplateFilterJoinPayload = {
  __typename?: 'DeleteTemplateFilterJoinPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedTemplateFilterJoinNodeId?: Maybe<Scalars['ID']['output']>;
  /** Reads a single `Filter` that is related to this `TemplateFilterJoin`. */
  filter?: Maybe<Filter>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateFilterJoin`. */
  template?: Maybe<Template>;
  /** The `TemplateFilterJoin` that was deleted by this mutation. */
  templateFilterJoin?: Maybe<TemplateFilterJoin>;
  /** An edge for our `TemplateFilterJoin`. May be used by Relay 1. */
  templateFilterJoinEdge?: Maybe<TemplateFilterJoinsEdge>;
};


/** The output of our delete `TemplateFilterJoin` mutation. */
export type DeleteTemplateFilterJoinPayloadTemplateFilterJoinEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateFilterJoinsOrderBy>>;
};

/** All input for the `deleteTemplate` mutation. */
export type DeleteTemplateInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `Template` mutation. */
export type DeleteTemplatePayload = {
  __typename?: 'DeleteTemplatePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedTemplateNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Template` that was deleted by this mutation. */
  template?: Maybe<Template>;
  /** Reads a single `TemplateCategory` that is related to this `Template`. */
  templateCategory?: Maybe<TemplateCategory>;
  /** An edge for our `Template`. May be used by Relay 1. */
  templateEdge?: Maybe<TemplatesEdge>;
};


/** The output of our delete `Template` mutation. */
export type DeleteTemplatePayloadTemplateEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplatesOrderBy>>;
};

/** All input for the `deleteTemplatePermissionByNodeId` mutation. */
export type DeleteTemplatePermissionByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TemplatePermission` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteTemplatePermission` mutation. */
export type DeleteTemplatePermissionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `TemplatePermission` mutation. */
export type DeleteTemplatePermissionPayload = {
  __typename?: 'DeleteTemplatePermissionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedTemplatePermissionNodeId?: Maybe<Scalars['ID']['output']>;
  /** Reads a single `PermissionName` that is related to this `TemplatePermission`. */
  permissionName?: Maybe<PermissionName>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplatePermission`. */
  template?: Maybe<Template>;
  /** The `TemplatePermission` that was deleted by this mutation. */
  templatePermission?: Maybe<TemplatePermission>;
  /** An edge for our `TemplatePermission`. May be used by Relay 1. */
  templatePermissionEdge?: Maybe<TemplatePermissionsEdge>;
};


/** The output of our delete `TemplatePermission` mutation. */
export type DeleteTemplatePermissionPayloadTemplatePermissionEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplatePermissionsOrderBy>>;
};

/** All input for the `deleteTemplateSectionByNodeId` mutation. */
export type DeleteTemplateSectionByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TemplateSection` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteTemplateSectionByTemplateIdAndCode` mutation. */
export type DeleteTemplateSectionByTemplateIdAndCodeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  code: Scalars['String']['input'];
  templateId: Scalars['Int']['input'];
};

/** All input for the `deleteTemplateSection` mutation. */
export type DeleteTemplateSectionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `TemplateSection` mutation. */
export type DeleteTemplateSectionPayload = {
  __typename?: 'DeleteTemplateSectionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedTemplateSectionNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateSection`. */
  template?: Maybe<Template>;
  /** The `TemplateSection` that was deleted by this mutation. */
  templateSection?: Maybe<TemplateSection>;
  /** An edge for our `TemplateSection`. May be used by Relay 1. */
  templateSectionEdge?: Maybe<TemplateSectionsEdge>;
};


/** The output of our delete `TemplateSection` mutation. */
export type DeleteTemplateSectionPayloadTemplateSectionEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateSectionsOrderBy>>;
};

/** All input for the `deleteTemplateStageByNodeId` mutation. */
export type DeleteTemplateStageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TemplateStage` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteTemplateStage` mutation. */
export type DeleteTemplateStageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `TemplateStage` mutation. */
export type DeleteTemplateStagePayload = {
  __typename?: 'DeleteTemplateStagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedTemplateStageNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateStage`. */
  template?: Maybe<Template>;
  /** The `TemplateStage` that was deleted by this mutation. */
  templateStage?: Maybe<TemplateStage>;
  /** An edge for our `TemplateStage`. May be used by Relay 1. */
  templateStageEdge?: Maybe<TemplateStagesEdge>;
};


/** The output of our delete `TemplateStage` mutation. */
export type DeleteTemplateStagePayloadTemplateStageEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateStagesOrderBy>>;
};

/** All input for the `deleteTemplateStageReviewLevelByNodeId` mutation. */
export type DeleteTemplateStageReviewLevelByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TemplateStageReviewLevel` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteTemplateStageReviewLevel` mutation. */
export type DeleteTemplateStageReviewLevelInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `TemplateStageReviewLevel` mutation. */
export type DeleteTemplateStageReviewLevelPayload = {
  __typename?: 'DeleteTemplateStageReviewLevelPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedTemplateStageReviewLevelNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateStage` that is related to this `TemplateStageReviewLevel`. */
  stage?: Maybe<TemplateStage>;
  /** The `TemplateStageReviewLevel` that was deleted by this mutation. */
  templateStageReviewLevel?: Maybe<TemplateStageReviewLevel>;
  /** An edge for our `TemplateStageReviewLevel`. May be used by Relay 1. */
  templateStageReviewLevelEdge?: Maybe<TemplateStageReviewLevelsEdge>;
};


/** The output of our delete `TemplateStageReviewLevel` mutation. */
export type DeleteTemplateStageReviewLevelPayloadTemplateStageReviewLevelEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateStageReviewLevelsOrderBy>>;
};

/** All input for the `deleteTriggerQueueByNodeId` mutation. */
export type DeleteTriggerQueueByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TriggerQueue` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteTriggerQueue` mutation. */
export type DeleteTriggerQueueInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `TriggerQueue` mutation. */
export type DeleteTriggerQueuePayload = {
  __typename?: 'DeleteTriggerQueuePayload';
  /** Reads a single `Application` that is related to this `TriggerQueue`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedTriggerQueueNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `TriggerQueue` that was deleted by this mutation. */
  triggerQueue?: Maybe<TriggerQueue>;
  /** An edge for our `TriggerQueue`. May be used by Relay 1. */
  triggerQueueEdge?: Maybe<TriggerQueuesEdge>;
};


/** The output of our delete `TriggerQueue` mutation. */
export type DeleteTriggerQueuePayloadTriggerQueueEdgeArgs = {
  orderBy?: InputMaybe<Array<TriggerQueuesOrderBy>>;
};

/** All input for the `deleteTriggerScheduleByNodeId` mutation. */
export type DeleteTriggerScheduleByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TriggerSchedule` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteTriggerSchedule` mutation. */
export type DeleteTriggerScheduleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `TriggerSchedule` mutation. */
export type DeleteTriggerSchedulePayload = {
  __typename?: 'DeleteTriggerSchedulePayload';
  /** Reads a single `Application` that is related to this `TriggerSchedule`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedTriggerScheduleNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TriggerSchedule`. */
  template?: Maybe<Template>;
  /** The `TriggerSchedule` that was deleted by this mutation. */
  triggerSchedule?: Maybe<TriggerSchedule>;
  /** An edge for our `TriggerSchedule`. May be used by Relay 1. */
  triggerScheduleEdge?: Maybe<TriggerSchedulesEdge>;
};


/** The output of our delete `TriggerSchedule` mutation. */
export type DeleteTriggerSchedulePayloadTriggerScheduleEdgeArgs = {
  orderBy?: InputMaybe<Array<TriggerSchedulesOrderBy>>;
};

/** All input for the `deleteUserOrganisationByNodeId` mutation. */
export type DeleteUserOrganisationByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `UserOrganisation` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteUserOrganisationByUserIdAndOrganisationId` mutation. */
export type DeleteUserOrganisationByUserIdAndOrganisationIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  organisationId: Scalars['Int']['input'];
  userId: Scalars['Int']['input'];
};

/** All input for the `deleteUserOrganisation` mutation. */
export type DeleteUserOrganisationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `UserOrganisation` mutation. */
export type DeleteUserOrganisationPayload = {
  __typename?: 'DeleteUserOrganisationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedUserOrganisationNodeId?: Maybe<Scalars['ID']['output']>;
  /** Reads a single `Organisation` that is related to this `UserOrganisation`. */
  organisation?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserOrganisation`. */
  user?: Maybe<User>;
  /** The `UserOrganisation` that was deleted by this mutation. */
  userOrganisation?: Maybe<UserOrganisation>;
  /** An edge for our `UserOrganisation`. May be used by Relay 1. */
  userOrganisationEdge?: Maybe<UserOrganisationsEdge>;
};


/** The output of our delete `UserOrganisation` mutation. */
export type DeleteUserOrganisationPayloadUserOrganisationEdgeArgs = {
  orderBy?: InputMaybe<Array<UserOrganisationsOrderBy>>;
};

/** All input for the `deleteVerificationByNodeId` mutation. */
export type DeleteVerificationByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `Verification` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** All input for the `deleteVerificationByUniqueId` mutation. */
export type DeleteVerificationByUniqueIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  uniqueId: Scalars['String']['input'];
};

/** All input for the `deleteVerification` mutation. */
export type DeleteVerificationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
};

/** The output of our delete `Verification` mutation. */
export type DeleteVerificationPayload = {
  __typename?: 'DeleteVerificationPayload';
  /** Reads a single `Application` that is related to this `Verification`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  deletedVerificationNodeId?: Maybe<Scalars['ID']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Verification` that was deleted by this mutation. */
  verification?: Maybe<Verification>;
  /** An edge for our `Verification`. May be used by Relay 1. */
  verificationEdge?: Maybe<VerificationsEdge>;
};


/** The output of our delete `Verification` mutation. */
export type DeleteVerificationPayloadVerificationEdgeArgs = {
  orderBy?: InputMaybe<Array<VerificationsOrderBy>>;
};

/** All input for the `deleteWholeApplication` mutation. */
export type DeleteWholeApplicationInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
};

/** The output of our `deleteWholeApplication` mutation. */
export type DeleteWholeApplicationPayload = {
  __typename?: 'DeleteWholeApplicationPayload';
  boolean?: Maybe<Scalars['Boolean']['output']>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};

export type ElementTypePlugin = Node & {
  __typename?: 'ElementTypePlugin';
  category?: Maybe<TemplateElementCategory>;
  code: Scalars['String']['output'];
  configComponentName?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  displayComponentName?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  path?: Maybe<Scalars['String']['output']>;
  requiredParameters?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

/**
 * A condition to be used against `ElementTypePlugin` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type ElementTypePluginCondition = {
  /** Checks for equality with the object’s `category` field. */
  category?: InputMaybe<TemplateElementCategory>;
  /** Checks for equality with the object’s `code` field. */
  code?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `configComponentName` field. */
  configComponentName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `description` field. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `displayComponentName` field. */
  displayComponentName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `name` field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `path` field. */
  path?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `requiredParameters` field. */
  requiredParameters?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

/** A filter to be used against `ElementTypePlugin` object types. All fields are combined with a logical ‘and.’ */
export type ElementTypePluginFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ElementTypePluginFilter>>;
  /** Filter by the object’s `category` field. */
  category?: InputMaybe<TemplateElementCategoryFilter>;
  /** Filter by the object’s `code` field. */
  code?: InputMaybe<StringFilter>;
  /** Filter by the object’s `configComponentName` field. */
  configComponentName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: InputMaybe<StringFilter>;
  /** Filter by the object’s `displayComponentName` field. */
  displayComponentName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `name` field. */
  name?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ElementTypePluginFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ElementTypePluginFilter>>;
  /** Filter by the object’s `path` field. */
  path?: InputMaybe<StringFilter>;
  /** Filter by the object’s `requiredParameters` field. */
  requiredParameters?: InputMaybe<StringListFilter>;
};

/** An input for mutations affecting `ElementTypePlugin` */
export type ElementTypePluginInput = {
  category?: InputMaybe<TemplateElementCategory>;
  code: Scalars['String']['input'];
  configComponentName?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayComponentName?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  path?: InputMaybe<Scalars['String']['input']>;
  requiredParameters?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

/** Represents an update to a `ElementTypePlugin`. Fields that are set will be updated. */
export type ElementTypePluginPatch = {
  category?: InputMaybe<TemplateElementCategory>;
  code?: InputMaybe<Scalars['String']['input']>;
  configComponentName?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  displayComponentName?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  path?: InputMaybe<Scalars['String']['input']>;
  requiredParameters?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

/** A connection to a list of `ElementTypePlugin` values. */
export type ElementTypePluginsConnection = {
  __typename?: 'ElementTypePluginsConnection';
  /** A list of edges which contains the `ElementTypePlugin` and cursor to aid in pagination. */
  edges: Array<ElementTypePluginsEdge>;
  /** A list of `ElementTypePlugin` objects. */
  nodes: Array<Maybe<ElementTypePlugin>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ElementTypePlugin` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ElementTypePlugin` edge in the connection. */
export type ElementTypePluginsEdge = {
  __typename?: 'ElementTypePluginsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ElementTypePlugin` at the end of the edge. */
  node?: Maybe<ElementTypePlugin>;
};

/** Methods to use when ordering `ElementTypePlugin`. */
export enum ElementTypePluginsOrderBy {
  CategoryAsc = 'CATEGORY_ASC',
  CategoryDesc = 'CATEGORY_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ConfigComponentNameAsc = 'CONFIG_COMPONENT_NAME_ASC',
  ConfigComponentNameDesc = 'CONFIG_COMPONENT_NAME_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  DisplayComponentNameAsc = 'DISPLAY_COMPONENT_NAME_ASC',
  DisplayComponentNameDesc = 'DISPLAY_COMPONENT_NAME_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  Natural = 'NATURAL',
  PathAsc = 'PATH_ASC',
  PathDesc = 'PATH_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RequiredParametersAsc = 'REQUIRED_PARAMETERS_ASC',
  RequiredParametersDesc = 'REQUIRED_PARAMETERS_DESC'
}

export enum EventType {
  Assignment = 'ASSIGNMENT',
  Extension = 'EXTENSION',
  Outcome = 'OUTCOME',
  Permission = 'PERMISSION',
  Review = 'REVIEW',
  ReviewDecision = 'REVIEW_DECISION',
  Stage = 'STAGE',
  Status = 'STATUS'
}

/** A filter to be used against EventType fields. All fields are combined with a logical ‘and.’ */
export type EventTypeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<EventType>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<EventType>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<EventType>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<EventType>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<EventType>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<EventType>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<EventType>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<EventType>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<EventType>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<EventType>>;
};

/** The `application` to be created by this mutation. */
export type FakePublicApplicationForeignKey0ApplicationCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `userList` in the `ApplicationInput` mutation. */
export type FakePublicApplicationForeignKey0Input = {
  /** A `UserListInput` object that will be created and connected to this object. */
  create?: InputMaybe<FakePublicApplicationForeignKey0UserListCreateInput>;
};

/** Input for the nested mutation of `application` in the `UserListInput` mutation. */
export type FakePublicApplicationForeignKey0InverseInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ApplicationApplicationPkeyConnect>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ApplicationNodeIdConnect>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByOutcomeRegistration?: InputMaybe<Array<ApplicationApplicationOutcomeRegistrationKeyConnect>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: InputMaybe<Array<ApplicationApplicationSerialKeyConnect>>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<FakePublicApplicationForeignKey0ApplicationCreateInput>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ApplicationApplicationPkeyDelete>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ApplicationNodeIdDelete>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByOutcomeRegistration?: InputMaybe<Array<ApplicationApplicationOutcomeRegistrationKeyDelete>>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: InputMaybe<Array<ApplicationApplicationSerialKeyDelete>>;
  /** Flag indicating whether all other `application` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ApplicationOnApplicationForFakePublicApplicationForeignKey0UsingApplicationPkeyUpdate>>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<UserListOnApplicationForFakePublicApplicationForeignKey0NodeIdUpdate>>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByOutcomeRegistration?: InputMaybe<Array<ApplicationOnApplicationForFakePublicApplicationForeignKey0UsingApplicationOutcomeRegistrationKeyUpdate>>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: InputMaybe<Array<ApplicationOnApplicationForFakePublicApplicationForeignKey0UsingApplicationSerialKeyUpdate>>;
};

/** The `userList` to be created by this mutation. */
export type FakePublicApplicationForeignKey0UserListCreateInput = {
  applicationNotesUsingId?: InputMaybe<FakePublicApplicationNoteForeignKey0InverseInput>;
  applicationsUsingId?: InputMaybe<FakePublicApplicationForeignKey0InverseInput>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  fullName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<FakePublicPermissionJoinForeignKey0InverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<FakePublicReviewAssignmentAssignerJoinForeignKey0InverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: InputMaybe<FakePublicReviewAssignmentForeignKey1InverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: InputMaybe<FakePublicReviewAssignmentForeignKey0InverseInput>;
  reviewsUsingId?: InputMaybe<FakePublicReviewForeignKey0InverseInput>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/** The `applicationNote` to be created by this mutation. */
export type FakePublicApplicationNoteForeignKey0ApplicationNoteCreateInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ApplicationNoteApplicationIdFkeyInput>;
  comment: Scalars['String']['input'];
  filesUsingId?: InputMaybe<FileApplicationNoteIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationNoteOrgIdFkeyInput>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationNoteForeignKey0Input>;
};

/** Input for the nested mutation of `userList` in the `ApplicationNoteInput` mutation. */
export type FakePublicApplicationNoteForeignKey0Input = {
  /** A `UserListInput` object that will be created and connected to this object. */
  create?: InputMaybe<FakePublicApplicationNoteForeignKey0UserListCreateInput>;
};

/** Input for the nested mutation of `applicationNote` in the `UserListInput` mutation. */
export type FakePublicApplicationNoteForeignKey0InverseInput = {
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ApplicationNoteApplicationNotePkeyConnect>>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ApplicationNoteNodeIdConnect>>;
  /** A `ApplicationNoteInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<FakePublicApplicationNoteForeignKey0ApplicationNoteCreateInput>>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ApplicationNoteApplicationNotePkeyDelete>>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ApplicationNoteNodeIdDelete>>;
  /** Flag indicating whether all other `applicationNote` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `applicationNote` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ApplicationNoteOnApplicationNoteForFakePublicApplicationNoteForeignKey0UsingApplicationNotePkeyUpdate>>;
  /** The primary key(s) and patch data for `applicationNote` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<UserListOnApplicationNoteForFakePublicApplicationNoteForeignKey0NodeIdUpdate>>;
};

/** The `userList` to be created by this mutation. */
export type FakePublicApplicationNoteForeignKey0UserListCreateInput = {
  applicationNotesUsingId?: InputMaybe<FakePublicApplicationNoteForeignKey0InverseInput>;
  applicationsUsingId?: InputMaybe<FakePublicApplicationForeignKey0InverseInput>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  fullName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<FakePublicPermissionJoinForeignKey0InverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<FakePublicReviewAssignmentAssignerJoinForeignKey0InverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: InputMaybe<FakePublicReviewAssignmentForeignKey1InverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: InputMaybe<FakePublicReviewAssignmentForeignKey0InverseInput>;
  reviewsUsingId?: InputMaybe<FakePublicReviewForeignKey0InverseInput>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/** Input for the nested mutation of `userList` in the `PermissionJoinInput` mutation. */
export type FakePublicPermissionJoinForeignKey0Input = {
  /** A `UserListInput` object that will be created and connected to this object. */
  create?: InputMaybe<FakePublicPermissionJoinForeignKey0UserListCreateInput>;
};

/** Input for the nested mutation of `permissionJoin` in the `UserListInput` mutation. */
export type FakePublicPermissionJoinForeignKey0InverseInput = {
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  connectById?: InputMaybe<Array<PermissionJoinPermissionJoinPkeyConnect>>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<PermissionJoinNodeIdConnect>>;
  /** A `PermissionJoinInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<FakePublicPermissionJoinForeignKey0PermissionJoinCreateInput>>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<PermissionJoinPermissionJoinPkeyDelete>>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<PermissionJoinNodeIdDelete>>;
  /** Flag indicating whether all other `permissionJoin` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `permissionJoin` for the far side of the relationship. */
  updateById?: InputMaybe<Array<PermissionJoinOnPermissionJoinForFakePublicPermissionJoinForeignKey0UsingPermissionJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `permissionJoin` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<UserListOnPermissionJoinForFakePublicPermissionJoinForeignKey0NodeIdUpdate>>;
};

/** The `permissionJoin` to be created by this mutation. */
export type FakePublicPermissionJoinForeignKey0PermissionJoinCreateInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<PermissionJoinOrganisationIdFkeyInput>;
  permissionNameId?: InputMaybe<Scalars['Int']['input']>;
  permissionNameToPermissionNameId?: InputMaybe<PermissionJoinPermissionNameIdFkeyInput>;
  userListToUserId?: InputMaybe<FakePublicPermissionJoinForeignKey0Input>;
};

/** The `userList` to be created by this mutation. */
export type FakePublicPermissionJoinForeignKey0UserListCreateInput = {
  applicationNotesUsingId?: InputMaybe<FakePublicApplicationNoteForeignKey0InverseInput>;
  applicationsUsingId?: InputMaybe<FakePublicApplicationForeignKey0InverseInput>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  fullName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<FakePublicPermissionJoinForeignKey0InverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<FakePublicReviewAssignmentAssignerJoinForeignKey0InverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: InputMaybe<FakePublicReviewAssignmentForeignKey1InverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: InputMaybe<FakePublicReviewAssignmentForeignKey0InverseInput>;
  reviewsUsingId?: InputMaybe<FakePublicReviewForeignKey0InverseInput>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/** Input for the nested mutation of `userList` in the `ReviewAssignmentAssignerJoinInput` mutation. */
export type FakePublicReviewAssignmentAssignerJoinForeignKey0Input = {
  /** A `UserListInput` object that will be created and connected to this object. */
  create?: InputMaybe<FakePublicReviewAssignmentAssignerJoinForeignKey0UserListCreateInput>;
};

/** Input for the nested mutation of `reviewAssignmentAssignerJoin` in the `UserListInput` mutation. */
export type FakePublicReviewAssignmentAssignerJoinForeignKey0InverseInput = {
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyConnect>>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ReviewAssignmentAssignerJoinNodeIdConnect>>;
  /** A `ReviewAssignmentAssignerJoinInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<FakePublicReviewAssignmentAssignerJoinForeignKey0ReviewAssignmentAssignerJoinCreateInput>>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyDelete>>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ReviewAssignmentAssignerJoinNodeIdDelete>>;
  /** Flag indicating whether all other `reviewAssignmentAssignerJoin` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForFakePublicReviewAssignmentAssignerJoinForeignKey0UsingReviewAssignmentAssignerJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<UserListOnReviewAssignmentAssignerJoinForFakePublicReviewAssignmentAssignerJoinForeignKey0NodeIdUpdate>>;
};

/** The `reviewAssignmentAssignerJoin` to be created by this mutation. */
export type FakePublicReviewAssignmentAssignerJoinForeignKey0ReviewAssignmentAssignerJoinCreateInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentAssignerJoinForeignKey0Input>;
};

/** The `userList` to be created by this mutation. */
export type FakePublicReviewAssignmentAssignerJoinForeignKey0UserListCreateInput = {
  applicationNotesUsingId?: InputMaybe<FakePublicApplicationNoteForeignKey0InverseInput>;
  applicationsUsingId?: InputMaybe<FakePublicApplicationForeignKey0InverseInput>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  fullName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<FakePublicPermissionJoinForeignKey0InverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<FakePublicReviewAssignmentAssignerJoinForeignKey0InverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: InputMaybe<FakePublicReviewAssignmentForeignKey1InverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: InputMaybe<FakePublicReviewAssignmentForeignKey0InverseInput>;
  reviewsUsingId?: InputMaybe<FakePublicReviewForeignKey0InverseInput>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/** Input for the nested mutation of `userList` in the `ReviewAssignmentInput` mutation. */
export type FakePublicReviewAssignmentForeignKey0Input = {
  /** A `UserListInput` object that will be created and connected to this object. */
  create?: InputMaybe<FakePublicReviewAssignmentForeignKey0UserListCreateInput>;
};

/** Input for the nested mutation of `reviewAssignment` in the `UserListInput` mutation. */
export type FakePublicReviewAssignmentForeignKey0InverseInput = {
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ReviewAssignmentReviewAssignmentPkeyConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ReviewAssignmentNodeIdConnect>>;
  /** A `ReviewAssignmentInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<FakePublicReviewAssignmentForeignKey0ReviewAssignmentCreateInput>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ReviewAssignmentReviewAssignmentPkeyDelete>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ReviewAssignmentNodeIdDelete>>;
  /** Flag indicating whether all other `reviewAssignment` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey0UsingReviewAssignmentPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<UserListOnReviewAssignmentForFakePublicReviewAssignmentForeignKey0NodeIdUpdate>>;
};

/** The `reviewAssignment` to be created by this mutation. */
export type FakePublicReviewAssignmentForeignKey0ReviewAssignmentCreateInput = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status: ReviewAssignmentStatus;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** The `userList` to be created by this mutation. */
export type FakePublicReviewAssignmentForeignKey0UserListCreateInput = {
  applicationNotesUsingId?: InputMaybe<FakePublicApplicationNoteForeignKey0InverseInput>;
  applicationsUsingId?: InputMaybe<FakePublicApplicationForeignKey0InverseInput>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  fullName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<FakePublicPermissionJoinForeignKey0InverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<FakePublicReviewAssignmentAssignerJoinForeignKey0InverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: InputMaybe<FakePublicReviewAssignmentForeignKey1InverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: InputMaybe<FakePublicReviewAssignmentForeignKey0InverseInput>;
  reviewsUsingId?: InputMaybe<FakePublicReviewForeignKey0InverseInput>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/** Input for the nested mutation of `userList` in the `ReviewAssignmentInput` mutation. */
export type FakePublicReviewAssignmentForeignKey1Input = {
  /** A `UserListInput` object that will be created and connected to this object. */
  create?: InputMaybe<FakePublicReviewAssignmentForeignKey1UserListCreateInput>;
};

/** Input for the nested mutation of `reviewAssignment` in the `UserListInput` mutation. */
export type FakePublicReviewAssignmentForeignKey1InverseInput = {
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ReviewAssignmentReviewAssignmentPkeyConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ReviewAssignmentNodeIdConnect>>;
  /** A `ReviewAssignmentInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<FakePublicReviewAssignmentForeignKey1ReviewAssignmentCreateInput>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ReviewAssignmentReviewAssignmentPkeyDelete>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ReviewAssignmentNodeIdDelete>>;
  /** Flag indicating whether all other `reviewAssignment` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey1UsingReviewAssignmentPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<UserListOnReviewAssignmentForFakePublicReviewAssignmentForeignKey1NodeIdUpdate>>;
};

/** The `reviewAssignment` to be created by this mutation. */
export type FakePublicReviewAssignmentForeignKey1ReviewAssignmentCreateInput = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status: ReviewAssignmentStatus;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** The `userList` to be created by this mutation. */
export type FakePublicReviewAssignmentForeignKey1UserListCreateInput = {
  applicationNotesUsingId?: InputMaybe<FakePublicApplicationNoteForeignKey0InverseInput>;
  applicationsUsingId?: InputMaybe<FakePublicApplicationForeignKey0InverseInput>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  fullName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<FakePublicPermissionJoinForeignKey0InverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<FakePublicReviewAssignmentAssignerJoinForeignKey0InverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: InputMaybe<FakePublicReviewAssignmentForeignKey1InverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: InputMaybe<FakePublicReviewAssignmentForeignKey0InverseInput>;
  reviewsUsingId?: InputMaybe<FakePublicReviewForeignKey0InverseInput>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/** Input for the nested mutation of `userList` in the `ReviewInput` mutation. */
export type FakePublicReviewForeignKey0Input = {
  /** A `UserListInput` object that will be created and connected to this object. */
  create?: InputMaybe<FakePublicReviewForeignKey0UserListCreateInput>;
};

/** Input for the nested mutation of `review` in the `UserListInput` mutation. */
export type FakePublicReviewForeignKey0InverseInput = {
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ReviewReviewPkeyConnect>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ReviewNodeIdConnect>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByReviewAssignmentId?: InputMaybe<Array<ReviewReviewReviewAssignmentIdKeyConnect>>;
  /** A `ReviewInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<FakePublicReviewForeignKey0ReviewCreateInput>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ReviewReviewPkeyDelete>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ReviewNodeIdDelete>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByReviewAssignmentId?: InputMaybe<Array<ReviewReviewReviewAssignmentIdKeyDelete>>;
  /** Flag indicating whether all other `review` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ReviewOnReviewForFakePublicReviewForeignKey0UsingReviewPkeyUpdate>>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<UserListOnReviewForFakePublicReviewForeignKey0NodeIdUpdate>>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByReviewAssignmentId?: InputMaybe<Array<ReviewOnReviewForFakePublicReviewForeignKey0UsingReviewReviewAssignmentIdKeyUpdate>>;
};

/** The `review` to be created by this mutation. */
export type FakePublicReviewForeignKey0ReviewCreateInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  notificationsUsingId?: InputMaybe<NotificationReviewIdFkeyInverseInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewReviewAssignmentIdFkeyInput>;
  reviewDecisionsUsingId?: InputMaybe<ReviewDecisionReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToReviewerId?: InputMaybe<FakePublicReviewForeignKey0Input>;
};

/** The `userList` to be created by this mutation. */
export type FakePublicReviewForeignKey0UserListCreateInput = {
  applicationNotesUsingId?: InputMaybe<FakePublicApplicationNoteForeignKey0InverseInput>;
  applicationsUsingId?: InputMaybe<FakePublicApplicationForeignKey0InverseInput>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  fullName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<FakePublicPermissionJoinForeignKey0InverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<FakePublicReviewAssignmentAssignerJoinForeignKey0InverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: InputMaybe<FakePublicReviewAssignmentForeignKey1InverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: InputMaybe<FakePublicReviewAssignmentForeignKey0InverseInput>;
  reviewsUsingId?: InputMaybe<FakePublicReviewForeignKey0InverseInput>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/** Input for the nested mutation of `user` in the `UserOrganisationInput` mutation. */
export type FakePublicUserOrganisationForeignKey0Input = {
  /** A `UserInput` object that will be created and connected to this object. */
  create?: InputMaybe<FakePublicUserOrganisationForeignKey0UserListAdminCreateInput>;
};

/** Input for the nested mutation of `userOrganisation` in the `UserInput` mutation. */
export type FakePublicUserOrganisationForeignKey0InverseInput = {
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  connectById?: InputMaybe<Array<UserOrganisationUserOrganisationPkeyConnect>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<UserOrganisationNodeIdConnect>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  connectByUserIdAndOrganisationId?: InputMaybe<Array<UserOrganisationUserOrganisationUserIdOrganisationIdKeyConnect>>;
  /** A `UserOrganisationInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<FakePublicUserOrganisationForeignKey0UserOrganisationCreateInput>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<UserOrganisationUserOrganisationPkeyDelete>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<UserOrganisationNodeIdDelete>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  deleteByUserIdAndOrganisationId?: InputMaybe<Array<UserOrganisationUserOrganisationUserIdOrganisationIdKeyDelete>>;
  /** Flag indicating whether all other `userOrganisation` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `userOrganisation` for the far side of the relationship. */
  updateById?: InputMaybe<Array<UserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0UsingUserOrganisationPkeyUpdate>>;
  /** The primary key(s) and patch data for `userOrganisation` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<UserOnUserOrganisationForFakePublicUserOrganisationForeignKey0NodeIdUpdate>>;
  /** The primary key(s) and patch data for `userOrganisation` for the far side of the relationship. */
  updateByUserIdAndOrganisationId?: InputMaybe<Array<UserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0UsingUserOrganisationUserIdOrganisationIdKeyUpdate>>;
};

/** The `user` to be created by this mutation. */
export type FakePublicUserOrganisationForeignKey0UserListAdminCreateInput = {
  dateOfBirth?: InputMaybe<Scalars['Date']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  fullName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  passwordHash?: InputMaybe<Scalars['String']['input']>;
  userOrganisations?: InputMaybe<FakePublicUserOrganisationForeignKey0InverseInput>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/** The `userOrganisation` to be created by this mutation. */
export type FakePublicUserOrganisationForeignKey0UserOrganisationCreateInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<UserOrganisationOrganisationIdFkeyInput>;
  userRole?: InputMaybe<Scalars['String']['input']>;
  userToUserId?: InputMaybe<FakePublicUserOrganisationForeignKey0Input>;
};

export type File = Node & {
  __typename?: 'File';
  /** Reads a single `Application` that is related to this `File`. */
  applicationByApplicationSerial?: Maybe<Application>;
  /** Reads a single `ApplicationNote` that is related to this `File`. */
  applicationNote?: Maybe<ApplicationNote>;
  applicationNoteId?: Maybe<Scalars['Int']['output']>;
  /** Reads a single `ApplicationResponse` that is related to this `File`. */
  applicationResponse?: Maybe<ApplicationResponse>;
  applicationResponseId?: Maybe<Scalars['Int']['output']>;
  applicationSerial?: Maybe<Scalars['String']['output']>;
  archivePath?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  filePath: Scalars['String']['output'];
  fileSize?: Maybe<Scalars['BigInt']['output']>;
  id: Scalars['Int']['output'];
  isExternalReferenceDoc: Scalars['Boolean']['output'];
  isInternalReferenceDoc: Scalars['Boolean']['output'];
  isOutputDoc: Scalars['Boolean']['output'];
  mimetype?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  originalFilename: Scalars['String']['output'];
  submitted?: Maybe<Scalars['Boolean']['output']>;
  /** Reads a single `Template` that is related to this `File`. */
  template?: Maybe<Template>;
  templateId?: Maybe<Scalars['Int']['output']>;
  thumbnailPath?: Maybe<Scalars['String']['output']>;
  timestamp: Scalars['Datetime']['output'];
  toBeDeleted: Scalars['Boolean']['output'];
  uniqueId: Scalars['String']['output'];
  userId?: Maybe<Scalars['Int']['output']>;
};

/** The `applicationNote` to be created by this mutation. */
export type FileApplicationNoteIdFkeyApplicationNoteCreateInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ApplicationNoteApplicationIdFkeyInput>;
  comment: Scalars['String']['input'];
  filesUsingId?: InputMaybe<FileApplicationNoteIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationNoteOrgIdFkeyInput>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationNoteForeignKey0Input>;
};

/** The `file` to be created by this mutation. */
export type FileApplicationNoteIdFkeyFileCreateInput = {
  applicationNoteToApplicationNoteId?: InputMaybe<FileApplicationNoteIdFkeyInput>;
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  applicationResponseToApplicationResponseId?: InputMaybe<FileApplicationResponseIdFkeyInput>;
  applicationSerial?: InputMaybe<Scalars['String']['input']>;
  applicationToApplicationSerial?: InputMaybe<FileApplicationSerialFkeyInput>;
  archivePath?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  filePath: Scalars['String']['input'];
  fileSize?: InputMaybe<Scalars['BigInt']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isExternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isInternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isOutputDoc?: InputMaybe<Scalars['Boolean']['input']>;
  mimetype?: InputMaybe<Scalars['String']['input']>;
  originalFilename: Scalars['String']['input'];
  submitted?: InputMaybe<Scalars['Boolean']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<FileTemplateIdFkeyInput>;
  thumbnailPath?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  toBeDeleted?: InputMaybe<Scalars['Boolean']['input']>;
  uniqueId: Scalars['String']['input'];
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** Input for the nested mutation of `applicationNote` in the `FileInput` mutation. */
export type FileApplicationNoteIdFkeyInput = {
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  connectById?: InputMaybe<ApplicationNoteApplicationNotePkeyConnect>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ApplicationNoteNodeIdConnect>;
  /** A `ApplicationNoteInput` object that will be created and connected to this object. */
  create?: InputMaybe<FileApplicationNoteIdFkeyApplicationNoteCreateInput>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  deleteById?: InputMaybe<ApplicationNoteApplicationNotePkeyDelete>;
  /** The primary key(s) for `applicationNote` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ApplicationNoteNodeIdDelete>;
  /** The primary key(s) and patch data for `applicationNote` for the far side of the relationship. */
  updateById?: InputMaybe<ApplicationNoteOnFileForFileApplicationNoteIdFkeyUsingApplicationNotePkeyUpdate>;
  /** The primary key(s) and patch data for `applicationNote` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<FileOnFileForFileApplicationNoteIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `file` in the `ApplicationNoteInput` mutation. */
export type FileApplicationNoteIdFkeyInverseInput = {
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectById?: InputMaybe<Array<FileFilePkeyConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<FileNodeIdConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectByUniqueId?: InputMaybe<Array<FileFileUniqueIdKeyConnect>>;
  /** A `FileInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<FileApplicationNoteIdFkeyFileCreateInput>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<FileFilePkeyDelete>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<FileNodeIdDelete>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteByUniqueId?: InputMaybe<Array<FileFileUniqueIdKeyDelete>>;
  /** Flag indicating whether all other `file` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateById?: InputMaybe<Array<FileOnFileForFileApplicationNoteIdFkeyUsingFilePkeyUpdate>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ApplicationNoteOnFileForFileApplicationNoteIdFkeyNodeIdUpdate>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateByUniqueId?: InputMaybe<Array<FileOnFileForFileApplicationNoteIdFkeyUsingFileUniqueIdKeyUpdate>>;
};

/** The `applicationResponse` to be created by this mutation. */
export type FileApplicationResponseIdFkeyApplicationResponseCreateInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ApplicationResponseApplicationIdFkeyInput>;
  evaluatedParameters?: InputMaybe<Scalars['JSON']['input']>;
  filesUsingId?: InputMaybe<FileApplicationResponseIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isValid?: InputMaybe<Scalars['Boolean']['input']>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ApplicationResponseStatus>;
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  templateElementToTemplateElementId?: InputMaybe<ApplicationResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  value?: InputMaybe<Scalars['JSON']['input']>;
};

/** The `file` to be created by this mutation. */
export type FileApplicationResponseIdFkeyFileCreateInput = {
  applicationNoteId?: InputMaybe<Scalars['Int']['input']>;
  applicationNoteToApplicationNoteId?: InputMaybe<FileApplicationNoteIdFkeyInput>;
  applicationResponseToApplicationResponseId?: InputMaybe<FileApplicationResponseIdFkeyInput>;
  applicationSerial?: InputMaybe<Scalars['String']['input']>;
  applicationToApplicationSerial?: InputMaybe<FileApplicationSerialFkeyInput>;
  archivePath?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  filePath: Scalars['String']['input'];
  fileSize?: InputMaybe<Scalars['BigInt']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isExternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isInternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isOutputDoc?: InputMaybe<Scalars['Boolean']['input']>;
  mimetype?: InputMaybe<Scalars['String']['input']>;
  originalFilename: Scalars['String']['input'];
  submitted?: InputMaybe<Scalars['Boolean']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<FileTemplateIdFkeyInput>;
  thumbnailPath?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  toBeDeleted?: InputMaybe<Scalars['Boolean']['input']>;
  uniqueId: Scalars['String']['input'];
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** Input for the nested mutation of `applicationResponse` in the `FileInput` mutation. */
export type FileApplicationResponseIdFkeyInput = {
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  connectById?: InputMaybe<ApplicationResponseApplicationResponsePkeyConnect>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ApplicationResponseNodeIdConnect>;
  /** A `ApplicationResponseInput` object that will be created and connected to this object. */
  create?: InputMaybe<FileApplicationResponseIdFkeyApplicationResponseCreateInput>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  deleteById?: InputMaybe<ApplicationResponseApplicationResponsePkeyDelete>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ApplicationResponseNodeIdDelete>;
  /** The primary key(s) and patch data for `applicationResponse` for the far side of the relationship. */
  updateById?: InputMaybe<ApplicationResponseOnFileForFileApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate>;
  /** The primary key(s) and patch data for `applicationResponse` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<FileOnFileForFileApplicationResponseIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `file` in the `ApplicationResponseInput` mutation. */
export type FileApplicationResponseIdFkeyInverseInput = {
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectById?: InputMaybe<Array<FileFilePkeyConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<FileNodeIdConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectByUniqueId?: InputMaybe<Array<FileFileUniqueIdKeyConnect>>;
  /** A `FileInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<FileApplicationResponseIdFkeyFileCreateInput>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<FileFilePkeyDelete>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<FileNodeIdDelete>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteByUniqueId?: InputMaybe<Array<FileFileUniqueIdKeyDelete>>;
  /** Flag indicating whether all other `file` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateById?: InputMaybe<Array<FileOnFileForFileApplicationResponseIdFkeyUsingFilePkeyUpdate>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ApplicationResponseOnFileForFileApplicationResponseIdFkeyNodeIdUpdate>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateByUniqueId?: InputMaybe<Array<FileOnFileForFileApplicationResponseIdFkeyUsingFileUniqueIdKeyUpdate>>;
};

/** The `application` to be created by this mutation. */
export type FileApplicationSerialFkeyApplicationCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** The `file` to be created by this mutation. */
export type FileApplicationSerialFkeyFileCreateInput = {
  applicationNoteId?: InputMaybe<Scalars['Int']['input']>;
  applicationNoteToApplicationNoteId?: InputMaybe<FileApplicationNoteIdFkeyInput>;
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  applicationResponseToApplicationResponseId?: InputMaybe<FileApplicationResponseIdFkeyInput>;
  applicationToApplicationSerial?: InputMaybe<FileApplicationSerialFkeyInput>;
  archivePath?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  filePath: Scalars['String']['input'];
  fileSize?: InputMaybe<Scalars['BigInt']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isExternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isInternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isOutputDoc?: InputMaybe<Scalars['Boolean']['input']>;
  mimetype?: InputMaybe<Scalars['String']['input']>;
  originalFilename: Scalars['String']['input'];
  submitted?: InputMaybe<Scalars['Boolean']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<FileTemplateIdFkeyInput>;
  thumbnailPath?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  toBeDeleted?: InputMaybe<Scalars['Boolean']['input']>;
  uniqueId: Scalars['String']['input'];
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** Input for the nested mutation of `application` in the `FileInput` mutation. */
export type FileApplicationSerialFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: InputMaybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: InputMaybe<ApplicationApplicationSerialKeyConnect>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: InputMaybe<FileApplicationSerialFkeyApplicationCreateInput>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: InputMaybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ApplicationNodeIdDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: InputMaybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: InputMaybe<ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<FileOnFileForFileApplicationSerialFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByOutcomeRegistration?: InputMaybe<ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationOutcomeRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: InputMaybe<ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationSerialKeyUpdate>;
};

/** Input for the nested mutation of `file` in the `ApplicationInput` mutation. */
export type FileApplicationSerialFkeyInverseInput = {
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectById?: InputMaybe<Array<FileFilePkeyConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<FileNodeIdConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectByUniqueId?: InputMaybe<Array<FileFileUniqueIdKeyConnect>>;
  /** A `FileInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<FileApplicationSerialFkeyFileCreateInput>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<FileFilePkeyDelete>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<FileNodeIdDelete>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteByUniqueId?: InputMaybe<Array<FileFileUniqueIdKeyDelete>>;
  /** Flag indicating whether all other `file` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateById?: InputMaybe<Array<FileOnFileForFileApplicationSerialFkeyUsingFilePkeyUpdate>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ApplicationOnFileForFileApplicationSerialFkeyNodeIdUpdate>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateByUniqueId?: InputMaybe<Array<FileOnFileForFileApplicationSerialFkeyUsingFileUniqueIdKeyUpdate>>;
};

/** A condition to be used against `File` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type FileCondition = {
  /** Checks for equality with the object’s `applicationNoteId` field. */
  applicationNoteId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `applicationResponseId` field. */
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `applicationSerial` field. */
  applicationSerial?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `archivePath` field. */
  archivePath?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `description` field. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `filePath` field. */
  filePath?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `fileSize` field. */
  fileSize?: InputMaybe<Scalars['BigInt']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isExternalReferenceDoc` field. */
  isExternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `isInternalReferenceDoc` field. */
  isInternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `isOutputDoc` field. */
  isOutputDoc?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `mimetype` field. */
  mimetype?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `originalFilename` field. */
  originalFilename?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `submitted` field. */
  submitted?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `thumbnailPath` field. */
  thumbnailPath?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `timestamp` field. */
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `toBeDeleted` field. */
  toBeDeleted?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `uniqueId` field. */
  uniqueId?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** The fields on `file` to look up the row to connect. */
export type FileFilePkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `file` to look up the row to delete. */
export type FileFilePkeyDelete = {
  id: Scalars['Int']['input'];
};

/** The fields on `file` to look up the row to connect. */
export type FileFileUniqueIdKeyConnect = {
  uniqueId: Scalars['String']['input'];
};

/** The fields on `file` to look up the row to delete. */
export type FileFileUniqueIdKeyDelete = {
  uniqueId: Scalars['String']['input'];
};

/** A filter to be used against `File` object types. All fields are combined with a logical ‘and.’ */
export type FileFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<FileFilter>>;
  /** Filter by the object’s `applicationByApplicationSerial` relation. */
  applicationByApplicationSerial?: InputMaybe<ApplicationFilter>;
  /** A related `applicationByApplicationSerial` exists. */
  applicationByApplicationSerialExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `applicationNote` relation. */
  applicationNote?: InputMaybe<ApplicationNoteFilter>;
  /** A related `applicationNote` exists. */
  applicationNoteExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `applicationNoteId` field. */
  applicationNoteId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `applicationResponse` relation. */
  applicationResponse?: InputMaybe<ApplicationResponseFilter>;
  /** A related `applicationResponse` exists. */
  applicationResponseExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `applicationResponseId` field. */
  applicationResponseId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `applicationSerial` field. */
  applicationSerial?: InputMaybe<StringFilter>;
  /** Filter by the object’s `archivePath` field. */
  archivePath?: InputMaybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: InputMaybe<StringFilter>;
  /** Filter by the object’s `filePath` field. */
  filePath?: InputMaybe<StringFilter>;
  /** Filter by the object’s `fileSize` field. */
  fileSize?: InputMaybe<BigIntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isExternalReferenceDoc` field. */
  isExternalReferenceDoc?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `isInternalReferenceDoc` field. */
  isInternalReferenceDoc?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `isOutputDoc` field. */
  isOutputDoc?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `mimetype` field. */
  mimetype?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<FileFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<FileFilter>>;
  /** Filter by the object’s `originalFilename` field. */
  originalFilename?: InputMaybe<StringFilter>;
  /** Filter by the object’s `submitted` field. */
  submitted?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `template` relation. */
  template?: InputMaybe<TemplateFilter>;
  /** A related `template` exists. */
  templateExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `templateId` field. */
  templateId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `thumbnailPath` field. */
  thumbnailPath?: InputMaybe<StringFilter>;
  /** Filter by the object’s `timestamp` field. */
  timestamp?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `toBeDeleted` field. */
  toBeDeleted?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `uniqueId` field. */
  uniqueId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<IntFilter>;
};

/** An input for mutations affecting `File` */
export type FileInput = {
  applicationNoteId?: InputMaybe<Scalars['Int']['input']>;
  applicationNoteToApplicationNoteId?: InputMaybe<FileApplicationNoteIdFkeyInput>;
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  applicationResponseToApplicationResponseId?: InputMaybe<FileApplicationResponseIdFkeyInput>;
  applicationSerial?: InputMaybe<Scalars['String']['input']>;
  applicationToApplicationSerial?: InputMaybe<FileApplicationSerialFkeyInput>;
  archivePath?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  filePath: Scalars['String']['input'];
  fileSize?: InputMaybe<Scalars['BigInt']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isExternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isInternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isOutputDoc?: InputMaybe<Scalars['Boolean']['input']>;
  mimetype?: InputMaybe<Scalars['String']['input']>;
  originalFilename: Scalars['String']['input'];
  submitted?: InputMaybe<Scalars['Boolean']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<FileTemplateIdFkeyInput>;
  thumbnailPath?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  toBeDeleted?: InputMaybe<Scalars['Boolean']['input']>;
  uniqueId: Scalars['String']['input'];
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** The globally unique `ID` look up for the row to connect. */
export type FileNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `file` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type FileNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `file` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type FileOnFileForFileApplicationNoteIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationNote` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `applicationNote` being updated. */
  patch: ApplicationNotePatch;
};

/** The fields on `file` to look up the row to update. */
export type FileOnFileForFileApplicationNoteIdFkeyUsingFilePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: UpdateFileOnFileForFileApplicationNoteIdFkeyPatch;
};

/** The fields on `file` to look up the row to update. */
export type FileOnFileForFileApplicationNoteIdFkeyUsingFileUniqueIdKeyUpdate = {
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: UpdateFileOnFileForFileApplicationNoteIdFkeyPatch;
  uniqueId: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type FileOnFileForFileApplicationResponseIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationResponse` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `applicationResponse` being updated. */
  patch: ApplicationResponsePatch;
};

/** The fields on `file` to look up the row to update. */
export type FileOnFileForFileApplicationResponseIdFkeyUsingFilePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: UpdateFileOnFileForFileApplicationResponseIdFkeyPatch;
};

/** The fields on `file` to look up the row to update. */
export type FileOnFileForFileApplicationResponseIdFkeyUsingFileUniqueIdKeyUpdate = {
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: UpdateFileOnFileForFileApplicationResponseIdFkeyPatch;
  uniqueId: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type FileOnFileForFileApplicationSerialFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The fields on `file` to look up the row to update. */
export type FileOnFileForFileApplicationSerialFkeyUsingFilePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: UpdateFileOnFileForFileApplicationSerialFkeyPatch;
};

/** The fields on `file` to look up the row to update. */
export type FileOnFileForFileApplicationSerialFkeyUsingFileUniqueIdKeyUpdate = {
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: UpdateFileOnFileForFileApplicationSerialFkeyPatch;
  uniqueId: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type FileOnFileForFileTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The fields on `file` to look up the row to update. */
export type FileOnFileForFileTemplateIdFkeyUsingFilePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: UpdateFileOnFileForFileTemplateIdFkeyPatch;
};

/** The fields on `file` to look up the row to update. */
export type FileOnFileForFileTemplateIdFkeyUsingFileUniqueIdKeyUpdate = {
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: UpdateFileOnFileForFileTemplateIdFkeyPatch;
  uniqueId: Scalars['String']['input'];
};

/** Represents an update to a `File`. Fields that are set will be updated. */
export type FilePatch = {
  applicationNoteId?: InputMaybe<Scalars['Int']['input']>;
  applicationNoteToApplicationNoteId?: InputMaybe<FileApplicationNoteIdFkeyInput>;
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  applicationResponseToApplicationResponseId?: InputMaybe<FileApplicationResponseIdFkeyInput>;
  applicationSerial?: InputMaybe<Scalars['String']['input']>;
  applicationToApplicationSerial?: InputMaybe<FileApplicationSerialFkeyInput>;
  archivePath?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  filePath?: InputMaybe<Scalars['String']['input']>;
  fileSize?: InputMaybe<Scalars['BigInt']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isExternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isInternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isOutputDoc?: InputMaybe<Scalars['Boolean']['input']>;
  mimetype?: InputMaybe<Scalars['String']['input']>;
  originalFilename?: InputMaybe<Scalars['String']['input']>;
  submitted?: InputMaybe<Scalars['Boolean']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<FileTemplateIdFkeyInput>;
  thumbnailPath?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  toBeDeleted?: InputMaybe<Scalars['Boolean']['input']>;
  uniqueId?: InputMaybe<Scalars['String']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** The `file` to be created by this mutation. */
export type FileTemplateIdFkeyFileCreateInput = {
  applicationNoteId?: InputMaybe<Scalars['Int']['input']>;
  applicationNoteToApplicationNoteId?: InputMaybe<FileApplicationNoteIdFkeyInput>;
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  applicationResponseToApplicationResponseId?: InputMaybe<FileApplicationResponseIdFkeyInput>;
  applicationSerial?: InputMaybe<Scalars['String']['input']>;
  applicationToApplicationSerial?: InputMaybe<FileApplicationSerialFkeyInput>;
  archivePath?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  filePath: Scalars['String']['input'];
  fileSize?: InputMaybe<Scalars['BigInt']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isExternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isInternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isOutputDoc?: InputMaybe<Scalars['Boolean']['input']>;
  mimetype?: InputMaybe<Scalars['String']['input']>;
  originalFilename: Scalars['String']['input'];
  submitted?: InputMaybe<Scalars['Boolean']['input']>;
  templateToTemplateId?: InputMaybe<FileTemplateIdFkeyInput>;
  thumbnailPath?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  toBeDeleted?: InputMaybe<Scalars['Boolean']['input']>;
  uniqueId: Scalars['String']['input'];
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** Input for the nested mutation of `template` in the `FileInput` mutation. */
export type FileTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: InputMaybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TemplateNodeIdConnect>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: InputMaybe<FileTemplateIdFkeyTemplateCreateInput>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: InputMaybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByCodeAndVersionId?: InputMaybe<TemplateOnFileForFileTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: InputMaybe<TemplateOnFileForFileTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<FileOnFileForFileTemplateIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `file` in the `TemplateInput` mutation. */
export type FileTemplateIdFkeyInverseInput = {
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectById?: InputMaybe<Array<FileFilePkeyConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<FileNodeIdConnect>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  connectByUniqueId?: InputMaybe<Array<FileFileUniqueIdKeyConnect>>;
  /** A `FileInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<FileTemplateIdFkeyFileCreateInput>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<FileFilePkeyDelete>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<FileNodeIdDelete>>;
  /** The primary key(s) for `file` for the far side of the relationship. */
  deleteByUniqueId?: InputMaybe<Array<FileFileUniqueIdKeyDelete>>;
  /** Flag indicating whether all other `file` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateById?: InputMaybe<Array<FileOnFileForFileTemplateIdFkeyUsingFilePkeyUpdate>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TemplateOnFileForFileTemplateIdFkeyNodeIdUpdate>>;
  /** The primary key(s) and patch data for `file` for the far side of the relationship. */
  updateByUniqueId?: InputMaybe<Array<FileOnFileForFileTemplateIdFkeyUsingFileUniqueIdKeyUpdate>>;
};

/** The `template` to be created by this mutation. */
export type FileTemplateIdFkeyTemplateCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code: Scalars['String']['input'];
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId: Scalars['String']['input'];
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** A connection to a list of `File` values. */
export type FilesConnection = {
  __typename?: 'FilesConnection';
  /** A list of edges which contains the `File` and cursor to aid in pagination. */
  edges: Array<FilesEdge>;
  /** A list of `File` objects. */
  nodes: Array<Maybe<File>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `File` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `File` edge in the connection. */
export type FilesEdge = {
  __typename?: 'FilesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `File` at the end of the edge. */
  node?: Maybe<File>;
};

/** Methods to use when ordering `File`. */
export enum FilesOrderBy {
  ApplicationNoteIdAsc = 'APPLICATION_NOTE_ID_ASC',
  ApplicationNoteIdDesc = 'APPLICATION_NOTE_ID_DESC',
  ApplicationResponseIdAsc = 'APPLICATION_RESPONSE_ID_ASC',
  ApplicationResponseIdDesc = 'APPLICATION_RESPONSE_ID_DESC',
  ApplicationSerialAsc = 'APPLICATION_SERIAL_ASC',
  ApplicationSerialDesc = 'APPLICATION_SERIAL_DESC',
  ArchivePathAsc = 'ARCHIVE_PATH_ASC',
  ArchivePathDesc = 'ARCHIVE_PATH_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  FilePathAsc = 'FILE_PATH_ASC',
  FilePathDesc = 'FILE_PATH_DESC',
  FileSizeAsc = 'FILE_SIZE_ASC',
  FileSizeDesc = 'FILE_SIZE_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsExternalReferenceDocAsc = 'IS_EXTERNAL_REFERENCE_DOC_ASC',
  IsExternalReferenceDocDesc = 'IS_EXTERNAL_REFERENCE_DOC_DESC',
  IsInternalReferenceDocAsc = 'IS_INTERNAL_REFERENCE_DOC_ASC',
  IsInternalReferenceDocDesc = 'IS_INTERNAL_REFERENCE_DOC_DESC',
  IsOutputDocAsc = 'IS_OUTPUT_DOC_ASC',
  IsOutputDocDesc = 'IS_OUTPUT_DOC_DESC',
  MimetypeAsc = 'MIMETYPE_ASC',
  MimetypeDesc = 'MIMETYPE_DESC',
  Natural = 'NATURAL',
  OriginalFilenameAsc = 'ORIGINAL_FILENAME_ASC',
  OriginalFilenameDesc = 'ORIGINAL_FILENAME_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  SubmittedAsc = 'SUBMITTED_ASC',
  SubmittedDesc = 'SUBMITTED_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  ThumbnailPathAsc = 'THUMBNAIL_PATH_ASC',
  ThumbnailPathDesc = 'THUMBNAIL_PATH_DESC',
  TimestampAsc = 'TIMESTAMP_ASC',
  TimestampDesc = 'TIMESTAMP_DESC',
  ToBeDeletedAsc = 'TO_BE_DELETED_ASC',
  ToBeDeletedDesc = 'TO_BE_DELETED_DESC',
  UniqueIdAsc = 'UNIQUE_ID_ASC',
  UniqueIdDesc = 'UNIQUE_ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

export type Filter = Node & {
  __typename?: 'Filter';
  code: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  query?: Maybe<Scalars['JSON']['output']>;
  /** Reads and enables pagination through a set of `TemplateFilterJoin`. */
  templateFilterJoins: TemplateFilterJoinsConnection;
  title?: Maybe<Scalars['String']['output']>;
  userRole?: Maybe<PermissionPolicyType>;
};


export type FilterTemplateFilterJoinsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplateFilterJoinCondition>;
  filter?: InputMaybe<TemplateFilterJoinFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplateFilterJoinsOrderBy>>;
};

/** A condition to be used against `Filter` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type FilterCondition = {
  /** Checks for equality with the object’s `code` field. */
  code?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `query` field. */
  query?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `title` field. */
  title?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `userRole` field. */
  userRole?: InputMaybe<PermissionPolicyType>;
};

/** A filter to be used against `Filter` object types. All fields are combined with a logical ‘and.’ */
export type FilterFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<FilterFilter>>;
  /** Filter by the object’s `code` field. */
  code?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<FilterFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<FilterFilter>>;
  /** Filter by the object’s `query` field. */
  query?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `templateFilterJoins` relation. */
  templateFilterJoins?: InputMaybe<FilterToManyTemplateFilterJoinFilter>;
  /** Some related `templateFilterJoins` exist. */
  templateFilterJoinsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
  /** Filter by the object’s `userRole` field. */
  userRole?: InputMaybe<PermissionPolicyTypeFilter>;
};

/** The fields on `filter` to look up the row to connect. */
export type FilterFilterCodeKeyConnect = {
  code: Scalars['String']['input'];
};

/** The fields on `filter` to look up the row to delete. */
export type FilterFilterCodeKeyDelete = {
  code: Scalars['String']['input'];
};

/** The fields on `filter` to look up the row to connect. */
export type FilterFilterPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `filter` to look up the row to delete. */
export type FilterFilterPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** An input for mutations affecting `Filter` */
export type FilterInput = {
  code: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['JSON']['input']>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinFilterIdFkeyInverseInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  userRole?: InputMaybe<PermissionPolicyType>;
};

/** The globally unique `ID` look up for the row to connect. */
export type FilterNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `filter` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type FilterNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `filter` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateFilterJoin` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `templateFilterJoin` being updated. */
  patch: TemplateFilterJoinPatch;
};

/** The fields on `filter` to look up the row to update. */
export type FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingFilterCodeKeyUpdate = {
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `filter` being updated. */
  patch: UpdateFilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyPatch;
};

/** The fields on `filter` to look up the row to update. */
export type FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingFilterPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `filter` being updated. */
  patch: UpdateFilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyPatch;
};

/** Represents an update to a `Filter`. Fields that are set will be updated. */
export type FilterPatch = {
  code?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['JSON']['input']>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinFilterIdFkeyInverseInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  userRole?: InputMaybe<PermissionPolicyType>;
};

/** A filter to be used against many `TemplateFilterJoin` object types. All fields are combined with a logical ‘and.’ */
export type FilterToManyTemplateFilterJoinFilter = {
  /** Every related `TemplateFilterJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<TemplateFilterJoinFilter>;
  /** No related `TemplateFilterJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<TemplateFilterJoinFilter>;
  /** Some related `TemplateFilterJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<TemplateFilterJoinFilter>;
};

/** A connection to a list of `Filter` values. */
export type FiltersConnection = {
  __typename?: 'FiltersConnection';
  /** A list of edges which contains the `Filter` and cursor to aid in pagination. */
  edges: Array<FiltersEdge>;
  /** A list of `Filter` objects. */
  nodes: Array<Maybe<Filter>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Filter` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `Filter` edge in the connection. */
export type FiltersEdge = {
  __typename?: 'FiltersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Filter` at the end of the edge. */
  node?: Maybe<Filter>;
};

/** Methods to use when ordering `Filter`. */
export enum FiltersOrderBy {
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  QueryAsc = 'QUERY_ASC',
  QueryDesc = 'QUERY_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  UserRoleAsc = 'USER_ROLE_ASC',
  UserRoleDesc = 'USER_ROLE_DESC'
}

/** A filter to be used against Int fields. All fields are combined with a logical ‘and.’ */
export type IntFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['Int']['input']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['Int']['input']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['Int']['input']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['Int']['input']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['Int']['input']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['Int']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['Int']['input']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['Int']['input']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

/** A filter to be used against JSON fields. All fields are combined with a logical ‘and.’ */
export type JsonFilter = {
  /** Contained by the specified JSON. */
  containedBy?: InputMaybe<Scalars['JSON']['input']>;
  /** Contains the specified JSON. */
  contains?: InputMaybe<Scalars['JSON']['input']>;
  /** Contains all of the specified keys. */
  containsAllKeys?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Contains any of the specified keys. */
  containsAnyKeys?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Contains the specified key. */
  containsKey?: InputMaybe<Scalars['String']['input']>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['JSON']['input']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['JSON']['input']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['JSON']['input']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['JSON']['input']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['JSON']['input']>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['JSON']['input']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['JSON']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['JSON']['input']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['JSON']['input']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['JSON']['input']>>;
};

/** The root mutation type which contains root level fields which mutate data. */
export type Mutation = {
  __typename?: 'Mutation';
  /** Creates a single `ActionPlugin`. */
  createActionPlugin?: Maybe<CreateActionPluginPayload>;
  /** Creates a single `ActionQueue`. */
  createActionQueue?: Maybe<CreateActionQueuePayload>;
  /** Creates a single `ActivityLog`. */
  createActivityLog?: Maybe<CreateActivityLogPayload>;
  /** Creates a single `AllowedSelfAssignableSectionsShape`. */
  createAllowedSelfAssignableSectionsShape?: Maybe<CreateAllowedSelfAssignableSectionsShapePayload>;
  /** Creates a single `Application`. */
  createApplication?: Maybe<CreateApplicationPayload>;
  /** Creates a single `ApplicationListShape`. */
  createApplicationListShape?: Maybe<CreateApplicationListShapePayload>;
  /** Creates a single `ApplicationNote`. */
  createApplicationNote?: Maybe<CreateApplicationNotePayload>;
  /** Creates a single `ApplicationResponse`. */
  createApplicationResponse?: Maybe<CreateApplicationResponsePayload>;
  /** Creates a single `ApplicationReviewerAction`. */
  createApplicationReviewerAction?: Maybe<CreateApplicationReviewerActionPayload>;
  /** Creates a single `ApplicationStageHistory`. */
  createApplicationStageHistory?: Maybe<CreateApplicationStageHistoryPayload>;
  /** Creates a single `ApplicationStatusHistory`. */
  createApplicationStatusHistory?: Maybe<CreateApplicationStatusHistoryPayload>;
  /** Creates a single `Counter`. */
  createCounter?: Maybe<CreateCounterPayload>;
  /** Creates a single `DataChangelog`. */
  createDataChangelog?: Maybe<CreateDataChangelogPayload>;
  /** Creates a single `DataTable`. */
  createDataTable?: Maybe<CreateDataTablePayload>;
  /** Creates a single `DataView`. */
  createDataView?: Maybe<CreateDataViewPayload>;
  /** Creates a single `DataViewColumnDefinition`. */
  createDataViewColumnDefinition?: Maybe<CreateDataViewColumnDefinitionPayload>;
  /** Creates a single `ElementTypePlugin`. */
  createElementTypePlugin?: Maybe<CreateElementTypePluginPayload>;
  /** Creates a single `File`. */
  createFile?: Maybe<CreateFilePayload>;
  /** Creates a single `Filter`. */
  createFilter?: Maybe<CreateFilterPayload>;
  /** Creates a single `Notification`. */
  createNotification?: Maybe<CreateNotificationPayload>;
  /** Creates a single `Organisation`. */
  createOrganisation?: Maybe<CreateOrganisationPayload>;
  /** Creates a single `PermissionJoin`. */
  createPermissionJoin?: Maybe<CreatePermissionJoinPayload>;
  /** Creates a single `PermissionName`. */
  createPermissionName?: Maybe<CreatePermissionNamePayload>;
  /** Creates a single `PermissionPolicy`. */
  createPermissionPolicy?: Maybe<CreatePermissionPolicyPayload>;
  /** Creates a single `Review`. */
  createReview?: Maybe<CreateReviewPayload>;
  /** Creates a single `ReviewAssignment`. */
  createReviewAssignment?: Maybe<CreateReviewAssignmentPayload>;
  /** Creates a single `ReviewAssignmentAssignedSectionsShape`. */
  createReviewAssignmentAssignedSectionsShape?: Maybe<CreateReviewAssignmentAssignedSectionsShapePayload>;
  /** Creates a single `ReviewAssignmentAssignerJoin`. */
  createReviewAssignmentAssignerJoin?: Maybe<CreateReviewAssignmentAssignerJoinPayload>;
  /** Creates a single `ReviewDecision`. */
  createReviewDecision?: Maybe<CreateReviewDecisionPayload>;
  /** Creates a single `ReviewResponse`. */
  createReviewResponse?: Maybe<CreateReviewResponsePayload>;
  /** Creates a single `ReviewStatusHistory`. */
  createReviewStatusHistory?: Maybe<CreateReviewStatusHistoryPayload>;
  /** Creates a single `SystemInfo`. */
  createSystemInfo?: Maybe<CreateSystemInfoPayload>;
  /** Creates a single `Template`. */
  createTemplate?: Maybe<CreateTemplatePayload>;
  /** Creates a single `TemplateAction`. */
  createTemplateAction?: Maybe<CreateTemplateActionPayload>;
  /** Creates a single `TemplateCategory`. */
  createTemplateCategory?: Maybe<CreateTemplateCategoryPayload>;
  /** Creates a single `TemplateElement`. */
  createTemplateElement?: Maybe<CreateTemplateElementPayload>;
  /** Creates a single `TemplateFilterJoin`. */
  createTemplateFilterJoin?: Maybe<CreateTemplateFilterJoinPayload>;
  /** Creates a single `TemplatePermission`. */
  createTemplatePermission?: Maybe<CreateTemplatePermissionPayload>;
  /** Creates a single `TemplateSection`. */
  createTemplateSection?: Maybe<CreateTemplateSectionPayload>;
  /** Creates a single `TemplateStage`. */
  createTemplateStage?: Maybe<CreateTemplateStagePayload>;
  /** Creates a single `TemplateStageReviewLevel`. */
  createTemplateStageReviewLevel?: Maybe<CreateTemplateStageReviewLevelPayload>;
  /** Creates a single `TriggerQueue`. */
  createTriggerQueue?: Maybe<CreateTriggerQueuePayload>;
  /** Creates a single `TriggerSchedule`. */
  createTriggerSchedule?: Maybe<CreateTriggerSchedulePayload>;
  /** Creates a single `User`. */
  createUser?: Maybe<CreateUserPayload>;
  /** Creates a single `UserList`. */
  createUserList?: Maybe<CreateUserListPayload>;
  /** Creates a single `UserOrganisation`. */
  createUserOrganisation?: Maybe<CreateUserOrganisationPayload>;
  /** Creates a single `Verification`. */
  createVerification?: Maybe<CreateVerificationPayload>;
  /** Deletes a single `ActionPlugin` using a unique key. */
  deleteActionPlugin?: Maybe<DeleteActionPluginPayload>;
  /** Deletes a single `ActionPlugin` using a unique key. */
  deleteActionPluginByCode?: Maybe<DeleteActionPluginPayload>;
  /** Deletes a single `ActionPlugin` using its globally unique id. */
  deleteActionPluginByNodeId?: Maybe<DeleteActionPluginPayload>;
  /** Deletes a single `ActionQueue` using a unique key. */
  deleteActionQueue?: Maybe<DeleteActionQueuePayload>;
  /** Deletes a single `ActionQueue` using its globally unique id. */
  deleteActionQueueByNodeId?: Maybe<DeleteActionQueuePayload>;
  /** Deletes a single `ActivityLog` using a unique key. */
  deleteActivityLog?: Maybe<DeleteActivityLogPayload>;
  /** Deletes a single `ActivityLog` using its globally unique id. */
  deleteActivityLogByNodeId?: Maybe<DeleteActivityLogPayload>;
  /** Deletes a single `Application` using a unique key. */
  deleteApplication?: Maybe<DeleteApplicationPayload>;
  /** Deletes a single `Application` using its globally unique id. */
  deleteApplicationByNodeId?: Maybe<DeleteApplicationPayload>;
  /** Deletes a single `Application` using a unique key. */
  deleteApplicationByOutcomeRegistration?: Maybe<DeleteApplicationPayload>;
  /** Deletes a single `Application` using a unique key. */
  deleteApplicationBySerial?: Maybe<DeleteApplicationPayload>;
  /** Deletes a single `ApplicationNote` using a unique key. */
  deleteApplicationNote?: Maybe<DeleteApplicationNotePayload>;
  /** Deletes a single `ApplicationNote` using its globally unique id. */
  deleteApplicationNoteByNodeId?: Maybe<DeleteApplicationNotePayload>;
  /** Deletes a single `ApplicationResponse` using a unique key. */
  deleteApplicationResponse?: Maybe<DeleteApplicationResponsePayload>;
  /** Deletes a single `ApplicationResponse` using its globally unique id. */
  deleteApplicationResponseByNodeId?: Maybe<DeleteApplicationResponsePayload>;
  /** Deletes a single `ApplicationReviewerAction` using a unique key. */
  deleteApplicationReviewerAction?: Maybe<DeleteApplicationReviewerActionPayload>;
  /** Deletes a single `ApplicationReviewerAction` using its globally unique id. */
  deleteApplicationReviewerActionByNodeId?: Maybe<DeleteApplicationReviewerActionPayload>;
  /** Deletes a single `ApplicationReviewerAction` using a unique key. */
  deleteApplicationReviewerActionByUserIdAndApplicationId?: Maybe<DeleteApplicationReviewerActionPayload>;
  /** Deletes a single `ApplicationStageHistory` using a unique key. */
  deleteApplicationStageHistory?: Maybe<DeleteApplicationStageHistoryPayload>;
  /** Deletes a single `ApplicationStageHistory` using its globally unique id. */
  deleteApplicationStageHistoryByNodeId?: Maybe<DeleteApplicationStageHistoryPayload>;
  /** Deletes a single `ApplicationStatusHistory` using a unique key. */
  deleteApplicationStatusHistory?: Maybe<DeleteApplicationStatusHistoryPayload>;
  /** Deletes a single `ApplicationStatusHistory` using its globally unique id. */
  deleteApplicationStatusHistoryByNodeId?: Maybe<DeleteApplicationStatusHistoryPayload>;
  /** Deletes a single `Counter` using a unique key. */
  deleteCounter?: Maybe<DeleteCounterPayload>;
  /** Deletes a single `Counter` using a unique key. */
  deleteCounterByName?: Maybe<DeleteCounterPayload>;
  /** Deletes a single `Counter` using its globally unique id. */
  deleteCounterByNodeId?: Maybe<DeleteCounterPayload>;
  /** Deletes a single `DataChangelog` using a unique key. */
  deleteDataChangelog?: Maybe<DeleteDataChangelogPayload>;
  /** Deletes a single `DataChangelog` using its globally unique id. */
  deleteDataChangelogByNodeId?: Maybe<DeleteDataChangelogPayload>;
  /** Deletes a single `DataTable` using a unique key. */
  deleteDataTable?: Maybe<DeleteDataTablePayload>;
  /** Deletes a single `DataTable` using its globally unique id. */
  deleteDataTableByNodeId?: Maybe<DeleteDataTablePayload>;
  /** Deletes a single `DataTable` using a unique key. */
  deleteDataTableByTableName?: Maybe<DeleteDataTablePayload>;
  /** Deletes a single `DataView` using a unique key. */
  deleteDataView?: Maybe<DeleteDataViewPayload>;
  /** Deletes a single `DataView` using a unique key. */
  deleteDataViewByIdentifier?: Maybe<DeleteDataViewPayload>;
  /** Deletes a single `DataView` using its globally unique id. */
  deleteDataViewByNodeId?: Maybe<DeleteDataViewPayload>;
  /** Deletes a single `DataViewColumnDefinition` using a unique key. */
  deleteDataViewColumnDefinition?: Maybe<DeleteDataViewColumnDefinitionPayload>;
  /** Deletes a single `DataViewColumnDefinition` using its globally unique id. */
  deleteDataViewColumnDefinitionByNodeId?: Maybe<DeleteDataViewColumnDefinitionPayload>;
  /** Deletes a single `DataViewColumnDefinition` using a unique key. */
  deleteDataViewColumnDefinitionByTableNameAndColumnName?: Maybe<DeleteDataViewColumnDefinitionPayload>;
  /** Deletes a single `ElementTypePlugin` using a unique key. */
  deleteElementTypePlugin?: Maybe<DeleteElementTypePluginPayload>;
  /** Deletes a single `ElementTypePlugin` using its globally unique id. */
  deleteElementTypePluginByNodeId?: Maybe<DeleteElementTypePluginPayload>;
  /** Deletes a single `File` using a unique key. */
  deleteFile?: Maybe<DeleteFilePayload>;
  /** Deletes a single `File` using its globally unique id. */
  deleteFileByNodeId?: Maybe<DeleteFilePayload>;
  /** Deletes a single `File` using a unique key. */
  deleteFileByUniqueId?: Maybe<DeleteFilePayload>;
  /** Deletes a single `Filter` using a unique key. */
  deleteFilter?: Maybe<DeleteFilterPayload>;
  /** Deletes a single `Filter` using a unique key. */
  deleteFilterByCode?: Maybe<DeleteFilterPayload>;
  /** Deletes a single `Filter` using its globally unique id. */
  deleteFilterByNodeId?: Maybe<DeleteFilterPayload>;
  /** Deletes a single `Notification` using a unique key. */
  deleteNotification?: Maybe<DeleteNotificationPayload>;
  /** Deletes a single `Notification` using its globally unique id. */
  deleteNotificationByNodeId?: Maybe<DeleteNotificationPayload>;
  /** Deletes a single `Organisation` using a unique key. */
  deleteOrganisation?: Maybe<DeleteOrganisationPayload>;
  /** Deletes a single `Organisation` using a unique key. */
  deleteOrganisationByName?: Maybe<DeleteOrganisationPayload>;
  /** Deletes a single `Organisation` using its globally unique id. */
  deleteOrganisationByNodeId?: Maybe<DeleteOrganisationPayload>;
  /** Deletes a single `Organisation` using a unique key. */
  deleteOrganisationByRegistration?: Maybe<DeleteOrganisationPayload>;
  /** Deletes a single `PermissionJoin` using a unique key. */
  deletePermissionJoin?: Maybe<DeletePermissionJoinPayload>;
  /** Deletes a single `PermissionJoin` using its globally unique id. */
  deletePermissionJoinByNodeId?: Maybe<DeletePermissionJoinPayload>;
  /** Deletes a single `PermissionName` using a unique key. */
  deletePermissionName?: Maybe<DeletePermissionNamePayload>;
  /** Deletes a single `PermissionName` using a unique key. */
  deletePermissionNameByName?: Maybe<DeletePermissionNamePayload>;
  /** Deletes a single `PermissionName` using its globally unique id. */
  deletePermissionNameByNodeId?: Maybe<DeletePermissionNamePayload>;
  /** Deletes a single `PermissionPolicy` using a unique key. */
  deletePermissionPolicy?: Maybe<DeletePermissionPolicyPayload>;
  /** Deletes a single `PermissionPolicy` using a unique key. */
  deletePermissionPolicyByName?: Maybe<DeletePermissionPolicyPayload>;
  /** Deletes a single `PermissionPolicy` using its globally unique id. */
  deletePermissionPolicyByNodeId?: Maybe<DeletePermissionPolicyPayload>;
  /** Deletes a single `Review` using a unique key. */
  deleteReview?: Maybe<DeleteReviewPayload>;
  /** Deletes a single `ReviewAssignment` using a unique key. */
  deleteReviewAssignment?: Maybe<DeleteReviewAssignmentPayload>;
  /** Deletes a single `ReviewAssignmentAssignerJoin` using a unique key. */
  deleteReviewAssignmentAssignerJoin?: Maybe<DeleteReviewAssignmentAssignerJoinPayload>;
  /** Deletes a single `ReviewAssignmentAssignerJoin` using its globally unique id. */
  deleteReviewAssignmentAssignerJoinByNodeId?: Maybe<DeleteReviewAssignmentAssignerJoinPayload>;
  /** Deletes a single `ReviewAssignment` using its globally unique id. */
  deleteReviewAssignmentByNodeId?: Maybe<DeleteReviewAssignmentPayload>;
  /** Deletes a single `Review` using its globally unique id. */
  deleteReviewByNodeId?: Maybe<DeleteReviewPayload>;
  /** Deletes a single `Review` using a unique key. */
  deleteReviewByReviewAssignmentId?: Maybe<DeleteReviewPayload>;
  /** Deletes a single `ReviewDecision` using a unique key. */
  deleteReviewDecision?: Maybe<DeleteReviewDecisionPayload>;
  /** Deletes a single `ReviewDecision` using its globally unique id. */
  deleteReviewDecisionByNodeId?: Maybe<DeleteReviewDecisionPayload>;
  /** Deletes a single `ReviewResponse` using a unique key. */
  deleteReviewResponse?: Maybe<DeleteReviewResponsePayload>;
  /** Deletes a single `ReviewResponse` using its globally unique id. */
  deleteReviewResponseByNodeId?: Maybe<DeleteReviewResponsePayload>;
  /** Deletes a single `ReviewStatusHistory` using a unique key. */
  deleteReviewStatusHistory?: Maybe<DeleteReviewStatusHistoryPayload>;
  /** Deletes a single `ReviewStatusHistory` using its globally unique id. */
  deleteReviewStatusHistoryByNodeId?: Maybe<DeleteReviewStatusHistoryPayload>;
  /** Deletes a single `SystemInfo` using a unique key. */
  deleteSystemInfo?: Maybe<DeleteSystemInfoPayload>;
  /** Deletes a single `SystemInfo` using its globally unique id. */
  deleteSystemInfoByNodeId?: Maybe<DeleteSystemInfoPayload>;
  /** Deletes a single `Template` using a unique key. */
  deleteTemplate?: Maybe<DeleteTemplatePayload>;
  /** Deletes a single `TemplateAction` using a unique key. */
  deleteTemplateAction?: Maybe<DeleteTemplateActionPayload>;
  /** Deletes a single `TemplateAction` using its globally unique id. */
  deleteTemplateActionByNodeId?: Maybe<DeleteTemplateActionPayload>;
  /** Deletes a single `Template` using a unique key. */
  deleteTemplateByCodeAndVersionId?: Maybe<DeleteTemplatePayload>;
  /** Deletes a single `Template` using its globally unique id. */
  deleteTemplateByNodeId?: Maybe<DeleteTemplatePayload>;
  /** Deletes a single `TemplateCategory` using a unique key. */
  deleteTemplateCategory?: Maybe<DeleteTemplateCategoryPayload>;
  /** Deletes a single `TemplateCategory` using a unique key. */
  deleteTemplateCategoryByCode?: Maybe<DeleteTemplateCategoryPayload>;
  /** Deletes a single `TemplateCategory` using its globally unique id. */
  deleteTemplateCategoryByNodeId?: Maybe<DeleteTemplateCategoryPayload>;
  /** Deletes a single `TemplateElement` using a unique key. */
  deleteTemplateElement?: Maybe<DeleteTemplateElementPayload>;
  /** Deletes a single `TemplateElement` using its globally unique id. */
  deleteTemplateElementByNodeId?: Maybe<DeleteTemplateElementPayload>;
  /** Deletes a single `TemplateElement` using a unique key. */
  deleteTemplateElementByTemplateCodeAndCodeAndTemplateVersion?: Maybe<DeleteTemplateElementPayload>;
  /** Deletes a single `TemplateFilterJoin` using a unique key. */
  deleteTemplateFilterJoin?: Maybe<DeleteTemplateFilterJoinPayload>;
  /** Deletes a single `TemplateFilterJoin` using its globally unique id. */
  deleteTemplateFilterJoinByNodeId?: Maybe<DeleteTemplateFilterJoinPayload>;
  /** Deletes a single `TemplatePermission` using a unique key. */
  deleteTemplatePermission?: Maybe<DeleteTemplatePermissionPayload>;
  /** Deletes a single `TemplatePermission` using its globally unique id. */
  deleteTemplatePermissionByNodeId?: Maybe<DeleteTemplatePermissionPayload>;
  /** Deletes a single `TemplateSection` using a unique key. */
  deleteTemplateSection?: Maybe<DeleteTemplateSectionPayload>;
  /** Deletes a single `TemplateSection` using its globally unique id. */
  deleteTemplateSectionByNodeId?: Maybe<DeleteTemplateSectionPayload>;
  /** Deletes a single `TemplateSection` using a unique key. */
  deleteTemplateSectionByTemplateIdAndCode?: Maybe<DeleteTemplateSectionPayload>;
  /** Deletes a single `TemplateStage` using a unique key. */
  deleteTemplateStage?: Maybe<DeleteTemplateStagePayload>;
  /** Deletes a single `TemplateStage` using its globally unique id. */
  deleteTemplateStageByNodeId?: Maybe<DeleteTemplateStagePayload>;
  /** Deletes a single `TemplateStageReviewLevel` using a unique key. */
  deleteTemplateStageReviewLevel?: Maybe<DeleteTemplateStageReviewLevelPayload>;
  /** Deletes a single `TemplateStageReviewLevel` using its globally unique id. */
  deleteTemplateStageReviewLevelByNodeId?: Maybe<DeleteTemplateStageReviewLevelPayload>;
  /** Deletes a single `TriggerQueue` using a unique key. */
  deleteTriggerQueue?: Maybe<DeleteTriggerQueuePayload>;
  /** Deletes a single `TriggerQueue` using its globally unique id. */
  deleteTriggerQueueByNodeId?: Maybe<DeleteTriggerQueuePayload>;
  /** Deletes a single `TriggerSchedule` using a unique key. */
  deleteTriggerSchedule?: Maybe<DeleteTriggerSchedulePayload>;
  /** Deletes a single `TriggerSchedule` using its globally unique id. */
  deleteTriggerScheduleByNodeId?: Maybe<DeleteTriggerSchedulePayload>;
  /** Deletes a single `UserOrganisation` using a unique key. */
  deleteUserOrganisation?: Maybe<DeleteUserOrganisationPayload>;
  /** Deletes a single `UserOrganisation` using its globally unique id. */
  deleteUserOrganisationByNodeId?: Maybe<DeleteUserOrganisationPayload>;
  /** Deletes a single `UserOrganisation` using a unique key. */
  deleteUserOrganisationByUserIdAndOrganisationId?: Maybe<DeleteUserOrganisationPayload>;
  /** Deletes a single `Verification` using a unique key. */
  deleteVerification?: Maybe<DeleteVerificationPayload>;
  /** Deletes a single `Verification` using its globally unique id. */
  deleteVerificationByNodeId?: Maybe<DeleteVerificationPayload>;
  /** Deletes a single `Verification` using a unique key. */
  deleteVerificationByUniqueId?: Maybe<DeleteVerificationPayload>;
  deleteWholeApplication?: Maybe<DeleteWholeApplicationPayload>;
  /** Updates a single `ActionPlugin` using a unique key and a patch. */
  updateActionPlugin?: Maybe<UpdateActionPluginPayload>;
  /** Updates a single `ActionPlugin` using a unique key and a patch. */
  updateActionPluginByCode?: Maybe<UpdateActionPluginPayload>;
  /** Updates a single `ActionPlugin` using its globally unique id and a patch. */
  updateActionPluginByNodeId?: Maybe<UpdateActionPluginPayload>;
  /** Updates a single `ActionQueue` using a unique key and a patch. */
  updateActionQueue?: Maybe<UpdateActionQueuePayload>;
  /** Updates a single `ActionQueue` using its globally unique id and a patch. */
  updateActionQueueByNodeId?: Maybe<UpdateActionQueuePayload>;
  /** Updates a single `ActivityLog` using a unique key and a patch. */
  updateActivityLog?: Maybe<UpdateActivityLogPayload>;
  /** Updates a single `ActivityLog` using its globally unique id and a patch. */
  updateActivityLogByNodeId?: Maybe<UpdateActivityLogPayload>;
  /** Updates a single `Application` using a unique key and a patch. */
  updateApplication?: Maybe<UpdateApplicationPayload>;
  /** Updates a single `Application` using its globally unique id and a patch. */
  updateApplicationByNodeId?: Maybe<UpdateApplicationPayload>;
  /** Updates a single `Application` using a unique key and a patch. */
  updateApplicationByOutcomeRegistration?: Maybe<UpdateApplicationPayload>;
  /** Updates a single `Application` using a unique key and a patch. */
  updateApplicationBySerial?: Maybe<UpdateApplicationPayload>;
  /** Updates a single `ApplicationNote` using a unique key and a patch. */
  updateApplicationNote?: Maybe<UpdateApplicationNotePayload>;
  /** Updates a single `ApplicationNote` using its globally unique id and a patch. */
  updateApplicationNoteByNodeId?: Maybe<UpdateApplicationNotePayload>;
  /** Updates a single `ApplicationResponse` using a unique key and a patch. */
  updateApplicationResponse?: Maybe<UpdateApplicationResponsePayload>;
  /** Updates a single `ApplicationResponse` using its globally unique id and a patch. */
  updateApplicationResponseByNodeId?: Maybe<UpdateApplicationResponsePayload>;
  /** Updates a single `ApplicationReviewerAction` using a unique key and a patch. */
  updateApplicationReviewerAction?: Maybe<UpdateApplicationReviewerActionPayload>;
  /** Updates a single `ApplicationReviewerAction` using its globally unique id and a patch. */
  updateApplicationReviewerActionByNodeId?: Maybe<UpdateApplicationReviewerActionPayload>;
  /** Updates a single `ApplicationReviewerAction` using a unique key and a patch. */
  updateApplicationReviewerActionByUserIdAndApplicationId?: Maybe<UpdateApplicationReviewerActionPayload>;
  /** Updates a single `ApplicationStageHistory` using a unique key and a patch. */
  updateApplicationStageHistory?: Maybe<UpdateApplicationStageHistoryPayload>;
  /** Updates a single `ApplicationStageHistory` using its globally unique id and a patch. */
  updateApplicationStageHistoryByNodeId?: Maybe<UpdateApplicationStageHistoryPayload>;
  /** Updates a single `ApplicationStatusHistory` using a unique key and a patch. */
  updateApplicationStatusHistory?: Maybe<UpdateApplicationStatusHistoryPayload>;
  /** Updates a single `ApplicationStatusHistory` using its globally unique id and a patch. */
  updateApplicationStatusHistoryByNodeId?: Maybe<UpdateApplicationStatusHistoryPayload>;
  /** Updates a single `Counter` using a unique key and a patch. */
  updateCounter?: Maybe<UpdateCounterPayload>;
  /** Updates a single `Counter` using a unique key and a patch. */
  updateCounterByName?: Maybe<UpdateCounterPayload>;
  /** Updates a single `Counter` using its globally unique id and a patch. */
  updateCounterByNodeId?: Maybe<UpdateCounterPayload>;
  /** Updates a single `DataChangelog` using a unique key and a patch. */
  updateDataChangelog?: Maybe<UpdateDataChangelogPayload>;
  /** Updates a single `DataChangelog` using its globally unique id and a patch. */
  updateDataChangelogByNodeId?: Maybe<UpdateDataChangelogPayload>;
  /** Updates a single `DataTable` using a unique key and a patch. */
  updateDataTable?: Maybe<UpdateDataTablePayload>;
  /** Updates a single `DataTable` using its globally unique id and a patch. */
  updateDataTableByNodeId?: Maybe<UpdateDataTablePayload>;
  /** Updates a single `DataTable` using a unique key and a patch. */
  updateDataTableByTableName?: Maybe<UpdateDataTablePayload>;
  /** Updates a single `DataView` using a unique key and a patch. */
  updateDataView?: Maybe<UpdateDataViewPayload>;
  /** Updates a single `DataView` using a unique key and a patch. */
  updateDataViewByIdentifier?: Maybe<UpdateDataViewPayload>;
  /** Updates a single `DataView` using its globally unique id and a patch. */
  updateDataViewByNodeId?: Maybe<UpdateDataViewPayload>;
  /** Updates a single `DataViewColumnDefinition` using a unique key and a patch. */
  updateDataViewColumnDefinition?: Maybe<UpdateDataViewColumnDefinitionPayload>;
  /** Updates a single `DataViewColumnDefinition` using its globally unique id and a patch. */
  updateDataViewColumnDefinitionByNodeId?: Maybe<UpdateDataViewColumnDefinitionPayload>;
  /** Updates a single `DataViewColumnDefinition` using a unique key and a patch. */
  updateDataViewColumnDefinitionByTableNameAndColumnName?: Maybe<UpdateDataViewColumnDefinitionPayload>;
  /** Updates a single `ElementTypePlugin` using a unique key and a patch. */
  updateElementTypePlugin?: Maybe<UpdateElementTypePluginPayload>;
  /** Updates a single `ElementTypePlugin` using its globally unique id and a patch. */
  updateElementTypePluginByNodeId?: Maybe<UpdateElementTypePluginPayload>;
  /** Updates a single `File` using a unique key and a patch. */
  updateFile?: Maybe<UpdateFilePayload>;
  /** Updates a single `File` using its globally unique id and a patch. */
  updateFileByNodeId?: Maybe<UpdateFilePayload>;
  /** Updates a single `File` using a unique key and a patch. */
  updateFileByUniqueId?: Maybe<UpdateFilePayload>;
  /** Updates a single `Filter` using a unique key and a patch. */
  updateFilter?: Maybe<UpdateFilterPayload>;
  /** Updates a single `Filter` using a unique key and a patch. */
  updateFilterByCode?: Maybe<UpdateFilterPayload>;
  /** Updates a single `Filter` using its globally unique id and a patch. */
  updateFilterByNodeId?: Maybe<UpdateFilterPayload>;
  /** Updates a single `Notification` using a unique key and a patch. */
  updateNotification?: Maybe<UpdateNotificationPayload>;
  /** Updates a single `Notification` using its globally unique id and a patch. */
  updateNotificationByNodeId?: Maybe<UpdateNotificationPayload>;
  /** Updates a single `Organisation` using a unique key and a patch. */
  updateOrganisation?: Maybe<UpdateOrganisationPayload>;
  /** Updates a single `Organisation` using a unique key and a patch. */
  updateOrganisationByName?: Maybe<UpdateOrganisationPayload>;
  /** Updates a single `Organisation` using its globally unique id and a patch. */
  updateOrganisationByNodeId?: Maybe<UpdateOrganisationPayload>;
  /** Updates a single `Organisation` using a unique key and a patch. */
  updateOrganisationByRegistration?: Maybe<UpdateOrganisationPayload>;
  /** Updates a single `PermissionJoin` using a unique key and a patch. */
  updatePermissionJoin?: Maybe<UpdatePermissionJoinPayload>;
  /** Updates a single `PermissionJoin` using its globally unique id and a patch. */
  updatePermissionJoinByNodeId?: Maybe<UpdatePermissionJoinPayload>;
  /** Updates a single `PermissionName` using a unique key and a patch. */
  updatePermissionName?: Maybe<UpdatePermissionNamePayload>;
  /** Updates a single `PermissionName` using a unique key and a patch. */
  updatePermissionNameByName?: Maybe<UpdatePermissionNamePayload>;
  /** Updates a single `PermissionName` using its globally unique id and a patch. */
  updatePermissionNameByNodeId?: Maybe<UpdatePermissionNamePayload>;
  /** Updates a single `PermissionPolicy` using a unique key and a patch. */
  updatePermissionPolicy?: Maybe<UpdatePermissionPolicyPayload>;
  /** Updates a single `PermissionPolicy` using a unique key and a patch. */
  updatePermissionPolicyByName?: Maybe<UpdatePermissionPolicyPayload>;
  /** Updates a single `PermissionPolicy` using its globally unique id and a patch. */
  updatePermissionPolicyByNodeId?: Maybe<UpdatePermissionPolicyPayload>;
  /** Updates a single `Review` using a unique key and a patch. */
  updateReview?: Maybe<UpdateReviewPayload>;
  /** Updates a single `ReviewAssignment` using a unique key and a patch. */
  updateReviewAssignment?: Maybe<UpdateReviewAssignmentPayload>;
  /** Updates a single `ReviewAssignmentAssignerJoin` using a unique key and a patch. */
  updateReviewAssignmentAssignerJoin?: Maybe<UpdateReviewAssignmentAssignerJoinPayload>;
  /** Updates a single `ReviewAssignmentAssignerJoin` using its globally unique id and a patch. */
  updateReviewAssignmentAssignerJoinByNodeId?: Maybe<UpdateReviewAssignmentAssignerJoinPayload>;
  /** Updates a single `ReviewAssignment` using its globally unique id and a patch. */
  updateReviewAssignmentByNodeId?: Maybe<UpdateReviewAssignmentPayload>;
  /** Updates a single `Review` using its globally unique id and a patch. */
  updateReviewByNodeId?: Maybe<UpdateReviewPayload>;
  /** Updates a single `Review` using a unique key and a patch. */
  updateReviewByReviewAssignmentId?: Maybe<UpdateReviewPayload>;
  /** Updates a single `ReviewDecision` using a unique key and a patch. */
  updateReviewDecision?: Maybe<UpdateReviewDecisionPayload>;
  /** Updates a single `ReviewDecision` using its globally unique id and a patch. */
  updateReviewDecisionByNodeId?: Maybe<UpdateReviewDecisionPayload>;
  /** Updates a single `ReviewResponse` using a unique key and a patch. */
  updateReviewResponse?: Maybe<UpdateReviewResponsePayload>;
  /** Updates a single `ReviewResponse` using its globally unique id and a patch. */
  updateReviewResponseByNodeId?: Maybe<UpdateReviewResponsePayload>;
  /** Updates a single `ReviewStatusHistory` using a unique key and a patch. */
  updateReviewStatusHistory?: Maybe<UpdateReviewStatusHistoryPayload>;
  /** Updates a single `ReviewStatusHistory` using its globally unique id and a patch. */
  updateReviewStatusHistoryByNodeId?: Maybe<UpdateReviewStatusHistoryPayload>;
  /** Updates a single `SystemInfo` using a unique key and a patch. */
  updateSystemInfo?: Maybe<UpdateSystemInfoPayload>;
  /** Updates a single `SystemInfo` using its globally unique id and a patch. */
  updateSystemInfoByNodeId?: Maybe<UpdateSystemInfoPayload>;
  /** Updates a single `Template` using a unique key and a patch. */
  updateTemplate?: Maybe<UpdateTemplatePayload>;
  /** Updates a single `TemplateAction` using a unique key and a patch. */
  updateTemplateAction?: Maybe<UpdateTemplateActionPayload>;
  /** Updates a single `TemplateAction` using its globally unique id and a patch. */
  updateTemplateActionByNodeId?: Maybe<UpdateTemplateActionPayload>;
  /** Updates a single `Template` using a unique key and a patch. */
  updateTemplateByCodeAndVersionId?: Maybe<UpdateTemplatePayload>;
  /** Updates a single `Template` using its globally unique id and a patch. */
  updateTemplateByNodeId?: Maybe<UpdateTemplatePayload>;
  /** Updates a single `TemplateCategory` using a unique key and a patch. */
  updateTemplateCategory?: Maybe<UpdateTemplateCategoryPayload>;
  /** Updates a single `TemplateCategory` using a unique key and a patch. */
  updateTemplateCategoryByCode?: Maybe<UpdateTemplateCategoryPayload>;
  /** Updates a single `TemplateCategory` using its globally unique id and a patch. */
  updateTemplateCategoryByNodeId?: Maybe<UpdateTemplateCategoryPayload>;
  /** Updates a single `TemplateElement` using a unique key and a patch. */
  updateTemplateElement?: Maybe<UpdateTemplateElementPayload>;
  /** Updates a single `TemplateElement` using its globally unique id and a patch. */
  updateTemplateElementByNodeId?: Maybe<UpdateTemplateElementPayload>;
  /** Updates a single `TemplateElement` using a unique key and a patch. */
  updateTemplateElementByTemplateCodeAndCodeAndTemplateVersion?: Maybe<UpdateTemplateElementPayload>;
  /** Updates a single `TemplateFilterJoin` using a unique key and a patch. */
  updateTemplateFilterJoin?: Maybe<UpdateTemplateFilterJoinPayload>;
  /** Updates a single `TemplateFilterJoin` using its globally unique id and a patch. */
  updateTemplateFilterJoinByNodeId?: Maybe<UpdateTemplateFilterJoinPayload>;
  /** Updates a single `TemplatePermission` using a unique key and a patch. */
  updateTemplatePermission?: Maybe<UpdateTemplatePermissionPayload>;
  /** Updates a single `TemplatePermission` using its globally unique id and a patch. */
  updateTemplatePermissionByNodeId?: Maybe<UpdateTemplatePermissionPayload>;
  /** Updates a single `TemplateSection` using a unique key and a patch. */
  updateTemplateSection?: Maybe<UpdateTemplateSectionPayload>;
  /** Updates a single `TemplateSection` using its globally unique id and a patch. */
  updateTemplateSectionByNodeId?: Maybe<UpdateTemplateSectionPayload>;
  /** Updates a single `TemplateSection` using a unique key and a patch. */
  updateTemplateSectionByTemplateIdAndCode?: Maybe<UpdateTemplateSectionPayload>;
  /** Updates a single `TemplateStage` using a unique key and a patch. */
  updateTemplateStage?: Maybe<UpdateTemplateStagePayload>;
  /** Updates a single `TemplateStage` using its globally unique id and a patch. */
  updateTemplateStageByNodeId?: Maybe<UpdateTemplateStagePayload>;
  /** Updates a single `TemplateStageReviewLevel` using a unique key and a patch. */
  updateTemplateStageReviewLevel?: Maybe<UpdateTemplateStageReviewLevelPayload>;
  /** Updates a single `TemplateStageReviewLevel` using its globally unique id and a patch. */
  updateTemplateStageReviewLevelByNodeId?: Maybe<UpdateTemplateStageReviewLevelPayload>;
  /** Updates a single `TriggerQueue` using a unique key and a patch. */
  updateTriggerQueue?: Maybe<UpdateTriggerQueuePayload>;
  /** Updates a single `TriggerQueue` using its globally unique id and a patch. */
  updateTriggerQueueByNodeId?: Maybe<UpdateTriggerQueuePayload>;
  /** Updates a single `TriggerSchedule` using a unique key and a patch. */
  updateTriggerSchedule?: Maybe<UpdateTriggerSchedulePayload>;
  /** Updates a single `TriggerSchedule` using its globally unique id and a patch. */
  updateTriggerScheduleByNodeId?: Maybe<UpdateTriggerSchedulePayload>;
  /** Updates a single `UserOrganisation` using a unique key and a patch. */
  updateUserOrganisation?: Maybe<UpdateUserOrganisationPayload>;
  /** Updates a single `UserOrganisation` using its globally unique id and a patch. */
  updateUserOrganisationByNodeId?: Maybe<UpdateUserOrganisationPayload>;
  /** Updates a single `UserOrganisation` using a unique key and a patch. */
  updateUserOrganisationByUserIdAndOrganisationId?: Maybe<UpdateUserOrganisationPayload>;
  /** Updates a single `Verification` using a unique key and a patch. */
  updateVerification?: Maybe<UpdateVerificationPayload>;
  /** Updates a single `Verification` using its globally unique id and a patch. */
  updateVerificationByNodeId?: Maybe<UpdateVerificationPayload>;
  /** Updates a single `Verification` using a unique key and a patch. */
  updateVerificationByUniqueId?: Maybe<UpdateVerificationPayload>;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateActionPluginArgs = {
  input: CreateActionPluginInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateActionQueueArgs = {
  input: CreateActionQueueInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateActivityLogArgs = {
  input: CreateActivityLogInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateAllowedSelfAssignableSectionsShapeArgs = {
  input: CreateAllowedSelfAssignableSectionsShapeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateApplicationArgs = {
  input: CreateApplicationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateApplicationListShapeArgs = {
  input: CreateApplicationListShapeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateApplicationNoteArgs = {
  input: CreateApplicationNoteInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateApplicationResponseArgs = {
  input: CreateApplicationResponseInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateApplicationReviewerActionArgs = {
  input: CreateApplicationReviewerActionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateApplicationStageHistoryArgs = {
  input: CreateApplicationStageHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateApplicationStatusHistoryArgs = {
  input: CreateApplicationStatusHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateCounterArgs = {
  input: CreateCounterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataChangelogArgs = {
  input: CreateDataChangelogInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataTableArgs = {
  input: CreateDataTableInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataViewArgs = {
  input: CreateDataViewInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateDataViewColumnDefinitionArgs = {
  input: CreateDataViewColumnDefinitionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateElementTypePluginArgs = {
  input: CreateElementTypePluginInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateFileArgs = {
  input: CreateFileInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateFilterArgs = {
  input: CreateFilterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateNotificationArgs = {
  input: CreateNotificationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateOrganisationArgs = {
  input: CreateOrganisationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePermissionJoinArgs = {
  input: CreatePermissionJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePermissionNameArgs = {
  input: CreatePermissionNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreatePermissionPolicyArgs = {
  input: CreatePermissionPolicyInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateReviewArgs = {
  input: CreateReviewInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateReviewAssignmentArgs = {
  input: CreateReviewAssignmentInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateReviewAssignmentAssignedSectionsShapeArgs = {
  input: CreateReviewAssignmentAssignedSectionsShapeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateReviewAssignmentAssignerJoinArgs = {
  input: CreateReviewAssignmentAssignerJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateReviewDecisionArgs = {
  input: CreateReviewDecisionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateReviewResponseArgs = {
  input: CreateReviewResponseInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateReviewStatusHistoryArgs = {
  input: CreateReviewStatusHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateSystemInfoArgs = {
  input: CreateSystemInfoInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTemplateArgs = {
  input: CreateTemplateInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTemplateActionArgs = {
  input: CreateTemplateActionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTemplateCategoryArgs = {
  input: CreateTemplateCategoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTemplateElementArgs = {
  input: CreateTemplateElementInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTemplateFilterJoinArgs = {
  input: CreateTemplateFilterJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTemplatePermissionArgs = {
  input: CreateTemplatePermissionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTemplateSectionArgs = {
  input: CreateTemplateSectionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTemplateStageArgs = {
  input: CreateTemplateStageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTemplateStageReviewLevelArgs = {
  input: CreateTemplateStageReviewLevelInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTriggerQueueArgs = {
  input: CreateTriggerQueueInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateTriggerScheduleArgs = {
  input: CreateTriggerScheduleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserArgs = {
  input: CreateUserInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserListArgs = {
  input: CreateUserListInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateUserOrganisationArgs = {
  input: CreateUserOrganisationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationCreateVerificationArgs = {
  input: CreateVerificationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteActionPluginArgs = {
  input: DeleteActionPluginInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteActionPluginByCodeArgs = {
  input: DeleteActionPluginByCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteActionPluginByNodeIdArgs = {
  input: DeleteActionPluginByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteActionQueueArgs = {
  input: DeleteActionQueueInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteActionQueueByNodeIdArgs = {
  input: DeleteActionQueueByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteActivityLogArgs = {
  input: DeleteActivityLogInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteActivityLogByNodeIdArgs = {
  input: DeleteActivityLogByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationArgs = {
  input: DeleteApplicationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationByNodeIdArgs = {
  input: DeleteApplicationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationByOutcomeRegistrationArgs = {
  input: DeleteApplicationByOutcomeRegistrationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationBySerialArgs = {
  input: DeleteApplicationBySerialInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationNoteArgs = {
  input: DeleteApplicationNoteInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationNoteByNodeIdArgs = {
  input: DeleteApplicationNoteByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationResponseArgs = {
  input: DeleteApplicationResponseInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationResponseByNodeIdArgs = {
  input: DeleteApplicationResponseByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationReviewerActionArgs = {
  input: DeleteApplicationReviewerActionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationReviewerActionByNodeIdArgs = {
  input: DeleteApplicationReviewerActionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationReviewerActionByUserIdAndApplicationIdArgs = {
  input: DeleteApplicationReviewerActionByUserIdAndApplicationIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationStageHistoryArgs = {
  input: DeleteApplicationStageHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationStageHistoryByNodeIdArgs = {
  input: DeleteApplicationStageHistoryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationStatusHistoryArgs = {
  input: DeleteApplicationStatusHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteApplicationStatusHistoryByNodeIdArgs = {
  input: DeleteApplicationStatusHistoryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCounterArgs = {
  input: DeleteCounterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCounterByNameArgs = {
  input: DeleteCounterByNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteCounterByNodeIdArgs = {
  input: DeleteCounterByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataChangelogArgs = {
  input: DeleteDataChangelogInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataChangelogByNodeIdArgs = {
  input: DeleteDataChangelogByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableArgs = {
  input: DeleteDataTableInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableByNodeIdArgs = {
  input: DeleteDataTableByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataTableByTableNameArgs = {
  input: DeleteDataTableByTableNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataViewArgs = {
  input: DeleteDataViewInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataViewByIdentifierArgs = {
  input: DeleteDataViewByIdentifierInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataViewByNodeIdArgs = {
  input: DeleteDataViewByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataViewColumnDefinitionArgs = {
  input: DeleteDataViewColumnDefinitionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataViewColumnDefinitionByNodeIdArgs = {
  input: DeleteDataViewColumnDefinitionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteDataViewColumnDefinitionByTableNameAndColumnNameArgs = {
  input: DeleteDataViewColumnDefinitionByTableNameAndColumnNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteElementTypePluginArgs = {
  input: DeleteElementTypePluginInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteElementTypePluginByNodeIdArgs = {
  input: DeleteElementTypePluginByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteFileArgs = {
  input: DeleteFileInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteFileByNodeIdArgs = {
  input: DeleteFileByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteFileByUniqueIdArgs = {
  input: DeleteFileByUniqueIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteFilterArgs = {
  input: DeleteFilterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteFilterByCodeArgs = {
  input: DeleteFilterByCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteFilterByNodeIdArgs = {
  input: DeleteFilterByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteNotificationArgs = {
  input: DeleteNotificationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteNotificationByNodeIdArgs = {
  input: DeleteNotificationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteOrganisationArgs = {
  input: DeleteOrganisationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteOrganisationByNameArgs = {
  input: DeleteOrganisationByNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteOrganisationByNodeIdArgs = {
  input: DeleteOrganisationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteOrganisationByRegistrationArgs = {
  input: DeleteOrganisationByRegistrationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePermissionJoinArgs = {
  input: DeletePermissionJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePermissionJoinByNodeIdArgs = {
  input: DeletePermissionJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePermissionNameArgs = {
  input: DeletePermissionNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePermissionNameByNameArgs = {
  input: DeletePermissionNameByNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePermissionNameByNodeIdArgs = {
  input: DeletePermissionNameByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePermissionPolicyArgs = {
  input: DeletePermissionPolicyInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePermissionPolicyByNameArgs = {
  input: DeletePermissionPolicyByNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeletePermissionPolicyByNodeIdArgs = {
  input: DeletePermissionPolicyByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewArgs = {
  input: DeleteReviewInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewAssignmentArgs = {
  input: DeleteReviewAssignmentInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewAssignmentAssignerJoinArgs = {
  input: DeleteReviewAssignmentAssignerJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewAssignmentAssignerJoinByNodeIdArgs = {
  input: DeleteReviewAssignmentAssignerJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewAssignmentByNodeIdArgs = {
  input: DeleteReviewAssignmentByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewByNodeIdArgs = {
  input: DeleteReviewByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewByReviewAssignmentIdArgs = {
  input: DeleteReviewByReviewAssignmentIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewDecisionArgs = {
  input: DeleteReviewDecisionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewDecisionByNodeIdArgs = {
  input: DeleteReviewDecisionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewResponseArgs = {
  input: DeleteReviewResponseInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewResponseByNodeIdArgs = {
  input: DeleteReviewResponseByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewStatusHistoryArgs = {
  input: DeleteReviewStatusHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteReviewStatusHistoryByNodeIdArgs = {
  input: DeleteReviewStatusHistoryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteSystemInfoArgs = {
  input: DeleteSystemInfoInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteSystemInfoByNodeIdArgs = {
  input: DeleteSystemInfoByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateArgs = {
  input: DeleteTemplateInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateActionArgs = {
  input: DeleteTemplateActionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateActionByNodeIdArgs = {
  input: DeleteTemplateActionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateByCodeAndVersionIdArgs = {
  input: DeleteTemplateByCodeAndVersionIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateByNodeIdArgs = {
  input: DeleteTemplateByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateCategoryArgs = {
  input: DeleteTemplateCategoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateCategoryByCodeArgs = {
  input: DeleteTemplateCategoryByCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateCategoryByNodeIdArgs = {
  input: DeleteTemplateCategoryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateElementArgs = {
  input: DeleteTemplateElementInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateElementByNodeIdArgs = {
  input: DeleteTemplateElementByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateElementByTemplateCodeAndCodeAndTemplateVersionArgs = {
  input: DeleteTemplateElementByTemplateCodeAndCodeAndTemplateVersionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateFilterJoinArgs = {
  input: DeleteTemplateFilterJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateFilterJoinByNodeIdArgs = {
  input: DeleteTemplateFilterJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplatePermissionArgs = {
  input: DeleteTemplatePermissionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplatePermissionByNodeIdArgs = {
  input: DeleteTemplatePermissionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateSectionArgs = {
  input: DeleteTemplateSectionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateSectionByNodeIdArgs = {
  input: DeleteTemplateSectionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateSectionByTemplateIdAndCodeArgs = {
  input: DeleteTemplateSectionByTemplateIdAndCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateStageArgs = {
  input: DeleteTemplateStageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateStageByNodeIdArgs = {
  input: DeleteTemplateStageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateStageReviewLevelArgs = {
  input: DeleteTemplateStageReviewLevelInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTemplateStageReviewLevelByNodeIdArgs = {
  input: DeleteTemplateStageReviewLevelByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTriggerQueueArgs = {
  input: DeleteTriggerQueueInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTriggerQueueByNodeIdArgs = {
  input: DeleteTriggerQueueByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTriggerScheduleArgs = {
  input: DeleteTriggerScheduleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteTriggerScheduleByNodeIdArgs = {
  input: DeleteTriggerScheduleByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserOrganisationArgs = {
  input: DeleteUserOrganisationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserOrganisationByNodeIdArgs = {
  input: DeleteUserOrganisationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteUserOrganisationByUserIdAndOrganisationIdArgs = {
  input: DeleteUserOrganisationByUserIdAndOrganisationIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteVerificationArgs = {
  input: DeleteVerificationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteVerificationByNodeIdArgs = {
  input: DeleteVerificationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteVerificationByUniqueIdArgs = {
  input: DeleteVerificationByUniqueIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationDeleteWholeApplicationArgs = {
  input: DeleteWholeApplicationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateActionPluginArgs = {
  input: UpdateActionPluginInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateActionPluginByCodeArgs = {
  input: UpdateActionPluginByCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateActionPluginByNodeIdArgs = {
  input: UpdateActionPluginByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateActionQueueArgs = {
  input: UpdateActionQueueInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateActionQueueByNodeIdArgs = {
  input: UpdateActionQueueByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateActivityLogArgs = {
  input: UpdateActivityLogInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateActivityLogByNodeIdArgs = {
  input: UpdateActivityLogByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationArgs = {
  input: UpdateApplicationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationByNodeIdArgs = {
  input: UpdateApplicationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationByOutcomeRegistrationArgs = {
  input: UpdateApplicationByOutcomeRegistrationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationBySerialArgs = {
  input: UpdateApplicationBySerialInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationNoteArgs = {
  input: UpdateApplicationNoteInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationNoteByNodeIdArgs = {
  input: UpdateApplicationNoteByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationResponseArgs = {
  input: UpdateApplicationResponseInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationResponseByNodeIdArgs = {
  input: UpdateApplicationResponseByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationReviewerActionArgs = {
  input: UpdateApplicationReviewerActionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationReviewerActionByNodeIdArgs = {
  input: UpdateApplicationReviewerActionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationReviewerActionByUserIdAndApplicationIdArgs = {
  input: UpdateApplicationReviewerActionByUserIdAndApplicationIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationStageHistoryArgs = {
  input: UpdateApplicationStageHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationStageHistoryByNodeIdArgs = {
  input: UpdateApplicationStageHistoryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationStatusHistoryArgs = {
  input: UpdateApplicationStatusHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateApplicationStatusHistoryByNodeIdArgs = {
  input: UpdateApplicationStatusHistoryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCounterArgs = {
  input: UpdateCounterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCounterByNameArgs = {
  input: UpdateCounterByNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateCounterByNodeIdArgs = {
  input: UpdateCounterByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataChangelogArgs = {
  input: UpdateDataChangelogInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataChangelogByNodeIdArgs = {
  input: UpdateDataChangelogByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableArgs = {
  input: UpdateDataTableInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableByNodeIdArgs = {
  input: UpdateDataTableByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataTableByTableNameArgs = {
  input: UpdateDataTableByTableNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataViewArgs = {
  input: UpdateDataViewInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataViewByIdentifierArgs = {
  input: UpdateDataViewByIdentifierInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataViewByNodeIdArgs = {
  input: UpdateDataViewByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataViewColumnDefinitionArgs = {
  input: UpdateDataViewColumnDefinitionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataViewColumnDefinitionByNodeIdArgs = {
  input: UpdateDataViewColumnDefinitionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateDataViewColumnDefinitionByTableNameAndColumnNameArgs = {
  input: UpdateDataViewColumnDefinitionByTableNameAndColumnNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateElementTypePluginArgs = {
  input: UpdateElementTypePluginInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateElementTypePluginByNodeIdArgs = {
  input: UpdateElementTypePluginByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateFileArgs = {
  input: UpdateFileInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateFileByNodeIdArgs = {
  input: UpdateFileByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateFileByUniqueIdArgs = {
  input: UpdateFileByUniqueIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateFilterArgs = {
  input: UpdateFilterInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateFilterByCodeArgs = {
  input: UpdateFilterByCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateFilterByNodeIdArgs = {
  input: UpdateFilterByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateNotificationArgs = {
  input: UpdateNotificationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateNotificationByNodeIdArgs = {
  input: UpdateNotificationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateOrganisationArgs = {
  input: UpdateOrganisationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateOrganisationByNameArgs = {
  input: UpdateOrganisationByNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateOrganisationByNodeIdArgs = {
  input: UpdateOrganisationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateOrganisationByRegistrationArgs = {
  input: UpdateOrganisationByRegistrationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePermissionJoinArgs = {
  input: UpdatePermissionJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePermissionJoinByNodeIdArgs = {
  input: UpdatePermissionJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePermissionNameArgs = {
  input: UpdatePermissionNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePermissionNameByNameArgs = {
  input: UpdatePermissionNameByNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePermissionNameByNodeIdArgs = {
  input: UpdatePermissionNameByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePermissionPolicyArgs = {
  input: UpdatePermissionPolicyInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePermissionPolicyByNameArgs = {
  input: UpdatePermissionPolicyByNameInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdatePermissionPolicyByNodeIdArgs = {
  input: UpdatePermissionPolicyByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewArgs = {
  input: UpdateReviewInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewAssignmentArgs = {
  input: UpdateReviewAssignmentInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewAssignmentAssignerJoinArgs = {
  input: UpdateReviewAssignmentAssignerJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewAssignmentAssignerJoinByNodeIdArgs = {
  input: UpdateReviewAssignmentAssignerJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewAssignmentByNodeIdArgs = {
  input: UpdateReviewAssignmentByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewByNodeIdArgs = {
  input: UpdateReviewByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewByReviewAssignmentIdArgs = {
  input: UpdateReviewByReviewAssignmentIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewDecisionArgs = {
  input: UpdateReviewDecisionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewDecisionByNodeIdArgs = {
  input: UpdateReviewDecisionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewResponseArgs = {
  input: UpdateReviewResponseInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewResponseByNodeIdArgs = {
  input: UpdateReviewResponseByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewStatusHistoryArgs = {
  input: UpdateReviewStatusHistoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateReviewStatusHistoryByNodeIdArgs = {
  input: UpdateReviewStatusHistoryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateSystemInfoArgs = {
  input: UpdateSystemInfoInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateSystemInfoByNodeIdArgs = {
  input: UpdateSystemInfoByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateArgs = {
  input: UpdateTemplateInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateActionArgs = {
  input: UpdateTemplateActionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateActionByNodeIdArgs = {
  input: UpdateTemplateActionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateByCodeAndVersionIdArgs = {
  input: UpdateTemplateByCodeAndVersionIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateByNodeIdArgs = {
  input: UpdateTemplateByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateCategoryArgs = {
  input: UpdateTemplateCategoryInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateCategoryByCodeArgs = {
  input: UpdateTemplateCategoryByCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateCategoryByNodeIdArgs = {
  input: UpdateTemplateCategoryByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateElementArgs = {
  input: UpdateTemplateElementInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateElementByNodeIdArgs = {
  input: UpdateTemplateElementByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateElementByTemplateCodeAndCodeAndTemplateVersionArgs = {
  input: UpdateTemplateElementByTemplateCodeAndCodeAndTemplateVersionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateFilterJoinArgs = {
  input: UpdateTemplateFilterJoinInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateFilterJoinByNodeIdArgs = {
  input: UpdateTemplateFilterJoinByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplatePermissionArgs = {
  input: UpdateTemplatePermissionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplatePermissionByNodeIdArgs = {
  input: UpdateTemplatePermissionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateSectionArgs = {
  input: UpdateTemplateSectionInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateSectionByNodeIdArgs = {
  input: UpdateTemplateSectionByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateSectionByTemplateIdAndCodeArgs = {
  input: UpdateTemplateSectionByTemplateIdAndCodeInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateStageArgs = {
  input: UpdateTemplateStageInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateStageByNodeIdArgs = {
  input: UpdateTemplateStageByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateStageReviewLevelArgs = {
  input: UpdateTemplateStageReviewLevelInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTemplateStageReviewLevelByNodeIdArgs = {
  input: UpdateTemplateStageReviewLevelByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTriggerQueueArgs = {
  input: UpdateTriggerQueueInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTriggerQueueByNodeIdArgs = {
  input: UpdateTriggerQueueByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTriggerScheduleArgs = {
  input: UpdateTriggerScheduleInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateTriggerScheduleByNodeIdArgs = {
  input: UpdateTriggerScheduleByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserOrganisationArgs = {
  input: UpdateUserOrganisationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserOrganisationByNodeIdArgs = {
  input: UpdateUserOrganisationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateUserOrganisationByUserIdAndOrganisationIdArgs = {
  input: UpdateUserOrganisationByUserIdAndOrganisationIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateVerificationArgs = {
  input: UpdateVerificationInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateVerificationByNodeIdArgs = {
  input: UpdateVerificationByNodeIdInput;
};


/** The root mutation type which contains root level fields which mutate data. */
export type MutationUpdateVerificationByUniqueIdArgs = {
  input: UpdateVerificationByUniqueIdInput;
};

/** An object with a globally unique `ID`. */
export type Node = {
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
};

export type Notification = Node & {
  __typename?: 'Notification';
  /** Reads a single `Application` that is related to this `Notification`. */
  application?: Maybe<Application>;
  applicationId?: Maybe<Scalars['Int']['output']>;
  attachments?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  emailRecipients?: Maybe<Scalars['String']['output']>;
  emailSent?: Maybe<Scalars['Boolean']['output']>;
  emailServerLog?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  isRead?: Maybe<Scalars['Boolean']['output']>;
  message?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Review` that is related to this `Notification`. */
  review?: Maybe<Review>;
  reviewId?: Maybe<Scalars['Int']['output']>;
  subject?: Maybe<Scalars['String']['output']>;
  timestamp: Scalars['Datetime']['output'];
  userId?: Maybe<Scalars['Int']['output']>;
};

/** The `application` to be created by this mutation. */
export type NotificationApplicationIdFkeyApplicationCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `application` in the `NotificationInput` mutation. */
export type NotificationApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: InputMaybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: InputMaybe<ApplicationApplicationSerialKeyConnect>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: InputMaybe<NotificationApplicationIdFkeyApplicationCreateInput>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: InputMaybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ApplicationNodeIdDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: InputMaybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: InputMaybe<ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<NotificationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByOutcomeRegistration?: InputMaybe<ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: InputMaybe<ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
};

/** Input for the nested mutation of `notification` in the `ApplicationInput` mutation. */
export type NotificationApplicationIdFkeyInverseInput = {
  /** The primary key(s) for `notification` for the far side of the relationship. */
  connectById?: InputMaybe<Array<NotificationNotificationPkeyConnect>>;
  /** The primary key(s) for `notification` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<NotificationNodeIdConnect>>;
  /** A `NotificationInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<NotificationApplicationIdFkeyNotificationCreateInput>>;
  /** The primary key(s) for `notification` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<NotificationNotificationPkeyDelete>>;
  /** The primary key(s) for `notification` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<NotificationNodeIdDelete>>;
  /** Flag indicating whether all other `notification` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `notification` for the far side of the relationship. */
  updateById?: InputMaybe<Array<NotificationOnNotificationForNotificationApplicationIdFkeyUsingNotificationPkeyUpdate>>;
  /** The primary key(s) and patch data for `notification` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ApplicationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate>>;
};

/** The `notification` to be created by this mutation. */
export type NotificationApplicationIdFkeyNotificationCreateInput = {
  applicationToApplicationId?: InputMaybe<NotificationApplicationIdFkeyInput>;
  attachments?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  emailRecipients?: InputMaybe<Scalars['String']['input']>;
  emailSent?: InputMaybe<Scalars['Boolean']['input']>;
  emailServerLog?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isRead?: InputMaybe<Scalars['Boolean']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  reviewToReviewId?: InputMaybe<NotificationReviewIdFkeyInput>;
  subject?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/**
 * A condition to be used against `Notification` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type NotificationCondition = {
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `attachments` field. */
  attachments?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `emailRecipients` field. */
  emailRecipients?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `emailSent` field. */
  emailSent?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `emailServerLog` field. */
  emailServerLog?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isRead` field. */
  isRead?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `message` field. */
  message?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `reviewId` field. */
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `subject` field. */
  subject?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `timestamp` field. */
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** A filter to be used against `Notification` object types. All fields are combined with a logical ‘and.’ */
export type NotificationFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<NotificationFilter>>;
  /** Filter by the object’s `application` relation. */
  application?: InputMaybe<ApplicationFilter>;
  /** A related `application` exists. */
  applicationExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `attachments` field. */
  attachments?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `emailRecipients` field. */
  emailRecipients?: InputMaybe<StringFilter>;
  /** Filter by the object’s `emailSent` field. */
  emailSent?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `emailServerLog` field. */
  emailServerLog?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isRead` field. */
  isRead?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `message` field. */
  message?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<NotificationFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<NotificationFilter>>;
  /** Filter by the object’s `review` relation. */
  review?: InputMaybe<ReviewFilter>;
  /** A related `review` exists. */
  reviewExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `reviewId` field. */
  reviewId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `subject` field. */
  subject?: InputMaybe<StringFilter>;
  /** Filter by the object’s `timestamp` field. */
  timestamp?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<IntFilter>;
};

/** An input for mutations affecting `Notification` */
export type NotificationInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<NotificationApplicationIdFkeyInput>;
  attachments?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  emailRecipients?: InputMaybe<Scalars['String']['input']>;
  emailSent?: InputMaybe<Scalars['Boolean']['input']>;
  emailServerLog?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isRead?: InputMaybe<Scalars['Boolean']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  reviewToReviewId?: InputMaybe<NotificationReviewIdFkeyInput>;
  subject?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** The globally unique `ID` look up for the row to connect. */
export type NotificationNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `notification` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type NotificationNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `notification` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The fields on `notification` to look up the row to connect. */
export type NotificationNotificationPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `notification` to look up the row to delete. */
export type NotificationNotificationPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type NotificationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The fields on `notification` to look up the row to update. */
export type NotificationOnNotificationForNotificationApplicationIdFkeyUsingNotificationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `notification` being updated. */
  patch: UpdateNotificationOnNotificationForNotificationApplicationIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type NotificationOnNotificationForNotificationReviewIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `review` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: ReviewPatch;
};

/** The fields on `notification` to look up the row to update. */
export type NotificationOnNotificationForNotificationReviewIdFkeyUsingNotificationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `notification` being updated. */
  patch: UpdateNotificationOnNotificationForNotificationReviewIdFkeyPatch;
};

/** Represents an update to a `Notification`. Fields that are set will be updated. */
export type NotificationPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<NotificationApplicationIdFkeyInput>;
  attachments?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  emailRecipients?: InputMaybe<Scalars['String']['input']>;
  emailSent?: InputMaybe<Scalars['Boolean']['input']>;
  emailServerLog?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isRead?: InputMaybe<Scalars['Boolean']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  reviewToReviewId?: InputMaybe<NotificationReviewIdFkeyInput>;
  subject?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** Input for the nested mutation of `review` in the `NotificationInput` mutation. */
export type NotificationReviewIdFkeyInput = {
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectById?: InputMaybe<ReviewReviewPkeyConnect>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ReviewNodeIdConnect>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByReviewAssignmentId?: InputMaybe<ReviewReviewReviewAssignmentIdKeyConnect>;
  /** A `ReviewInput` object that will be created and connected to this object. */
  create?: InputMaybe<NotificationReviewIdFkeyReviewCreateInput>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteById?: InputMaybe<ReviewReviewPkeyDelete>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ReviewNodeIdDelete>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByReviewAssignmentId?: InputMaybe<ReviewReviewReviewAssignmentIdKeyDelete>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateById?: InputMaybe<ReviewOnNotificationForNotificationReviewIdFkeyUsingReviewPkeyUpdate>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<NotificationOnNotificationForNotificationReviewIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByReviewAssignmentId?: InputMaybe<ReviewOnNotificationForNotificationReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate>;
};

/** Input for the nested mutation of `notification` in the `ReviewInput` mutation. */
export type NotificationReviewIdFkeyInverseInput = {
  /** The primary key(s) for `notification` for the far side of the relationship. */
  connectById?: InputMaybe<Array<NotificationNotificationPkeyConnect>>;
  /** The primary key(s) for `notification` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<NotificationNodeIdConnect>>;
  /** A `NotificationInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<NotificationReviewIdFkeyNotificationCreateInput>>;
  /** The primary key(s) for `notification` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<NotificationNotificationPkeyDelete>>;
  /** The primary key(s) for `notification` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<NotificationNodeIdDelete>>;
  /** Flag indicating whether all other `notification` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `notification` for the far side of the relationship. */
  updateById?: InputMaybe<Array<NotificationOnNotificationForNotificationReviewIdFkeyUsingNotificationPkeyUpdate>>;
  /** The primary key(s) and patch data for `notification` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ReviewOnNotificationForNotificationReviewIdFkeyNodeIdUpdate>>;
};

/** The `notification` to be created by this mutation. */
export type NotificationReviewIdFkeyNotificationCreateInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<NotificationApplicationIdFkeyInput>;
  attachments?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  emailRecipients?: InputMaybe<Scalars['String']['input']>;
  emailSent?: InputMaybe<Scalars['Boolean']['input']>;
  emailServerLog?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isRead?: InputMaybe<Scalars['Boolean']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  reviewToReviewId?: InputMaybe<NotificationReviewIdFkeyInput>;
  subject?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** The `review` to be created by this mutation. */
export type NotificationReviewIdFkeyReviewCreateInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  notificationsUsingId?: InputMaybe<NotificationReviewIdFkeyInverseInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewReviewAssignmentIdFkeyInput>;
  reviewDecisionsUsingId?: InputMaybe<ReviewDecisionReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToReviewerId?: InputMaybe<FakePublicReviewForeignKey0Input>;
};

/** A connection to a list of `Notification` values. */
export type NotificationsConnection = {
  __typename?: 'NotificationsConnection';
  /** A list of edges which contains the `Notification` and cursor to aid in pagination. */
  edges: Array<NotificationsEdge>;
  /** A list of `Notification` objects. */
  nodes: Array<Maybe<Notification>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Notification` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `Notification` edge in the connection. */
export type NotificationsEdge = {
  __typename?: 'NotificationsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Notification` at the end of the edge. */
  node?: Maybe<Notification>;
};

/** Methods to use when ordering `Notification`. */
export enum NotificationsOrderBy {
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  AttachmentsAsc = 'ATTACHMENTS_ASC',
  AttachmentsDesc = 'ATTACHMENTS_DESC',
  EmailRecipientsAsc = 'EMAIL_RECIPIENTS_ASC',
  EmailRecipientsDesc = 'EMAIL_RECIPIENTS_DESC',
  EmailSentAsc = 'EMAIL_SENT_ASC',
  EmailSentDesc = 'EMAIL_SENT_DESC',
  EmailServerLogAsc = 'EMAIL_SERVER_LOG_ASC',
  EmailServerLogDesc = 'EMAIL_SERVER_LOG_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsReadAsc = 'IS_READ_ASC',
  IsReadDesc = 'IS_READ_DESC',
  MessageAsc = 'MESSAGE_ASC',
  MessageDesc = 'MESSAGE_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ReviewIdAsc = 'REVIEW_ID_ASC',
  ReviewIdDesc = 'REVIEW_ID_DESC',
  SubjectAsc = 'SUBJECT_ASC',
  SubjectDesc = 'SUBJECT_DESC',
  TimestampAsc = 'TIMESTAMP_ASC',
  TimestampDesc = 'TIMESTAMP_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

export type Organisation = Node & {
  __typename?: 'Organisation';
  address?: Maybe<Scalars['String']['output']>;
  /** Reads and enables pagination through a set of `ApplicationNote`. */
  applicationNotesByOrgId: ApplicationNotesConnection;
  /** Reads and enables pagination through a set of `Application`. */
  applicationsByOrgId: ApplicationsConnection;
  /** Reads and enables pagination through a set of `DataChangelog`. */
  dataChangelogsByOrgId: DataChangelogsConnection;
  id: Scalars['Int']['output'];
  isSystemOrg?: Maybe<Scalars['Boolean']['output']>;
  logoUrl?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads and enables pagination through a set of `PermissionJoin`. */
  permissionJoins: PermissionJoinsConnection;
  registration?: Maybe<Scalars['String']['output']>;
  /** Reads and enables pagination through a set of `ReviewAssignmentAssignerJoin`. */
  reviewAssignmentAssignerJoins: ReviewAssignmentAssignerJoinsConnection;
  /** Reads and enables pagination through a set of `ReviewAssignment`. */
  reviewAssignments: ReviewAssignmentsConnection;
  /** Reads and enables pagination through a set of `UserOrganisation`. */
  userOrganisations: UserOrganisationsConnection;
};


export type OrganisationApplicationNotesByOrgIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationNoteCondition>;
  filter?: InputMaybe<ApplicationNoteFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationNotesOrderBy>>;
};


export type OrganisationApplicationsByOrgIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationCondition>;
  filter?: InputMaybe<ApplicationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationsOrderBy>>;
};


export type OrganisationDataChangelogsByOrgIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<DataChangelogCondition>;
  filter?: InputMaybe<DataChangelogFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DataChangelogsOrderBy>>;
};


export type OrganisationPermissionJoinsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<PermissionJoinCondition>;
  filter?: InputMaybe<PermissionJoinFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PermissionJoinsOrderBy>>;
};


export type OrganisationReviewAssignmentAssignerJoinsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewAssignmentAssignerJoinCondition>;
  filter?: InputMaybe<ReviewAssignmentAssignerJoinFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewAssignmentAssignerJoinsOrderBy>>;
};


export type OrganisationReviewAssignmentsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewAssignmentCondition>;
  filter?: InputMaybe<ReviewAssignmentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewAssignmentsOrderBy>>;
};


export type OrganisationUserOrganisationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<UserOrganisationCondition>;
  filter?: InputMaybe<UserOrganisationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<UserOrganisationsOrderBy>>;
};

/**
 * A condition to be used against `Organisation` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type OrganisationCondition = {
  /** Checks for equality with the object’s `address` field. */
  address?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isSystemOrg` field. */
  isSystemOrg?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `logoUrl` field. */
  logoUrl?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `name` field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `registration` field. */
  registration?: InputMaybe<Scalars['String']['input']>;
};

/** A filter to be used against `Organisation` object types. All fields are combined with a logical ‘and.’ */
export type OrganisationFilter = {
  /** Filter by the object’s `address` field. */
  address?: InputMaybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<OrganisationFilter>>;
  /** Filter by the object’s `applicationNotesByOrgId` relation. */
  applicationNotesByOrgId?: InputMaybe<OrganisationToManyApplicationNoteFilter>;
  /** Some related `applicationNotesByOrgId` exist. */
  applicationNotesByOrgIdExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `applicationsByOrgId` relation. */
  applicationsByOrgId?: InputMaybe<OrganisationToManyApplicationFilter>;
  /** Some related `applicationsByOrgId` exist. */
  applicationsByOrgIdExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `dataChangelogsByOrgId` relation. */
  dataChangelogsByOrgId?: InputMaybe<OrganisationToManyDataChangelogFilter>;
  /** Some related `dataChangelogsByOrgId` exist. */
  dataChangelogsByOrgIdExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isSystemOrg` field. */
  isSystemOrg?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `logoUrl` field. */
  logoUrl?: InputMaybe<StringFilter>;
  /** Filter by the object’s `name` field. */
  name?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<OrganisationFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<OrganisationFilter>>;
  /** Filter by the object’s `permissionJoins` relation. */
  permissionJoins?: InputMaybe<OrganisationToManyPermissionJoinFilter>;
  /** Some related `permissionJoins` exist. */
  permissionJoinsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `registration` field. */
  registration?: InputMaybe<StringFilter>;
  /** Filter by the object’s `reviewAssignmentAssignerJoins` relation. */
  reviewAssignmentAssignerJoins?: InputMaybe<OrganisationToManyReviewAssignmentAssignerJoinFilter>;
  /** Some related `reviewAssignmentAssignerJoins` exist. */
  reviewAssignmentAssignerJoinsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `reviewAssignments` relation. */
  reviewAssignments?: InputMaybe<OrganisationToManyReviewAssignmentFilter>;
  /** Some related `reviewAssignments` exist. */
  reviewAssignmentsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `userOrganisations` relation. */
  userOrganisations?: InputMaybe<OrganisationToManyUserOrganisationFilter>;
  /** Some related `userOrganisations` exist. */
  userOrganisationsExist?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An input for mutations affecting `Organisation` */
export type OrganisationInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteOrgIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationOrgIdFkeyInverseInput>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogOrgIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrg?: InputMaybe<Scalars['Boolean']['input']>;
  logoUrl?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  registration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: InputMaybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to connect. */
export type OrganisationNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `organisation` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type OrganisationNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `organisation` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type OrganisationOnApplicationForApplicationOrgIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationNameKeyUpdate = {
  name: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnApplicationForApplicationOrgIdFkeyPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnApplicationForApplicationOrgIdFkeyPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationRegistrationKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnApplicationForApplicationOrgIdFkeyPatch;
  registration: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationNote` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `applicationNote` being updated. */
  patch: ApplicationNotePatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationNameKeyUpdate = {
  name: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationRegistrationKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyPatch;
  registration: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type OrganisationOnDataChangelogForDataChangelogOrgIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `dataChangelog` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `dataChangelog` being updated. */
  patch: DataChangelogPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnDataChangelogForDataChangelogOrgIdFkeyUsingOrganisationNameKeyUpdate = {
  name: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnDataChangelogForDataChangelogOrgIdFkeyPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnDataChangelogForDataChangelogOrgIdFkeyUsingOrganisationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnDataChangelogForDataChangelogOrgIdFkeyPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnDataChangelogForDataChangelogOrgIdFkeyUsingOrganisationRegistrationKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnDataChangelogForDataChangelogOrgIdFkeyPatch;
  registration: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `permissionJoin` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `permissionJoin` being updated. */
  patch: PermissionJoinPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationNameKeyUpdate = {
  name: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch;
  registration: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignmentAssignerJoin` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewAssignmentAssignerJoin` being updated. */
  patch: ReviewAssignmentAssignerJoinPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationNameKeyUpdate = {
  name: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch;
  registration: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationNameKeyUpdate = {
  name: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch;
  registration: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `userOrganisation` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `userOrganisation` being updated. */
  patch: UserOrganisationPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationNameKeyUpdate = {
  name: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch;
};

/** The fields on `organisation` to look up the row to update. */
export type OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate = {
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: UpdateOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch;
  registration: Scalars['String']['input'];
};

/** The fields on `organisation` to look up the row to connect. */
export type OrganisationOrganisationNameKeyConnect = {
  name: Scalars['String']['input'];
};

/** The fields on `organisation` to look up the row to delete. */
export type OrganisationOrganisationNameKeyDelete = {
  name: Scalars['String']['input'];
};

/** The fields on `organisation` to look up the row to connect. */
export type OrganisationOrganisationPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `organisation` to look up the row to delete. */
export type OrganisationOrganisationPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** The fields on `organisation` to look up the row to connect. */
export type OrganisationOrganisationRegistrationKeyConnect = {
  registration: Scalars['String']['input'];
};

/** The fields on `organisation` to look up the row to delete. */
export type OrganisationOrganisationRegistrationKeyDelete = {
  registration: Scalars['String']['input'];
};

/** Represents an update to a `Organisation`. Fields that are set will be updated. */
export type OrganisationPatch = {
  address?: InputMaybe<Scalars['String']['input']>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteOrgIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationOrgIdFkeyInverseInput>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogOrgIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrg?: InputMaybe<Scalars['Boolean']['input']>;
  logoUrl?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  registration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: InputMaybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** A filter to be used against many `Application` object types. All fields are combined with a logical ‘and.’ */
export type OrganisationToManyApplicationFilter = {
  /** Every related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ApplicationFilter>;
  /** No related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ApplicationFilter>;
  /** Some related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ApplicationFilter>;
};

/** A filter to be used against many `ApplicationNote` object types. All fields are combined with a logical ‘and.’ */
export type OrganisationToManyApplicationNoteFilter = {
  /** Every related `ApplicationNote` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ApplicationNoteFilter>;
  /** No related `ApplicationNote` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ApplicationNoteFilter>;
  /** Some related `ApplicationNote` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ApplicationNoteFilter>;
};

/** A filter to be used against many `DataChangelog` object types. All fields are combined with a logical ‘and.’ */
export type OrganisationToManyDataChangelogFilter = {
  /** Every related `DataChangelog` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<DataChangelogFilter>;
  /** No related `DataChangelog` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<DataChangelogFilter>;
  /** Some related `DataChangelog` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<DataChangelogFilter>;
};

/** A filter to be used against many `PermissionJoin` object types. All fields are combined with a logical ‘and.’ */
export type OrganisationToManyPermissionJoinFilter = {
  /** Every related `PermissionJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<PermissionJoinFilter>;
  /** No related `PermissionJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<PermissionJoinFilter>;
  /** Some related `PermissionJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<PermissionJoinFilter>;
};

/** A filter to be used against many `ReviewAssignmentAssignerJoin` object types. All fields are combined with a logical ‘and.’ */
export type OrganisationToManyReviewAssignmentAssignerJoinFilter = {
  /** Every related `ReviewAssignmentAssignerJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ReviewAssignmentAssignerJoinFilter>;
  /** No related `ReviewAssignmentAssignerJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ReviewAssignmentAssignerJoinFilter>;
  /** Some related `ReviewAssignmentAssignerJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ReviewAssignmentAssignerJoinFilter>;
};

/** A filter to be used against many `ReviewAssignment` object types. All fields are combined with a logical ‘and.’ */
export type OrganisationToManyReviewAssignmentFilter = {
  /** Every related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ReviewAssignmentFilter>;
  /** No related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ReviewAssignmentFilter>;
  /** Some related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ReviewAssignmentFilter>;
};

/** A filter to be used against many `UserOrganisation` object types. All fields are combined with a logical ‘and.’ */
export type OrganisationToManyUserOrganisationFilter = {
  /** Every related `UserOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<UserOrganisationFilter>;
  /** No related `UserOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<UserOrganisationFilter>;
  /** Some related `UserOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<UserOrganisationFilter>;
};

/** A connection to a list of `Organisation` values. */
export type OrganisationsConnection = {
  __typename?: 'OrganisationsConnection';
  /** A list of edges which contains the `Organisation` and cursor to aid in pagination. */
  edges: Array<OrganisationsEdge>;
  /** A list of `Organisation` objects. */
  nodes: Array<Maybe<Organisation>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Organisation` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `Organisation` edge in the connection. */
export type OrganisationsEdge = {
  __typename?: 'OrganisationsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Organisation` at the end of the edge. */
  node?: Maybe<Organisation>;
};

/** Methods to use when ordering `Organisation`. */
export enum OrganisationsOrderBy {
  AddressAsc = 'ADDRESS_ASC',
  AddressDesc = 'ADDRESS_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsSystemOrgAsc = 'IS_SYSTEM_ORG_ASC',
  IsSystemOrgDesc = 'IS_SYSTEM_ORG_DESC',
  LogoUrlAsc = 'LOGO_URL_ASC',
  LogoUrlDesc = 'LOGO_URL_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RegistrationAsc = 'REGISTRATION_ASC',
  RegistrationDesc = 'REGISTRATION_DESC'
}

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']['output']>;
};

export type PermissionFlattened = {
  __typename?: 'PermissionFlattened';
  organisationId?: Maybe<Scalars['Int']['output']>;
  permissionPolicyId?: Maybe<Scalars['Int']['output']>;
  templateId?: Maybe<Scalars['Int']['output']>;
  userId?: Maybe<Scalars['Int']['output']>;
};

/**
 * A condition to be used against `PermissionFlattened` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type PermissionFlattenedCondition = {
  /** Checks for equality with the object’s `organisationId` field. */
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `permissionPolicyId` field. */
  permissionPolicyId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** A filter to be used against `PermissionFlattened` object types. All fields are combined with a logical ‘and.’ */
export type PermissionFlattenedFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<PermissionFlattenedFilter>>;
  /** Negates the expression. */
  not?: InputMaybe<PermissionFlattenedFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<PermissionFlattenedFilter>>;
  /** Filter by the object’s `organisationId` field. */
  organisationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `permissionPolicyId` field. */
  permissionPolicyId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<IntFilter>;
};

/** A connection to a list of `PermissionFlattened` values. */
export type PermissionFlattenedsConnection = {
  __typename?: 'PermissionFlattenedsConnection';
  /** A list of edges which contains the `PermissionFlattened` and cursor to aid in pagination. */
  edges: Array<PermissionFlattenedsEdge>;
  /** A list of `PermissionFlattened` objects. */
  nodes: Array<Maybe<PermissionFlattened>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PermissionFlattened` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `PermissionFlattened` edge in the connection. */
export type PermissionFlattenedsEdge = {
  __typename?: 'PermissionFlattenedsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `PermissionFlattened` at the end of the edge. */
  node?: Maybe<PermissionFlattened>;
};

/** Methods to use when ordering `PermissionFlattened`. */
export enum PermissionFlattenedsOrderBy {
  Natural = 'NATURAL',
  OrganisationIdAsc = 'ORGANISATION_ID_ASC',
  OrganisationIdDesc = 'ORGANISATION_ID_DESC',
  PermissionPolicyIdAsc = 'PERMISSION_POLICY_ID_ASC',
  PermissionPolicyIdDesc = 'PERMISSION_POLICY_ID_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

export type PermissionJoin = Node & {
  __typename?: 'PermissionJoin';
  id: Scalars['Int']['output'];
  isActive?: Maybe<Scalars['Boolean']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Organisation` that is related to this `PermissionJoin`. */
  organisation?: Maybe<Organisation>;
  organisationId?: Maybe<Scalars['Int']['output']>;
  /** Reads a single `PermissionName` that is related to this `PermissionJoin`. */
  permissionName?: Maybe<PermissionName>;
  permissionNameId: Scalars['Int']['output'];
  /** Reads a single `UserList` that is related to this `PermissionJoin`. */
  user?: Maybe<UserList>;
  userId?: Maybe<Scalars['Int']['output']>;
};

/**
 * A condition to be used against `PermissionJoin` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type PermissionJoinCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isActive` field. */
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `organisationId` field. */
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `permissionNameId` field. */
  permissionNameId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** A filter to be used against `PermissionJoin` object types. All fields are combined with a logical ‘and.’ */
export type PermissionJoinFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<PermissionJoinFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isActive` field. */
  isActive?: InputMaybe<BooleanFilter>;
  /** Negates the expression. */
  not?: InputMaybe<PermissionJoinFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<PermissionJoinFilter>>;
  /** Filter by the object’s `organisation` relation. */
  organisation?: InputMaybe<OrganisationFilter>;
  /** A related `organisation` exists. */
  organisationExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `organisationId` field. */
  organisationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `permissionName` relation. */
  permissionName?: InputMaybe<PermissionNameFilter>;
  /** Filter by the object’s `permissionNameId` field. */
  permissionNameId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `user` relation. */
  user?: InputMaybe<UserListFilter>;
  /** A related `user` exists. */
  userExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<IntFilter>;
};

/** An input for mutations affecting `PermissionJoin` */
export type PermissionJoinInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<PermissionJoinOrganisationIdFkeyInput>;
  permissionNameId?: InputMaybe<Scalars['Int']['input']>;
  permissionNameToPermissionNameId?: InputMaybe<PermissionJoinPermissionNameIdFkeyInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicPermissionJoinForeignKey0Input>;
};

/** The globally unique `ID` look up for the row to connect. */
export type PermissionJoinNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `permissionJoin` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type PermissionJoinNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `permissionJoin` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The fields on `permissionJoin` to look up the row to update. */
export type PermissionJoinOnPermissionJoinForFakePublicPermissionJoinForeignKey0UsingPermissionJoinPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `permissionJoin` being updated. */
  patch: UpdatePermissionJoinOnPermissionJoinForFakePublicPermissionJoinForeignKey0Patch;
};

/** The globally unique `ID` look up for the row to update. */
export type PermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `organisation` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: OrganisationPatch;
};

/** The fields on `permissionJoin` to look up the row to update. */
export type PermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingPermissionJoinPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `permissionJoin` being updated. */
  patch: UpdatePermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `permissionName` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `permissionName` being updated. */
  patch: PermissionNamePatch;
};

/** The fields on `permissionJoin` to look up the row to update. */
export type PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionJoinPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `permissionJoin` being updated. */
  patch: UpdatePermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch;
};

/** Input for the nested mutation of `organisation` in the `PermissionJoinInput` mutation. */
export type PermissionJoinOrganisationIdFkeyInput = {
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectById?: InputMaybe<OrganisationOrganisationPkeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByName?: InputMaybe<OrganisationOrganisationNameKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<OrganisationNodeIdConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByRegistration?: InputMaybe<OrganisationOrganisationRegistrationKeyConnect>;
  /** A `OrganisationInput` object that will be created and connected to this object. */
  create?: InputMaybe<PermissionJoinOrganisationIdFkeyOrganisationCreateInput>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteById?: InputMaybe<OrganisationOrganisationPkeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByName?: InputMaybe<OrganisationOrganisationNameKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<OrganisationNodeIdDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByRegistration?: InputMaybe<OrganisationOrganisationRegistrationKeyDelete>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateById?: InputMaybe<OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationPkeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByName?: InputMaybe<OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationNameKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<PermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByRegistration?: InputMaybe<OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate>;
};

/** Input for the nested mutation of `permissionJoin` in the `OrganisationInput` mutation. */
export type PermissionJoinOrganisationIdFkeyInverseInput = {
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  connectById?: InputMaybe<Array<PermissionJoinPermissionJoinPkeyConnect>>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<PermissionJoinNodeIdConnect>>;
  /** A `PermissionJoinInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<PermissionJoinOrganisationIdFkeyPermissionJoinCreateInput>>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<PermissionJoinPermissionJoinPkeyDelete>>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<PermissionJoinNodeIdDelete>>;
  /** Flag indicating whether all other `permissionJoin` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `permissionJoin` for the far side of the relationship. */
  updateById?: InputMaybe<Array<PermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingPermissionJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `permissionJoin` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyNodeIdUpdate>>;
};

/** The `organisation` to be created by this mutation. */
export type PermissionJoinOrganisationIdFkeyOrganisationCreateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteOrgIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationOrgIdFkeyInverseInput>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogOrgIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrg?: InputMaybe<Scalars['Boolean']['input']>;
  logoUrl?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  registration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: InputMaybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** The `permissionJoin` to be created by this mutation. */
export type PermissionJoinOrganisationIdFkeyPermissionJoinCreateInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  organisationToOrganisationId?: InputMaybe<PermissionJoinOrganisationIdFkeyInput>;
  permissionNameId?: InputMaybe<Scalars['Int']['input']>;
  permissionNameToPermissionNameId?: InputMaybe<PermissionJoinPermissionNameIdFkeyInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicPermissionJoinForeignKey0Input>;
};

/** Represents an update to a `PermissionJoin`. Fields that are set will be updated. */
export type PermissionJoinPatch = {
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<PermissionJoinOrganisationIdFkeyInput>;
  permissionNameId?: InputMaybe<Scalars['Int']['input']>;
  permissionNameToPermissionNameId?: InputMaybe<PermissionJoinPermissionNameIdFkeyInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicPermissionJoinForeignKey0Input>;
};

/** The fields on `permissionJoin` to look up the row to connect. */
export type PermissionJoinPermissionJoinPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `permissionJoin` to look up the row to delete. */
export type PermissionJoinPermissionJoinPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** Input for the nested mutation of `permissionName` in the `PermissionJoinInput` mutation. */
export type PermissionJoinPermissionNameIdFkeyInput = {
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  connectById?: InputMaybe<PermissionNamePermissionNamePkeyConnect>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  connectByName?: InputMaybe<PermissionNamePermissionNameNameKeyConnect>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<PermissionNameNodeIdConnect>;
  /** A `PermissionNameInput` object that will be created and connected to this object. */
  create?: InputMaybe<PermissionJoinPermissionNameIdFkeyPermissionNameCreateInput>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  deleteById?: InputMaybe<PermissionNamePermissionNamePkeyDelete>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  deleteByName?: InputMaybe<PermissionNamePermissionNameNameKeyDelete>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<PermissionNameNodeIdDelete>;
  /** The primary key(s) and patch data for `permissionName` for the far side of the relationship. */
  updateById?: InputMaybe<PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionNamePkeyUpdate>;
  /** The primary key(s) and patch data for `permissionName` for the far side of the relationship. */
  updateByName?: InputMaybe<PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionNameNameKeyUpdate>;
  /** The primary key(s) and patch data for `permissionName` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `permissionJoin` in the `PermissionNameInput` mutation. */
export type PermissionJoinPermissionNameIdFkeyInverseInput = {
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  connectById?: InputMaybe<Array<PermissionJoinPermissionJoinPkeyConnect>>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<PermissionJoinNodeIdConnect>>;
  /** A `PermissionJoinInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<PermissionJoinPermissionNameIdFkeyPermissionJoinCreateInput>>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<PermissionJoinPermissionJoinPkeyDelete>>;
  /** The primary key(s) for `permissionJoin` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<PermissionJoinNodeIdDelete>>;
  /** Flag indicating whether all other `permissionJoin` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `permissionJoin` for the far side of the relationship. */
  updateById?: InputMaybe<Array<PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `permissionJoin` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate>>;
};

/** The `permissionJoin` to be created by this mutation. */
export type PermissionJoinPermissionNameIdFkeyPermissionJoinCreateInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<PermissionJoinOrganisationIdFkeyInput>;
  permissionNameToPermissionNameId?: InputMaybe<PermissionJoinPermissionNameIdFkeyInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicPermissionJoinForeignKey0Input>;
};

/** The `permissionName` to be created by this mutation. */
export type PermissionJoinPermissionNameIdFkeyPermissionNameCreateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrgPermission?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinPermissionNameIdFkeyInverseInput>;
  permissionPolicyId?: InputMaybe<Scalars['Int']['input']>;
  permissionPolicyToPermissionPolicyId?: InputMaybe<PermissionNamePermissionPolicyIdFkeyInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionPermissionNameIdFkeyInverseInput>;
};

/** A connection to a list of `PermissionJoin` values. */
export type PermissionJoinsConnection = {
  __typename?: 'PermissionJoinsConnection';
  /** A list of edges which contains the `PermissionJoin` and cursor to aid in pagination. */
  edges: Array<PermissionJoinsEdge>;
  /** A list of `PermissionJoin` objects. */
  nodes: Array<Maybe<PermissionJoin>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PermissionJoin` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `PermissionJoin` edge in the connection. */
export type PermissionJoinsEdge = {
  __typename?: 'PermissionJoinsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `PermissionJoin` at the end of the edge. */
  node?: Maybe<PermissionJoin>;
};

/** Methods to use when ordering `PermissionJoin`. */
export enum PermissionJoinsOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsActiveAsc = 'IS_ACTIVE_ASC',
  IsActiveDesc = 'IS_ACTIVE_DESC',
  Natural = 'NATURAL',
  OrganisationIdAsc = 'ORGANISATION_ID_ASC',
  OrganisationIdDesc = 'ORGANISATION_ID_DESC',
  PermissionNameIdAsc = 'PERMISSION_NAME_ID_ASC',
  PermissionNameIdDesc = 'PERMISSION_NAME_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

export type PermissionName = Node & {
  __typename?: 'PermissionName';
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  isSystemOrgPermission?: Maybe<Scalars['Boolean']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads and enables pagination through a set of `PermissionJoin`. */
  permissionJoins: PermissionJoinsConnection;
  /** Reads a single `PermissionPolicy` that is related to this `PermissionName`. */
  permissionPolicy?: Maybe<PermissionPolicy>;
  permissionPolicyId?: Maybe<Scalars['Int']['output']>;
  /** Reads and enables pagination through a set of `TemplatePermission`. */
  templatePermissions: TemplatePermissionsConnection;
};


export type PermissionNamePermissionJoinsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<PermissionJoinCondition>;
  filter?: InputMaybe<PermissionJoinFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PermissionJoinsOrderBy>>;
};


export type PermissionNameTemplatePermissionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplatePermissionCondition>;
  filter?: InputMaybe<TemplatePermissionFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplatePermissionsOrderBy>>;
};

/**
 * A condition to be used against `PermissionName` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type PermissionNameCondition = {
  /** Checks for equality with the object’s `description` field. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isSystemOrgPermission` field. */
  isSystemOrgPermission?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `name` field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `permissionPolicyId` field. */
  permissionPolicyId?: InputMaybe<Scalars['Int']['input']>;
};

/** A filter to be used against `PermissionName` object types. All fields are combined with a logical ‘and.’ */
export type PermissionNameFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<PermissionNameFilter>>;
  /** Filter by the object’s `description` field. */
  description?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isSystemOrgPermission` field. */
  isSystemOrgPermission?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `name` field. */
  name?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<PermissionNameFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<PermissionNameFilter>>;
  /** Filter by the object’s `permissionJoins` relation. */
  permissionJoins?: InputMaybe<PermissionNameToManyPermissionJoinFilter>;
  /** Some related `permissionJoins` exist. */
  permissionJoinsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `permissionPolicy` relation. */
  permissionPolicy?: InputMaybe<PermissionPolicyFilter>;
  /** A related `permissionPolicy` exists. */
  permissionPolicyExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `permissionPolicyId` field. */
  permissionPolicyId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `templatePermissions` relation. */
  templatePermissions?: InputMaybe<PermissionNameToManyTemplatePermissionFilter>;
  /** Some related `templatePermissions` exist. */
  templatePermissionsExist?: InputMaybe<Scalars['Boolean']['input']>;
};

/** An input for mutations affecting `PermissionName` */
export type PermissionNameInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrgPermission?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinPermissionNameIdFkeyInverseInput>;
  permissionPolicyId?: InputMaybe<Scalars['Int']['input']>;
  permissionPolicyToPermissionPolicyId?: InputMaybe<PermissionNamePermissionPolicyIdFkeyInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionPermissionNameIdFkeyInverseInput>;
};

/** The globally unique `ID` look up for the row to connect. */
export type PermissionNameNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `permissionName` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type PermissionNameNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `permissionName` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `permissionJoin` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `permissionJoin` being updated. */
  patch: PermissionJoinPatch;
};

/** The fields on `permissionName` to look up the row to update. */
export type PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionNameNameKeyUpdate = {
  name: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `permissionName` being updated. */
  patch: UpdatePermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch;
};

/** The fields on `permissionName` to look up the row to update. */
export type PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionNamePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `permissionName` being updated. */
  patch: UpdatePermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `permissionPolicy` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `permissionPolicy` being updated. */
  patch: PermissionPolicyPatch;
};

/** The fields on `permissionName` to look up the row to update. */
export type PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionNameNameKeyUpdate = {
  name: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `permissionName` being updated. */
  patch: UpdatePermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch;
};

/** The fields on `permissionName` to look up the row to update. */
export type PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionNamePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `permissionName` being updated. */
  patch: UpdatePermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templatePermission` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `templatePermission` being updated. */
  patch: TemplatePermissionPatch;
};

/** The fields on `permissionName` to look up the row to update. */
export type PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingPermissionNameNameKeyUpdate = {
  name: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `permissionName` being updated. */
  patch: UpdatePermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyPatch;
};

/** The fields on `permissionName` to look up the row to update. */
export type PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingPermissionNamePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `permissionName` being updated. */
  patch: UpdatePermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyPatch;
};

/** Represents an update to a `PermissionName`. Fields that are set will be updated. */
export type PermissionNamePatch = {
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrgPermission?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinPermissionNameIdFkeyInverseInput>;
  permissionPolicyId?: InputMaybe<Scalars['Int']['input']>;
  permissionPolicyToPermissionPolicyId?: InputMaybe<PermissionNamePermissionPolicyIdFkeyInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionPermissionNameIdFkeyInverseInput>;
};

/** The fields on `permissionName` to look up the row to connect. */
export type PermissionNamePermissionNameNameKeyConnect = {
  name: Scalars['String']['input'];
};

/** The fields on `permissionName` to look up the row to delete. */
export type PermissionNamePermissionNameNameKeyDelete = {
  name: Scalars['String']['input'];
};

/** The fields on `permissionName` to look up the row to connect. */
export type PermissionNamePermissionNamePkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `permissionName` to look up the row to delete. */
export type PermissionNamePermissionNamePkeyDelete = {
  id: Scalars['Int']['input'];
};

/** Input for the nested mutation of `permissionPolicy` in the `PermissionNameInput` mutation. */
export type PermissionNamePermissionPolicyIdFkeyInput = {
  /** The primary key(s) for `permissionPolicy` for the far side of the relationship. */
  connectById?: InputMaybe<PermissionPolicyPermissionPolicyPkeyConnect>;
  /** The primary key(s) for `permissionPolicy` for the far side of the relationship. */
  connectByName?: InputMaybe<PermissionPolicyPermissionPolicyNameKeyConnect>;
  /** The primary key(s) for `permissionPolicy` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<PermissionPolicyNodeIdConnect>;
  /** A `PermissionPolicyInput` object that will be created and connected to this object. */
  create?: InputMaybe<PermissionNamePermissionPolicyIdFkeyPermissionPolicyCreateInput>;
  /** The primary key(s) for `permissionPolicy` for the far side of the relationship. */
  deleteById?: InputMaybe<PermissionPolicyPermissionPolicyPkeyDelete>;
  /** The primary key(s) for `permissionPolicy` for the far side of the relationship. */
  deleteByName?: InputMaybe<PermissionPolicyPermissionPolicyNameKeyDelete>;
  /** The primary key(s) for `permissionPolicy` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<PermissionPolicyNodeIdDelete>;
  /** The primary key(s) and patch data for `permissionPolicy` for the far side of the relationship. */
  updateById?: InputMaybe<PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionPolicyPkeyUpdate>;
  /** The primary key(s) and patch data for `permissionPolicy` for the far side of the relationship. */
  updateByName?: InputMaybe<PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionPolicyNameKeyUpdate>;
  /** The primary key(s) and patch data for `permissionPolicy` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `permissionName` in the `PermissionPolicyInput` mutation. */
export type PermissionNamePermissionPolicyIdFkeyInverseInput = {
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  connectById?: InputMaybe<Array<PermissionNamePermissionNamePkeyConnect>>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  connectByName?: InputMaybe<Array<PermissionNamePermissionNameNameKeyConnect>>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<PermissionNameNodeIdConnect>>;
  /** A `PermissionNameInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<PermissionNamePermissionPolicyIdFkeyPermissionNameCreateInput>>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<PermissionNamePermissionNamePkeyDelete>>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  deleteByName?: InputMaybe<Array<PermissionNamePermissionNameNameKeyDelete>>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<PermissionNameNodeIdDelete>>;
  /** Flag indicating whether all other `permissionName` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `permissionName` for the far side of the relationship. */
  updateById?: InputMaybe<Array<PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionNamePkeyUpdate>>;
  /** The primary key(s) and patch data for `permissionName` for the far side of the relationship. */
  updateByName?: InputMaybe<Array<PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionNameNameKeyUpdate>>;
  /** The primary key(s) and patch data for `permissionName` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyNodeIdUpdate>>;
};

/** The `permissionName` to be created by this mutation. */
export type PermissionNamePermissionPolicyIdFkeyPermissionNameCreateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrgPermission?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinPermissionNameIdFkeyInverseInput>;
  permissionPolicyToPermissionPolicyId?: InputMaybe<PermissionNamePermissionPolicyIdFkeyInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionPermissionNameIdFkeyInverseInput>;
};

/** The `permissionPolicy` to be created by this mutation. */
export type PermissionNamePermissionPolicyIdFkeyPermissionPolicyCreateInput = {
  defaultRestrictions?: InputMaybe<Scalars['JSON']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionNamesUsingId?: InputMaybe<PermissionNamePermissionPolicyIdFkeyInverseInput>;
  rules?: InputMaybe<Scalars['JSON']['input']>;
  type?: InputMaybe<PermissionPolicyType>;
};

/** A filter to be used against many `PermissionJoin` object types. All fields are combined with a logical ‘and.’ */
export type PermissionNameToManyPermissionJoinFilter = {
  /** Every related `PermissionJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<PermissionJoinFilter>;
  /** No related `PermissionJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<PermissionJoinFilter>;
  /** Some related `PermissionJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<PermissionJoinFilter>;
};

/** A filter to be used against many `TemplatePermission` object types. All fields are combined with a logical ‘and.’ */
export type PermissionNameToManyTemplatePermissionFilter = {
  /** Every related `TemplatePermission` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<TemplatePermissionFilter>;
  /** No related `TemplatePermission` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<TemplatePermissionFilter>;
  /** Some related `TemplatePermission` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<TemplatePermissionFilter>;
};

/** A connection to a list of `PermissionName` values. */
export type PermissionNamesConnection = {
  __typename?: 'PermissionNamesConnection';
  /** A list of edges which contains the `PermissionName` and cursor to aid in pagination. */
  edges: Array<PermissionNamesEdge>;
  /** A list of `PermissionName` objects. */
  nodes: Array<Maybe<PermissionName>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PermissionName` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `PermissionName` edge in the connection. */
export type PermissionNamesEdge = {
  __typename?: 'PermissionNamesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `PermissionName` at the end of the edge. */
  node?: Maybe<PermissionName>;
};

/** Methods to use when ordering `PermissionName`. */
export enum PermissionNamesOrderBy {
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsSystemOrgPermissionAsc = 'IS_SYSTEM_ORG_PERMISSION_ASC',
  IsSystemOrgPermissionDesc = 'IS_SYSTEM_ORG_PERMISSION_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  Natural = 'NATURAL',
  PermissionPolicyIdAsc = 'PERMISSION_POLICY_ID_ASC',
  PermissionPolicyIdDesc = 'PERMISSION_POLICY_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC'
}

/** A connection to a list of `PermissionPolicy` values. */
export type PermissionPoliciesConnection = {
  __typename?: 'PermissionPoliciesConnection';
  /** A list of edges which contains the `PermissionPolicy` and cursor to aid in pagination. */
  edges: Array<PermissionPoliciesEdge>;
  /** A list of `PermissionPolicy` objects. */
  nodes: Array<Maybe<PermissionPolicy>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PermissionPolicy` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `PermissionPolicy` edge in the connection. */
export type PermissionPoliciesEdge = {
  __typename?: 'PermissionPoliciesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `PermissionPolicy` at the end of the edge. */
  node?: Maybe<PermissionPolicy>;
};

/** Methods to use when ordering `PermissionPolicy`. */
export enum PermissionPoliciesOrderBy {
  DefaultRestrictionsAsc = 'DEFAULT_RESTRICTIONS_ASC',
  DefaultRestrictionsDesc = 'DEFAULT_RESTRICTIONS_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsAdminAsc = 'IS_ADMIN_ASC',
  IsAdminDesc = 'IS_ADMIN_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RulesAsc = 'RULES_ASC',
  RulesDesc = 'RULES_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC'
}

export type PermissionPolicy = Node & {
  __typename?: 'PermissionPolicy';
  defaultRestrictions?: Maybe<Scalars['JSON']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  isAdmin?: Maybe<Scalars['Boolean']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads and enables pagination through a set of `PermissionName`. */
  permissionNames: PermissionNamesConnection;
  rules?: Maybe<Scalars['JSON']['output']>;
  type?: Maybe<PermissionPolicyType>;
};


export type PermissionPolicyPermissionNamesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<PermissionNameCondition>;
  filter?: InputMaybe<PermissionNameFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PermissionNamesOrderBy>>;
};

/**
 * A condition to be used against `PermissionPolicy` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type PermissionPolicyCondition = {
  /** Checks for equality with the object’s `defaultRestrictions` field. */
  defaultRestrictions?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `description` field. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isAdmin` field. */
  isAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `name` field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `rules` field. */
  rules?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `type` field. */
  type?: InputMaybe<PermissionPolicyType>;
};

/** A filter to be used against `PermissionPolicy` object types. All fields are combined with a logical ‘and.’ */
export type PermissionPolicyFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<PermissionPolicyFilter>>;
  /** Filter by the object’s `defaultRestrictions` field. */
  defaultRestrictions?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `description` field. */
  description?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isAdmin` field. */
  isAdmin?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `name` field. */
  name?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<PermissionPolicyFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<PermissionPolicyFilter>>;
  /** Filter by the object’s `permissionNames` relation. */
  permissionNames?: InputMaybe<PermissionPolicyToManyPermissionNameFilter>;
  /** Some related `permissionNames` exist. */
  permissionNamesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `rules` field. */
  rules?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `type` field. */
  type?: InputMaybe<PermissionPolicyTypeFilter>;
};

/** An input for mutations affecting `PermissionPolicy` */
export type PermissionPolicyInput = {
  defaultRestrictions?: InputMaybe<Scalars['JSON']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionNamesUsingId?: InputMaybe<PermissionNamePermissionPolicyIdFkeyInverseInput>;
  rules?: InputMaybe<Scalars['JSON']['input']>;
  type?: InputMaybe<PermissionPolicyType>;
};

/** The globally unique `ID` look up for the row to connect. */
export type PermissionPolicyNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `permissionPolicy` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type PermissionPolicyNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `permissionPolicy` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `permissionName` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `permissionName` being updated. */
  patch: PermissionNamePatch;
};

/** The fields on `permissionPolicy` to look up the row to update. */
export type PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionPolicyNameKeyUpdate = {
  name: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `permissionPolicy` being updated. */
  patch: UpdatePermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch;
};

/** The fields on `permissionPolicy` to look up the row to update. */
export type PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionPolicyPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `permissionPolicy` being updated. */
  patch: UpdatePermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch;
};

/** Represents an update to a `PermissionPolicy`. Fields that are set will be updated. */
export type PermissionPolicyPatch = {
  defaultRestrictions?: InputMaybe<Scalars['JSON']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionNamesUsingId?: InputMaybe<PermissionNamePermissionPolicyIdFkeyInverseInput>;
  rules?: InputMaybe<Scalars['JSON']['input']>;
  type?: InputMaybe<PermissionPolicyType>;
};

/** The fields on `permissionPolicy` to look up the row to connect. */
export type PermissionPolicyPermissionPolicyNameKeyConnect = {
  name: Scalars['String']['input'];
};

/** The fields on `permissionPolicy` to look up the row to delete. */
export type PermissionPolicyPermissionPolicyNameKeyDelete = {
  name: Scalars['String']['input'];
};

/** The fields on `permissionPolicy` to look up the row to connect. */
export type PermissionPolicyPermissionPolicyPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `permissionPolicy` to look up the row to delete. */
export type PermissionPolicyPermissionPolicyPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** A filter to be used against many `PermissionName` object types. All fields are combined with a logical ‘and.’ */
export type PermissionPolicyToManyPermissionNameFilter = {
  /** Every related `PermissionName` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<PermissionNameFilter>;
  /** No related `PermissionName` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<PermissionNameFilter>;
  /** Some related `PermissionName` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<PermissionNameFilter>;
};

export enum PermissionPolicyType {
  Apply = 'APPLY',
  Assign = 'ASSIGN',
  Review = 'REVIEW',
  View = 'VIEW'
}

/** A filter to be used against PermissionPolicyType fields. All fields are combined with a logical ‘and.’ */
export type PermissionPolicyTypeFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<PermissionPolicyType>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<PermissionPolicyType>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<PermissionPolicyType>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<PermissionPolicyType>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<PermissionPolicyType>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<PermissionPolicyType>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<PermissionPolicyType>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<PermissionPolicyType>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<PermissionPolicyType>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<PermissionPolicyType>>;
};

export type PermissionsAll = {
  __typename?: 'PermissionsAll';
  allowedSections?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  canMakeFinalDecision?: Maybe<Scalars['Boolean']['output']>;
  canSelfAssign?: Maybe<Scalars['Boolean']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  isActive?: Maybe<Scalars['Boolean']['output']>;
  isAdmin?: Maybe<Scalars['Boolean']['output']>;
  isSystemOrgPermission?: Maybe<Scalars['Boolean']['output']>;
  isUserCategory?: Maybe<Scalars['Boolean']['output']>;
  orgId?: Maybe<Scalars['Int']['output']>;
  orgName?: Maybe<Scalars['String']['output']>;
  permissionJoinId?: Maybe<Scalars['Int']['output']>;
  permissionName?: Maybe<Scalars['String']['output']>;
  permissionNameId?: Maybe<Scalars['Int']['output']>;
  permissionPolicyId?: Maybe<Scalars['Int']['output']>;
  permissionPolicyRules?: Maybe<Scalars['JSON']['output']>;
  permissionType?: Maybe<PermissionPolicyType>;
  policyName?: Maybe<Scalars['String']['output']>;
  restrictions?: Maybe<Scalars['JSON']['output']>;
  reviewLevel?: Maybe<Scalars['Int']['output']>;
  stageNumber?: Maybe<Scalars['Int']['output']>;
  templateCode?: Maybe<Scalars['String']['output']>;
  templateId?: Maybe<Scalars['Int']['output']>;
  templatePermissionId?: Maybe<Scalars['Int']['output']>;
  userId?: Maybe<Scalars['Int']['output']>;
  username?: Maybe<Scalars['String']['output']>;
};

/**
 * A condition to be used against `PermissionsAll` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type PermissionsAllCondition = {
  /** Checks for equality with the object’s `allowedSections` field. */
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `canMakeFinalDecision` field. */
  canMakeFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `canSelfAssign` field. */
  canSelfAssign?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `description` field. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `isActive` field. */
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `isAdmin` field. */
  isAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `isSystemOrgPermission` field. */
  isSystemOrgPermission?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `isUserCategory` field. */
  isUserCategory?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `orgId` field. */
  orgId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `orgName` field. */
  orgName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `permissionJoinId` field. */
  permissionJoinId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `permissionName` field. */
  permissionName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `permissionNameId` field. */
  permissionNameId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `permissionPolicyId` field. */
  permissionPolicyId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `permissionPolicyRules` field. */
  permissionPolicyRules?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `permissionType` field. */
  permissionType?: InputMaybe<PermissionPolicyType>;
  /** Checks for equality with the object’s `policyName` field. */
  policyName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `restrictions` field. */
  restrictions?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `reviewLevel` field. */
  reviewLevel?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `stageNumber` field. */
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `templateCode` field. */
  templateCode?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `templatePermissionId` field. */
  templatePermissionId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `username` field. */
  username?: InputMaybe<Scalars['String']['input']>;
};

/** A filter to be used against `PermissionsAll` object types. All fields are combined with a logical ‘and.’ */
export type PermissionsAllFilter = {
  /** Filter by the object’s `allowedSections` field. */
  allowedSections?: InputMaybe<StringListFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<PermissionsAllFilter>>;
  /** Filter by the object’s `canMakeFinalDecision` field. */
  canMakeFinalDecision?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `canSelfAssign` field. */
  canSelfAssign?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `description` field. */
  description?: InputMaybe<StringFilter>;
  /** Filter by the object’s `isActive` field. */
  isActive?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `isAdmin` field. */
  isAdmin?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `isSystemOrgPermission` field. */
  isSystemOrgPermission?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `isUserCategory` field. */
  isUserCategory?: InputMaybe<BooleanFilter>;
  /** Negates the expression. */
  not?: InputMaybe<PermissionsAllFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<PermissionsAllFilter>>;
  /** Filter by the object’s `orgId` field. */
  orgId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `orgName` field. */
  orgName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `permissionJoinId` field. */
  permissionJoinId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `permissionName` field. */
  permissionName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `permissionNameId` field. */
  permissionNameId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `permissionPolicyId` field. */
  permissionPolicyId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `permissionPolicyRules` field. */
  permissionPolicyRules?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `permissionType` field. */
  permissionType?: InputMaybe<PermissionPolicyTypeFilter>;
  /** Filter by the object’s `policyName` field. */
  policyName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `restrictions` field. */
  restrictions?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `reviewLevel` field. */
  reviewLevel?: InputMaybe<IntFilter>;
  /** Filter by the object’s `stageNumber` field. */
  stageNumber?: InputMaybe<IntFilter>;
  /** Filter by the object’s `templateCode` field. */
  templateCode?: InputMaybe<StringFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `templatePermissionId` field. */
  templatePermissionId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `username` field. */
  username?: InputMaybe<StringFilter>;
};

/** A connection to a list of `PermissionsAll` values. */
export type PermissionsAllsConnection = {
  __typename?: 'PermissionsAllsConnection';
  /** A list of edges which contains the `PermissionsAll` and cursor to aid in pagination. */
  edges: Array<PermissionsAllsEdge>;
  /** A list of `PermissionsAll` objects. */
  nodes: Array<Maybe<PermissionsAll>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PermissionsAll` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `PermissionsAll` edge in the connection. */
export type PermissionsAllsEdge = {
  __typename?: 'PermissionsAllsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `PermissionsAll` at the end of the edge. */
  node?: Maybe<PermissionsAll>;
};

/** Methods to use when ordering `PermissionsAll`. */
export enum PermissionsAllsOrderBy {
  AllowedSectionsAsc = 'ALLOWED_SECTIONS_ASC',
  AllowedSectionsDesc = 'ALLOWED_SECTIONS_DESC',
  CanMakeFinalDecisionAsc = 'CAN_MAKE_FINAL_DECISION_ASC',
  CanMakeFinalDecisionDesc = 'CAN_MAKE_FINAL_DECISION_DESC',
  CanSelfAssignAsc = 'CAN_SELF_ASSIGN_ASC',
  CanSelfAssignDesc = 'CAN_SELF_ASSIGN_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  IsActiveAsc = 'IS_ACTIVE_ASC',
  IsActiveDesc = 'IS_ACTIVE_DESC',
  IsAdminAsc = 'IS_ADMIN_ASC',
  IsAdminDesc = 'IS_ADMIN_DESC',
  IsSystemOrgPermissionAsc = 'IS_SYSTEM_ORG_PERMISSION_ASC',
  IsSystemOrgPermissionDesc = 'IS_SYSTEM_ORG_PERMISSION_DESC',
  IsUserCategoryAsc = 'IS_USER_CATEGORY_ASC',
  IsUserCategoryDesc = 'IS_USER_CATEGORY_DESC',
  Natural = 'NATURAL',
  OrgIdAsc = 'ORG_ID_ASC',
  OrgIdDesc = 'ORG_ID_DESC',
  OrgNameAsc = 'ORG_NAME_ASC',
  OrgNameDesc = 'ORG_NAME_DESC',
  PermissionJoinIdAsc = 'PERMISSION_JOIN_ID_ASC',
  PermissionJoinIdDesc = 'PERMISSION_JOIN_ID_DESC',
  PermissionNameAsc = 'PERMISSION_NAME_ASC',
  PermissionNameDesc = 'PERMISSION_NAME_DESC',
  PermissionNameIdAsc = 'PERMISSION_NAME_ID_ASC',
  PermissionNameIdDesc = 'PERMISSION_NAME_ID_DESC',
  PermissionPolicyIdAsc = 'PERMISSION_POLICY_ID_ASC',
  PermissionPolicyIdDesc = 'PERMISSION_POLICY_ID_DESC',
  PermissionPolicyRulesAsc = 'PERMISSION_POLICY_RULES_ASC',
  PermissionPolicyRulesDesc = 'PERMISSION_POLICY_RULES_DESC',
  PermissionTypeAsc = 'PERMISSION_TYPE_ASC',
  PermissionTypeDesc = 'PERMISSION_TYPE_DESC',
  PolicyNameAsc = 'POLICY_NAME_ASC',
  PolicyNameDesc = 'POLICY_NAME_DESC',
  RestrictionsAsc = 'RESTRICTIONS_ASC',
  RestrictionsDesc = 'RESTRICTIONS_DESC',
  ReviewLevelAsc = 'REVIEW_LEVEL_ASC',
  ReviewLevelDesc = 'REVIEW_LEVEL_DESC',
  StageNumberAsc = 'STAGE_NUMBER_ASC',
  StageNumberDesc = 'STAGE_NUMBER_DESC',
  TemplateCodeAsc = 'TEMPLATE_CODE_ASC',
  TemplateCodeDesc = 'TEMPLATE_CODE_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  TemplatePermissionIdAsc = 'TEMPLATE_PERMISSION_ID_ASC',
  TemplatePermissionIdDesc = 'TEMPLATE_PERMISSION_ID_DESC',
  UsernameAsc = 'USERNAME_ASC',
  UsernameDesc = 'USERNAME_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC'
}

export type PostgresRowLevel = {
  __typename?: 'PostgresRowLevel';
  cmd?: Maybe<Scalars['String']['output']>;
  permissive?: Maybe<Scalars['String']['output']>;
  policyname?: Maybe<Scalars['String']['output']>;
  qual?: Maybe<Scalars['String']['output']>;
  roles?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  schemaname?: Maybe<Scalars['String']['output']>;
  tablename?: Maybe<Scalars['String']['output']>;
  withCheck?: Maybe<Scalars['String']['output']>;
};

/**
 * A condition to be used against `PostgresRowLevel` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type PostgresRowLevelCondition = {
  /** Checks for equality with the object’s `cmd` field. */
  cmd?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `permissive` field. */
  permissive?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `policyname` field. */
  policyname?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `qual` field. */
  qual?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `roles` field. */
  roles?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `schemaname` field. */
  schemaname?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `tablename` field. */
  tablename?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `withCheck` field. */
  withCheck?: InputMaybe<Scalars['String']['input']>;
};

/** A filter to be used against `PostgresRowLevel` object types. All fields are combined with a logical ‘and.’ */
export type PostgresRowLevelFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<PostgresRowLevelFilter>>;
  /** Filter by the object’s `cmd` field. */
  cmd?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<PostgresRowLevelFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<PostgresRowLevelFilter>>;
  /** Filter by the object’s `permissive` field. */
  permissive?: InputMaybe<StringFilter>;
  /** Filter by the object’s `policyname` field. */
  policyname?: InputMaybe<StringFilter>;
  /** Filter by the object’s `qual` field. */
  qual?: InputMaybe<StringFilter>;
  /** Filter by the object’s `roles` field. */
  roles?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `schemaname` field. */
  schemaname?: InputMaybe<StringFilter>;
  /** Filter by the object’s `tablename` field. */
  tablename?: InputMaybe<StringFilter>;
  /** Filter by the object’s `withCheck` field. */
  withCheck?: InputMaybe<StringFilter>;
};

/** A connection to a list of `PostgresRowLevel` values. */
export type PostgresRowLevelsConnection = {
  __typename?: 'PostgresRowLevelsConnection';
  /** A list of edges which contains the `PostgresRowLevel` and cursor to aid in pagination. */
  edges: Array<PostgresRowLevelsEdge>;
  /** A list of `PostgresRowLevel` objects. */
  nodes: Array<Maybe<PostgresRowLevel>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `PostgresRowLevel` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `PostgresRowLevel` edge in the connection. */
export type PostgresRowLevelsEdge = {
  __typename?: 'PostgresRowLevelsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `PostgresRowLevel` at the end of the edge. */
  node?: Maybe<PostgresRowLevel>;
};

/** Methods to use when ordering `PostgresRowLevel`. */
export enum PostgresRowLevelsOrderBy {
  CmdAsc = 'CMD_ASC',
  CmdDesc = 'CMD_DESC',
  Natural = 'NATURAL',
  PermissiveAsc = 'PERMISSIVE_ASC',
  PermissiveDesc = 'PERMISSIVE_DESC',
  PolicynameAsc = 'POLICYNAME_ASC',
  PolicynameDesc = 'POLICYNAME_DESC',
  QualAsc = 'QUAL_ASC',
  QualDesc = 'QUAL_DESC',
  RolesAsc = 'ROLES_ASC',
  RolesDesc = 'ROLES_DESC',
  SchemanameAsc = 'SCHEMANAME_ASC',
  SchemanameDesc = 'SCHEMANAME_DESC',
  TablenameAsc = 'TABLENAME_ASC',
  TablenameDesc = 'TABLENAME_DESC',
  WithCheckAsc = 'WITH_CHECK_ASC',
  WithCheckDesc = 'WITH_CHECK_DESC'
}

/** The root query type which gives access points into the data universe. */
export type Query = Node & {
  __typename?: 'Query';
  actionPlugin?: Maybe<ActionPlugin>;
  actionPluginByCode?: Maybe<ActionPlugin>;
  /** Reads a single `ActionPlugin` using its globally unique `ID`. */
  actionPluginByNodeId?: Maybe<ActionPlugin>;
  /** Reads and enables pagination through a set of `ActionPlugin`. */
  actionPlugins?: Maybe<ActionPluginsConnection>;
  actionQueue?: Maybe<ActionQueue>;
  /** Reads a single `ActionQueue` using its globally unique `ID`. */
  actionQueueByNodeId?: Maybe<ActionQueue>;
  /** Reads and enables pagination through a set of `ActionQueue`. */
  actionQueues?: Maybe<ActionQueuesConnection>;
  activityLog?: Maybe<ActivityLog>;
  /** Reads a single `ActivityLog` using its globally unique `ID`. */
  activityLogByNodeId?: Maybe<ActivityLog>;
  /** Reads and enables pagination through a set of `ActivityLog`. */
  activityLogs?: Maybe<ActivityLogsConnection>;
  /** Reads and enables pagination through a set of `AllowedSelfAssignableSectionsShape`. */
  allowedSelfAssignableSections?: Maybe<AllowedSelfAssignableSectionsShapesConnection>;
  /** Reads and enables pagination through a set of `AllowedSelfAssignableSectionsShape`. */
  allowedSelfAssignableSectionsShapes?: Maybe<AllowedSelfAssignableSectionsShapesConnection>;
  application?: Maybe<Application>;
  /** Reads a single `Application` using its globally unique `ID`. */
  applicationByNodeId?: Maybe<Application>;
  applicationByOutcomeRegistration?: Maybe<Application>;
  applicationBySerial?: Maybe<Application>;
  /** Reads and enables pagination through a set of `ApplicationListShape`. */
  applicationList?: Maybe<ApplicationListShapesConnection>;
  applicationListFilterApplicant?: Maybe<ApplicationListFilterApplicantConnection>;
  applicationListFilterAssigner?: Maybe<ApplicationListFilterAssignerConnection>;
  applicationListFilterOrganisation?: Maybe<ApplicationListFilterOrganisationConnection>;
  applicationListFilterReviewer?: Maybe<ApplicationListFilterReviewerConnection>;
  applicationListFilterStage?: Maybe<ApplicationListFilterStageConnection>;
  /** Reads and enables pagination through a set of `ApplicationListShape`. */
  applicationListShapes?: Maybe<ApplicationListShapesConnection>;
  applicationNote?: Maybe<ApplicationNote>;
  /** Reads a single `ApplicationNote` using its globally unique `ID`. */
  applicationNoteByNodeId?: Maybe<ApplicationNote>;
  /** Reads and enables pagination through a set of `ApplicationNote`. */
  applicationNotes?: Maybe<ApplicationNotesConnection>;
  applicationResponse?: Maybe<ApplicationResponse>;
  /** Reads a single `ApplicationResponse` using its globally unique `ID`. */
  applicationResponseByNodeId?: Maybe<ApplicationResponse>;
  /** Reads and enables pagination through a set of `ApplicationResponse`. */
  applicationResponses?: Maybe<ApplicationResponsesConnection>;
  applicationReviewerAction?: Maybe<ApplicationReviewerAction>;
  /** Reads a single `ApplicationReviewerAction` using its globally unique `ID`. */
  applicationReviewerActionByNodeId?: Maybe<ApplicationReviewerAction>;
  applicationReviewerActionByUserIdAndApplicationId?: Maybe<ApplicationReviewerAction>;
  /** Reads and enables pagination through a set of `ApplicationReviewerAction`. */
  applicationReviewerActions?: Maybe<ApplicationReviewerActionsConnection>;
  /** Reads and enables pagination through a set of `ApplicationStageHistory`. */
  applicationStageHistories?: Maybe<ApplicationStageHistoriesConnection>;
  applicationStageHistory?: Maybe<ApplicationStageHistory>;
  /** Reads a single `ApplicationStageHistory` using its globally unique `ID`. */
  applicationStageHistoryByNodeId?: Maybe<ApplicationStageHistory>;
  /** Reads and enables pagination through a set of `ApplicationStageStatusAll`. */
  applicationStageStatusAlls?: Maybe<ApplicationStageStatusAllsConnection>;
  /** Reads and enables pagination through a set of `ApplicationStageStatusLatest`. */
  applicationStageStatusLatests?: Maybe<ApplicationStageStatusLatestsConnection>;
  /** Reads and enables pagination through a set of `ApplicationStatusHistory`. */
  applicationStatusHistories?: Maybe<ApplicationStatusHistoriesConnection>;
  applicationStatusHistory?: Maybe<ApplicationStatusHistory>;
  /** Reads a single `ApplicationStatusHistory` using its globally unique `ID`. */
  applicationStatusHistoryByNodeId?: Maybe<ApplicationStatusHistory>;
  /** Reads and enables pagination through a set of `Application`. */
  applications?: Maybe<ApplicationsConnection>;
  assignedQuestions?: Maybe<AssignedQuestionsConnection>;
  assignedQuestionsCount?: Maybe<Scalars['BigInt']['output']>;
  /** Reads and enables pagination through a set of `AssignedSectionsByStageAndLevel`. */
  assignedSectionsByStageAndLevels?: Maybe<AssignedSectionsByStageAndLevelsConnection>;
  assignerList?: Maybe<AssignerListConnection>;
  assignmentList?: Maybe<AssignmentListConnection>;
  /** Reads and enables pagination through a set of `ConstraintsInfo`. */
  constraintsInfos?: Maybe<ConstraintsInfosConnection>;
  counter?: Maybe<Counter>;
  counterByName?: Maybe<Counter>;
  /** Reads a single `Counter` using its globally unique `ID`. */
  counterByNodeId?: Maybe<Counter>;
  /** Reads and enables pagination through a set of `Counter`. */
  counters?: Maybe<CountersConnection>;
  dataChangelog?: Maybe<DataChangelog>;
  /** Reads a single `DataChangelog` using its globally unique `ID`. */
  dataChangelogByNodeId?: Maybe<DataChangelog>;
  /** Reads and enables pagination through a set of `DataChangelog`. */
  dataChangelogs?: Maybe<DataChangelogsConnection>;
  dataTable?: Maybe<DataTable>;
  /** Reads a single `DataTable` using its globally unique `ID`. */
  dataTableByNodeId?: Maybe<DataTable>;
  dataTableByTableName?: Maybe<DataTable>;
  /** Reads and enables pagination through a set of `DataTable`. */
  dataTables?: Maybe<DataTablesConnection>;
  dataView?: Maybe<DataView>;
  dataViewByIdentifier?: Maybe<DataView>;
  /** Reads a single `DataView` using its globally unique `ID`. */
  dataViewByNodeId?: Maybe<DataView>;
  dataViewColumnDefinition?: Maybe<DataViewColumnDefinition>;
  /** Reads a single `DataViewColumnDefinition` using its globally unique `ID`. */
  dataViewColumnDefinitionByNodeId?: Maybe<DataViewColumnDefinition>;
  dataViewColumnDefinitionByTableNameAndColumnName?: Maybe<DataViewColumnDefinition>;
  /** Reads and enables pagination through a set of `DataViewColumnDefinition`. */
  dataViewColumnDefinitions?: Maybe<DataViewColumnDefinitionsConnection>;
  /** Reads and enables pagination through a set of `DataView`. */
  dataViews?: Maybe<DataViewsConnection>;
  elementTypePlugin?: Maybe<ElementTypePlugin>;
  /** Reads a single `ElementTypePlugin` using its globally unique `ID`. */
  elementTypePluginByNodeId?: Maybe<ElementTypePlugin>;
  /** Reads and enables pagination through a set of `ElementTypePlugin`. */
  elementTypePlugins?: Maybe<ElementTypePluginsConnection>;
  file?: Maybe<File>;
  /** Reads a single `File` using its globally unique `ID`. */
  fileByNodeId?: Maybe<File>;
  fileByUniqueId?: Maybe<File>;
  /** Reads and enables pagination through a set of `File`. */
  files?: Maybe<FilesConnection>;
  filter?: Maybe<Filter>;
  filterByCode?: Maybe<Filter>;
  /** Reads a single `Filter` using its globally unique `ID`. */
  filterByNodeId?: Maybe<Filter>;
  /** Reads and enables pagination through a set of `Filter`. */
  filters?: Maybe<FiltersConnection>;
  jwtGetBigint?: Maybe<Scalars['BigInt']['output']>;
  jwtGetBoolean?: Maybe<Scalars['Boolean']['output']>;
  jwtGetText?: Maybe<Scalars['String']['output']>;
  /** Fetches an object given its globally unique `ID`. */
  node?: Maybe<Node>;
  /** The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`. */
  nodeId: Scalars['ID']['output'];
  notification?: Maybe<Notification>;
  /** Reads a single `Notification` using its globally unique `ID`. */
  notificationByNodeId?: Maybe<Notification>;
  /** Reads and enables pagination through a set of `Notification`. */
  notifications?: Maybe<NotificationsConnection>;
  organisation?: Maybe<Organisation>;
  organisationByName?: Maybe<Organisation>;
  /** Reads a single `Organisation` using its globally unique `ID`. */
  organisationByNodeId?: Maybe<Organisation>;
  organisationByRegistration?: Maybe<Organisation>;
  /** Reads and enables pagination through a set of `Organisation`. */
  organisations?: Maybe<OrganisationsConnection>;
  /** Reads and enables pagination through a set of `PermissionFlattened`. */
  permissionFlatteneds?: Maybe<PermissionFlattenedsConnection>;
  permissionJoin?: Maybe<PermissionJoin>;
  /** Reads a single `PermissionJoin` using its globally unique `ID`. */
  permissionJoinByNodeId?: Maybe<PermissionJoin>;
  /** Reads and enables pagination through a set of `PermissionJoin`. */
  permissionJoins?: Maybe<PermissionJoinsConnection>;
  permissionName?: Maybe<PermissionName>;
  permissionNameByName?: Maybe<PermissionName>;
  /** Reads a single `PermissionName` using its globally unique `ID`. */
  permissionNameByNodeId?: Maybe<PermissionName>;
  /** Reads and enables pagination through a set of `PermissionName`. */
  permissionNames?: Maybe<PermissionNamesConnection>;
  /** Reads and enables pagination through a set of `PermissionPolicy`. */
  permissionPolicies?: Maybe<PermissionPoliciesConnection>;
  permissionPolicy?: Maybe<PermissionPolicy>;
  permissionPolicyByName?: Maybe<PermissionPolicy>;
  /** Reads a single `PermissionPolicy` using its globally unique `ID`. */
  permissionPolicyByNodeId?: Maybe<PermissionPolicy>;
  /** Reads and enables pagination through a set of `PermissionsAll`. */
  permissionsAlls?: Maybe<PermissionsAllsConnection>;
  /** Reads and enables pagination through a set of `PostgresRowLevel`. */
  postgresRowLevels?: Maybe<PostgresRowLevelsConnection>;
  /**
   * Exposes the root query type nested one level down. This is helpful for Relay 1
   * which can only query top level fields if they are in a particular form.
   */
  query: Query;
  review?: Maybe<Review>;
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** Reads and enables pagination through a set of `ReviewAssignmentAssignedSectionsShape`. */
  reviewAssignmentAssignedSections?: Maybe<ReviewAssignmentAssignedSectionsShapesConnection>;
  /** Reads and enables pagination through a set of `ReviewAssignmentAssignedSectionsShape`. */
  reviewAssignmentAssignedSectionsShapes?: Maybe<ReviewAssignmentAssignedSectionsShapesConnection>;
  reviewAssignmentAssignerJoin?: Maybe<ReviewAssignmentAssignerJoin>;
  /** Reads a single `ReviewAssignmentAssignerJoin` using its globally unique `ID`. */
  reviewAssignmentAssignerJoinByNodeId?: Maybe<ReviewAssignmentAssignerJoin>;
  /** Reads and enables pagination through a set of `ReviewAssignmentAssignerJoin`. */
  reviewAssignmentAssignerJoins?: Maybe<ReviewAssignmentAssignerJoinsConnection>;
  /** Reads a single `ReviewAssignment` using its globally unique `ID`. */
  reviewAssignmentByNodeId?: Maybe<ReviewAssignment>;
  /** Reads and enables pagination through a set of `ReviewAssignment`. */
  reviewAssignments?: Maybe<ReviewAssignmentsConnection>;
  /** Reads a single `Review` using its globally unique `ID`. */
  reviewByNodeId?: Maybe<Review>;
  reviewByReviewAssignmentId?: Maybe<Review>;
  reviewDecision?: Maybe<ReviewDecision>;
  /** Reads a single `ReviewDecision` using its globally unique `ID`. */
  reviewDecisionByNodeId?: Maybe<ReviewDecision>;
  /** Reads and enables pagination through a set of `ReviewDecision`. */
  reviewDecisions?: Maybe<ReviewDecisionsConnection>;
  reviewList?: Maybe<ReviewListConnection>;
  reviewResponse?: Maybe<ReviewResponse>;
  /** Reads a single `ReviewResponse` using its globally unique `ID`. */
  reviewResponseByNodeId?: Maybe<ReviewResponse>;
  /** Reads and enables pagination through a set of `ReviewResponse`. */
  reviewResponses?: Maybe<ReviewResponsesConnection>;
  /** Reads and enables pagination through a set of `ReviewStatusHistory`. */
  reviewStatusHistories?: Maybe<ReviewStatusHistoriesConnection>;
  reviewStatusHistory?: Maybe<ReviewStatusHistory>;
  /** Reads a single `ReviewStatusHistory` using its globally unique `ID`. */
  reviewStatusHistoryByNodeId?: Maybe<ReviewStatusHistory>;
  reviewableQuestions?: Maybe<ReviewableQuestionsConnection>;
  reviewableQuestionsCount?: Maybe<Scalars['BigInt']['output']>;
  /** Reads and enables pagination through a set of `Review`. */
  reviews?: Maybe<ReviewsConnection>;
  /** Reads and enables pagination through a set of `SchemaColumn`. */
  schemaColumns?: Maybe<SchemaColumnsConnection>;
  singleApplicationDetail?: Maybe<SingleApplicationDetailConnection>;
  submittedAssignedQuestionsCount?: Maybe<Scalars['BigInt']['output']>;
  systemInfo?: Maybe<SystemInfo>;
  /** Reads a single `SystemInfo` using its globally unique `ID`. */
  systemInfoByNodeId?: Maybe<SystemInfo>;
  /** Reads and enables pagination through a set of `SystemInfo`. */
  systemInfos?: Maybe<SystemInfosConnection>;
  template?: Maybe<Template>;
  templateAction?: Maybe<TemplateAction>;
  /** Reads a single `TemplateAction` using its globally unique `ID`. */
  templateActionByNodeId?: Maybe<TemplateAction>;
  /** Reads and enables pagination through a set of `TemplateAction`. */
  templateActions?: Maybe<TemplateActionsConnection>;
  templateByCodeAndVersionId?: Maybe<Template>;
  /** Reads a single `Template` using its globally unique `ID`. */
  templateByNodeId?: Maybe<Template>;
  /** Reads and enables pagination through a set of `TemplateCategory`. */
  templateCategories?: Maybe<TemplateCategoriesConnection>;
  templateCategory?: Maybe<TemplateCategory>;
  templateCategoryByCode?: Maybe<TemplateCategory>;
  /** Reads a single `TemplateCategory` using its globally unique `ID`. */
  templateCategoryByNodeId?: Maybe<TemplateCategory>;
  templateElement?: Maybe<TemplateElement>;
  /** Reads a single `TemplateElement` using its globally unique `ID`. */
  templateElementByNodeId?: Maybe<TemplateElement>;
  templateElementByTemplateCodeAndCodeAndTemplateVersion?: Maybe<TemplateElement>;
  /** Reads and enables pagination through a set of `TemplateElement`. */
  templateElements?: Maybe<TemplateElementsConnection>;
  templateFilterJoin?: Maybe<TemplateFilterJoin>;
  /** Reads a single `TemplateFilterJoin` using its globally unique `ID`. */
  templateFilterJoinByNodeId?: Maybe<TemplateFilterJoin>;
  /** Reads and enables pagination through a set of `TemplateFilterJoin`. */
  templateFilterJoins?: Maybe<TemplateFilterJoinsConnection>;
  templatePermission?: Maybe<TemplatePermission>;
  /** Reads a single `TemplatePermission` using its globally unique `ID`. */
  templatePermissionByNodeId?: Maybe<TemplatePermission>;
  /** Reads and enables pagination through a set of `TemplatePermission`. */
  templatePermissions?: Maybe<TemplatePermissionsConnection>;
  templateSection?: Maybe<TemplateSection>;
  /** Reads a single `TemplateSection` using its globally unique `ID`. */
  templateSectionByNodeId?: Maybe<TemplateSection>;
  templateSectionByTemplateIdAndCode?: Maybe<TemplateSection>;
  /** Reads and enables pagination through a set of `TemplateSection`. */
  templateSections?: Maybe<TemplateSectionsConnection>;
  templateStage?: Maybe<TemplateStage>;
  /** Reads a single `TemplateStage` using its globally unique `ID`. */
  templateStageByNodeId?: Maybe<TemplateStage>;
  templateStageReviewLevel?: Maybe<TemplateStageReviewLevel>;
  /** Reads a single `TemplateStageReviewLevel` using its globally unique `ID`. */
  templateStageReviewLevelByNodeId?: Maybe<TemplateStageReviewLevel>;
  /** Reads and enables pagination through a set of `TemplateStageReviewLevel`. */
  templateStageReviewLevels?: Maybe<TemplateStageReviewLevelsConnection>;
  /** Reads and enables pagination through a set of `TemplateStage`. */
  templateStages?: Maybe<TemplateStagesConnection>;
  /** Reads and enables pagination through a set of `Template`. */
  templates?: Maybe<TemplatesConnection>;
  triggerQueue?: Maybe<TriggerQueue>;
  /** Reads a single `TriggerQueue` using its globally unique `ID`. */
  triggerQueueByNodeId?: Maybe<TriggerQueue>;
  /** Reads and enables pagination through a set of `TriggerQueue`. */
  triggerQueues?: Maybe<TriggerQueuesConnection>;
  triggerSchedule?: Maybe<TriggerSchedule>;
  /** Reads a single `TriggerSchedule` using its globally unique `ID`. */
  triggerScheduleByNodeId?: Maybe<TriggerSchedule>;
  /** Reads and enables pagination through a set of `TriggerSchedule`. */
  triggerSchedules?: Maybe<TriggerSchedulesConnection>;
  /** Reads and enables pagination through a set of `UnnestedSection`. */
  unnestedSections?: Maybe<UnnestedSectionsConnection>;
  /** Reads and enables pagination through a set of `UserList`. */
  userLists?: Maybe<UserListsConnection>;
  /** Reads and enables pagination through a set of `UserOrgJoin`. */
  userOrgJoins?: Maybe<UserOrgJoinsConnection>;
  userOrganisation?: Maybe<UserOrganisation>;
  /** Reads a single `UserOrganisation` using its globally unique `ID`. */
  userOrganisationByNodeId?: Maybe<UserOrganisation>;
  userOrganisationByUserIdAndOrganisationId?: Maybe<UserOrganisation>;
  /** Reads and enables pagination through a set of `UserOrganisation`. */
  userOrganisations?: Maybe<UserOrganisationsConnection>;
  /** Reads and enables pagination through a set of `User`. */
  users?: Maybe<UsersConnection>;
  verification?: Maybe<Verification>;
  /** Reads a single `Verification` using its globally unique `ID`. */
  verificationByNodeId?: Maybe<Verification>;
  verificationByUniqueId?: Maybe<Verification>;
  /** Reads and enables pagination through a set of `Verification`. */
  verifications?: Maybe<VerificationsConnection>;
};


/** The root query type which gives access points into the data universe. */
export type QueryActionPluginArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryActionPluginByCodeArgs = {
  code: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryActionPluginByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryActionPluginsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ActionPluginCondition>;
  filter?: InputMaybe<ActionPluginFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ActionPluginsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryActionQueueArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryActionQueueByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryActionQueuesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ActionQueueCondition>;
  filter?: InputMaybe<ActionQueueFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ActionQueuesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryActivityLogArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryActivityLogByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryActivityLogsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ActivityLogCondition>;
  filter?: InputMaybe<ActivityLogFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ActivityLogsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAllowedSelfAssignableSectionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  filter?: InputMaybe<AllowedSelfAssignableSectionsShapeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  userid?: InputMaybe<Scalars['Int']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAllowedSelfAssignableSectionsShapesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<AllowedSelfAssignableSectionsShapeCondition>;
  filter?: InputMaybe<AllowedSelfAssignableSectionsShapeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<AllowedSelfAssignableSectionsShapesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationByOutcomeRegistrationArgs = {
  outcomeRegistration: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationBySerialArgs = {
  serial: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationListArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  filter?: InputMaybe<ApplicationListShapeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationListShapesOrderBy>>;
  userid?: InputMaybe<Scalars['Int']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationListFilterApplicantArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  applicant?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  filter?: InputMaybe<StringFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  templateCode?: InputMaybe<Scalars['String']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationListFilterAssignerArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  assigner?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  filter?: InputMaybe<StringFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  templateCode?: InputMaybe<Scalars['String']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationListFilterOrganisationArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  filter?: InputMaybe<StringFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  organisation?: InputMaybe<Scalars['String']['input']>;
  templateCode?: InputMaybe<Scalars['String']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationListFilterReviewerArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  filter?: InputMaybe<StringFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  reviewer?: InputMaybe<Scalars['String']['input']>;
  templateCode?: InputMaybe<Scalars['String']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationListFilterStageArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  filter?: InputMaybe<StringFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  templateCode?: InputMaybe<Scalars['String']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationListShapesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationListShapeCondition>;
  filter?: InputMaybe<ApplicationListShapeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationListShapesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationNoteArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationNoteByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationNotesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationNoteCondition>;
  filter?: InputMaybe<ApplicationNoteFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationNotesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationResponseArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationResponseByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationResponsesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationResponseCondition>;
  filter?: InputMaybe<ApplicationResponseFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationResponsesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationReviewerActionArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationReviewerActionByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationReviewerActionByUserIdAndApplicationIdArgs = {
  applicationId: Scalars['Int']['input'];
  userId: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationReviewerActionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationReviewerActionCondition>;
  filter?: InputMaybe<ApplicationReviewerActionFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationReviewerActionsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationStageHistoriesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationStageHistoryCondition>;
  filter?: InputMaybe<ApplicationStageHistoryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationStageHistoriesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationStageHistoryArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationStageHistoryByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationStageStatusAllsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationStageStatusAllCondition>;
  filter?: InputMaybe<ApplicationStageStatusAllFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationStageStatusAllsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationStageStatusLatestsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationStageStatusLatestCondition>;
  filter?: InputMaybe<ApplicationStageStatusLatestFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationStageStatusLatestsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationStatusHistoriesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationStatusHistoryCondition>;
  filter?: InputMaybe<ApplicationStatusHistoryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationStatusHistoriesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationStatusHistoryArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationStatusHistoryByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryApplicationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationCondition>;
  filter?: InputMaybe<ApplicationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAssignedQuestionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  appId?: InputMaybe<Scalars['Int']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  filter?: InputMaybe<AssignedQuestionsRecordFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAssignedQuestionsCountArgs = {
  appId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAssignedSectionsByStageAndLevelsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<AssignedSectionsByStageAndLevelCondition>;
  filter?: InputMaybe<AssignedSectionsByStageAndLevelFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<AssignedSectionsByStageAndLevelsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAssignerListArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  filter?: InputMaybe<AssignerListRecordFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryAssignmentListArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  filter?: InputMaybe<AssignmentListRecordFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  stageid?: InputMaybe<Scalars['Int']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryConstraintsInfosArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ConstraintsInfoCondition>;
  filter?: InputMaybe<ConstraintsInfoFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ConstraintsInfosOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryCounterArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCounterByNameArgs = {
  name: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCounterByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryCountersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<CounterCondition>;
  filter?: InputMaybe<CounterFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CountersOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataChangelogArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataChangelogByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataChangelogsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<DataChangelogCondition>;
  filter?: InputMaybe<DataChangelogFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DataChangelogsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTableByTableNameArgs = {
  tableName: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataTablesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<DataTableCondition>;
  filter?: InputMaybe<DataTableFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DataTablesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataViewArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataViewByIdentifierArgs = {
  identifier: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataViewByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataViewColumnDefinitionArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataViewColumnDefinitionByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataViewColumnDefinitionByTableNameAndColumnNameArgs = {
  columnName: Scalars['String']['input'];
  tableName: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryDataViewColumnDefinitionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<DataViewColumnDefinitionCondition>;
  filter?: InputMaybe<DataViewColumnDefinitionFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DataViewColumnDefinitionsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryDataViewsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<DataViewCondition>;
  filter?: InputMaybe<DataViewFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DataViewsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryElementTypePluginArgs = {
  code: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryElementTypePluginByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryElementTypePluginsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ElementTypePluginCondition>;
  filter?: InputMaybe<ElementTypePluginFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ElementTypePluginsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryFileArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryFileByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryFileByUniqueIdArgs = {
  uniqueId: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryFilesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<FileCondition>;
  filter?: InputMaybe<FileFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<FilesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryFilterArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryFilterByCodeArgs = {
  code: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryFilterByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryFiltersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<FilterCondition>;
  filter?: InputMaybe<FilterFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<FiltersOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryJwtGetBigintArgs = {
  jwtKey?: InputMaybe<Scalars['String']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryJwtGetBooleanArgs = {
  jwtKey?: InputMaybe<Scalars['String']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryJwtGetTextArgs = {
  jwtKey?: InputMaybe<Scalars['String']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryNodeArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryNotificationArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryNotificationByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryNotificationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<NotificationCondition>;
  filter?: InputMaybe<NotificationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<NotificationsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganisationArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganisationByNameArgs = {
  name: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganisationByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganisationByRegistrationArgs = {
  registration: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryOrganisationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<OrganisationCondition>;
  filter?: InputMaybe<OrganisationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<OrganisationsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionFlattenedsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<PermissionFlattenedCondition>;
  filter?: InputMaybe<PermissionFlattenedFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PermissionFlattenedsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionJoinArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionJoinByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionJoinsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<PermissionJoinCondition>;
  filter?: InputMaybe<PermissionJoinFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PermissionJoinsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionNameArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionNameByNameArgs = {
  name: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionNameByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionNamesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<PermissionNameCondition>;
  filter?: InputMaybe<PermissionNameFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PermissionNamesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionPoliciesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<PermissionPolicyCondition>;
  filter?: InputMaybe<PermissionPolicyFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PermissionPoliciesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionPolicyArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionPolicyByNameArgs = {
  name: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionPolicyByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryPermissionsAllsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<PermissionsAllCondition>;
  filter?: InputMaybe<PermissionsAllFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PermissionsAllsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryPostgresRowLevelsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<PostgresRowLevelCondition>;
  filter?: InputMaybe<PostgresRowLevelFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PostgresRowLevelsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewAssignmentArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewAssignmentAssignedSectionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  filter?: InputMaybe<ReviewAssignmentAssignedSectionsShapeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  userid?: InputMaybe<Scalars['Int']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewAssignmentAssignedSectionsShapesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewAssignmentAssignedSectionsShapeCondition>;
  filter?: InputMaybe<ReviewAssignmentAssignedSectionsShapeFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewAssignmentAssignedSectionsShapesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewAssignmentAssignerJoinArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewAssignmentAssignerJoinByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewAssignmentAssignerJoinsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewAssignmentAssignerJoinCondition>;
  filter?: InputMaybe<ReviewAssignmentAssignerJoinFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewAssignmentAssignerJoinsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewAssignmentByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewAssignmentsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewAssignmentCondition>;
  filter?: InputMaybe<ReviewAssignmentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewAssignmentsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewByReviewAssignmentIdArgs = {
  reviewAssignmentId: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewDecisionArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewDecisionByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewDecisionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewDecisionCondition>;
  filter?: InputMaybe<ReviewDecisionFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewDecisionsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewListArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  appstatus?: InputMaybe<ApplicationStatus>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  filter?: InputMaybe<ReviewListRecordFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  reviewerid?: InputMaybe<Scalars['Int']['input']>;
  stageid?: InputMaybe<Scalars['Int']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewResponseArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewResponseByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewResponsesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewResponseCondition>;
  filter?: InputMaybe<ReviewResponseFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewResponsesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewStatusHistoriesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewStatusHistoryCondition>;
  filter?: InputMaybe<ReviewStatusHistoryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewStatusHistoriesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewStatusHistoryArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewStatusHistoryByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewableQuestionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  appId?: InputMaybe<Scalars['Int']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  filter?: InputMaybe<ReviewableQuestionsRecordFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewableQuestionsCountArgs = {
  appId?: InputMaybe<Scalars['Int']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QueryReviewsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewCondition>;
  filter?: InputMaybe<ReviewFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySchemaColumnsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<SchemaColumnCondition>;
  filter?: InputMaybe<SchemaColumnFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<SchemaColumnsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySingleApplicationDetailArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  applicationid?: InputMaybe<Scalars['Int']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  filter?: InputMaybe<SingleApplicationDetailRecordFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  userid?: InputMaybe<Scalars['Int']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySubmittedAssignedQuestionsCountArgs = {
  appId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
};


/** The root query type which gives access points into the data universe. */
export type QuerySystemInfoArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QuerySystemInfoByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QuerySystemInfosArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<SystemInfoCondition>;
  filter?: InputMaybe<SystemInfoFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<SystemInfosOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateActionArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateActionByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateActionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplateActionCondition>;
  filter?: InputMaybe<TemplateActionFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplateActionsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateByCodeAndVersionIdArgs = {
  code: Scalars['String']['input'];
  versionId: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateCategoriesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplateCategoryCondition>;
  filter?: InputMaybe<TemplateCategoryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplateCategoriesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateCategoryArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateCategoryByCodeArgs = {
  code: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateCategoryByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateElementArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateElementByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateElementByTemplateCodeAndCodeAndTemplateVersionArgs = {
  code: Scalars['String']['input'];
  templateCode: Scalars['String']['input'];
  templateVersion: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateElementsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplateElementCondition>;
  filter?: InputMaybe<TemplateElementFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplateElementsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateFilterJoinArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateFilterJoinByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateFilterJoinsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplateFilterJoinCondition>;
  filter?: InputMaybe<TemplateFilterJoinFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplateFilterJoinsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplatePermissionArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplatePermissionByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplatePermissionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplatePermissionCondition>;
  filter?: InputMaybe<TemplatePermissionFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplatePermissionsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateSectionArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateSectionByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateSectionByTemplateIdAndCodeArgs = {
  code: Scalars['String']['input'];
  templateId: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateSectionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplateSectionCondition>;
  filter?: InputMaybe<TemplateSectionFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplateSectionsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateStageArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateStageByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateStageReviewLevelArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateStageReviewLevelByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateStageReviewLevelsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplateStageReviewLevelCondition>;
  filter?: InputMaybe<TemplateStageReviewLevelFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplateStageReviewLevelsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplateStagesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplateStageCondition>;
  filter?: InputMaybe<TemplateStageFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplateStagesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTemplatesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplateCondition>;
  filter?: InputMaybe<TemplateFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplatesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTriggerQueueArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTriggerQueueByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTriggerQueuesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TriggerQueueCondition>;
  filter?: InputMaybe<TriggerQueueFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TriggerQueuesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryTriggerScheduleArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTriggerScheduleByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryTriggerSchedulesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TriggerScheduleCondition>;
  filter?: InputMaybe<TriggerScheduleFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TriggerSchedulesOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUnnestedSectionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<UnnestedSectionCondition>;
  filter?: InputMaybe<UnnestedSectionFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<UnnestedSectionsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserListsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<UserListCondition>;
  filter?: InputMaybe<UserListFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<UserListsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserOrgJoinsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<UserOrgJoinCondition>;
  filter?: InputMaybe<UserOrgJoinFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<UserOrgJoinsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUserOrganisationArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserOrganisationByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserOrganisationByUserIdAndOrganisationIdArgs = {
  organisationId: Scalars['Int']['input'];
  userId: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryUserOrganisationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<UserOrganisationCondition>;
  filter?: InputMaybe<UserOrganisationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<UserOrganisationsOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<UserCondition>;
  filter?: InputMaybe<UserFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<UsersOrderBy>>;
};


/** The root query type which gives access points into the data universe. */
export type QueryVerificationArgs = {
  id: Scalars['Int']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryVerificationByNodeIdArgs = {
  nodeId: Scalars['ID']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryVerificationByUniqueIdArgs = {
  uniqueId: Scalars['String']['input'];
};


/** The root query type which gives access points into the data universe. */
export type QueryVerificationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<VerificationCondition>;
  filter?: InputMaybe<VerificationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<VerificationsOrderBy>>;
};

export type Review = Node & {
  __typename?: 'Review';
  /** Reads a single `Application` that is related to this `Review`. */
  application?: Maybe<Application>;
  applicationId?: Maybe<Scalars['Int']['output']>;
  id: Scalars['Int']['output'];
  isFinalDecision?: Maybe<Scalars['Boolean']['output']>;
  isLastLevel?: Maybe<Scalars['Boolean']['output']>;
  isLastStage?: Maybe<Scalars['Boolean']['output']>;
  isLocked?: Maybe<Scalars['Boolean']['output']>;
  latestDecision?: Maybe<ReviewDecision>;
  levelNumber?: Maybe<Scalars['Int']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads and enables pagination through a set of `Notification`. */
  notifications: NotificationsConnection;
  /** Reads a single `ReviewAssignment` that is related to this `Review`. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  reviewAssignmentId?: Maybe<Scalars['Int']['output']>;
  /** Reads and enables pagination through a set of `ReviewDecision`. */
  reviewDecisions: ReviewDecisionsConnection;
  /** Reads and enables pagination through a set of `ReviewResponse`. */
  reviewResponses: ReviewResponsesConnection;
  /** Reads and enables pagination through a set of `ReviewStatusHistory`. */
  reviewStatusHistories: ReviewStatusHistoriesConnection;
  /** Reads a single `UserList` that is related to this `Review`. */
  reviewer?: Maybe<UserList>;
  reviewerId?: Maybe<Scalars['Int']['output']>;
  stageNumber?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<ReviewStatus>;
  timeStageCreated?: Maybe<Scalars['Datetime']['output']>;
  timeStatusCreated?: Maybe<Scalars['Datetime']['output']>;
  trigger?: Maybe<Trigger>;
};


export type ReviewNotificationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<NotificationCondition>;
  filter?: InputMaybe<NotificationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<NotificationsOrderBy>>;
};


export type ReviewReviewDecisionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewDecisionCondition>;
  filter?: InputMaybe<ReviewDecisionFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewDecisionsOrderBy>>;
};


export type ReviewReviewResponsesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewResponseCondition>;
  filter?: InputMaybe<ReviewResponseFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewResponsesOrderBy>>;
};


export type ReviewReviewStatusHistoriesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewStatusHistoryCondition>;
  filter?: InputMaybe<ReviewStatusHistoryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewStatusHistoriesOrderBy>>;
};

/** The `application` to be created by this mutation. */
export type ReviewApplicationIdFkeyApplicationCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `application` in the `ReviewInput` mutation. */
export type ReviewApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: InputMaybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: InputMaybe<ApplicationApplicationSerialKeyConnect>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: InputMaybe<ReviewApplicationIdFkeyApplicationCreateInput>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: InputMaybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ApplicationNodeIdDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: InputMaybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: InputMaybe<ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ReviewOnReviewForReviewApplicationIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByOutcomeRegistration?: InputMaybe<ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: InputMaybe<ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
};

/** Input for the nested mutation of `review` in the `ApplicationInput` mutation. */
export type ReviewApplicationIdFkeyInverseInput = {
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ReviewReviewPkeyConnect>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ReviewNodeIdConnect>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByReviewAssignmentId?: InputMaybe<Array<ReviewReviewReviewAssignmentIdKeyConnect>>;
  /** A `ReviewInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ReviewApplicationIdFkeyReviewCreateInput>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ReviewReviewPkeyDelete>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ReviewNodeIdDelete>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByReviewAssignmentId?: InputMaybe<Array<ReviewReviewReviewAssignmentIdKeyDelete>>;
  /** Flag indicating whether all other `review` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ReviewOnReviewForReviewApplicationIdFkeyUsingReviewPkeyUpdate>>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ApplicationOnReviewForReviewApplicationIdFkeyNodeIdUpdate>>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByReviewAssignmentId?: InputMaybe<Array<ReviewOnReviewForReviewApplicationIdFkeyUsingReviewReviewAssignmentIdKeyUpdate>>;
};

/** The `review` to be created by this mutation. */
export type ReviewApplicationIdFkeyReviewCreateInput = {
  applicationToApplicationId?: InputMaybe<ReviewApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  notificationsUsingId?: InputMaybe<NotificationReviewIdFkeyInverseInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewReviewAssignmentIdFkeyInput>;
  reviewDecisionsUsingId?: InputMaybe<ReviewDecisionReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToReviewerId?: InputMaybe<FakePublicReviewForeignKey0Input>;
};

export type ReviewAssignment = Node & {
  __typename?: 'ReviewAssignment';
  allowedSections?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** Reads a single `Application` that is related to this `ReviewAssignment`. */
  application?: Maybe<Application>;
  applicationId: Scalars['Int']['output'];
  assignedSections: Array<Maybe<Scalars['String']['output']>>;
  /** Reads a single `UserList` that is related to this `ReviewAssignment`. */
  assigner?: Maybe<UserList>;
  assignerId?: Maybe<Scalars['Int']['output']>;
  availableSections?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  id: Scalars['Int']['output'];
  isFinalDecision?: Maybe<Scalars['Boolean']['output']>;
  isLastLevel?: Maybe<Scalars['Boolean']['output']>;
  isLastStage?: Maybe<Scalars['Boolean']['output']>;
  isSelfAssignable?: Maybe<Scalars['Boolean']['output']>;
  /** Reads a single `TemplateStageReviewLevel` that is related to this `ReviewAssignment`. */
  level?: Maybe<TemplateStageReviewLevel>;
  levelId?: Maybe<Scalars['Int']['output']>;
  levelNumber?: Maybe<Scalars['Int']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Organisation` that is related to this `ReviewAssignment`. */
  organisation?: Maybe<Organisation>;
  organisationId?: Maybe<Scalars['Int']['output']>;
  /** Reads a single `Review` that is related to this `ReviewAssignment`. */
  review?: Maybe<Review>;
  /** Reads and enables pagination through a set of `ReviewAssignmentAssignerJoin`. */
  reviewAssignmentAssignerJoins: ReviewAssignmentAssignerJoinsConnection;
  /** Reads a single `UserList` that is related to this `ReviewAssignment`. */
  reviewer?: Maybe<UserList>;
  reviewerId: Scalars['Int']['output'];
  /**
   * Reads and enables pagination through a set of `Review`.
   * @deprecated Please use review instead
   */
  reviews: ReviewsConnection;
  /** Reads a single `TemplateStage` that is related to this `ReviewAssignment`. */
  stage?: Maybe<TemplateStage>;
  stageId: Scalars['Int']['output'];
  stageNumber?: Maybe<Scalars['Int']['output']>;
  status: ReviewAssignmentStatus;
  /** Reads a single `Template` that is related to this `ReviewAssignment`. */
  template?: Maybe<Template>;
  templateId: Scalars['Int']['output'];
  timeStageCreated?: Maybe<Scalars['Datetime']['output']>;
  timeUpdated?: Maybe<Scalars['Datetime']['output']>;
  trigger?: Maybe<Trigger>;
};


export type ReviewAssignmentReviewAssignmentAssignerJoinsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewAssignmentAssignerJoinCondition>;
  filter?: InputMaybe<ReviewAssignmentAssignerJoinFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewAssignmentAssignerJoinsOrderBy>>;
};


export type ReviewAssignmentReviewsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewCondition>;
  filter?: InputMaybe<ReviewFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewsOrderBy>>;
};

/** The `application` to be created by this mutation. */
export type ReviewAssignmentApplicationIdFkeyApplicationCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `application` in the `ReviewAssignmentInput` mutation. */
export type ReviewAssignmentApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: InputMaybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: InputMaybe<ApplicationApplicationSerialKeyConnect>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: InputMaybe<ReviewAssignmentApplicationIdFkeyApplicationCreateInput>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: InputMaybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ApplicationNodeIdDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: InputMaybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: InputMaybe<ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByOutcomeRegistration?: InputMaybe<ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: InputMaybe<ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
};

/** Input for the nested mutation of `reviewAssignment` in the `ApplicationInput` mutation. */
export type ReviewAssignmentApplicationIdFkeyInverseInput = {
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ReviewAssignmentReviewAssignmentPkeyConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ReviewAssignmentNodeIdConnect>>;
  /** A `ReviewAssignmentInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ReviewAssignmentApplicationIdFkeyReviewAssignmentCreateInput>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ReviewAssignmentReviewAssignmentPkeyDelete>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ReviewAssignmentNodeIdDelete>>;
  /** Flag indicating whether all other `reviewAssignment` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingReviewAssignmentPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyNodeIdUpdate>>;
};

/** The `reviewAssignment` to be created by this mutation. */
export type ReviewAssignmentApplicationIdFkeyReviewAssignmentCreateInput = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status: ReviewAssignmentStatus;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

export type ReviewAssignmentAssignedSectionsShape = {
  __typename?: 'ReviewAssignmentAssignedSectionsShape';
  assignedSections?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  reviewAssignmentId?: Maybe<Scalars['Int']['output']>;
};

/**
 * A condition to be used against `ReviewAssignmentAssignedSectionsShape` object
 * types. All fields are tested for equality and combined with a logical ‘and.’
 */
export type ReviewAssignmentAssignedSectionsShapeCondition = {
  /** Checks for equality with the object’s `assignedSections` field. */
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `reviewAssignmentId` field. */
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
};

/** A filter to be used against `ReviewAssignmentAssignedSectionsShape` object types. All fields are combined with a logical ‘and.’ */
export type ReviewAssignmentAssignedSectionsShapeFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ReviewAssignmentAssignedSectionsShapeFilter>>;
  /** Filter by the object’s `assignedSections` field. */
  assignedSections?: InputMaybe<StringListFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ReviewAssignmentAssignedSectionsShapeFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ReviewAssignmentAssignedSectionsShapeFilter>>;
  /** Filter by the object’s `reviewAssignmentId` field. */
  reviewAssignmentId?: InputMaybe<IntFilter>;
};

/** An input for mutations affecting `ReviewAssignmentAssignedSectionsShape` */
export type ReviewAssignmentAssignedSectionsShapeInput = {
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
};

/** A connection to a list of `ReviewAssignmentAssignedSectionsShape` values. */
export type ReviewAssignmentAssignedSectionsShapesConnection = {
  __typename?: 'ReviewAssignmentAssignedSectionsShapesConnection';
  /** A list of edges which contains the `ReviewAssignmentAssignedSectionsShape` and cursor to aid in pagination. */
  edges: Array<ReviewAssignmentAssignedSectionsShapesEdge>;
  /** A list of `ReviewAssignmentAssignedSectionsShape` objects. */
  nodes: Array<Maybe<ReviewAssignmentAssignedSectionsShape>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ReviewAssignmentAssignedSectionsShape` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ReviewAssignmentAssignedSectionsShape` edge in the connection. */
export type ReviewAssignmentAssignedSectionsShapesEdge = {
  __typename?: 'ReviewAssignmentAssignedSectionsShapesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ReviewAssignmentAssignedSectionsShape` at the end of the edge. */
  node?: Maybe<ReviewAssignmentAssignedSectionsShape>;
};

/** Methods to use when ordering `ReviewAssignmentAssignedSectionsShape`. */
export enum ReviewAssignmentAssignedSectionsShapesOrderBy {
  AssignedSectionsAsc = 'ASSIGNED_SECTIONS_ASC',
  AssignedSectionsDesc = 'ASSIGNED_SECTIONS_DESC',
  Natural = 'NATURAL',
  ReviewAssignmentIdAsc = 'REVIEW_ASSIGNMENT_ID_ASC',
  ReviewAssignmentIdDesc = 'REVIEW_ASSIGNMENT_ID_DESC'
}

export type ReviewAssignmentAssignerJoin = Node & {
  __typename?: 'ReviewAssignmentAssignerJoin';
  /** Reads a single `UserList` that is related to this `ReviewAssignmentAssignerJoin`. */
  assigner?: Maybe<UserList>;
  assignerId?: Maybe<Scalars['Int']['output']>;
  id: Scalars['Int']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Organisation` that is related to this `ReviewAssignmentAssignerJoin`. */
  organisation?: Maybe<Organisation>;
  organisationId?: Maybe<Scalars['Int']['output']>;
  /** Reads a single `ReviewAssignment` that is related to this `ReviewAssignmentAssignerJoin`. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  reviewAssignmentId: Scalars['Int']['output'];
};

/**
 * A condition to be used against `ReviewAssignmentAssignerJoin` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type ReviewAssignmentAssignerJoinCondition = {
  /** Checks for equality with the object’s `assignerId` field. */
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `organisationId` field. */
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `reviewAssignmentId` field. */
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
};

/** A filter to be used against `ReviewAssignmentAssignerJoin` object types. All fields are combined with a logical ‘and.’ */
export type ReviewAssignmentAssignerJoinFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ReviewAssignmentAssignerJoinFilter>>;
  /** Filter by the object’s `assigner` relation. */
  assigner?: InputMaybe<UserListFilter>;
  /** A related `assigner` exists. */
  assignerExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `assignerId` field. */
  assignerId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ReviewAssignmentAssignerJoinFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ReviewAssignmentAssignerJoinFilter>>;
  /** Filter by the object’s `organisation` relation. */
  organisation?: InputMaybe<OrganisationFilter>;
  /** A related `organisation` exists. */
  organisationExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `organisationId` field. */
  organisationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `reviewAssignment` relation. */
  reviewAssignment?: InputMaybe<ReviewAssignmentFilter>;
  /** Filter by the object’s `reviewAssignmentId` field. */
  reviewAssignmentId?: InputMaybe<IntFilter>;
};

/** An input for mutations affecting `ReviewAssignmentAssignerJoin` */
export type ReviewAssignmentAssignerJoinInput = {
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentAssignerJoinForeignKey0Input>;
};

/** The globally unique `ID` look up for the row to connect. */
export type ReviewAssignmentAssignerJoinNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `reviewAssignmentAssignerJoin` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ReviewAssignmentAssignerJoinNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `reviewAssignmentAssignerJoin` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The fields on `reviewAssignmentAssignerJoin` to look up the row to update. */
export type ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForFakePublicReviewAssignmentAssignerJoinForeignKey0UsingReviewAssignmentAssignerJoinPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewAssignmentAssignerJoin` being updated. */
  patch: UpdateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForFakePublicReviewAssignmentAssignerJoinForeignKey0Patch;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `organisation` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: OrganisationPatch;
};

/** The fields on `reviewAssignmentAssignerJoin` to look up the row to update. */
export type ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingReviewAssignmentAssignerJoinPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewAssignmentAssignerJoin` being updated. */
  patch: UpdateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The fields on `reviewAssignmentAssignerJoin` to look up the row to update. */
export type ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyUsingReviewAssignmentAssignerJoinPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewAssignmentAssignerJoin` being updated. */
  patch: UpdateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyPatch;
};

/** Input for the nested mutation of `organisation` in the `ReviewAssignmentAssignerJoinInput` mutation. */
export type ReviewAssignmentAssignerJoinOrganisationIdFkeyInput = {
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectById?: InputMaybe<OrganisationOrganisationPkeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByName?: InputMaybe<OrganisationOrganisationNameKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<OrganisationNodeIdConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByRegistration?: InputMaybe<OrganisationOrganisationRegistrationKeyConnect>;
  /** A `OrganisationInput` object that will be created and connected to this object. */
  create?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyOrganisationCreateInput>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteById?: InputMaybe<OrganisationOrganisationPkeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByName?: InputMaybe<OrganisationOrganisationNameKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<OrganisationNodeIdDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByRegistration?: InputMaybe<OrganisationOrganisationRegistrationKeyDelete>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateById?: InputMaybe<OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationPkeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByName?: InputMaybe<OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationNameKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByRegistration?: InputMaybe<OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate>;
};

/** Input for the nested mutation of `reviewAssignmentAssignerJoin` in the `OrganisationInput` mutation. */
export type ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput = {
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyConnect>>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ReviewAssignmentAssignerJoinNodeIdConnect>>;
  /** A `ReviewAssignmentAssignerJoinInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ReviewAssignmentAssignerJoinOrganisationIdFkeyReviewAssignmentAssignerJoinCreateInput>>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyDelete>>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ReviewAssignmentAssignerJoinNodeIdDelete>>;
  /** Flag indicating whether all other `reviewAssignmentAssignerJoin` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingReviewAssignmentAssignerJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyNodeIdUpdate>>;
};

/** The `organisation` to be created by this mutation. */
export type ReviewAssignmentAssignerJoinOrganisationIdFkeyOrganisationCreateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteOrgIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationOrgIdFkeyInverseInput>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogOrgIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrg?: InputMaybe<Scalars['Boolean']['input']>;
  logoUrl?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  registration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: InputMaybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** The `reviewAssignmentAssignerJoin` to be created by this mutation. */
export type ReviewAssignmentAssignerJoinOrganisationIdFkeyReviewAssignmentAssignerJoinCreateInput = {
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentAssignerJoinForeignKey0Input>;
};

/** Represents an update to a `ReviewAssignmentAssignerJoin`. Fields that are set will be updated. */
export type ReviewAssignmentAssignerJoinPatch = {
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentAssignerJoinForeignKey0Input>;
};

/** The fields on `reviewAssignmentAssignerJoin` to look up the row to connect. */
export type ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `reviewAssignmentAssignerJoin` to look up the row to delete. */
export type ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** Input for the nested mutation of `reviewAssignment` in the `ReviewAssignmentAssignerJoinInput` mutation. */
export type ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput = {
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectById?: InputMaybe<ReviewAssignmentReviewAssignmentPkeyConnect>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ReviewAssignmentNodeIdConnect>;
  /** A `ReviewAssignmentInput` object that will be created and connected to this object. */
  create?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyReviewAssignmentCreateInput>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteById?: InputMaybe<ReviewAssignmentReviewAssignmentPkeyDelete>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ReviewAssignmentNodeIdDelete>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateById?: InputMaybe<ReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyUsingReviewAssignmentPkeyUpdate>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `reviewAssignmentAssignerJoin` in the `ReviewAssignmentInput` mutation. */
export type ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput = {
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyConnect>>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ReviewAssignmentAssignerJoinNodeIdConnect>>;
  /** A `ReviewAssignmentAssignerJoinInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyReviewAssignmentAssignerJoinCreateInput>>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyDelete>>;
  /** The primary key(s) for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ReviewAssignmentAssignerJoinNodeIdDelete>>;
  /** Flag indicating whether all other `reviewAssignmentAssignerJoin` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyUsingReviewAssignmentAssignerJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignmentAssignerJoin` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyNodeIdUpdate>>;
};

/** The `reviewAssignmentAssignerJoin` to be created by this mutation. */
export type ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyReviewAssignmentAssignerJoinCreateInput = {
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInput>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentAssignerJoinForeignKey0Input>;
};

/** The `reviewAssignment` to be created by this mutation. */
export type ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyReviewAssignmentCreateInput = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status: ReviewAssignmentStatus;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** A connection to a list of `ReviewAssignmentAssignerJoin` values. */
export type ReviewAssignmentAssignerJoinsConnection = {
  __typename?: 'ReviewAssignmentAssignerJoinsConnection';
  /** A list of edges which contains the `ReviewAssignmentAssignerJoin` and cursor to aid in pagination. */
  edges: Array<ReviewAssignmentAssignerJoinsEdge>;
  /** A list of `ReviewAssignmentAssignerJoin` objects. */
  nodes: Array<Maybe<ReviewAssignmentAssignerJoin>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ReviewAssignmentAssignerJoin` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ReviewAssignmentAssignerJoin` edge in the connection. */
export type ReviewAssignmentAssignerJoinsEdge = {
  __typename?: 'ReviewAssignmentAssignerJoinsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ReviewAssignmentAssignerJoin` at the end of the edge. */
  node?: Maybe<ReviewAssignmentAssignerJoin>;
};

/** Methods to use when ordering `ReviewAssignmentAssignerJoin`. */
export enum ReviewAssignmentAssignerJoinsOrderBy {
  AssignerIdAsc = 'ASSIGNER_ID_ASC',
  AssignerIdDesc = 'ASSIGNER_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  OrganisationIdAsc = 'ORGANISATION_ID_ASC',
  OrganisationIdDesc = 'ORGANISATION_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ReviewAssignmentIdAsc = 'REVIEW_ASSIGNMENT_ID_ASC',
  ReviewAssignmentIdDesc = 'REVIEW_ASSIGNMENT_ID_DESC'
}

/**
 * A condition to be used against `ReviewAssignment` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type ReviewAssignmentCondition = {
  /** Checks for equality with the object’s `allowedSections` field. */
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `assignedSections` field. */
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `assignerId` field. */
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isFinalDecision` field. */
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `isLastLevel` field. */
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `isLastStage` field. */
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `isSelfAssignable` field. */
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `levelId` field. */
  levelId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `levelNumber` field. */
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `organisationId` field. */
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `reviewerId` field. */
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `stageId` field. */
  stageId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `stageNumber` field. */
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `status` field. */
  status?: InputMaybe<ReviewAssignmentStatus>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `timeStageCreated` field. */
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `timeUpdated` field. */
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `trigger` field. */
  trigger?: InputMaybe<Trigger>;
};

/** A filter to be used against `ReviewAssignment` object types. All fields are combined with a logical ‘and.’ */
export type ReviewAssignmentFilter = {
  /** Filter by the object’s `allowedSections` field. */
  allowedSections?: InputMaybe<StringListFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ReviewAssignmentFilter>>;
  /** Filter by the object’s `application` relation. */
  application?: InputMaybe<ApplicationFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `assignedSections` field. */
  assignedSections?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `assigner` relation. */
  assigner?: InputMaybe<UserListFilter>;
  /** A related `assigner` exists. */
  assignerExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `assignerId` field. */
  assignerId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `availableSections` field. */
  availableSections?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isFinalDecision` field. */
  isFinalDecision?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `isLastLevel` field. */
  isLastLevel?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `isLastStage` field. */
  isLastStage?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `isSelfAssignable` field. */
  isSelfAssignable?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `level` relation. */
  level?: InputMaybe<TemplateStageReviewLevelFilter>;
  /** A related `level` exists. */
  levelExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `levelId` field. */
  levelId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `levelNumber` field. */
  levelNumber?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ReviewAssignmentFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ReviewAssignmentFilter>>;
  /** Filter by the object’s `organisation` relation. */
  organisation?: InputMaybe<OrganisationFilter>;
  /** A related `organisation` exists. */
  organisationExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `organisationId` field. */
  organisationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `review` relation. */
  review?: InputMaybe<ReviewFilter>;
  /** Filter by the object’s `reviewAssignmentAssignerJoins` relation. */
  reviewAssignmentAssignerJoins?: InputMaybe<ReviewAssignmentToManyReviewAssignmentAssignerJoinFilter>;
  /** Some related `reviewAssignmentAssignerJoins` exist. */
  reviewAssignmentAssignerJoinsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** A related `review` exists. */
  reviewExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `reviewer` relation. */
  reviewer?: InputMaybe<UserListFilter>;
  /** Filter by the object’s `reviewerId` field. */
  reviewerId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `stage` relation. */
  stage?: InputMaybe<TemplateStageFilter>;
  /** Filter by the object’s `stageId` field. */
  stageId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `stageNumber` field. */
  stageNumber?: InputMaybe<IntFilter>;
  /** Filter by the object’s `status` field. */
  status?: InputMaybe<ReviewAssignmentStatusFilter>;
  /** Filter by the object’s `template` relation. */
  template?: InputMaybe<TemplateFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `timeStageCreated` field. */
  timeStageCreated?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `timeUpdated` field. */
  timeUpdated?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `trigger` field. */
  trigger?: InputMaybe<TriggerFilter>;
};

/** An input for mutations affecting `ReviewAssignment` */
export type ReviewAssignmentInput = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status: ReviewAssignmentStatus;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** Input for the nested mutation of `templateStageReviewLevel` in the `ReviewAssignmentInput` mutation. */
export type ReviewAssignmentLevelIdFkeyInput = {
  /** The primary key(s) for `templateStageReviewLevel` for the far side of the relationship. */
  connectById?: InputMaybe<TemplateStageReviewLevelTemplateStageReviewLevelPkeyConnect>;
  /** The primary key(s) for `templateStageReviewLevel` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TemplateStageReviewLevelNodeIdConnect>;
  /** A `TemplateStageReviewLevelInput` object that will be created and connected to this object. */
  create?: InputMaybe<ReviewAssignmentLevelIdFkeyTemplateStageReviewLevelCreateInput>;
  /** The primary key(s) for `templateStageReviewLevel` for the far side of the relationship. */
  deleteById?: InputMaybe<TemplateStageReviewLevelTemplateStageReviewLevelPkeyDelete>;
  /** The primary key(s) for `templateStageReviewLevel` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TemplateStageReviewLevelNodeIdDelete>;
  /** The primary key(s) and patch data for `templateStageReviewLevel` for the far side of the relationship. */
  updateById?: InputMaybe<TemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyUsingTemplateStageReviewLevelPkeyUpdate>;
  /** The primary key(s) and patch data for `templateStageReviewLevel` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `reviewAssignment` in the `TemplateStageReviewLevelInput` mutation. */
export type ReviewAssignmentLevelIdFkeyInverseInput = {
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ReviewAssignmentReviewAssignmentPkeyConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ReviewAssignmentNodeIdConnect>>;
  /** A `ReviewAssignmentInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ReviewAssignmentLevelIdFkeyReviewAssignmentCreateInput>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ReviewAssignmentReviewAssignmentPkeyDelete>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ReviewAssignmentNodeIdDelete>>;
  /** Flag indicating whether all other `reviewAssignment` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyUsingReviewAssignmentPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyNodeIdUpdate>>;
};

/** The `reviewAssignment` to be created by this mutation. */
export type ReviewAssignmentLevelIdFkeyReviewAssignmentCreateInput = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status: ReviewAssignmentStatus;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** The `templateStageReviewLevel` to be created by this mutation. */
export type ReviewAssignmentLevelIdFkeyTemplateStageReviewLevelCreateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  number: Scalars['Int']['input'];
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentLevelIdFkeyInverseInput>;
  singleReviewerAllSections?: InputMaybe<Scalars['Boolean']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  templateStageToStageId?: InputMaybe<TemplateStageReviewLevelStageIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to connect. */
export type ReviewAssignmentNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ReviewAssignmentNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignmentAssignerJoin` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewAssignmentAssignerJoin` being updated. */
  patch: ReviewAssignmentAssignerJoinPatch;
};

/** The fields on `reviewAssignment` to look up the row to update. */
export type ReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyUsingReviewAssignmentPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: UpdateReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyPatch;
};

/** The fields on `reviewAssignment` to look up the row to update. */
export type ReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey0UsingReviewAssignmentPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: UpdateReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey0Patch;
};

/** The fields on `reviewAssignment` to look up the row to update. */
export type ReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey1UsingReviewAssignmentPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: UpdateReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey1Patch;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The fields on `reviewAssignment` to look up the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingReviewAssignmentPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateStageReviewLevel` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `templateStageReviewLevel` being updated. */
  patch: TemplateStageReviewLevelPatch;
};

/** The fields on `reviewAssignment` to look up the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyUsingReviewAssignmentPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `organisation` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: OrganisationPatch;
};

/** The fields on `reviewAssignment` to look up the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingReviewAssignmentPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateStage` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `templateStage` being updated. */
  patch: TemplateStagePatch;
};

/** The fields on `reviewAssignment` to look up the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyUsingReviewAssignmentPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The fields on `reviewAssignment` to look up the row to update. */
export type ReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingReviewAssignmentPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `review` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: ReviewPatch;
};

/** The fields on `reviewAssignment` to look up the row to update. */
export type ReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyUsingReviewAssignmentPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: UpdateReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyPatch;
};

/** Input for the nested mutation of `organisation` in the `ReviewAssignmentInput` mutation. */
export type ReviewAssignmentOrganisationIdFkeyInput = {
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectById?: InputMaybe<OrganisationOrganisationPkeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByName?: InputMaybe<OrganisationOrganisationNameKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<OrganisationNodeIdConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByRegistration?: InputMaybe<OrganisationOrganisationRegistrationKeyConnect>;
  /** A `OrganisationInput` object that will be created and connected to this object. */
  create?: InputMaybe<ReviewAssignmentOrganisationIdFkeyOrganisationCreateInput>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteById?: InputMaybe<OrganisationOrganisationPkeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByName?: InputMaybe<OrganisationOrganisationNameKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<OrganisationNodeIdDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByRegistration?: InputMaybe<OrganisationOrganisationRegistrationKeyDelete>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateById?: InputMaybe<OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationPkeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByName?: InputMaybe<OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationNameKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByRegistration?: InputMaybe<OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate>;
};

/** Input for the nested mutation of `reviewAssignment` in the `OrganisationInput` mutation. */
export type ReviewAssignmentOrganisationIdFkeyInverseInput = {
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ReviewAssignmentReviewAssignmentPkeyConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ReviewAssignmentNodeIdConnect>>;
  /** A `ReviewAssignmentInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ReviewAssignmentOrganisationIdFkeyReviewAssignmentCreateInput>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ReviewAssignmentReviewAssignmentPkeyDelete>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ReviewAssignmentNodeIdDelete>>;
  /** Flag indicating whether all other `reviewAssignment` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingReviewAssignmentPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyNodeIdUpdate>>;
};

/** The `organisation` to be created by this mutation. */
export type ReviewAssignmentOrganisationIdFkeyOrganisationCreateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteOrgIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationOrgIdFkeyInverseInput>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogOrgIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrg?: InputMaybe<Scalars['Boolean']['input']>;
  logoUrl?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  registration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: InputMaybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** The `reviewAssignment` to be created by this mutation. */
export type ReviewAssignmentOrganisationIdFkeyReviewAssignmentCreateInput = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status: ReviewAssignmentStatus;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** Represents an update to a `ReviewAssignment`. Fields that are set will be updated. */
export type ReviewAssignmentPatch = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewAssignmentStatus>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** The fields on `reviewAssignment` to look up the row to connect. */
export type ReviewAssignmentReviewAssignmentPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `reviewAssignment` to look up the row to delete. */
export type ReviewAssignmentReviewAssignmentPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** Input for the nested mutation of `templateStage` in the `ReviewAssignmentInput` mutation. */
export type ReviewAssignmentStageIdFkeyInput = {
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  connectById?: InputMaybe<TemplateStageTemplateStagePkeyConnect>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TemplateStageNodeIdConnect>;
  /** A `TemplateStageInput` object that will be created and connected to this object. */
  create?: InputMaybe<ReviewAssignmentStageIdFkeyTemplateStageCreateInput>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  deleteById?: InputMaybe<TemplateStageTemplateStagePkeyDelete>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TemplateStageNodeIdDelete>;
  /** The primary key(s) and patch data for `templateStage` for the far side of the relationship. */
  updateById?: InputMaybe<TemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyUsingTemplateStagePkeyUpdate>;
  /** The primary key(s) and patch data for `templateStage` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `reviewAssignment` in the `TemplateStageInput` mutation. */
export type ReviewAssignmentStageIdFkeyInverseInput = {
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ReviewAssignmentReviewAssignmentPkeyConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ReviewAssignmentNodeIdConnect>>;
  /** A `ReviewAssignmentInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ReviewAssignmentStageIdFkeyReviewAssignmentCreateInput>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ReviewAssignmentReviewAssignmentPkeyDelete>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ReviewAssignmentNodeIdDelete>>;
  /** Flag indicating whether all other `reviewAssignment` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyUsingReviewAssignmentPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyNodeIdUpdate>>;
};

/** The `reviewAssignment` to be created by this mutation. */
export type ReviewAssignmentStageIdFkeyReviewAssignmentCreateInput = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status: ReviewAssignmentStatus;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** The `templateStage` to be created by this mutation. */
export type ReviewAssignmentStageIdFkeyTemplateStageCreateInput = {
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  colour?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  number?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelsUsingId?: InputMaybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
  templateToTemplateId?: InputMaybe<TemplateStageTemplateIdFkeyInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export enum ReviewAssignmentStatus {
  Assigned = 'ASSIGNED',
  Available = 'AVAILABLE'
}

/** A filter to be used against ReviewAssignmentStatus fields. All fields are combined with a logical ‘and.’ */
export type ReviewAssignmentStatusFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<ReviewAssignmentStatus>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<ReviewAssignmentStatus>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<ReviewAssignmentStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<ReviewAssignmentStatus>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<ReviewAssignmentStatus>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<ReviewAssignmentStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<ReviewAssignmentStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<ReviewAssignmentStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<ReviewAssignmentStatus>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<ReviewAssignmentStatus>>;
};

/** Input for the nested mutation of `template` in the `ReviewAssignmentInput` mutation. */
export type ReviewAssignmentTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: InputMaybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TemplateNodeIdConnect>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: InputMaybe<ReviewAssignmentTemplateIdFkeyTemplateCreateInput>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: InputMaybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByCodeAndVersionId?: InputMaybe<TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: InputMaybe<TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `reviewAssignment` in the `TemplateInput` mutation. */
export type ReviewAssignmentTemplateIdFkeyInverseInput = {
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ReviewAssignmentReviewAssignmentPkeyConnect>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ReviewAssignmentNodeIdConnect>>;
  /** A `ReviewAssignmentInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ReviewAssignmentTemplateIdFkeyReviewAssignmentCreateInput>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ReviewAssignmentReviewAssignmentPkeyDelete>>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ReviewAssignmentNodeIdDelete>>;
  /** Flag indicating whether all other `reviewAssignment` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingReviewAssignmentPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyNodeIdUpdate>>;
};

/** The `reviewAssignment` to be created by this mutation. */
export type ReviewAssignmentTemplateIdFkeyReviewAssignmentCreateInput = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status: ReviewAssignmentStatus;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** The `template` to be created by this mutation. */
export type ReviewAssignmentTemplateIdFkeyTemplateCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code: Scalars['String']['input'];
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId: Scalars['String']['input'];
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** A filter to be used against many `ReviewAssignmentAssignerJoin` object types. All fields are combined with a logical ‘and.’ */
export type ReviewAssignmentToManyReviewAssignmentAssignerJoinFilter = {
  /** Every related `ReviewAssignmentAssignerJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ReviewAssignmentAssignerJoinFilter>;
  /** No related `ReviewAssignmentAssignerJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ReviewAssignmentAssignerJoinFilter>;
  /** Some related `ReviewAssignmentAssignerJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ReviewAssignmentAssignerJoinFilter>;
};

/** A connection to a list of `ReviewAssignment` values. */
export type ReviewAssignmentsConnection = {
  __typename?: 'ReviewAssignmentsConnection';
  /** A list of edges which contains the `ReviewAssignment` and cursor to aid in pagination. */
  edges: Array<ReviewAssignmentsEdge>;
  /** A list of `ReviewAssignment` objects. */
  nodes: Array<Maybe<ReviewAssignment>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ReviewAssignment` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ReviewAssignment` edge in the connection. */
export type ReviewAssignmentsEdge = {
  __typename?: 'ReviewAssignmentsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ReviewAssignment` at the end of the edge. */
  node?: Maybe<ReviewAssignment>;
};

/** Methods to use when ordering `ReviewAssignment`. */
export enum ReviewAssignmentsOrderBy {
  AllowedSectionsAsc = 'ALLOWED_SECTIONS_ASC',
  AllowedSectionsDesc = 'ALLOWED_SECTIONS_DESC',
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  AssignedSectionsAsc = 'ASSIGNED_SECTIONS_ASC',
  AssignedSectionsDesc = 'ASSIGNED_SECTIONS_DESC',
  AssignerIdAsc = 'ASSIGNER_ID_ASC',
  AssignerIdDesc = 'ASSIGNER_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsFinalDecisionAsc = 'IS_FINAL_DECISION_ASC',
  IsFinalDecisionDesc = 'IS_FINAL_DECISION_DESC',
  IsLastLevelAsc = 'IS_LAST_LEVEL_ASC',
  IsLastLevelDesc = 'IS_LAST_LEVEL_DESC',
  IsLastStageAsc = 'IS_LAST_STAGE_ASC',
  IsLastStageDesc = 'IS_LAST_STAGE_DESC',
  IsSelfAssignableAsc = 'IS_SELF_ASSIGNABLE_ASC',
  IsSelfAssignableDesc = 'IS_SELF_ASSIGNABLE_DESC',
  LevelIdAsc = 'LEVEL_ID_ASC',
  LevelIdDesc = 'LEVEL_ID_DESC',
  LevelNumberAsc = 'LEVEL_NUMBER_ASC',
  LevelNumberDesc = 'LEVEL_NUMBER_DESC',
  Natural = 'NATURAL',
  OrganisationIdAsc = 'ORGANISATION_ID_ASC',
  OrganisationIdDesc = 'ORGANISATION_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ReviewerIdAsc = 'REVIEWER_ID_ASC',
  ReviewerIdDesc = 'REVIEWER_ID_DESC',
  StageIdAsc = 'STAGE_ID_ASC',
  StageIdDesc = 'STAGE_ID_DESC',
  StageNumberAsc = 'STAGE_NUMBER_ASC',
  StageNumberDesc = 'STAGE_NUMBER_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  TimeStageCreatedAsc = 'TIME_STAGE_CREATED_ASC',
  TimeStageCreatedDesc = 'TIME_STAGE_CREATED_DESC',
  TimeUpdatedAsc = 'TIME_UPDATED_ASC',
  TimeUpdatedDesc = 'TIME_UPDATED_DESC',
  TriggerAsc = 'TRIGGER_ASC',
  TriggerDesc = 'TRIGGER_DESC'
}

/** A condition to be used against `Review` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type ReviewCondition = {
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isFinalDecision` field. */
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `isLastLevel` field. */
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `isLastStage` field. */
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `levelNumber` field. */
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `reviewAssignmentId` field. */
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `reviewerId` field. */
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `stageNumber` field. */
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `timeStageCreated` field. */
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `trigger` field. */
  trigger?: InputMaybe<Trigger>;
};

export type ReviewDecision = Node & {
  __typename?: 'ReviewDecision';
  comment?: Maybe<Scalars['String']['output']>;
  decision?: Maybe<Decision>;
  id: Scalars['Int']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Review` that is related to this `ReviewDecision`. */
  review?: Maybe<Review>;
  reviewId: Scalars['Int']['output'];
  timeUpdated?: Maybe<Scalars['Datetime']['output']>;
};

/**
 * A condition to be used against `ReviewDecision` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type ReviewDecisionCondition = {
  /** Checks for equality with the object’s `comment` field. */
  comment?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `decision` field. */
  decision?: InputMaybe<Decision>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `reviewId` field. */
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `timeUpdated` field. */
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** A filter to be used against `ReviewDecision` object types. All fields are combined with a logical ‘and.’ */
export type ReviewDecisionFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ReviewDecisionFilter>>;
  /** Filter by the object’s `comment` field. */
  comment?: InputMaybe<StringFilter>;
  /** Filter by the object’s `decision` field. */
  decision?: InputMaybe<DecisionFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ReviewDecisionFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ReviewDecisionFilter>>;
  /** Filter by the object’s `review` relation. */
  review?: InputMaybe<ReviewFilter>;
  /** Filter by the object’s `reviewId` field. */
  reviewId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `timeUpdated` field. */
  timeUpdated?: InputMaybe<DatetimeFilter>;
};

/** An input for mutations affecting `ReviewDecision` */
export type ReviewDecisionInput = {
  comment?: InputMaybe<Scalars['String']['input']>;
  decision?: InputMaybe<Decision>;
  id?: InputMaybe<Scalars['Int']['input']>;
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  reviewToReviewId?: InputMaybe<ReviewDecisionReviewIdFkeyInput>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The globally unique `ID` look up for the row to connect. */
export type ReviewDecisionNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `reviewDecision` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ReviewDecisionNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `reviewDecision` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `review` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: ReviewPatch;
};

/** The fields on `reviewDecision` to look up the row to update. */
export type ReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewDecisionPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewDecision` being updated. */
  patch: UpdateReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyPatch;
};

/** Represents an update to a `ReviewDecision`. Fields that are set will be updated. */
export type ReviewDecisionPatch = {
  comment?: InputMaybe<Scalars['String']['input']>;
  decision?: InputMaybe<Decision>;
  id?: InputMaybe<Scalars['Int']['input']>;
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  reviewToReviewId?: InputMaybe<ReviewDecisionReviewIdFkeyInput>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The fields on `reviewDecision` to look up the row to connect. */
export type ReviewDecisionReviewDecisionPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `reviewDecision` to look up the row to delete. */
export type ReviewDecisionReviewDecisionPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** Input for the nested mutation of `review` in the `ReviewDecisionInput` mutation. */
export type ReviewDecisionReviewIdFkeyInput = {
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectById?: InputMaybe<ReviewReviewPkeyConnect>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ReviewNodeIdConnect>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByReviewAssignmentId?: InputMaybe<ReviewReviewReviewAssignmentIdKeyConnect>;
  /** A `ReviewInput` object that will be created and connected to this object. */
  create?: InputMaybe<ReviewDecisionReviewIdFkeyReviewCreateInput>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteById?: InputMaybe<ReviewReviewPkeyDelete>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ReviewNodeIdDelete>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByReviewAssignmentId?: InputMaybe<ReviewReviewReviewAssignmentIdKeyDelete>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateById?: InputMaybe<ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewPkeyUpdate>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByReviewAssignmentId?: InputMaybe<ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate>;
};

/** Input for the nested mutation of `reviewDecision` in the `ReviewInput` mutation. */
export type ReviewDecisionReviewIdFkeyInverseInput = {
  /** The primary key(s) for `reviewDecision` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ReviewDecisionReviewDecisionPkeyConnect>>;
  /** The primary key(s) for `reviewDecision` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ReviewDecisionNodeIdConnect>>;
  /** A `ReviewDecisionInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ReviewDecisionReviewIdFkeyReviewDecisionCreateInput>>;
  /** The primary key(s) for `reviewDecision` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ReviewDecisionReviewDecisionPkeyDelete>>;
  /** The primary key(s) for `reviewDecision` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ReviewDecisionNodeIdDelete>>;
  /** Flag indicating whether all other `reviewDecision` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `reviewDecision` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewDecisionPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewDecision` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyNodeIdUpdate>>;
};

/** The `review` to be created by this mutation. */
export type ReviewDecisionReviewIdFkeyReviewCreateInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  notificationsUsingId?: InputMaybe<NotificationReviewIdFkeyInverseInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewReviewAssignmentIdFkeyInput>;
  reviewDecisionsUsingId?: InputMaybe<ReviewDecisionReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToReviewerId?: InputMaybe<FakePublicReviewForeignKey0Input>;
};

/** The `reviewDecision` to be created by this mutation. */
export type ReviewDecisionReviewIdFkeyReviewDecisionCreateInput = {
  comment?: InputMaybe<Scalars['String']['input']>;
  decision?: InputMaybe<Decision>;
  id?: InputMaybe<Scalars['Int']['input']>;
  reviewToReviewId?: InputMaybe<ReviewDecisionReviewIdFkeyInput>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** A connection to a list of `ReviewDecision` values. */
export type ReviewDecisionsConnection = {
  __typename?: 'ReviewDecisionsConnection';
  /** A list of edges which contains the `ReviewDecision` and cursor to aid in pagination. */
  edges: Array<ReviewDecisionsEdge>;
  /** A list of `ReviewDecision` objects. */
  nodes: Array<Maybe<ReviewDecision>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ReviewDecision` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ReviewDecision` edge in the connection. */
export type ReviewDecisionsEdge = {
  __typename?: 'ReviewDecisionsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ReviewDecision` at the end of the edge. */
  node?: Maybe<ReviewDecision>;
};

/** Methods to use when ordering `ReviewDecision`. */
export enum ReviewDecisionsOrderBy {
  CommentAsc = 'COMMENT_ASC',
  CommentDesc = 'COMMENT_DESC',
  DecisionAsc = 'DECISION_ASC',
  DecisionDesc = 'DECISION_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ReviewIdAsc = 'REVIEW_ID_ASC',
  ReviewIdDesc = 'REVIEW_ID_DESC',
  TimeUpdatedAsc = 'TIME_UPDATED_ASC',
  TimeUpdatedDesc = 'TIME_UPDATED_DESC'
}

/** A filter to be used against `Review` object types. All fields are combined with a logical ‘and.’ */
export type ReviewFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ReviewFilter>>;
  /** Filter by the object’s `application` relation. */
  application?: InputMaybe<ApplicationFilter>;
  /** A related `application` exists. */
  applicationExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isFinalDecision` field. */
  isFinalDecision?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `isLastLevel` field. */
  isLastLevel?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `isLastStage` field. */
  isLastStage?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `isLocked` field. */
  isLocked?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `levelNumber` field. */
  levelNumber?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ReviewFilter>;
  /** Filter by the object’s `notifications` relation. */
  notifications?: InputMaybe<ReviewToManyNotificationFilter>;
  /** Some related `notifications` exist. */
  notificationsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ReviewFilter>>;
  /** Filter by the object’s `reviewAssignment` relation. */
  reviewAssignment?: InputMaybe<ReviewAssignmentFilter>;
  /** A related `reviewAssignment` exists. */
  reviewAssignmentExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `reviewAssignmentId` field. */
  reviewAssignmentId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `reviewDecisions` relation. */
  reviewDecisions?: InputMaybe<ReviewToManyReviewDecisionFilter>;
  /** Some related `reviewDecisions` exist. */
  reviewDecisionsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `reviewResponses` relation. */
  reviewResponses?: InputMaybe<ReviewToManyReviewResponseFilter>;
  /** Some related `reviewResponses` exist. */
  reviewResponsesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `reviewStatusHistories` relation. */
  reviewStatusHistories?: InputMaybe<ReviewToManyReviewStatusHistoryFilter>;
  /** Some related `reviewStatusHistories` exist. */
  reviewStatusHistoriesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `reviewer` relation. */
  reviewer?: InputMaybe<UserListFilter>;
  /** A related `reviewer` exists. */
  reviewerExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `reviewerId` field. */
  reviewerId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `stageNumber` field. */
  stageNumber?: InputMaybe<IntFilter>;
  /** Filter by the object’s `status` field. */
  status?: InputMaybe<ReviewStatusFilter>;
  /** Filter by the object’s `timeStageCreated` field. */
  timeStageCreated?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `timeStatusCreated` field. */
  timeStatusCreated?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `trigger` field. */
  trigger?: InputMaybe<TriggerFilter>;
};

/** An input for mutations affecting `Review` */
export type ReviewInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  notificationsUsingId?: InputMaybe<NotificationReviewIdFkeyInverseInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewReviewAssignmentIdFkeyInput>;
  reviewDecisionsUsingId?: InputMaybe<ReviewDecisionReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToReviewerId?: InputMaybe<FakePublicReviewForeignKey0Input>;
};

/** A connection to a list of `ReviewListRecord` values. */
export type ReviewListConnection = {
  __typename?: 'ReviewListConnection';
  /** A list of edges which contains the `ReviewListRecord` and cursor to aid in pagination. */
  edges: Array<ReviewListEdge>;
  /** A list of `ReviewListRecord` objects. */
  nodes: Array<Maybe<ReviewListRecord>>;
  /** The count of *all* `ReviewListRecord` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ReviewListRecord` edge in the connection. */
export type ReviewListEdge = {
  __typename?: 'ReviewListEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ReviewListRecord` at the end of the edge. */
  node?: Maybe<ReviewListRecord>;
};

/** The return type of our `reviewList` query. */
export type ReviewListRecord = {
  __typename?: 'ReviewListRecord';
  applicationId?: Maybe<Scalars['Int']['output']>;
  reviewerAction?: Maybe<ReviewerAction>;
};

/** A filter to be used against `ReviewListRecord` object types. All fields are combined with a logical ‘and.’ */
export type ReviewListRecordFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ReviewListRecordFilter>>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ReviewListRecordFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ReviewListRecordFilter>>;
  /** Filter by the object’s `reviewerAction` field. */
  reviewerAction?: InputMaybe<ReviewerActionFilter>;
};

/** The globally unique `ID` look up for the row to connect. */
export type ReviewNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `review` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ReviewNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `review` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewOnNotificationForNotificationReviewIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `notification` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `notification` being updated. */
  patch: NotificationPatch;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnNotificationForNotificationReviewIdFkeyUsingReviewPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnNotificationForNotificationReviewIdFkeyPatch;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnNotificationForNotificationReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate = {
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnNotificationForNotificationReviewIdFkeyPatch;
  reviewAssignmentId: Scalars['Int']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewDecision` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewDecision` being updated. */
  patch: ReviewDecisionPatch;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnReviewDecisionForReviewDecisionReviewIdFkeyPatch;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate = {
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnReviewDecisionForReviewDecisionReviewIdFkeyPatch;
  reviewAssignmentId: Scalars['Int']['input'];
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnReviewForFakePublicReviewForeignKey0UsingReviewPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnReviewForFakePublicReviewForeignKey0Patch;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnReviewForFakePublicReviewForeignKey0UsingReviewReviewAssignmentIdKeyUpdate = {
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnReviewForFakePublicReviewForeignKey0Patch;
  reviewAssignmentId: Scalars['Int']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewOnReviewForReviewApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnReviewForReviewApplicationIdFkeyUsingReviewPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnReviewForReviewApplicationIdFkeyPatch;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnReviewForReviewApplicationIdFkeyUsingReviewReviewAssignmentIdKeyUpdate = {
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnReviewForReviewApplicationIdFkeyPatch;
  reviewAssignmentId: Scalars['Int']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewOnReviewForReviewReviewAssignmentIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnReviewForReviewReviewAssignmentIdFkeyUsingReviewPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnReviewForReviewReviewAssignmentIdFkeyPatch;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnReviewForReviewReviewAssignmentIdFkeyUsingReviewReviewAssignmentIdKeyUpdate = {
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnReviewForReviewReviewAssignmentIdFkeyPatch;
  reviewAssignmentId: Scalars['Int']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewOnReviewResponseForReviewResponseReviewIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewResponse` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: ReviewResponsePatch;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnReviewResponseForReviewResponseReviewIdFkeyPatch;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate = {
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnReviewResponseForReviewResponseReviewIdFkeyPatch;
  reviewAssignmentId: Scalars['Int']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewStatusHistory` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewStatusHistory` being updated. */
  patch: ReviewStatusHistoryPatch;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyPatch;
};

/** The fields on `review` to look up the row to update. */
export type ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate = {
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: UpdateReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyPatch;
  reviewAssignmentId: Scalars['Int']['input'];
};

/** Represents an update to a `Review`. Fields that are set will be updated. */
export type ReviewPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  notificationsUsingId?: InputMaybe<NotificationReviewIdFkeyInverseInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewReviewAssignmentIdFkeyInput>;
  reviewDecisionsUsingId?: InputMaybe<ReviewDecisionReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToReviewerId?: InputMaybe<FakePublicReviewForeignKey0Input>;
};

export type ReviewResponse = Node & {
  __typename?: 'ReviewResponse';
  /** Reads a single `ApplicationResponse` that is related to this `ReviewResponse`. */
  applicationResponse?: Maybe<ApplicationResponse>;
  applicationResponseId?: Maybe<Scalars['Int']['output']>;
  comment?: Maybe<Scalars['String']['output']>;
  decision?: Maybe<ReviewResponseDecision>;
  id: Scalars['Int']['output'];
  isLatestReview?: Maybe<Scalars['Boolean']['output']>;
  isVisibleToApplicant?: Maybe<Scalars['Boolean']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `ReviewResponse` that is related to this `ReviewResponse`. */
  originalReviewResponse?: Maybe<ReviewResponse>;
  originalReviewResponseId?: Maybe<Scalars['Int']['output']>;
  recommendedApplicantVisibility?: Maybe<ReviewResponseRecommendedApplicantVisibility>;
  /** Reads a single `Review` that is related to this `ReviewResponse`. */
  review?: Maybe<Review>;
  reviewId?: Maybe<Scalars['Int']['output']>;
  /** Reads a single `ReviewResponse` that is related to this `ReviewResponse`. */
  reviewResponseLink?: Maybe<ReviewResponse>;
  reviewResponseLinkId?: Maybe<Scalars['Int']['output']>;
  /** Reads and enables pagination through a set of `ReviewResponse`. */
  reviewResponsesByOriginalReviewResponseId: ReviewResponsesConnection;
  /** Reads and enables pagination through a set of `ReviewResponse`. */
  reviewResponsesByReviewResponseLinkId: ReviewResponsesConnection;
  stageNumber?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<ReviewResponseStatus>;
  /** Reads a single `TemplateElement` that is related to this `ReviewResponse`. */
  templateElement?: Maybe<TemplateElement>;
  templateElementId?: Maybe<Scalars['Int']['output']>;
  timeCreated?: Maybe<Scalars['Datetime']['output']>;
  timeSubmitted?: Maybe<Scalars['Datetime']['output']>;
  timeUpdated?: Maybe<Scalars['Datetime']['output']>;
};


export type ReviewResponseReviewResponsesByOriginalReviewResponseIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewResponseCondition>;
  filter?: InputMaybe<ReviewResponseFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewResponsesOrderBy>>;
};


export type ReviewResponseReviewResponsesByReviewResponseLinkIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewResponseCondition>;
  filter?: InputMaybe<ReviewResponseFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewResponsesOrderBy>>;
};

/** The `applicationResponse` to be created by this mutation. */
export type ReviewResponseApplicationResponseIdFkeyApplicationResponseCreateInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ApplicationResponseApplicationIdFkeyInput>;
  evaluatedParameters?: InputMaybe<Scalars['JSON']['input']>;
  filesUsingId?: InputMaybe<FileApplicationResponseIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isValid?: InputMaybe<Scalars['Boolean']['input']>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ApplicationResponseStatus>;
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  templateElementToTemplateElementId?: InputMaybe<ApplicationResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  value?: InputMaybe<Scalars['JSON']['input']>;
};

/** Input for the nested mutation of `applicationResponse` in the `ReviewResponseInput` mutation. */
export type ReviewResponseApplicationResponseIdFkeyInput = {
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  connectById?: InputMaybe<ApplicationResponseApplicationResponsePkeyConnect>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ApplicationResponseNodeIdConnect>;
  /** A `ApplicationResponseInput` object that will be created and connected to this object. */
  create?: InputMaybe<ReviewResponseApplicationResponseIdFkeyApplicationResponseCreateInput>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  deleteById?: InputMaybe<ApplicationResponseApplicationResponsePkeyDelete>;
  /** The primary key(s) for `applicationResponse` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ApplicationResponseNodeIdDelete>;
  /** The primary key(s) and patch data for `applicationResponse` for the far side of the relationship. */
  updateById?: InputMaybe<ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate>;
  /** The primary key(s) and patch data for `applicationResponse` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `reviewResponse` in the `ApplicationResponseInput` mutation. */
export type ReviewResponseApplicationResponseIdFkeyInverseInput = {
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ReviewResponseReviewResponsePkeyConnect>>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ReviewResponseNodeIdConnect>>;
  /** A `ReviewResponseInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ReviewResponseApplicationResponseIdFkeyReviewResponseCreateInput>>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ReviewResponseReviewResponsePkeyDelete>>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ReviewResponseNodeIdDelete>>;
  /** Flag indicating whether all other `reviewResponse` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingReviewResponsePkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate>>;
};

/** The `reviewResponse` to be created by this mutation. */
export type ReviewResponseApplicationResponseIdFkeyReviewResponseCreateInput = {
  applicationResponseToApplicationResponseId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  decision?: InputMaybe<ReviewResponseDecision>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLatestReview?: InputMaybe<Scalars['Boolean']['input']>;
  isVisibleToApplicant?: InputMaybe<Scalars['Boolean']['input']>;
  originalReviewResponseId?: InputMaybe<Scalars['Int']['input']>;
  recommendedApplicantVisibility?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseLinkId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseToOriginalReviewResponseId?: InputMaybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: InputMaybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewToReviewId?: InputMaybe<ReviewResponseReviewIdFkeyInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewResponseStatus>;
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  templateElementToTemplateElementId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
};

/**
 * A condition to be used against `ReviewResponse` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type ReviewResponseCondition = {
  /** Checks for equality with the object’s `applicationResponseId` field. */
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `comment` field. */
  comment?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `decision` field. */
  decision?: InputMaybe<ReviewResponseDecision>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isLatestReview` field. */
  isLatestReview?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `isVisibleToApplicant` field. */
  isVisibleToApplicant?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `originalReviewResponseId` field. */
  originalReviewResponseId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `recommendedApplicantVisibility` field. */
  recommendedApplicantVisibility?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  /** Checks for equality with the object’s `reviewId` field. */
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `reviewResponseLinkId` field. */
  reviewResponseLinkId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `stageNumber` field. */
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `status` field. */
  status?: InputMaybe<ReviewResponseStatus>;
  /** Checks for equality with the object’s `templateElementId` field. */
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `timeCreated` field. */
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `timeSubmitted` field. */
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `timeUpdated` field. */
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
};

export enum ReviewResponseDecision {
  Agree = 'AGREE',
  Approve = 'APPROVE',
  Decline = 'DECLINE',
  Disagree = 'DISAGREE'
}

/** A filter to be used against ReviewResponseDecision fields. All fields are combined with a logical ‘and.’ */
export type ReviewResponseDecisionFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<ReviewResponseDecision>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<ReviewResponseDecision>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<ReviewResponseDecision>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<ReviewResponseDecision>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<ReviewResponseDecision>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<ReviewResponseDecision>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<ReviewResponseDecision>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<ReviewResponseDecision>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<ReviewResponseDecision>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<ReviewResponseDecision>>;
};

/** A filter to be used against `ReviewResponse` object types. All fields are combined with a logical ‘and.’ */
export type ReviewResponseFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ReviewResponseFilter>>;
  /** Filter by the object’s `applicationResponse` relation. */
  applicationResponse?: InputMaybe<ApplicationResponseFilter>;
  /** A related `applicationResponse` exists. */
  applicationResponseExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `applicationResponseId` field. */
  applicationResponseId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `comment` field. */
  comment?: InputMaybe<StringFilter>;
  /** Filter by the object’s `decision` field. */
  decision?: InputMaybe<ReviewResponseDecisionFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isLatestReview` field. */
  isLatestReview?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `isVisibleToApplicant` field. */
  isVisibleToApplicant?: InputMaybe<BooleanFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ReviewResponseFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ReviewResponseFilter>>;
  /** Filter by the object’s `originalReviewResponse` relation. */
  originalReviewResponse?: InputMaybe<ReviewResponseFilter>;
  /** A related `originalReviewResponse` exists. */
  originalReviewResponseExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `originalReviewResponseId` field. */
  originalReviewResponseId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `recommendedApplicantVisibility` field. */
  recommendedApplicantVisibility?: InputMaybe<ReviewResponseRecommendedApplicantVisibilityFilter>;
  /** Filter by the object’s `review` relation. */
  review?: InputMaybe<ReviewFilter>;
  /** A related `review` exists. */
  reviewExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `reviewId` field. */
  reviewId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `reviewResponseLink` relation. */
  reviewResponseLink?: InputMaybe<ReviewResponseFilter>;
  /** A related `reviewResponseLink` exists. */
  reviewResponseLinkExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `reviewResponseLinkId` field. */
  reviewResponseLinkId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `reviewResponsesByOriginalReviewResponseId` relation. */
  reviewResponsesByOriginalReviewResponseId?: InputMaybe<ReviewResponseToManyReviewResponseFilter>;
  /** Some related `reviewResponsesByOriginalReviewResponseId` exist. */
  reviewResponsesByOriginalReviewResponseIdExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `reviewResponsesByReviewResponseLinkId` relation. */
  reviewResponsesByReviewResponseLinkId?: InputMaybe<ReviewResponseToManyReviewResponseFilter>;
  /** Some related `reviewResponsesByReviewResponseLinkId` exist. */
  reviewResponsesByReviewResponseLinkIdExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `stageNumber` field. */
  stageNumber?: InputMaybe<IntFilter>;
  /** Filter by the object’s `status` field. */
  status?: InputMaybe<ReviewResponseStatusFilter>;
  /** Filter by the object’s `templateElement` relation. */
  templateElement?: InputMaybe<TemplateElementFilter>;
  /** A related `templateElement` exists. */
  templateElementExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `templateElementId` field. */
  templateElementId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `timeCreated` field. */
  timeCreated?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `timeSubmitted` field. */
  timeSubmitted?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `timeUpdated` field. */
  timeUpdated?: InputMaybe<DatetimeFilter>;
};

/** An input for mutations affecting `ReviewResponse` */
export type ReviewResponseInput = {
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  applicationResponseToApplicationResponseId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  decision?: InputMaybe<ReviewResponseDecision>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLatestReview?: InputMaybe<Scalars['Boolean']['input']>;
  isVisibleToApplicant?: InputMaybe<Scalars['Boolean']['input']>;
  originalReviewResponseId?: InputMaybe<Scalars['Int']['input']>;
  recommendedApplicantVisibility?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseLinkId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseToOriginalReviewResponseId?: InputMaybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: InputMaybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewToReviewId?: InputMaybe<ReviewResponseReviewIdFkeyInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewResponseStatus>;
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  templateElementToTemplateElementId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The globally unique `ID` look up for the row to connect. */
export type ReviewResponseNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `reviewResponse` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ReviewResponseNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `reviewResponse` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationResponse` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `applicationResponse` being updated. */
  patch: ApplicationResponsePatch;
};

/** The fields on `reviewResponse` to look up the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingReviewResponsePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: UpdateReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewResponse` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: ReviewResponsePatch;
};

/** The fields on `reviewResponse` to look up the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyUsingReviewResponsePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: UpdateReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `review` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: ReviewPatch;
};

/** The fields on `reviewResponse` to look up the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewResponsePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: UpdateReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewResponse` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: ReviewResponsePatch;
};

/** The fields on `reviewResponse` to look up the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyUsingReviewResponsePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: UpdateReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateElement` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `templateElement` being updated. */
  patch: TemplateElementPatch;
};

/** The fields on `reviewResponse` to look up the row to update. */
export type ReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingReviewResponsePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: UpdateReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyPatch;
};

/** Input for the nested mutation of `reviewResponse` in the `ReviewResponseInput` mutation. */
export type ReviewResponseOriginalReviewResponseIdFkeyInput = {
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectById?: InputMaybe<ReviewResponseReviewResponsePkeyConnect>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ReviewResponseNodeIdConnect>;
  /** A `ReviewResponseInput` object that will be created and connected to this object. */
  create?: InputMaybe<ReviewResponseOriginalReviewResponseIdFkeyReviewResponseCreateInput>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteById?: InputMaybe<ReviewResponseReviewResponsePkeyDelete>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ReviewResponseNodeIdDelete>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateById?: InputMaybe<ReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyUsingReviewResponsePkeyUpdate>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyNodeIdUpdate>;
};

/** The `reviewResponse` to be created by this mutation. */
export type ReviewResponseOriginalReviewResponseIdFkeyReviewResponseCreateInput = {
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  applicationResponseToApplicationResponseId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  decision?: InputMaybe<ReviewResponseDecision>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLatestReview?: InputMaybe<Scalars['Boolean']['input']>;
  isVisibleToApplicant?: InputMaybe<Scalars['Boolean']['input']>;
  recommendedApplicantVisibility?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseLinkId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseToOriginalReviewResponseId?: InputMaybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: InputMaybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewToReviewId?: InputMaybe<ReviewResponseReviewIdFkeyInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewResponseStatus>;
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  templateElementToTemplateElementId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** Represents an update to a `ReviewResponse`. Fields that are set will be updated. */
export type ReviewResponsePatch = {
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  applicationResponseToApplicationResponseId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  decision?: InputMaybe<ReviewResponseDecision>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLatestReview?: InputMaybe<Scalars['Boolean']['input']>;
  isVisibleToApplicant?: InputMaybe<Scalars['Boolean']['input']>;
  originalReviewResponseId?: InputMaybe<Scalars['Int']['input']>;
  recommendedApplicantVisibility?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseLinkId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseToOriginalReviewResponseId?: InputMaybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: InputMaybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewToReviewId?: InputMaybe<ReviewResponseReviewIdFkeyInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewResponseStatus>;
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  templateElementToTemplateElementId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
};

export enum ReviewResponseRecommendedApplicantVisibility {
  OriginalResponseNotVisibleToApplicant = 'ORIGINAL_RESPONSE_NOT_VISIBLE_TO_APPLICANT',
  OriginalResponseVisibleToApplicant = 'ORIGINAL_RESPONSE_VISIBLE_TO_APPLICANT'
}

/** A filter to be used against ReviewResponseRecommendedApplicantVisibility fields. All fields are combined with a logical ‘and.’ */
export type ReviewResponseRecommendedApplicantVisibilityFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<ReviewResponseRecommendedApplicantVisibility>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<ReviewResponseRecommendedApplicantVisibility>>;
};

/** Input for the nested mutation of `review` in the `ReviewResponseInput` mutation. */
export type ReviewResponseReviewIdFkeyInput = {
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectById?: InputMaybe<ReviewReviewPkeyConnect>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ReviewNodeIdConnect>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByReviewAssignmentId?: InputMaybe<ReviewReviewReviewAssignmentIdKeyConnect>;
  /** A `ReviewInput` object that will be created and connected to this object. */
  create?: InputMaybe<ReviewResponseReviewIdFkeyReviewCreateInput>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteById?: InputMaybe<ReviewReviewPkeyDelete>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ReviewNodeIdDelete>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByReviewAssignmentId?: InputMaybe<ReviewReviewReviewAssignmentIdKeyDelete>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateById?: InputMaybe<ReviewOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewPkeyUpdate>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByReviewAssignmentId?: InputMaybe<ReviewOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate>;
};

/** Input for the nested mutation of `reviewResponse` in the `ReviewInput` mutation. */
export type ReviewResponseReviewIdFkeyInverseInput = {
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ReviewResponseReviewResponsePkeyConnect>>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ReviewResponseNodeIdConnect>>;
  /** A `ReviewResponseInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ReviewResponseReviewIdFkeyReviewResponseCreateInput>>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ReviewResponseReviewResponsePkeyDelete>>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ReviewResponseNodeIdDelete>>;
  /** Flag indicating whether all other `reviewResponse` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewResponsePkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ReviewOnReviewResponseForReviewResponseReviewIdFkeyNodeIdUpdate>>;
};

/** The `review` to be created by this mutation. */
export type ReviewResponseReviewIdFkeyReviewCreateInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  notificationsUsingId?: InputMaybe<NotificationReviewIdFkeyInverseInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewReviewAssignmentIdFkeyInput>;
  reviewDecisionsUsingId?: InputMaybe<ReviewDecisionReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToReviewerId?: InputMaybe<FakePublicReviewForeignKey0Input>;
};

/** The `reviewResponse` to be created by this mutation. */
export type ReviewResponseReviewIdFkeyReviewResponseCreateInput = {
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  applicationResponseToApplicationResponseId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  decision?: InputMaybe<ReviewResponseDecision>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLatestReview?: InputMaybe<Scalars['Boolean']['input']>;
  isVisibleToApplicant?: InputMaybe<Scalars['Boolean']['input']>;
  originalReviewResponseId?: InputMaybe<Scalars['Int']['input']>;
  recommendedApplicantVisibility?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  reviewResponseLinkId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseToOriginalReviewResponseId?: InputMaybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: InputMaybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewToReviewId?: InputMaybe<ReviewResponseReviewIdFkeyInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewResponseStatus>;
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  templateElementToTemplateElementId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** Input for the nested mutation of `reviewResponse` in the `ReviewResponseInput` mutation. */
export type ReviewResponseReviewResponseLinkIdFkeyInput = {
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectById?: InputMaybe<ReviewResponseReviewResponsePkeyConnect>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ReviewResponseNodeIdConnect>;
  /** A `ReviewResponseInput` object that will be created and connected to this object. */
  create?: InputMaybe<ReviewResponseReviewResponseLinkIdFkeyReviewResponseCreateInput>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteById?: InputMaybe<ReviewResponseReviewResponsePkeyDelete>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ReviewResponseNodeIdDelete>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateById?: InputMaybe<ReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyUsingReviewResponsePkeyUpdate>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyNodeIdUpdate>;
};

/** The `reviewResponse` to be created by this mutation. */
export type ReviewResponseReviewResponseLinkIdFkeyReviewResponseCreateInput = {
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  applicationResponseToApplicationResponseId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  decision?: InputMaybe<ReviewResponseDecision>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLatestReview?: InputMaybe<Scalars['Boolean']['input']>;
  isVisibleToApplicant?: InputMaybe<Scalars['Boolean']['input']>;
  originalReviewResponseId?: InputMaybe<Scalars['Int']['input']>;
  recommendedApplicantVisibility?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseToOriginalReviewResponseId?: InputMaybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: InputMaybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewToReviewId?: InputMaybe<ReviewResponseReviewIdFkeyInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewResponseStatus>;
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  templateElementToTemplateElementId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The fields on `reviewResponse` to look up the row to connect. */
export type ReviewResponseReviewResponsePkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `reviewResponse` to look up the row to delete. */
export type ReviewResponseReviewResponsePkeyDelete = {
  id: Scalars['Int']['input'];
};

export enum ReviewResponseStatus {
  Draft = 'DRAFT',
  Submitted = 'SUBMITTED'
}

/** A filter to be used against ReviewResponseStatus fields. All fields are combined with a logical ‘and.’ */
export type ReviewResponseStatusFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<ReviewResponseStatus>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<ReviewResponseStatus>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<ReviewResponseStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<ReviewResponseStatus>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<ReviewResponseStatus>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<ReviewResponseStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<ReviewResponseStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<ReviewResponseStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<ReviewResponseStatus>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<ReviewResponseStatus>>;
};

/** Input for the nested mutation of `templateElement` in the `ReviewResponseInput` mutation. */
export type ReviewResponseTemplateElementIdFkeyInput = {
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  connectById?: InputMaybe<TemplateElementTemplateElementPkeyConnect>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TemplateElementNodeIdConnect>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  connectByTemplateCodeAndCodeAndTemplateVersion?: InputMaybe<TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyConnect>;
  /** A `TemplateElementInput` object that will be created and connected to this object. */
  create?: InputMaybe<ReviewResponseTemplateElementIdFkeyTemplateElementCreateInput>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  deleteById?: InputMaybe<TemplateElementTemplateElementPkeyDelete>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TemplateElementNodeIdDelete>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  deleteByTemplateCodeAndCodeAndTemplateVersion?: InputMaybe<TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyDelete>;
  /** The primary key(s) and patch data for `templateElement` for the far side of the relationship. */
  updateById?: InputMaybe<TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingTemplateElementPkeyUpdate>;
  /** The primary key(s) and patch data for `templateElement` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `templateElement` for the far side of the relationship. */
  updateByTemplateCodeAndCodeAndTemplateVersion?: InputMaybe<TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate>;
};

/** Input for the nested mutation of `reviewResponse` in the `TemplateElementInput` mutation. */
export type ReviewResponseTemplateElementIdFkeyInverseInput = {
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ReviewResponseReviewResponsePkeyConnect>>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ReviewResponseNodeIdConnect>>;
  /** A `ReviewResponseInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ReviewResponseTemplateElementIdFkeyReviewResponseCreateInput>>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ReviewResponseReviewResponsePkeyDelete>>;
  /** The primary key(s) for `reviewResponse` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ReviewResponseNodeIdDelete>>;
  /** Flag indicating whether all other `reviewResponse` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingReviewResponsePkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewResponse` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyNodeIdUpdate>>;
};

/** The `reviewResponse` to be created by this mutation. */
export type ReviewResponseTemplateElementIdFkeyReviewResponseCreateInput = {
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  applicationResponseToApplicationResponseId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  decision?: InputMaybe<ReviewResponseDecision>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLatestReview?: InputMaybe<Scalars['Boolean']['input']>;
  isVisibleToApplicant?: InputMaybe<Scalars['Boolean']['input']>;
  originalReviewResponseId?: InputMaybe<Scalars['Int']['input']>;
  recommendedApplicantVisibility?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseLinkId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseToOriginalReviewResponseId?: InputMaybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: InputMaybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewToReviewId?: InputMaybe<ReviewResponseReviewIdFkeyInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewResponseStatus>;
  templateElementToTemplateElementId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The `templateElement` to be created by this mutation. */
export type ReviewResponseTemplateElementIdFkeyTemplateElementCreateInput = {
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseTemplateElementIdFkeyInverseInput>;
  category?: InputMaybe<TemplateElementCategory>;
  code: Scalars['String']['input'];
  elementTypePluginCode?: InputMaybe<Scalars['String']['input']>;
  helpText?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  index?: InputMaybe<Scalars['Int']['input']>;
  initialValue?: InputMaybe<Scalars['JSON']['input']>;
  isEditable?: InputMaybe<Scalars['JSON']['input']>;
  isRequired?: InputMaybe<Scalars['JSON']['input']>;
  parameters?: InputMaybe<Scalars['JSON']['input']>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInverseInput>;
  reviewability?: InputMaybe<Reviewability>;
  sectionId?: InputMaybe<Scalars['Int']['input']>;
  templateCode: Scalars['String']['input'];
  templateSectionToSectionId?: InputMaybe<TemplateElementSectionIdFkeyInput>;
  templateVersion: Scalars['String']['input'];
  title?: InputMaybe<Scalars['String']['input']>;
  validation?: InputMaybe<Scalars['JSON']['input']>;
  validationMessage?: InputMaybe<Scalars['String']['input']>;
  visibilityCondition?: InputMaybe<Scalars['JSON']['input']>;
};

/** A filter to be used against many `ReviewResponse` object types. All fields are combined with a logical ‘and.’ */
export type ReviewResponseToManyReviewResponseFilter = {
  /** Every related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ReviewResponseFilter>;
  /** No related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ReviewResponseFilter>;
  /** Some related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ReviewResponseFilter>;
};

/** A connection to a list of `ReviewResponse` values. */
export type ReviewResponsesConnection = {
  __typename?: 'ReviewResponsesConnection';
  /** A list of edges which contains the `ReviewResponse` and cursor to aid in pagination. */
  edges: Array<ReviewResponsesEdge>;
  /** A list of `ReviewResponse` objects. */
  nodes: Array<Maybe<ReviewResponse>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ReviewResponse` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ReviewResponse` edge in the connection. */
export type ReviewResponsesEdge = {
  __typename?: 'ReviewResponsesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ReviewResponse` at the end of the edge. */
  node?: Maybe<ReviewResponse>;
};

/** Methods to use when ordering `ReviewResponse`. */
export enum ReviewResponsesOrderBy {
  ApplicationResponseIdAsc = 'APPLICATION_RESPONSE_ID_ASC',
  ApplicationResponseIdDesc = 'APPLICATION_RESPONSE_ID_DESC',
  CommentAsc = 'COMMENT_ASC',
  CommentDesc = 'COMMENT_DESC',
  DecisionAsc = 'DECISION_ASC',
  DecisionDesc = 'DECISION_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsLatestReviewAsc = 'IS_LATEST_REVIEW_ASC',
  IsLatestReviewDesc = 'IS_LATEST_REVIEW_DESC',
  IsVisibleToApplicantAsc = 'IS_VISIBLE_TO_APPLICANT_ASC',
  IsVisibleToApplicantDesc = 'IS_VISIBLE_TO_APPLICANT_DESC',
  Natural = 'NATURAL',
  OriginalReviewResponseIdAsc = 'ORIGINAL_REVIEW_RESPONSE_ID_ASC',
  OriginalReviewResponseIdDesc = 'ORIGINAL_REVIEW_RESPONSE_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RecommendedApplicantVisibilityAsc = 'RECOMMENDED_APPLICANT_VISIBILITY_ASC',
  RecommendedApplicantVisibilityDesc = 'RECOMMENDED_APPLICANT_VISIBILITY_DESC',
  ReviewIdAsc = 'REVIEW_ID_ASC',
  ReviewIdDesc = 'REVIEW_ID_DESC',
  ReviewResponseLinkIdAsc = 'REVIEW_RESPONSE_LINK_ID_ASC',
  ReviewResponseLinkIdDesc = 'REVIEW_RESPONSE_LINK_ID_DESC',
  StageNumberAsc = 'STAGE_NUMBER_ASC',
  StageNumberDesc = 'STAGE_NUMBER_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TemplateElementIdAsc = 'TEMPLATE_ELEMENT_ID_ASC',
  TemplateElementIdDesc = 'TEMPLATE_ELEMENT_ID_DESC',
  TimeCreatedAsc = 'TIME_CREATED_ASC',
  TimeCreatedDesc = 'TIME_CREATED_DESC',
  TimeSubmittedAsc = 'TIME_SUBMITTED_ASC',
  TimeSubmittedDesc = 'TIME_SUBMITTED_DESC',
  TimeUpdatedAsc = 'TIME_UPDATED_ASC',
  TimeUpdatedDesc = 'TIME_UPDATED_DESC'
}

/** Input for the nested mutation of `reviewAssignment` in the `ReviewInput` mutation. */
export type ReviewReviewAssignmentIdFkeyInput = {
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectById?: InputMaybe<ReviewAssignmentReviewAssignmentPkeyConnect>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ReviewAssignmentNodeIdConnect>;
  /** A `ReviewAssignmentInput` object that will be created and connected to this object. */
  create?: InputMaybe<ReviewReviewAssignmentIdFkeyReviewAssignmentCreateInput>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteById?: InputMaybe<ReviewAssignmentReviewAssignmentPkeyDelete>;
  /** The primary key(s) for `reviewAssignment` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ReviewAssignmentNodeIdDelete>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateById?: InputMaybe<ReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyUsingReviewAssignmentPkeyUpdate>;
  /** The primary key(s) and patch data for `reviewAssignment` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ReviewOnReviewForReviewReviewAssignmentIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `review` in the `ReviewAssignmentInput` mutation. */
export type ReviewReviewAssignmentIdFkeyInverseInput = {
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectById?: InputMaybe<ReviewReviewPkeyConnect>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ReviewNodeIdConnect>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByReviewAssignmentId?: InputMaybe<ReviewReviewReviewAssignmentIdKeyConnect>;
  /** A `ReviewInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ReviewReviewAssignmentIdFkeyReviewCreateInput>>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteById?: InputMaybe<ReviewReviewPkeyDelete>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ReviewNodeIdDelete>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByReviewAssignmentId?: InputMaybe<ReviewReviewReviewAssignmentIdKeyDelete>;
  /** Flag indicating whether all other `review` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateById?: InputMaybe<ReviewOnReviewForReviewReviewAssignmentIdFkeyUsingReviewPkeyUpdate>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByReviewAssignmentId?: InputMaybe<ReviewOnReviewForReviewReviewAssignmentIdFkeyUsingReviewReviewAssignmentIdKeyUpdate>;
};

/** The `reviewAssignment` to be created by this mutation. */
export type ReviewReviewAssignmentIdFkeyReviewAssignmentCreateInput = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status: ReviewAssignmentStatus;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** The `review` to be created by this mutation. */
export type ReviewReviewAssignmentIdFkeyReviewCreateInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  notificationsUsingId?: InputMaybe<NotificationReviewIdFkeyInverseInput>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewReviewAssignmentIdFkeyInput>;
  reviewDecisionsUsingId?: InputMaybe<ReviewDecisionReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToReviewerId?: InputMaybe<FakePublicReviewForeignKey0Input>;
};

/** The fields on `review` to look up the row to connect. */
export type ReviewReviewPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `review` to look up the row to delete. */
export type ReviewReviewPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** The fields on `review` to look up the row to connect. */
export type ReviewReviewReviewAssignmentIdKeyConnect = {
  reviewAssignmentId: Scalars['Int']['input'];
};

/** The fields on `review` to look up the row to delete. */
export type ReviewReviewReviewAssignmentIdKeyDelete = {
  reviewAssignmentId: Scalars['Int']['input'];
};

export enum ReviewStatus {
  ChangesRequested = 'CHANGES_REQUESTED',
  Discontinued = 'DISCONTINUED',
  Draft = 'DRAFT',
  Pending = 'PENDING',
  Submitted = 'SUBMITTED'
}

/** A filter to be used against ReviewStatus fields. All fields are combined with a logical ‘and.’ */
export type ReviewStatusFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<ReviewStatus>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<ReviewStatus>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<ReviewStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<ReviewStatus>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<ReviewStatus>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<ReviewStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<ReviewStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<ReviewStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<ReviewStatus>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<ReviewStatus>>;
};

/** A connection to a list of `ReviewStatusHistory` values. */
export type ReviewStatusHistoriesConnection = {
  __typename?: 'ReviewStatusHistoriesConnection';
  /** A list of edges which contains the `ReviewStatusHistory` and cursor to aid in pagination. */
  edges: Array<ReviewStatusHistoriesEdge>;
  /** A list of `ReviewStatusHistory` objects. */
  nodes: Array<Maybe<ReviewStatusHistory>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `ReviewStatusHistory` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `ReviewStatusHistory` edge in the connection. */
export type ReviewStatusHistoriesEdge = {
  __typename?: 'ReviewStatusHistoriesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ReviewStatusHistory` at the end of the edge. */
  node?: Maybe<ReviewStatusHistory>;
};

/** Methods to use when ordering `ReviewStatusHistory`. */
export enum ReviewStatusHistoriesOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsCurrentAsc = 'IS_CURRENT_ASC',
  IsCurrentDesc = 'IS_CURRENT_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ReviewIdAsc = 'REVIEW_ID_ASC',
  ReviewIdDesc = 'REVIEW_ID_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TimeCreatedAsc = 'TIME_CREATED_ASC',
  TimeCreatedDesc = 'TIME_CREATED_DESC'
}

export type ReviewStatusHistory = Node & {
  __typename?: 'ReviewStatusHistory';
  id: Scalars['Int']['output'];
  isCurrent?: Maybe<Scalars['Boolean']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Review` that is related to this `ReviewStatusHistory`. */
  review?: Maybe<Review>;
  reviewId: Scalars['Int']['output'];
  status?: Maybe<ReviewStatus>;
  timeCreated?: Maybe<Scalars['Datetime']['output']>;
};

/**
 * A condition to be used against `ReviewStatusHistory` object types. All fields
 * are tested for equality and combined with a logical ‘and.’
 */
export type ReviewStatusHistoryCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isCurrent` field. */
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `reviewId` field. */
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `status` field. */
  status?: InputMaybe<ReviewStatus>;
  /** Checks for equality with the object’s `timeCreated` field. */
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** A filter to be used against `ReviewStatusHistory` object types. All fields are combined with a logical ‘and.’ */
export type ReviewStatusHistoryFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ReviewStatusHistoryFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isCurrent` field. */
  isCurrent?: InputMaybe<BooleanFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ReviewStatusHistoryFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ReviewStatusHistoryFilter>>;
  /** Filter by the object’s `review` relation. */
  review?: InputMaybe<ReviewFilter>;
  /** Filter by the object’s `reviewId` field. */
  reviewId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `status` field. */
  status?: InputMaybe<ReviewStatusFilter>;
  /** Filter by the object’s `timeCreated` field. */
  timeCreated?: InputMaybe<DatetimeFilter>;
};

/** An input for mutations affecting `ReviewStatusHistory` */
export type ReviewStatusHistoryInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  reviewToReviewId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInput>;
  status?: InputMaybe<ReviewStatus>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The globally unique `ID` look up for the row to connect. */
export type ReviewStatusHistoryNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `reviewStatusHistory` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type ReviewStatusHistoryNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `reviewStatusHistory` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type ReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `review` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: ReviewPatch;
};

/** The fields on `reviewStatusHistory` to look up the row to update. */
export type ReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewStatusHistoryPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `reviewStatusHistory` being updated. */
  patch: UpdateReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyPatch;
};

/** Represents an update to a `ReviewStatusHistory`. Fields that are set will be updated. */
export type ReviewStatusHistoryPatch = {
  id?: InputMaybe<Scalars['Int']['input']>;
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  reviewToReviewId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInput>;
  status?: InputMaybe<ReviewStatus>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** Input for the nested mutation of `review` in the `ReviewStatusHistoryInput` mutation. */
export type ReviewStatusHistoryReviewIdFkeyInput = {
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectById?: InputMaybe<ReviewReviewPkeyConnect>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ReviewNodeIdConnect>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  connectByReviewAssignmentId?: InputMaybe<ReviewReviewReviewAssignmentIdKeyConnect>;
  /** A `ReviewInput` object that will be created and connected to this object. */
  create?: InputMaybe<ReviewStatusHistoryReviewIdFkeyReviewCreateInput>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteById?: InputMaybe<ReviewReviewPkeyDelete>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ReviewNodeIdDelete>;
  /** The primary key(s) for `review` for the far side of the relationship. */
  deleteByReviewAssignmentId?: InputMaybe<ReviewReviewReviewAssignmentIdKeyDelete>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateById?: InputMaybe<ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewPkeyUpdate>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<ReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `review` for the far side of the relationship. */
  updateByReviewAssignmentId?: InputMaybe<ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate>;
};

/** Input for the nested mutation of `reviewStatusHistory` in the `ReviewInput` mutation. */
export type ReviewStatusHistoryReviewIdFkeyInverseInput = {
  /** The primary key(s) for `reviewStatusHistory` for the far side of the relationship. */
  connectById?: InputMaybe<Array<ReviewStatusHistoryReviewStatusHistoryPkeyConnect>>;
  /** The primary key(s) for `reviewStatusHistory` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<ReviewStatusHistoryNodeIdConnect>>;
  /** A `ReviewStatusHistoryInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<ReviewStatusHistoryReviewIdFkeyReviewStatusHistoryCreateInput>>;
  /** The primary key(s) for `reviewStatusHistory` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<ReviewStatusHistoryReviewStatusHistoryPkeyDelete>>;
  /** The primary key(s) for `reviewStatusHistory` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<ReviewStatusHistoryNodeIdDelete>>;
  /** Flag indicating whether all other `reviewStatusHistory` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `reviewStatusHistory` for the far side of the relationship. */
  updateById?: InputMaybe<Array<ReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewStatusHistoryPkeyUpdate>>;
  /** The primary key(s) and patch data for `reviewStatusHistory` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyNodeIdUpdate>>;
};

/** The `review` to be created by this mutation. */
export type ReviewStatusHistoryReviewIdFkeyReviewCreateInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  notificationsUsingId?: InputMaybe<NotificationReviewIdFkeyInverseInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewReviewAssignmentIdFkeyInput>;
  reviewDecisionsUsingId?: InputMaybe<ReviewDecisionReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToReviewerId?: InputMaybe<FakePublicReviewForeignKey0Input>;
};

/** The `reviewStatusHistory` to be created by this mutation. */
export type ReviewStatusHistoryReviewIdFkeyReviewStatusHistoryCreateInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  reviewToReviewId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInput>;
  status?: InputMaybe<ReviewStatus>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The fields on `reviewStatusHistory` to look up the row to connect. */
export type ReviewStatusHistoryReviewStatusHistoryPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `reviewStatusHistory` to look up the row to delete. */
export type ReviewStatusHistoryReviewStatusHistoryPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** A filter to be used against many `Notification` object types. All fields are combined with a logical ‘and.’ */
export type ReviewToManyNotificationFilter = {
  /** Every related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<NotificationFilter>;
  /** No related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<NotificationFilter>;
  /** Some related `Notification` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<NotificationFilter>;
};

/** A filter to be used against many `ReviewDecision` object types. All fields are combined with a logical ‘and.’ */
export type ReviewToManyReviewDecisionFilter = {
  /** Every related `ReviewDecision` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ReviewDecisionFilter>;
  /** No related `ReviewDecision` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ReviewDecisionFilter>;
  /** Some related `ReviewDecision` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ReviewDecisionFilter>;
};

/** A filter to be used against many `ReviewResponse` object types. All fields are combined with a logical ‘and.’ */
export type ReviewToManyReviewResponseFilter = {
  /** Every related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ReviewResponseFilter>;
  /** No related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ReviewResponseFilter>;
  /** Some related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ReviewResponseFilter>;
};

/** A filter to be used against many `ReviewStatusHistory` object types. All fields are combined with a logical ‘and.’ */
export type ReviewToManyReviewStatusHistoryFilter = {
  /** Every related `ReviewStatusHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ReviewStatusHistoryFilter>;
  /** No related `ReviewStatusHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ReviewStatusHistoryFilter>;
  /** Some related `ReviewStatusHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ReviewStatusHistoryFilter>;
};

export enum Reviewability {
  Always = 'ALWAYS',
  Never = 'NEVER',
  OnlyIfApplicantAnswer = 'ONLY_IF_APPLICANT_ANSWER',
  OptionalIfNoResponse = 'OPTIONAL_IF_NO_RESPONSE'
}

/** A filter to be used against Reviewability fields. All fields are combined with a logical ‘and.’ */
export type ReviewabilityFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Reviewability>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Reviewability>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Reviewability>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Reviewability>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Reviewability>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Reviewability>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Reviewability>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Reviewability>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Reviewability>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Reviewability>>;
};

/** A `ReviewableQuestionsRecord` edge in the connection. */
export type ReviewableQuestionEdge = {
  __typename?: 'ReviewableQuestionEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `ReviewableQuestionsRecord` at the end of the edge. */
  node?: Maybe<ReviewableQuestionsRecord>;
};

/** A connection to a list of `ReviewableQuestionsRecord` values. */
export type ReviewableQuestionsConnection = {
  __typename?: 'ReviewableQuestionsConnection';
  /** A list of edges which contains the `ReviewableQuestionsRecord` and cursor to aid in pagination. */
  edges: Array<ReviewableQuestionEdge>;
  /** A list of `ReviewableQuestionsRecord` objects. */
  nodes: Array<Maybe<ReviewableQuestionsRecord>>;
  /** The count of *all* `ReviewableQuestionsRecord` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** The return type of our `reviewableQuestions` query. */
export type ReviewableQuestionsRecord = {
  __typename?: 'ReviewableQuestionsRecord';
  code?: Maybe<Scalars['String']['output']>;
  isOptional?: Maybe<Scalars['Boolean']['output']>;
  responseId?: Maybe<Scalars['Int']['output']>;
  responseValue?: Maybe<Scalars['JSON']['output']>;
  reviewability?: Maybe<Reviewability>;
};

/** A filter to be used against `ReviewableQuestionsRecord` object types. All fields are combined with a logical ‘and.’ */
export type ReviewableQuestionsRecordFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<ReviewableQuestionsRecordFilter>>;
  /** Filter by the object’s `code` field. */
  code?: InputMaybe<StringFilter>;
  /** Filter by the object’s `isOptional` field. */
  isOptional?: InputMaybe<BooleanFilter>;
  /** Negates the expression. */
  not?: InputMaybe<ReviewableQuestionsRecordFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<ReviewableQuestionsRecordFilter>>;
  /** Filter by the object’s `responseId` field. */
  responseId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `responseValue` field. */
  responseValue?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `reviewability` field. */
  reviewability?: InputMaybe<ReviewabilityFilter>;
};

export enum ReviewerAction {
  AwaitingResponse = 'AWAITING_RESPONSE',
  ContinueReview = 'CONTINUE_REVIEW',
  MakeDecision = 'MAKE_DECISION',
  RestartReview = 'RESTART_REVIEW',
  SelfAssign = 'SELF_ASSIGN',
  StartReview = 'START_REVIEW',
  UpdateReview = 'UPDATE_REVIEW',
  ViewReview = 'VIEW_REVIEW'
}

/** A filter to be used against ReviewerAction fields. All fields are combined with a logical ‘and.’ */
export type ReviewerActionFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<ReviewerAction>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<ReviewerAction>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<ReviewerAction>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<ReviewerAction>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<ReviewerAction>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<ReviewerAction>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<ReviewerAction>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<ReviewerAction>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<ReviewerAction>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<ReviewerAction>>;
};

/** A connection to a list of `Review` values. */
export type ReviewsConnection = {
  __typename?: 'ReviewsConnection';
  /** A list of edges which contains the `Review` and cursor to aid in pagination. */
  edges: Array<ReviewsEdge>;
  /** A list of `Review` objects. */
  nodes: Array<Maybe<Review>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Review` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `Review` edge in the connection. */
export type ReviewsEdge = {
  __typename?: 'ReviewsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Review` at the end of the edge. */
  node?: Maybe<Review>;
};

/** Methods to use when ordering `Review`. */
export enum ReviewsOrderBy {
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsFinalDecisionAsc = 'IS_FINAL_DECISION_ASC',
  IsFinalDecisionDesc = 'IS_FINAL_DECISION_DESC',
  IsLastLevelAsc = 'IS_LAST_LEVEL_ASC',
  IsLastLevelDesc = 'IS_LAST_LEVEL_DESC',
  IsLastStageAsc = 'IS_LAST_STAGE_ASC',
  IsLastStageDesc = 'IS_LAST_STAGE_DESC',
  LevelNumberAsc = 'LEVEL_NUMBER_ASC',
  LevelNumberDesc = 'LEVEL_NUMBER_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ReviewerIdAsc = 'REVIEWER_ID_ASC',
  ReviewerIdDesc = 'REVIEWER_ID_DESC',
  ReviewAssignmentIdAsc = 'REVIEW_ASSIGNMENT_ID_ASC',
  ReviewAssignmentIdDesc = 'REVIEW_ASSIGNMENT_ID_DESC',
  StageNumberAsc = 'STAGE_NUMBER_ASC',
  StageNumberDesc = 'STAGE_NUMBER_DESC',
  TimeStageCreatedAsc = 'TIME_STAGE_CREATED_ASC',
  TimeStageCreatedDesc = 'TIME_STAGE_CREATED_DESC',
  TriggerAsc = 'TRIGGER_ASC',
  TriggerDesc = 'TRIGGER_DESC'
}

export type SchemaColumn = {
  __typename?: 'SchemaColumn';
  columnName?: Maybe<Scalars['SqlIdentifier']['output']>;
  constraintType?: Maybe<Scalars['CharacterData']['output']>;
  dataType?: Maybe<Scalars['CharacterData']['output']>;
  fkToColumnName?: Maybe<Scalars['SqlIdentifier']['output']>;
  fkToTableName?: Maybe<Scalars['SqlIdentifier']['output']>;
  isGenerated?: Maybe<Scalars['CharacterData']['output']>;
  isNullable?: Maybe<Scalars['YesOrNo']['output']>;
  subDataType?: Maybe<Scalars['CharacterData']['output']>;
  tableName?: Maybe<Scalars['SqlIdentifier']['output']>;
  tableType?: Maybe<Scalars['CharacterData']['output']>;
};

/**
 * A condition to be used against `SchemaColumn` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type SchemaColumnCondition = {
  /** Checks for equality with the object’s `columnName` field. */
  columnName?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Checks for equality with the object’s `constraintType` field. */
  constraintType?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Checks for equality with the object’s `dataType` field. */
  dataType?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Checks for equality with the object’s `fkToColumnName` field. */
  fkToColumnName?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Checks for equality with the object’s `fkToTableName` field. */
  fkToTableName?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Checks for equality with the object’s `isGenerated` field. */
  isGenerated?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Checks for equality with the object’s `isNullable` field. */
  isNullable?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Checks for equality with the object’s `subDataType` field. */
  subDataType?: InputMaybe<Scalars['CharacterData']['input']>;
  /** Checks for equality with the object’s `tableName` field. */
  tableName?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Checks for equality with the object’s `tableType` field. */
  tableType?: InputMaybe<Scalars['CharacterData']['input']>;
};

/** A filter to be used against `SchemaColumn` object types. All fields are combined with a logical ‘and.’ */
export type SchemaColumnFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<SchemaColumnFilter>>;
  /** Filter by the object’s `columnName` field. */
  columnName?: InputMaybe<SqlIdentifierFilter>;
  /** Filter by the object’s `constraintType` field. */
  constraintType?: InputMaybe<CharacterDataFilter>;
  /** Filter by the object’s `dataType` field. */
  dataType?: InputMaybe<CharacterDataFilter>;
  /** Filter by the object’s `fkToColumnName` field. */
  fkToColumnName?: InputMaybe<SqlIdentifierFilter>;
  /** Filter by the object’s `fkToTableName` field. */
  fkToTableName?: InputMaybe<SqlIdentifierFilter>;
  /** Filter by the object’s `isGenerated` field. */
  isGenerated?: InputMaybe<CharacterDataFilter>;
  /** Filter by the object’s `isNullable` field. */
  isNullable?: InputMaybe<YesOrNoFilter>;
  /** Negates the expression. */
  not?: InputMaybe<SchemaColumnFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<SchemaColumnFilter>>;
  /** Filter by the object’s `subDataType` field. */
  subDataType?: InputMaybe<CharacterDataFilter>;
  /** Filter by the object’s `tableName` field. */
  tableName?: InputMaybe<SqlIdentifierFilter>;
  /** Filter by the object’s `tableType` field. */
  tableType?: InputMaybe<CharacterDataFilter>;
};

/** A connection to a list of `SchemaColumn` values. */
export type SchemaColumnsConnection = {
  __typename?: 'SchemaColumnsConnection';
  /** A list of edges which contains the `SchemaColumn` and cursor to aid in pagination. */
  edges: Array<SchemaColumnsEdge>;
  /** A list of `SchemaColumn` objects. */
  nodes: Array<Maybe<SchemaColumn>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SchemaColumn` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `SchemaColumn` edge in the connection. */
export type SchemaColumnsEdge = {
  __typename?: 'SchemaColumnsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `SchemaColumn` at the end of the edge. */
  node?: Maybe<SchemaColumn>;
};

/** Methods to use when ordering `SchemaColumn`. */
export enum SchemaColumnsOrderBy {
  ColumnNameAsc = 'COLUMN_NAME_ASC',
  ColumnNameDesc = 'COLUMN_NAME_DESC',
  ConstraintTypeAsc = 'CONSTRAINT_TYPE_ASC',
  ConstraintTypeDesc = 'CONSTRAINT_TYPE_DESC',
  DataTypeAsc = 'DATA_TYPE_ASC',
  DataTypeDesc = 'DATA_TYPE_DESC',
  FkToColumnNameAsc = 'FK_TO_COLUMN_NAME_ASC',
  FkToColumnNameDesc = 'FK_TO_COLUMN_NAME_DESC',
  FkToTableNameAsc = 'FK_TO_TABLE_NAME_ASC',
  FkToTableNameDesc = 'FK_TO_TABLE_NAME_DESC',
  IsGeneratedAsc = 'IS_GENERATED_ASC',
  IsGeneratedDesc = 'IS_GENERATED_DESC',
  IsNullableAsc = 'IS_NULLABLE_ASC',
  IsNullableDesc = 'IS_NULLABLE_DESC',
  Natural = 'NATURAL',
  SubDataTypeAsc = 'SUB_DATA_TYPE_ASC',
  SubDataTypeDesc = 'SUB_DATA_TYPE_DESC',
  TableNameAsc = 'TABLE_NAME_ASC',
  TableNameDesc = 'TABLE_NAME_DESC',
  TableTypeAsc = 'TABLE_TYPE_ASC',
  TableTypeDesc = 'TABLE_TYPE_DESC'
}

/** A connection to a list of `SingleApplicationDetailRecord` values. */
export type SingleApplicationDetailConnection = {
  __typename?: 'SingleApplicationDetailConnection';
  /** A list of edges which contains the `SingleApplicationDetailRecord` and cursor to aid in pagination. */
  edges: Array<SingleApplicationDetailEdge>;
  /** A list of `SingleApplicationDetailRecord` objects. */
  nodes: Array<Maybe<SingleApplicationDetailRecord>>;
  /** The count of *all* `SingleApplicationDetailRecord` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `SingleApplicationDetailRecord` edge in the connection. */
export type SingleApplicationDetailEdge = {
  __typename?: 'SingleApplicationDetailEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `SingleApplicationDetailRecord` at the end of the edge. */
  node?: Maybe<SingleApplicationDetailRecord>;
};

/** The return type of our `singleApplicationDetail` query. */
export type SingleApplicationDetailRecord = {
  __typename?: 'SingleApplicationDetailRecord';
  assignerAction?: Maybe<AssignerAction>;
  assigners?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  reviewerAction?: Maybe<ReviewerAction>;
  reviewers?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

/** A filter to be used against `SingleApplicationDetailRecord` object types. All fields are combined with a logical ‘and.’ */
export type SingleApplicationDetailRecordFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<SingleApplicationDetailRecordFilter>>;
  /** Filter by the object’s `assignerAction` field. */
  assignerAction?: InputMaybe<AssignerActionFilter>;
  /** Filter by the object’s `assigners` field. */
  assigners?: InputMaybe<StringListFilter>;
  /** Negates the expression. */
  not?: InputMaybe<SingleApplicationDetailRecordFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<SingleApplicationDetailRecordFilter>>;
  /** Filter by the object’s `reviewerAction` field. */
  reviewerAction?: InputMaybe<ReviewerActionFilter>;
  /** Filter by the object’s `reviewers` field. */
  reviewers?: InputMaybe<StringListFilter>;
};

/** A filter to be used against SqlIdentifier fields. All fields are combined with a logical ‘and.’ */
export type SqlIdentifierFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Not equal to the specified value, treating null like an ordinary value (case-insensitive). */
  distinctFromInsensitive?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Ends with the specified string (case-sensitive). */
  endsWith?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Ends with the specified string (case-insensitive). */
  endsWithInsensitive?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Equal to the specified value (case-insensitive). */
  equalToInsensitive?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Greater than the specified value (case-insensitive). */
  greaterThanInsensitive?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Greater than or equal to the specified value (case-insensitive). */
  greaterThanOrEqualToInsensitive?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['SqlIdentifier']['input']>>;
  /** Included in the specified list (case-insensitive). */
  inInsensitive?: InputMaybe<Array<Scalars['SqlIdentifier']['input']>>;
  /** Contains the specified string (case-sensitive). */
  includes?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Contains the specified string (case-insensitive). */
  includesInsensitive?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Less than the specified value (case-insensitive). */
  lessThanInsensitive?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Less than or equal to the specified value (case-insensitive). */
  lessThanOrEqualToInsensitive?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  like?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  likeInsensitive?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Equal to the specified value, treating null like an ordinary value (case-insensitive). */
  notDistinctFromInsensitive?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Does not end with the specified string (case-sensitive). */
  notEndsWith?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Does not end with the specified string (case-insensitive). */
  notEndsWithInsensitive?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Not equal to the specified value (case-insensitive). */
  notEqualToInsensitive?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['SqlIdentifier']['input']>>;
  /** Not included in the specified list (case-insensitive). */
  notInInsensitive?: InputMaybe<Array<Scalars['SqlIdentifier']['input']>>;
  /** Does not contain the specified string (case-sensitive). */
  notIncludes?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Does not contain the specified string (case-insensitive). */
  notIncludesInsensitive?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLike?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLikeInsensitive?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Does not start with the specified string (case-sensitive). */
  notStartsWith?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Does not start with the specified string (case-insensitive). */
  notStartsWithInsensitive?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Starts with the specified string (case-sensitive). */
  startsWith?: InputMaybe<Scalars['SqlIdentifier']['input']>;
  /** Starts with the specified string (case-insensitive). */
  startsWithInsensitive?: InputMaybe<Scalars['SqlIdentifier']['input']>;
};

/** A filter to be used against String fields. All fields are combined with a logical ‘and.’ */
export type StringFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['String']['input']>;
  /** Not equal to the specified value, treating null like an ordinary value (case-insensitive). */
  distinctFromInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Ends with the specified string (case-sensitive). */
  endsWith?: InputMaybe<Scalars['String']['input']>;
  /** Ends with the specified string (case-insensitive). */
  endsWithInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['String']['input']>;
  /** Equal to the specified value (case-insensitive). */
  equalToInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Greater than the specified value (case-insensitive). */
  greaterThanInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['String']['input']>;
  /** Greater than or equal to the specified value (case-insensitive). */
  greaterThanOrEqualToInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Included in the specified list (case-insensitive). */
  inInsensitive?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Contains the specified string (case-sensitive). */
  includes?: InputMaybe<Scalars['String']['input']>;
  /** Contains the specified string (case-insensitive). */
  includesInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['String']['input']>;
  /** Less than the specified value (case-insensitive). */
  lessThanInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['String']['input']>;
  /** Less than or equal to the specified value (case-insensitive). */
  lessThanOrEqualToInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  like?: InputMaybe<Scalars['String']['input']>;
  /** Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  likeInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['String']['input']>;
  /** Equal to the specified value, treating null like an ordinary value (case-insensitive). */
  notDistinctFromInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Does not end with the specified string (case-sensitive). */
  notEndsWith?: InputMaybe<Scalars['String']['input']>;
  /** Does not end with the specified string (case-insensitive). */
  notEndsWithInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['String']['input']>;
  /** Not equal to the specified value (case-insensitive). */
  notEqualToInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Not included in the specified list (case-insensitive). */
  notInInsensitive?: InputMaybe<Array<Scalars['String']['input']>>;
  /** Does not contain the specified string (case-sensitive). */
  notIncludes?: InputMaybe<Scalars['String']['input']>;
  /** Does not contain the specified string (case-insensitive). */
  notIncludesInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLike?: InputMaybe<Scalars['String']['input']>;
  /** Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLikeInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Does not start with the specified string (case-sensitive). */
  notStartsWith?: InputMaybe<Scalars['String']['input']>;
  /** Does not start with the specified string (case-insensitive). */
  notStartsWithInsensitive?: InputMaybe<Scalars['String']['input']>;
  /** Starts with the specified string (case-sensitive). */
  startsWith?: InputMaybe<Scalars['String']['input']>;
  /** Starts with the specified string (case-insensitive). */
  startsWithInsensitive?: InputMaybe<Scalars['String']['input']>;
};

/** A filter to be used against String List fields. All fields are combined with a logical ‘and.’ */
export type StringListFilter = {
  /** Any array item is equal to the specified value. */
  anyEqualTo?: InputMaybe<Scalars['String']['input']>;
  /** Any array item is greater than the specified value. */
  anyGreaterThan?: InputMaybe<Scalars['String']['input']>;
  /** Any array item is greater than or equal to the specified value. */
  anyGreaterThanOrEqualTo?: InputMaybe<Scalars['String']['input']>;
  /** Any array item is less than the specified value. */
  anyLessThan?: InputMaybe<Scalars['String']['input']>;
  /** Any array item is less than or equal to the specified value. */
  anyLessThanOrEqualTo?: InputMaybe<Scalars['String']['input']>;
  /** Any array item is not equal to the specified value. */
  anyNotEqualTo?: InputMaybe<Scalars['String']['input']>;
  /** Contained by the specified list of values. */
  containedBy?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Contains the specified list of values. */
  contains?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Overlaps the specified list of values. */
  overlaps?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type SystemInfo = Node & {
  __typename?: 'SystemInfo';
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  timestamp?: Maybe<Scalars['Datetime']['output']>;
  value?: Maybe<Scalars['JSON']['output']>;
};

/**
 * A condition to be used against `SystemInfo` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type SystemInfoCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `name` field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `timestamp` field. */
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `value` field. */
  value?: InputMaybe<Scalars['JSON']['input']>;
};

/** A filter to be used against `SystemInfo` object types. All fields are combined with a logical ‘and.’ */
export type SystemInfoFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<SystemInfoFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `name` field. */
  name?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<SystemInfoFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<SystemInfoFilter>>;
  /** Filter by the object’s `timestamp` field. */
  timestamp?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `value` field. */
  value?: InputMaybe<JsonFilter>;
};

/** An input for mutations affecting `SystemInfo` */
export type SystemInfoInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  value?: InputMaybe<Scalars['JSON']['input']>;
};

/** Represents an update to a `SystemInfo`. Fields that are set will be updated. */
export type SystemInfoPatch = {
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  value?: InputMaybe<Scalars['JSON']['input']>;
};

/** A connection to a list of `SystemInfo` values. */
export type SystemInfosConnection = {
  __typename?: 'SystemInfosConnection';
  /** A list of edges which contains the `SystemInfo` and cursor to aid in pagination. */
  edges: Array<SystemInfosEdge>;
  /** A list of `SystemInfo` objects. */
  nodes: Array<Maybe<SystemInfo>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `SystemInfo` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `SystemInfo` edge in the connection. */
export type SystemInfosEdge = {
  __typename?: 'SystemInfosEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `SystemInfo` at the end of the edge. */
  node?: Maybe<SystemInfo>;
};

/** Methods to use when ordering `SystemInfo`. */
export enum SystemInfosOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  TimestampAsc = 'TIMESTAMP_ASC',
  TimestampDesc = 'TIMESTAMP_DESC',
  ValueAsc = 'VALUE_ASC',
  ValueDesc = 'VALUE_DESC'
}

export type Template = Node & {
  __typename?: 'Template';
  /** Reads and enables pagination through a set of `ActionQueue`. */
  actionQueues: ActionQueuesConnection;
  /** Reads and enables pagination through a set of `Application`. */
  applications: ApplicationsConnection;
  canApplicantMakeChanges?: Maybe<Scalars['Boolean']['output']>;
  code: Scalars['String']['output'];
  dashboardRestrictions?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** Reads and enables pagination through a set of `File`. */
  files: FilesConnection;
  icon?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  isLinear?: Maybe<Scalars['Boolean']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  namePlural?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  parentVersionId?: Maybe<Scalars['String']['output']>;
  priority?: Maybe<Scalars['Int']['output']>;
  /** Reads and enables pagination through a set of `ReviewAssignment`. */
  reviewAssignments: ReviewAssignmentsConnection;
  serialPattern?: Maybe<Scalars['String']['output']>;
  startMessage?: Maybe<Scalars['JSON']['output']>;
  status?: Maybe<TemplateStatus>;
  submissionMessage?: Maybe<Scalars['JSON']['output']>;
  /** Reads and enables pagination through a set of `TemplateAction`. */
  templateActions: TemplateActionsConnection;
  /** Reads a single `TemplateCategory` that is related to this `Template`. */
  templateCategory?: Maybe<TemplateCategory>;
  templateCategoryId?: Maybe<Scalars['Int']['output']>;
  /** Reads and enables pagination through a set of `TemplateFilterJoin`. */
  templateFilterJoins: TemplateFilterJoinsConnection;
  /** Reads and enables pagination through a set of `TemplatePermission`. */
  templatePermissions: TemplatePermissionsConnection;
  /** Reads and enables pagination through a set of `TemplateSection`. */
  templateSections: TemplateSectionsConnection;
  /** Reads and enables pagination through a set of `TemplateStage`. */
  templateStages: TemplateStagesConnection;
  /** Reads and enables pagination through a set of `TriggerSchedule`. */
  triggerSchedules: TriggerSchedulesConnection;
  versionComment?: Maybe<Scalars['String']['output']>;
  versionHistory?: Maybe<Scalars['JSON']['output']>;
  versionId: Scalars['String']['output'];
  versionTimestamp?: Maybe<Scalars['Datetime']['output']>;
};


export type TemplateActionQueuesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ActionQueueCondition>;
  filter?: InputMaybe<ActionQueueFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ActionQueuesOrderBy>>;
};


export type TemplateApplicationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationCondition>;
  filter?: InputMaybe<ApplicationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationsOrderBy>>;
};


export type TemplateFilesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<FileCondition>;
  filter?: InputMaybe<FileFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<FilesOrderBy>>;
};


export type TemplateReviewAssignmentsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewAssignmentCondition>;
  filter?: InputMaybe<ReviewAssignmentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewAssignmentsOrderBy>>;
};


export type TemplateTemplateActionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplateActionCondition>;
  filter?: InputMaybe<TemplateActionFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplateActionsOrderBy>>;
};


export type TemplateTemplateFilterJoinsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplateFilterJoinCondition>;
  filter?: InputMaybe<TemplateFilterJoinFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplateFilterJoinsOrderBy>>;
};


export type TemplateTemplatePermissionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplatePermissionCondition>;
  filter?: InputMaybe<TemplatePermissionFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplatePermissionsOrderBy>>;
};


export type TemplateTemplateSectionsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplateSectionCondition>;
  filter?: InputMaybe<TemplateSectionFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplateSectionsOrderBy>>;
};


export type TemplateTemplateStagesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplateStageCondition>;
  filter?: InputMaybe<TemplateStageFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplateStagesOrderBy>>;
};


export type TemplateTriggerSchedulesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TriggerScheduleCondition>;
  filter?: InputMaybe<TriggerScheduleFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TriggerSchedulesOrderBy>>;
};

export type TemplateAction = Node & {
  __typename?: 'TemplateAction';
  actionCode?: Maybe<Scalars['String']['output']>;
  code?: Maybe<Scalars['String']['output']>;
  condition?: Maybe<Scalars['JSON']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  eventCode?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  parameterQueries?: Maybe<Scalars['JSON']['output']>;
  parametersQueriesString?: Maybe<Scalars['String']['output']>;
  sequence?: Maybe<Scalars['Int']['output']>;
  /** Reads a single `Template` that is related to this `TemplateAction`. */
  template?: Maybe<Template>;
  templateId: Scalars['Int']['output'];
  trigger?: Maybe<Trigger>;
};

/**
 * A condition to be used against `TemplateAction` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type TemplateActionCondition = {
  /** Checks for equality with the object’s `actionCode` field. */
  actionCode?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `code` field. */
  code?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `condition` field. */
  condition?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `description` field. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `eventCode` field. */
  eventCode?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `parameterQueries` field. */
  parameterQueries?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `sequence` field. */
  sequence?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `trigger` field. */
  trigger?: InputMaybe<Trigger>;
};

/** A filter to be used against `TemplateAction` object types. All fields are combined with a logical ‘and.’ */
export type TemplateActionFilter = {
  /** Filter by the object’s `actionCode` field. */
  actionCode?: InputMaybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<TemplateActionFilter>>;
  /** Filter by the object’s `code` field. */
  code?: InputMaybe<StringFilter>;
  /** Filter by the object’s `condition` field. */
  condition?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `description` field. */
  description?: InputMaybe<StringFilter>;
  /** Filter by the object’s `eventCode` field. */
  eventCode?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<TemplateActionFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<TemplateActionFilter>>;
  /** Filter by the object’s `parameterQueries` field. */
  parameterQueries?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `parametersQueriesString` field. */
  parametersQueriesString?: InputMaybe<StringFilter>;
  /** Filter by the object’s `sequence` field. */
  sequence?: InputMaybe<IntFilter>;
  /** Filter by the object’s `template` relation. */
  template?: InputMaybe<TemplateFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `trigger` field. */
  trigger?: InputMaybe<TriggerFilter>;
};

/** An input for mutations affecting `TemplateAction` */
export type TemplateActionInput = {
  actionCode?: InputMaybe<Scalars['String']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  condition?: InputMaybe<Scalars['JSON']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  parameterQueries?: InputMaybe<Scalars['JSON']['input']>;
  sequence?: InputMaybe<Scalars['Int']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplateActionTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
};

/** The globally unique `ID` look up for the row to connect. */
export type TemplateActionNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `templateAction` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TemplateActionNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `templateAction` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The fields on `templateAction` to look up the row to update. */
export type TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplateActionPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `templateAction` being updated. */
  patch: UpdateTemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyPatch;
};

/** Represents an update to a `TemplateAction`. Fields that are set will be updated. */
export type TemplateActionPatch = {
  actionCode?: InputMaybe<Scalars['String']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  condition?: InputMaybe<Scalars['JSON']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  parameterQueries?: InputMaybe<Scalars['JSON']['input']>;
  sequence?: InputMaybe<Scalars['Int']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplateActionTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
};

/** The fields on `templateAction` to look up the row to connect. */
export type TemplateActionTemplateActionPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `templateAction` to look up the row to delete. */
export type TemplateActionTemplateActionPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** Input for the nested mutation of `template` in the `TemplateActionInput` mutation. */
export type TemplateActionTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: InputMaybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TemplateNodeIdConnect>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: InputMaybe<TemplateActionTemplateIdFkeyTemplateCreateInput>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: InputMaybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByCodeAndVersionId?: InputMaybe<TemplateOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: InputMaybe<TemplateOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `templateAction` in the `TemplateInput` mutation. */
export type TemplateActionTemplateIdFkeyInverseInput = {
  /** The primary key(s) for `templateAction` for the far side of the relationship. */
  connectById?: InputMaybe<Array<TemplateActionTemplateActionPkeyConnect>>;
  /** The primary key(s) for `templateAction` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<TemplateActionNodeIdConnect>>;
  /** A `TemplateActionInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<TemplateActionTemplateIdFkeyTemplateActionCreateInput>>;
  /** The primary key(s) for `templateAction` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<TemplateActionTemplateActionPkeyDelete>>;
  /** The primary key(s) for `templateAction` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<TemplateActionNodeIdDelete>>;
  /** Flag indicating whether all other `templateAction` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `templateAction` for the far side of the relationship. */
  updateById?: InputMaybe<Array<TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplateActionPkeyUpdate>>;
  /** The primary key(s) and patch data for `templateAction` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TemplateOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate>>;
};

/** The `templateAction` to be created by this mutation. */
export type TemplateActionTemplateIdFkeyTemplateActionCreateInput = {
  actionCode?: InputMaybe<Scalars['String']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  condition?: InputMaybe<Scalars['JSON']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  parameterQueries?: InputMaybe<Scalars['JSON']['input']>;
  sequence?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplateActionTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
};

/** The `template` to be created by this mutation. */
export type TemplateActionTemplateIdFkeyTemplateCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code: Scalars['String']['input'];
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId: Scalars['String']['input'];
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** A connection to a list of `TemplateAction` values. */
export type TemplateActionsConnection = {
  __typename?: 'TemplateActionsConnection';
  /** A list of edges which contains the `TemplateAction` and cursor to aid in pagination. */
  edges: Array<TemplateActionsEdge>;
  /** A list of `TemplateAction` objects. */
  nodes: Array<Maybe<TemplateAction>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TemplateAction` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `TemplateAction` edge in the connection. */
export type TemplateActionsEdge = {
  __typename?: 'TemplateActionsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `TemplateAction` at the end of the edge. */
  node?: Maybe<TemplateAction>;
};

/** Methods to use when ordering `TemplateAction`. */
export enum TemplateActionsOrderBy {
  ActionCodeAsc = 'ACTION_CODE_ASC',
  ActionCodeDesc = 'ACTION_CODE_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ConditionAsc = 'CONDITION_ASC',
  ConditionDesc = 'CONDITION_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  EventCodeAsc = 'EVENT_CODE_ASC',
  EventCodeDesc = 'EVENT_CODE_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  ParameterQueriesAsc = 'PARAMETER_QUERIES_ASC',
  ParameterQueriesDesc = 'PARAMETER_QUERIES_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  SequenceAsc = 'SEQUENCE_ASC',
  SequenceDesc = 'SEQUENCE_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  TriggerAsc = 'TRIGGER_ASC',
  TriggerDesc = 'TRIGGER_DESC'
}

/** A connection to a list of `TemplateCategory` values. */
export type TemplateCategoriesConnection = {
  __typename?: 'TemplateCategoriesConnection';
  /** A list of edges which contains the `TemplateCategory` and cursor to aid in pagination. */
  edges: Array<TemplateCategoriesEdge>;
  /** A list of `TemplateCategory` objects. */
  nodes: Array<Maybe<TemplateCategory>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TemplateCategory` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `TemplateCategory` edge in the connection. */
export type TemplateCategoriesEdge = {
  __typename?: 'TemplateCategoriesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `TemplateCategory` at the end of the edge. */
  node?: Maybe<TemplateCategory>;
};

/** Methods to use when ordering `TemplateCategory`. */
export enum TemplateCategoriesOrderBy {
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  IconAsc = 'ICON_ASC',
  IconDesc = 'ICON_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsSubmenuAsc = 'IS_SUBMENU_ASC',
  IsSubmenuDesc = 'IS_SUBMENU_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  PriorityAsc = 'PRIORITY_ASC',
  PriorityDesc = 'PRIORITY_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  UiLocationAsc = 'UI_LOCATION_ASC',
  UiLocationDesc = 'UI_LOCATION_DESC'
}

export type TemplateCategory = Node & {
  __typename?: 'TemplateCategory';
  code: Scalars['String']['output'];
  icon?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  isSubmenu?: Maybe<Scalars['Boolean']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  priority?: Maybe<Scalars['Int']['output']>;
  /** Reads and enables pagination through a set of `Template`. */
  templates: TemplatesConnection;
  title?: Maybe<Scalars['String']['output']>;
  uiLocation?: Maybe<Array<Maybe<UiLocation>>>;
};


export type TemplateCategoryTemplatesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplateCondition>;
  filter?: InputMaybe<TemplateFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplatesOrderBy>>;
};

/**
 * A condition to be used against `TemplateCategory` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type TemplateCategoryCondition = {
  /** Checks for equality with the object’s `code` field. */
  code?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `icon` field. */
  icon?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isSubmenu` field. */
  isSubmenu?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `priority` field. */
  priority?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `title` field. */
  title?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `uiLocation` field. */
  uiLocation?: InputMaybe<Array<InputMaybe<UiLocation>>>;
};

/** A filter to be used against `TemplateCategory` object types. All fields are combined with a logical ‘and.’ */
export type TemplateCategoryFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<TemplateCategoryFilter>>;
  /** Filter by the object’s `code` field. */
  code?: InputMaybe<StringFilter>;
  /** Filter by the object’s `icon` field. */
  icon?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isSubmenu` field. */
  isSubmenu?: InputMaybe<BooleanFilter>;
  /** Negates the expression. */
  not?: InputMaybe<TemplateCategoryFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<TemplateCategoryFilter>>;
  /** Filter by the object’s `priority` field. */
  priority?: InputMaybe<IntFilter>;
  /** Filter by the object’s `templates` relation. */
  templates?: InputMaybe<TemplateCategoryToManyTemplateFilter>;
  /** Some related `templates` exist. */
  templatesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
  /** Filter by the object’s `uiLocation` field. */
  uiLocation?: InputMaybe<UiLocationListFilter>;
};

/** An input for mutations affecting `TemplateCategory` */
export type TemplateCategoryInput = {
  code: Scalars['String']['input'];
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSubmenu?: InputMaybe<Scalars['Boolean']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  templatesUsingId?: InputMaybe<TemplateTemplateCategoryIdFkeyInverseInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  uiLocation?: InputMaybe<Array<InputMaybe<UiLocation>>>;
};

/** The globally unique `ID` look up for the row to connect. */
export type TemplateCategoryNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `templateCategory` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TemplateCategoryNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `templateCategory` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The fields on `templateCategory` to look up the row to update. */
export type TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCategoryCodeKeyUpdate = {
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `templateCategory` being updated. */
  patch: UpdateTemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyPatch;
};

/** The fields on `templateCategory` to look up the row to update. */
export type TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCategoryPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `templateCategory` being updated. */
  patch: UpdateTemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyPatch;
};

/** Represents an update to a `TemplateCategory`. Fields that are set will be updated. */
export type TemplateCategoryPatch = {
  code?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSubmenu?: InputMaybe<Scalars['Boolean']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  templatesUsingId?: InputMaybe<TemplateTemplateCategoryIdFkeyInverseInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  uiLocation?: InputMaybe<Array<InputMaybe<UiLocation>>>;
};

/** The fields on `templateCategory` to look up the row to connect. */
export type TemplateCategoryTemplateCategoryCodeKeyConnect = {
  code: Scalars['String']['input'];
};

/** The fields on `templateCategory` to look up the row to delete. */
export type TemplateCategoryTemplateCategoryCodeKeyDelete = {
  code: Scalars['String']['input'];
};

/** The fields on `templateCategory` to look up the row to connect. */
export type TemplateCategoryTemplateCategoryPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `templateCategory` to look up the row to delete. */
export type TemplateCategoryTemplateCategoryPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** A filter to be used against many `Template` object types. All fields are combined with a logical ‘and.’ */
export type TemplateCategoryToManyTemplateFilter = {
  /** Every related `Template` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<TemplateFilter>;
  /** No related `Template` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<TemplateFilter>;
  /** Some related `Template` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<TemplateFilter>;
};

/**
 * A condition to be used against `Template` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type TemplateCondition = {
  /** Checks for equality with the object’s `canApplicantMakeChanges` field. */
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `code` field. */
  code?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `dashboardRestrictions` field. */
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `icon` field. */
  icon?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isLinear` field. */
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `name` field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `namePlural` field. */
  namePlural?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `parentVersionId` field. */
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `priority` field. */
  priority?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `serialPattern` field. */
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `startMessage` field. */
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `status` field. */
  status?: InputMaybe<TemplateStatus>;
  /** Checks for equality with the object’s `submissionMessage` field. */
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `templateCategoryId` field. */
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `versionComment` field. */
  versionComment?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `versionHistory` field. */
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `versionId` field. */
  versionId?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `versionTimestamp` field. */
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

export type TemplateElement = Node & {
  __typename?: 'TemplateElement';
  /** Reads and enables pagination through a set of `ApplicationResponse`. */
  applicationResponses: ApplicationResponsesConnection;
  category?: Maybe<TemplateElementCategory>;
  code: Scalars['String']['output'];
  elementTypePluginCode?: Maybe<Scalars['String']['output']>;
  helpText?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  index?: Maybe<Scalars['Int']['output']>;
  initialValue?: Maybe<Scalars['JSON']['output']>;
  isEditable?: Maybe<Scalars['JSON']['output']>;
  isRequired?: Maybe<Scalars['JSON']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  parameters?: Maybe<Scalars['JSON']['output']>;
  parametersString?: Maybe<Scalars['String']['output']>;
  /** Reads and enables pagination through a set of `ReviewResponse`. */
  reviewResponses: ReviewResponsesConnection;
  reviewability: Reviewability;
  /** Reads a single `TemplateSection` that is related to this `TemplateElement`. */
  section?: Maybe<TemplateSection>;
  sectionId: Scalars['Int']['output'];
  templateCode: Scalars['String']['output'];
  templateVersion: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  validation?: Maybe<Scalars['JSON']['output']>;
  validationMessage?: Maybe<Scalars['String']['output']>;
  visibilityCondition?: Maybe<Scalars['JSON']['output']>;
};


export type TemplateElementApplicationResponsesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationResponseCondition>;
  filter?: InputMaybe<ApplicationResponseFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationResponsesOrderBy>>;
};


export type TemplateElementReviewResponsesArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewResponseCondition>;
  filter?: InputMaybe<ReviewResponseFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewResponsesOrderBy>>;
};

export enum TemplateElementCategory {
  Information = 'INFORMATION',
  Question = 'QUESTION'
}

/** A filter to be used against TemplateElementCategory fields. All fields are combined with a logical ‘and.’ */
export type TemplateElementCategoryFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<TemplateElementCategory>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<TemplateElementCategory>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<TemplateElementCategory>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<TemplateElementCategory>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<TemplateElementCategory>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<TemplateElementCategory>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<TemplateElementCategory>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<TemplateElementCategory>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<TemplateElementCategory>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<TemplateElementCategory>>;
};

/**
 * A condition to be used against `TemplateElement` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type TemplateElementCondition = {
  /** Checks for equality with the object’s `category` field. */
  category?: InputMaybe<TemplateElementCategory>;
  /** Checks for equality with the object’s `code` field. */
  code?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `elementTypePluginCode` field. */
  elementTypePluginCode?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `helpText` field. */
  helpText?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `index` field. */
  index?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `initialValue` field. */
  initialValue?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `isEditable` field. */
  isEditable?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `isRequired` field. */
  isRequired?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `parameters` field. */
  parameters?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `reviewability` field. */
  reviewability?: InputMaybe<Reviewability>;
  /** Checks for equality with the object’s `sectionId` field. */
  sectionId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `templateCode` field. */
  templateCode?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `templateVersion` field. */
  templateVersion?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `title` field. */
  title?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `validation` field. */
  validation?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `validationMessage` field. */
  validationMessage?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `visibilityCondition` field. */
  visibilityCondition?: InputMaybe<Scalars['JSON']['input']>;
};

/** A filter to be used against `TemplateElement` object types. All fields are combined with a logical ‘and.’ */
export type TemplateElementFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<TemplateElementFilter>>;
  /** Filter by the object’s `applicationResponses` relation. */
  applicationResponses?: InputMaybe<TemplateElementToManyApplicationResponseFilter>;
  /** Some related `applicationResponses` exist. */
  applicationResponsesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `category` field. */
  category?: InputMaybe<TemplateElementCategoryFilter>;
  /** Filter by the object’s `code` field. */
  code?: InputMaybe<StringFilter>;
  /** Filter by the object’s `elementTypePluginCode` field. */
  elementTypePluginCode?: InputMaybe<StringFilter>;
  /** Filter by the object’s `helpText` field. */
  helpText?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `index` field. */
  index?: InputMaybe<IntFilter>;
  /** Filter by the object’s `initialValue` field. */
  initialValue?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `isEditable` field. */
  isEditable?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `isRequired` field. */
  isRequired?: InputMaybe<JsonFilter>;
  /** Negates the expression. */
  not?: InputMaybe<TemplateElementFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<TemplateElementFilter>>;
  /** Filter by the object’s `parameters` field. */
  parameters?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `parametersString` field. */
  parametersString?: InputMaybe<StringFilter>;
  /** Filter by the object’s `reviewResponses` relation. */
  reviewResponses?: InputMaybe<TemplateElementToManyReviewResponseFilter>;
  /** Some related `reviewResponses` exist. */
  reviewResponsesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `reviewability` field. */
  reviewability?: InputMaybe<ReviewabilityFilter>;
  /** Filter by the object’s `section` relation. */
  section?: InputMaybe<TemplateSectionFilter>;
  /** Filter by the object’s `sectionId` field. */
  sectionId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `templateCode` field. */
  templateCode?: InputMaybe<StringFilter>;
  /** Filter by the object’s `templateVersion` field. */
  templateVersion?: InputMaybe<StringFilter>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
  /** Filter by the object’s `validation` field. */
  validation?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `validationMessage` field. */
  validationMessage?: InputMaybe<StringFilter>;
  /** Filter by the object’s `visibilityCondition` field. */
  visibilityCondition?: InputMaybe<JsonFilter>;
};

/** An input for mutations affecting `TemplateElement` */
export type TemplateElementInput = {
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseTemplateElementIdFkeyInverseInput>;
  category?: InputMaybe<TemplateElementCategory>;
  code: Scalars['String']['input'];
  elementTypePluginCode?: InputMaybe<Scalars['String']['input']>;
  helpText?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  index?: InputMaybe<Scalars['Int']['input']>;
  initialValue?: InputMaybe<Scalars['JSON']['input']>;
  isEditable?: InputMaybe<Scalars['JSON']['input']>;
  isRequired?: InputMaybe<Scalars['JSON']['input']>;
  parameters?: InputMaybe<Scalars['JSON']['input']>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInverseInput>;
  reviewability?: InputMaybe<Reviewability>;
  sectionId?: InputMaybe<Scalars['Int']['input']>;
  templateCode: Scalars['String']['input'];
  templateSectionToSectionId?: InputMaybe<TemplateElementSectionIdFkeyInput>;
  templateVersion: Scalars['String']['input'];
  title?: InputMaybe<Scalars['String']['input']>;
  validation?: InputMaybe<Scalars['JSON']['input']>;
  validationMessage?: InputMaybe<Scalars['String']['input']>;
  visibilityCondition?: InputMaybe<Scalars['JSON']['input']>;
};

/** The globally unique `ID` look up for the row to connect. */
export type TemplateElementNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `templateElement` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TemplateElementNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `templateElement` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationResponse` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `applicationResponse` being updated. */
  patch: ApplicationResponsePatch;
};

/** The fields on `templateElement` to look up the row to update. */
export type TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingTemplateElementPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `templateElement` being updated. */
  patch: UpdateTemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyPatch;
};

/** The fields on `templateElement` to look up the row to update. */
export type TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate = {
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `templateElement` being updated. */
  patch: UpdateTemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyPatch;
  templateCode: Scalars['String']['input'];
  templateVersion: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewResponse` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewResponse` being updated. */
  patch: ReviewResponsePatch;
};

/** The fields on `templateElement` to look up the row to update. */
export type TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingTemplateElementPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `templateElement` being updated. */
  patch: UpdateTemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyPatch;
};

/** The fields on `templateElement` to look up the row to update. */
export type TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate = {
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `templateElement` being updated. */
  patch: UpdateTemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyPatch;
  templateCode: Scalars['String']['input'];
  templateVersion: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateSection` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `templateSection` being updated. */
  patch: TemplateSectionPatch;
};

/** The fields on `templateElement` to look up the row to update. */
export type TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateElementPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `templateElement` being updated. */
  patch: UpdateTemplateElementOnTemplateElementForTemplateElementSectionIdFkeyPatch;
};

/** The fields on `templateElement` to look up the row to update. */
export type TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate = {
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `templateElement` being updated. */
  patch: UpdateTemplateElementOnTemplateElementForTemplateElementSectionIdFkeyPatch;
  templateCode: Scalars['String']['input'];
  templateVersion: Scalars['String']['input'];
};

/** Represents an update to a `TemplateElement`. Fields that are set will be updated. */
export type TemplateElementPatch = {
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseTemplateElementIdFkeyInverseInput>;
  category?: InputMaybe<TemplateElementCategory>;
  code?: InputMaybe<Scalars['String']['input']>;
  elementTypePluginCode?: InputMaybe<Scalars['String']['input']>;
  helpText?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  index?: InputMaybe<Scalars['Int']['input']>;
  initialValue?: InputMaybe<Scalars['JSON']['input']>;
  isEditable?: InputMaybe<Scalars['JSON']['input']>;
  isRequired?: InputMaybe<Scalars['JSON']['input']>;
  parameters?: InputMaybe<Scalars['JSON']['input']>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInverseInput>;
  reviewability?: InputMaybe<Reviewability>;
  sectionId?: InputMaybe<Scalars['Int']['input']>;
  templateCode?: InputMaybe<Scalars['String']['input']>;
  templateSectionToSectionId?: InputMaybe<TemplateElementSectionIdFkeyInput>;
  templateVersion?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  validation?: InputMaybe<Scalars['JSON']['input']>;
  validationMessage?: InputMaybe<Scalars['String']['input']>;
  visibilityCondition?: InputMaybe<Scalars['JSON']['input']>;
};

/** Input for the nested mutation of `templateSection` in the `TemplateElementInput` mutation. */
export type TemplateElementSectionIdFkeyInput = {
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  connectById?: InputMaybe<TemplateSectionTemplateSectionPkeyConnect>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TemplateSectionNodeIdConnect>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  connectByTemplateIdAndCode?: InputMaybe<TemplateSectionTemplateSectionTemplateIdCodeKeyConnect>;
  /** A `TemplateSectionInput` object that will be created and connected to this object. */
  create?: InputMaybe<TemplateElementSectionIdFkeyTemplateSectionCreateInput>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  deleteById?: InputMaybe<TemplateSectionTemplateSectionPkeyDelete>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TemplateSectionNodeIdDelete>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  deleteByTemplateIdAndCode?: InputMaybe<TemplateSectionTemplateSectionTemplateIdCodeKeyDelete>;
  /** The primary key(s) and patch data for `templateSection` for the far side of the relationship. */
  updateById?: InputMaybe<TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateSectionPkeyUpdate>;
  /** The primary key(s) and patch data for `templateSection` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `templateSection` for the far side of the relationship. */
  updateByTemplateIdAndCode?: InputMaybe<TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateSectionTemplateIdCodeKeyUpdate>;
};

/** Input for the nested mutation of `templateElement` in the `TemplateSectionInput` mutation. */
export type TemplateElementSectionIdFkeyInverseInput = {
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  connectById?: InputMaybe<Array<TemplateElementTemplateElementPkeyConnect>>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<TemplateElementNodeIdConnect>>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  connectByTemplateCodeAndCodeAndTemplateVersion?: InputMaybe<Array<TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyConnect>>;
  /** A `TemplateElementInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<TemplateElementSectionIdFkeyTemplateElementCreateInput>>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<TemplateElementTemplateElementPkeyDelete>>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<TemplateElementNodeIdDelete>>;
  /** The primary key(s) for `templateElement` for the far side of the relationship. */
  deleteByTemplateCodeAndCodeAndTemplateVersion?: InputMaybe<Array<TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyDelete>>;
  /** Flag indicating whether all other `templateElement` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `templateElement` for the far side of the relationship. */
  updateById?: InputMaybe<Array<TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateElementPkeyUpdate>>;
  /** The primary key(s) and patch data for `templateElement` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate>>;
  /** The primary key(s) and patch data for `templateElement` for the far side of the relationship. */
  updateByTemplateCodeAndCodeAndTemplateVersion?: InputMaybe<Array<TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate>>;
};

/** The `templateElement` to be created by this mutation. */
export type TemplateElementSectionIdFkeyTemplateElementCreateInput = {
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseTemplateElementIdFkeyInverseInput>;
  category?: InputMaybe<TemplateElementCategory>;
  code: Scalars['String']['input'];
  elementTypePluginCode?: InputMaybe<Scalars['String']['input']>;
  helpText?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  index?: InputMaybe<Scalars['Int']['input']>;
  initialValue?: InputMaybe<Scalars['JSON']['input']>;
  isEditable?: InputMaybe<Scalars['JSON']['input']>;
  isRequired?: InputMaybe<Scalars['JSON']['input']>;
  parameters?: InputMaybe<Scalars['JSON']['input']>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInverseInput>;
  reviewability?: InputMaybe<Reviewability>;
  templateCode: Scalars['String']['input'];
  templateSectionToSectionId?: InputMaybe<TemplateElementSectionIdFkeyInput>;
  templateVersion: Scalars['String']['input'];
  title?: InputMaybe<Scalars['String']['input']>;
  validation?: InputMaybe<Scalars['JSON']['input']>;
  validationMessage?: InputMaybe<Scalars['String']['input']>;
  visibilityCondition?: InputMaybe<Scalars['JSON']['input']>;
};

/** The `templateSection` to be created by this mutation. */
export type TemplateElementSectionIdFkeyTemplateSectionCreateInput = {
  code?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  index?: InputMaybe<Scalars['Int']['input']>;
  templateElementsUsingId?: InputMaybe<TemplateElementSectionIdFkeyInverseInput>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplateSectionTemplateIdFkeyInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The fields on `templateElement` to look up the row to connect. */
export type TemplateElementTemplateElementPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `templateElement` to look up the row to delete. */
export type TemplateElementTemplateElementPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** The fields on `templateElement` to look up the row to connect. */
export type TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyConnect = {
  code: Scalars['String']['input'];
  templateCode: Scalars['String']['input'];
  templateVersion: Scalars['String']['input'];
};

/** The fields on `templateElement` to look up the row to delete. */
export type TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyDelete = {
  code: Scalars['String']['input'];
  templateCode: Scalars['String']['input'];
  templateVersion: Scalars['String']['input'];
};

/** A filter to be used against many `ApplicationResponse` object types. All fields are combined with a logical ‘and.’ */
export type TemplateElementToManyApplicationResponseFilter = {
  /** Every related `ApplicationResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ApplicationResponseFilter>;
  /** No related `ApplicationResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ApplicationResponseFilter>;
  /** Some related `ApplicationResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ApplicationResponseFilter>;
};

/** A filter to be used against many `ReviewResponse` object types. All fields are combined with a logical ‘and.’ */
export type TemplateElementToManyReviewResponseFilter = {
  /** Every related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ReviewResponseFilter>;
  /** No related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ReviewResponseFilter>;
  /** Some related `ReviewResponse` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ReviewResponseFilter>;
};

/** A connection to a list of `TemplateElement` values. */
export type TemplateElementsConnection = {
  __typename?: 'TemplateElementsConnection';
  /** A list of edges which contains the `TemplateElement` and cursor to aid in pagination. */
  edges: Array<TemplateElementsEdge>;
  /** A list of `TemplateElement` objects. */
  nodes: Array<Maybe<TemplateElement>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TemplateElement` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `TemplateElement` edge in the connection. */
export type TemplateElementsEdge = {
  __typename?: 'TemplateElementsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `TemplateElement` at the end of the edge. */
  node?: Maybe<TemplateElement>;
};

/** Methods to use when ordering `TemplateElement`. */
export enum TemplateElementsOrderBy {
  CategoryAsc = 'CATEGORY_ASC',
  CategoryDesc = 'CATEGORY_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ElementTypePluginCodeAsc = 'ELEMENT_TYPE_PLUGIN_CODE_ASC',
  ElementTypePluginCodeDesc = 'ELEMENT_TYPE_PLUGIN_CODE_DESC',
  HelpTextAsc = 'HELP_TEXT_ASC',
  HelpTextDesc = 'HELP_TEXT_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexAsc = 'INDEX_ASC',
  IndexDesc = 'INDEX_DESC',
  InitialValueAsc = 'INITIAL_VALUE_ASC',
  InitialValueDesc = 'INITIAL_VALUE_DESC',
  IsEditableAsc = 'IS_EDITABLE_ASC',
  IsEditableDesc = 'IS_EDITABLE_DESC',
  IsRequiredAsc = 'IS_REQUIRED_ASC',
  IsRequiredDesc = 'IS_REQUIRED_DESC',
  Natural = 'NATURAL',
  ParametersAsc = 'PARAMETERS_ASC',
  ParametersDesc = 'PARAMETERS_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  ReviewabilityAsc = 'REVIEWABILITY_ASC',
  ReviewabilityDesc = 'REVIEWABILITY_DESC',
  SectionIdAsc = 'SECTION_ID_ASC',
  SectionIdDesc = 'SECTION_ID_DESC',
  TemplateCodeAsc = 'TEMPLATE_CODE_ASC',
  TemplateCodeDesc = 'TEMPLATE_CODE_DESC',
  TemplateVersionAsc = 'TEMPLATE_VERSION_ASC',
  TemplateVersionDesc = 'TEMPLATE_VERSION_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC',
  ValidationAsc = 'VALIDATION_ASC',
  ValidationDesc = 'VALIDATION_DESC',
  ValidationMessageAsc = 'VALIDATION_MESSAGE_ASC',
  ValidationMessageDesc = 'VALIDATION_MESSAGE_DESC',
  VisibilityConditionAsc = 'VISIBILITY_CONDITION_ASC',
  VisibilityConditionDesc = 'VISIBILITY_CONDITION_DESC'
}

/** A filter to be used against `Template` object types. All fields are combined with a logical ‘and.’ */
export type TemplateFilter = {
  /** Filter by the object’s `actionQueues` relation. */
  actionQueues?: InputMaybe<TemplateToManyActionQueueFilter>;
  /** Some related `actionQueues` exist. */
  actionQueuesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<TemplateFilter>>;
  /** Filter by the object’s `applications` relation. */
  applications?: InputMaybe<TemplateToManyApplicationFilter>;
  /** Some related `applications` exist. */
  applicationsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `canApplicantMakeChanges` field. */
  canApplicantMakeChanges?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `code` field. */
  code?: InputMaybe<StringFilter>;
  /** Filter by the object’s `dashboardRestrictions` field. */
  dashboardRestrictions?: InputMaybe<StringListFilter>;
  /** Filter by the object’s `files` relation. */
  files?: InputMaybe<TemplateToManyFileFilter>;
  /** Some related `files` exist. */
  filesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `icon` field. */
  icon?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isLinear` field. */
  isLinear?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `name` field. */
  name?: InputMaybe<StringFilter>;
  /** Filter by the object’s `namePlural` field. */
  namePlural?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<TemplateFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<TemplateFilter>>;
  /** Filter by the object’s `parentVersionId` field. */
  parentVersionId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `priority` field. */
  priority?: InputMaybe<IntFilter>;
  /** Filter by the object’s `reviewAssignments` relation. */
  reviewAssignments?: InputMaybe<TemplateToManyReviewAssignmentFilter>;
  /** Some related `reviewAssignments` exist. */
  reviewAssignmentsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `serialPattern` field. */
  serialPattern?: InputMaybe<StringFilter>;
  /** Filter by the object’s `startMessage` field. */
  startMessage?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `status` field. */
  status?: InputMaybe<TemplateStatusFilter>;
  /** Filter by the object’s `submissionMessage` field. */
  submissionMessage?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `templateActions` relation. */
  templateActions?: InputMaybe<TemplateToManyTemplateActionFilter>;
  /** Some related `templateActions` exist. */
  templateActionsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `templateCategory` relation. */
  templateCategory?: InputMaybe<TemplateCategoryFilter>;
  /** A related `templateCategory` exists. */
  templateCategoryExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `templateCategoryId` field. */
  templateCategoryId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `templateFilterJoins` relation. */
  templateFilterJoins?: InputMaybe<TemplateToManyTemplateFilterJoinFilter>;
  /** Some related `templateFilterJoins` exist. */
  templateFilterJoinsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `templatePermissions` relation. */
  templatePermissions?: InputMaybe<TemplateToManyTemplatePermissionFilter>;
  /** Some related `templatePermissions` exist. */
  templatePermissionsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `templateSections` relation. */
  templateSections?: InputMaybe<TemplateToManyTemplateSectionFilter>;
  /** Some related `templateSections` exist. */
  templateSectionsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `templateStages` relation. */
  templateStages?: InputMaybe<TemplateToManyTemplateStageFilter>;
  /** Some related `templateStages` exist. */
  templateStagesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `triggerSchedules` relation. */
  triggerSchedules?: InputMaybe<TemplateToManyTriggerScheduleFilter>;
  /** Some related `triggerSchedules` exist. */
  triggerSchedulesExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `versionComment` field. */
  versionComment?: InputMaybe<StringFilter>;
  /** Filter by the object’s `versionHistory` field. */
  versionHistory?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `versionId` field. */
  versionId?: InputMaybe<StringFilter>;
  /** Filter by the object’s `versionTimestamp` field. */
  versionTimestamp?: InputMaybe<DatetimeFilter>;
};

export type TemplateFilterJoin = Node & {
  __typename?: 'TemplateFilterJoin';
  /** Reads a single `Filter` that is related to this `TemplateFilterJoin`. */
  filter?: Maybe<Filter>;
  filterId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Template` that is related to this `TemplateFilterJoin`. */
  template?: Maybe<Template>;
  templateId: Scalars['Int']['output'];
};

/**
 * A condition to be used against `TemplateFilterJoin` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type TemplateFilterJoinCondition = {
  /** Checks for equality with the object’s `filterId` field. */
  filterId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: InputMaybe<Scalars['Int']['input']>;
};

/** A filter to be used against `TemplateFilterJoin` object types. All fields are combined with a logical ‘and.’ */
export type TemplateFilterJoinFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<TemplateFilterJoinFilter>>;
  /** Filter by the object’s `filter` relation. */
  filter?: InputMaybe<FilterFilter>;
  /** Filter by the object’s `filterId` field. */
  filterId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<TemplateFilterJoinFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<TemplateFilterJoinFilter>>;
  /** Filter by the object’s `template` relation. */
  template?: InputMaybe<TemplateFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: InputMaybe<IntFilter>;
};

/** The `filter` to be created by this mutation. */
export type TemplateFilterJoinFilterIdFkeyFilterCreateInput = {
  code: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['JSON']['input']>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinFilterIdFkeyInverseInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  userRole?: InputMaybe<PermissionPolicyType>;
};

/** Input for the nested mutation of `filter` in the `TemplateFilterJoinInput` mutation. */
export type TemplateFilterJoinFilterIdFkeyInput = {
  /** The primary key(s) for `filter` for the far side of the relationship. */
  connectByCode?: InputMaybe<FilterFilterCodeKeyConnect>;
  /** The primary key(s) for `filter` for the far side of the relationship. */
  connectById?: InputMaybe<FilterFilterPkeyConnect>;
  /** The primary key(s) for `filter` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<FilterNodeIdConnect>;
  /** A `FilterInput` object that will be created and connected to this object. */
  create?: InputMaybe<TemplateFilterJoinFilterIdFkeyFilterCreateInput>;
  /** The primary key(s) for `filter` for the far side of the relationship. */
  deleteByCode?: InputMaybe<FilterFilterCodeKeyDelete>;
  /** The primary key(s) for `filter` for the far side of the relationship. */
  deleteById?: InputMaybe<FilterFilterPkeyDelete>;
  /** The primary key(s) for `filter` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<FilterNodeIdDelete>;
  /** The primary key(s) and patch data for `filter` for the far side of the relationship. */
  updateByCode?: InputMaybe<FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingFilterCodeKeyUpdate>;
  /** The primary key(s) and patch data for `filter` for the far side of the relationship. */
  updateById?: InputMaybe<FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingFilterPkeyUpdate>;
  /** The primary key(s) and patch data for `filter` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `templateFilterJoin` in the `FilterInput` mutation. */
export type TemplateFilterJoinFilterIdFkeyInverseInput = {
  /** The primary key(s) for `templateFilterJoin` for the far side of the relationship. */
  connectById?: InputMaybe<Array<TemplateFilterJoinTemplateFilterJoinPkeyConnect>>;
  /** The primary key(s) for `templateFilterJoin` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<TemplateFilterJoinNodeIdConnect>>;
  /** A `TemplateFilterJoinInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<TemplateFilterJoinFilterIdFkeyTemplateFilterJoinCreateInput>>;
  /** The primary key(s) for `templateFilterJoin` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<TemplateFilterJoinTemplateFilterJoinPkeyDelete>>;
  /** The primary key(s) for `templateFilterJoin` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<TemplateFilterJoinNodeIdDelete>>;
  /** Flag indicating whether all other `templateFilterJoin` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `templateFilterJoin` for the far side of the relationship. */
  updateById?: InputMaybe<Array<TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingTemplateFilterJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `templateFilterJoin` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyNodeIdUpdate>>;
};

/** The `templateFilterJoin` to be created by this mutation. */
export type TemplateFilterJoinFilterIdFkeyTemplateFilterJoinCreateInput = {
  filterToFilterId?: InputMaybe<TemplateFilterJoinFilterIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInput>;
};

/** An input for mutations affecting `TemplateFilterJoin` */
export type TemplateFilterJoinInput = {
  filterId?: InputMaybe<Scalars['Int']['input']>;
  filterToFilterId?: InputMaybe<TemplateFilterJoinFilterIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to connect. */
export type TemplateFilterJoinNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `templateFilterJoin` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TemplateFilterJoinNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `templateFilterJoin` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `filter` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `filter` being updated. */
  patch: FilterPatch;
};

/** The fields on `templateFilterJoin` to look up the row to update. */
export type TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingTemplateFilterJoinPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `templateFilterJoin` being updated. */
  patch: UpdateTemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The fields on `templateFilterJoin` to look up the row to update. */
export type TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplateFilterJoinPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `templateFilterJoin` being updated. */
  patch: UpdateTemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyPatch;
};

/** Represents an update to a `TemplateFilterJoin`. Fields that are set will be updated. */
export type TemplateFilterJoinPatch = {
  filterId?: InputMaybe<Scalars['Int']['input']>;
  filterToFilterId?: InputMaybe<TemplateFilterJoinFilterIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInput>;
};

/** The fields on `templateFilterJoin` to look up the row to connect. */
export type TemplateFilterJoinTemplateFilterJoinPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `templateFilterJoin` to look up the row to delete. */
export type TemplateFilterJoinTemplateFilterJoinPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** Input for the nested mutation of `template` in the `TemplateFilterJoinInput` mutation. */
export type TemplateFilterJoinTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: InputMaybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TemplateNodeIdConnect>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: InputMaybe<TemplateFilterJoinTemplateIdFkeyTemplateCreateInput>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: InputMaybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByCodeAndVersionId?: InputMaybe<TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: InputMaybe<TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `templateFilterJoin` in the `TemplateInput` mutation. */
export type TemplateFilterJoinTemplateIdFkeyInverseInput = {
  /** The primary key(s) for `templateFilterJoin` for the far side of the relationship. */
  connectById?: InputMaybe<Array<TemplateFilterJoinTemplateFilterJoinPkeyConnect>>;
  /** The primary key(s) for `templateFilterJoin` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<TemplateFilterJoinNodeIdConnect>>;
  /** A `TemplateFilterJoinInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<TemplateFilterJoinTemplateIdFkeyTemplateFilterJoinCreateInput>>;
  /** The primary key(s) for `templateFilterJoin` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<TemplateFilterJoinTemplateFilterJoinPkeyDelete>>;
  /** The primary key(s) for `templateFilterJoin` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<TemplateFilterJoinNodeIdDelete>>;
  /** Flag indicating whether all other `templateFilterJoin` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `templateFilterJoin` for the far side of the relationship. */
  updateById?: InputMaybe<Array<TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplateFilterJoinPkeyUpdate>>;
  /** The primary key(s) and patch data for `templateFilterJoin` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyNodeIdUpdate>>;
};

/** The `template` to be created by this mutation. */
export type TemplateFilterJoinTemplateIdFkeyTemplateCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code: Scalars['String']['input'];
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId: Scalars['String']['input'];
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The `templateFilterJoin` to be created by this mutation. */
export type TemplateFilterJoinTemplateIdFkeyTemplateFilterJoinCreateInput = {
  filterId?: InputMaybe<Scalars['Int']['input']>;
  filterToFilterId?: InputMaybe<TemplateFilterJoinFilterIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInput>;
};

/** A connection to a list of `TemplateFilterJoin` values. */
export type TemplateFilterJoinsConnection = {
  __typename?: 'TemplateFilterJoinsConnection';
  /** A list of edges which contains the `TemplateFilterJoin` and cursor to aid in pagination. */
  edges: Array<TemplateFilterJoinsEdge>;
  /** A list of `TemplateFilterJoin` objects. */
  nodes: Array<Maybe<TemplateFilterJoin>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TemplateFilterJoin` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `TemplateFilterJoin` edge in the connection. */
export type TemplateFilterJoinsEdge = {
  __typename?: 'TemplateFilterJoinsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `TemplateFilterJoin` at the end of the edge. */
  node?: Maybe<TemplateFilterJoin>;
};

/** Methods to use when ordering `TemplateFilterJoin`. */
export enum TemplateFilterJoinsOrderBy {
  FilterIdAsc = 'FILTER_ID_ASC',
  FilterIdDesc = 'FILTER_ID_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC'
}

/** An input for mutations affecting `Template` */
export type TemplateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code: Scalars['String']['input'];
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId: Scalars['String']['input'];
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The globally unique `ID` look up for the row to connect. */
export type TemplateNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TemplateNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `template` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnActionQueueForActionQueueTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `actionQueue` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `actionQueue` being updated. */
  patch: ActionQueuePatch;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnActionQueueForActionQueueTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate = {
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnActionQueueForActionQueueTemplateIdFkeyPatch;
  versionId: Scalars['String']['input'];
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnActionQueueForActionQueueTemplateIdFkeyUsingTemplatePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnActionQueueForActionQueueTemplateIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnApplicationForApplicationTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate = {
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnApplicationForApplicationTemplateIdFkeyPatch;
  versionId: Scalars['String']['input'];
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnApplicationForApplicationTemplateIdFkeyUsingTemplatePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnApplicationForApplicationTemplateIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnFileForFileTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `file` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `file` being updated. */
  patch: FilePatch;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnFileForFileTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate = {
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnFileForFileTemplateIdFkeyPatch;
  versionId: Scalars['String']['input'];
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnFileForFileTemplateIdFkeyUsingTemplatePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnFileForFileTemplateIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate = {
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyPatch;
  versionId: Scalars['String']['input'];
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingTemplatePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateAction` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `templateAction` being updated. */
  patch: TemplateActionPatch;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate = {
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTemplateActionForTemplateActionTemplateIdFkeyPatch;
  versionId: Scalars['String']['input'];
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplatePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTemplateActionForTemplateActionTemplateIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateFilterJoin` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `templateFilterJoin` being updated. */
  patch: TemplateFilterJoinPatch;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate = {
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyPatch;
  versionId: Scalars['String']['input'];
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplatePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnTemplateForTemplateTemplateCategoryIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateCategory` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `templateCategory` being updated. */
  patch: TemplateCategoryPatch;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCodeVersionIdKeyUpdate = {
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTemplateForTemplateTemplateCategoryIdFkeyPatch;
  versionId: Scalars['String']['input'];
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplatePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTemplateForTemplateTemplateCategoryIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templatePermission` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `templatePermission` being updated. */
  patch: TemplatePermissionPatch;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate = {
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch;
  versionId: Scalars['String']['input'];
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateSection` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `templateSection` being updated. */
  patch: TemplateSectionPatch;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate = {
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch;
  versionId: Scalars['String']['input'];
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplatePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnTemplateStageForTemplateStageTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateStage` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `templateStage` being updated. */
  patch: TemplateStagePatch;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate = {
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTemplateStageForTemplateStageTemplateIdFkeyPatch;
  versionId: Scalars['String']['input'];
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplatePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTemplateStageForTemplateStageTemplateIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `triggerSchedule` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `triggerSchedule` being updated. */
  patch: TriggerSchedulePatch;
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate = {
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyPatch;
  versionId: Scalars['String']['input'];
};

/** The fields on `template` to look up the row to update. */
export type TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTemplatePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: UpdateTemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyPatch;
};

/** Represents an update to a `Template`. Fields that are set will be updated. */
export type TemplatePatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId?: InputMaybe<Scalars['String']['input']>;
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

export type TemplatePermission = Node & {
  __typename?: 'TemplatePermission';
  allowedSections?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  canMakeFinalDecision: Scalars['Boolean']['output'];
  canSelfAssign: Scalars['Boolean']['output'];
  id: Scalars['Int']['output'];
  levelNumber?: Maybe<Scalars['Int']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `PermissionName` that is related to this `TemplatePermission`. */
  permissionName?: Maybe<PermissionName>;
  permissionNameId?: Maybe<Scalars['Int']['output']>;
  restrictions?: Maybe<Scalars['JSON']['output']>;
  stageNumber?: Maybe<Scalars['Int']['output']>;
  /** Reads a single `Template` that is related to this `TemplatePermission`. */
  template?: Maybe<Template>;
  templateId: Scalars['Int']['output'];
};

/**
 * A condition to be used against `TemplatePermission` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type TemplatePermissionCondition = {
  /** Checks for equality with the object’s `allowedSections` field. */
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** Checks for equality with the object’s `canMakeFinalDecision` field. */
  canMakeFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `canSelfAssign` field. */
  canSelfAssign?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `levelNumber` field. */
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `permissionNameId` field. */
  permissionNameId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `restrictions` field. */
  restrictions?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `stageNumber` field. */
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: InputMaybe<Scalars['Int']['input']>;
};

/** A filter to be used against `TemplatePermission` object types. All fields are combined with a logical ‘and.’ */
export type TemplatePermissionFilter = {
  /** Filter by the object’s `allowedSections` field. */
  allowedSections?: InputMaybe<StringListFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<TemplatePermissionFilter>>;
  /** Filter by the object’s `canMakeFinalDecision` field. */
  canMakeFinalDecision?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `canSelfAssign` field. */
  canSelfAssign?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `levelNumber` field. */
  levelNumber?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<TemplatePermissionFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<TemplatePermissionFilter>>;
  /** Filter by the object’s `permissionName` relation. */
  permissionName?: InputMaybe<PermissionNameFilter>;
  /** A related `permissionName` exists. */
  permissionNameExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `permissionNameId` field. */
  permissionNameId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `restrictions` field. */
  restrictions?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `stageNumber` field. */
  stageNumber?: InputMaybe<IntFilter>;
  /** Filter by the object’s `template` relation. */
  template?: InputMaybe<TemplateFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: InputMaybe<IntFilter>;
};

/** An input for mutations affecting `TemplatePermission` */
export type TemplatePermissionInput = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  canMakeFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  canSelfAssign?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  permissionNameId?: InputMaybe<Scalars['Int']['input']>;
  permissionNameToPermissionNameId?: InputMaybe<TemplatePermissionPermissionNameIdFkeyInput>;
  restrictions?: InputMaybe<Scalars['JSON']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplatePermissionTemplateIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to connect. */
export type TemplatePermissionNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `templatePermission` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TemplatePermissionNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `templatePermission` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `permissionName` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `permissionName` being updated. */
  patch: PermissionNamePatch;
};

/** The fields on `templatePermission` to look up the row to update. */
export type TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingTemplatePermissionPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `templatePermission` being updated. */
  patch: UpdateTemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The fields on `templatePermission` to look up the row to update. */
export type TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePermissionPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `templatePermission` being updated. */
  patch: UpdateTemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch;
};

/** Represents an update to a `TemplatePermission`. Fields that are set will be updated. */
export type TemplatePermissionPatch = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  canMakeFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  canSelfAssign?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  permissionNameId?: InputMaybe<Scalars['Int']['input']>;
  permissionNameToPermissionNameId?: InputMaybe<TemplatePermissionPermissionNameIdFkeyInput>;
  restrictions?: InputMaybe<Scalars['JSON']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplatePermissionTemplateIdFkeyInput>;
};

/** Input for the nested mutation of `permissionName` in the `TemplatePermissionInput` mutation. */
export type TemplatePermissionPermissionNameIdFkeyInput = {
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  connectById?: InputMaybe<PermissionNamePermissionNamePkeyConnect>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  connectByName?: InputMaybe<PermissionNamePermissionNameNameKeyConnect>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<PermissionNameNodeIdConnect>;
  /** A `PermissionNameInput` object that will be created and connected to this object. */
  create?: InputMaybe<TemplatePermissionPermissionNameIdFkeyPermissionNameCreateInput>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  deleteById?: InputMaybe<PermissionNamePermissionNamePkeyDelete>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  deleteByName?: InputMaybe<PermissionNamePermissionNameNameKeyDelete>;
  /** The primary key(s) for `permissionName` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<PermissionNameNodeIdDelete>;
  /** The primary key(s) and patch data for `permissionName` for the far side of the relationship. */
  updateById?: InputMaybe<PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingPermissionNamePkeyUpdate>;
  /** The primary key(s) and patch data for `permissionName` for the far side of the relationship. */
  updateByName?: InputMaybe<PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingPermissionNameNameKeyUpdate>;
  /** The primary key(s) and patch data for `permissionName` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `templatePermission` in the `PermissionNameInput` mutation. */
export type TemplatePermissionPermissionNameIdFkeyInverseInput = {
  /** The primary key(s) for `templatePermission` for the far side of the relationship. */
  connectById?: InputMaybe<Array<TemplatePermissionTemplatePermissionPkeyConnect>>;
  /** The primary key(s) for `templatePermission` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<TemplatePermissionNodeIdConnect>>;
  /** A `TemplatePermissionInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<TemplatePermissionPermissionNameIdFkeyTemplatePermissionCreateInput>>;
  /** The primary key(s) for `templatePermission` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<TemplatePermissionTemplatePermissionPkeyDelete>>;
  /** The primary key(s) for `templatePermission` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<TemplatePermissionNodeIdDelete>>;
  /** Flag indicating whether all other `templatePermission` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `templatePermission` for the far side of the relationship. */
  updateById?: InputMaybe<Array<TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingTemplatePermissionPkeyUpdate>>;
  /** The primary key(s) and patch data for `templatePermission` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyNodeIdUpdate>>;
};

/** The `permissionName` to be created by this mutation. */
export type TemplatePermissionPermissionNameIdFkeyPermissionNameCreateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrgPermission?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinPermissionNameIdFkeyInverseInput>;
  permissionPolicyId?: InputMaybe<Scalars['Int']['input']>;
  permissionPolicyToPermissionPolicyId?: InputMaybe<PermissionNamePermissionPolicyIdFkeyInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionPermissionNameIdFkeyInverseInput>;
};

/** The `templatePermission` to be created by this mutation. */
export type TemplatePermissionPermissionNameIdFkeyTemplatePermissionCreateInput = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  canMakeFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  canSelfAssign?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  permissionNameToPermissionNameId?: InputMaybe<TemplatePermissionPermissionNameIdFkeyInput>;
  restrictions?: InputMaybe<Scalars['JSON']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplatePermissionTemplateIdFkeyInput>;
};

/** Input for the nested mutation of `template` in the `TemplatePermissionInput` mutation. */
export type TemplatePermissionTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: InputMaybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TemplateNodeIdConnect>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: InputMaybe<TemplatePermissionTemplateIdFkeyTemplateCreateInput>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: InputMaybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByCodeAndVersionId?: InputMaybe<TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: InputMaybe<TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `templatePermission` in the `TemplateInput` mutation. */
export type TemplatePermissionTemplateIdFkeyInverseInput = {
  /** The primary key(s) for `templatePermission` for the far side of the relationship. */
  connectById?: InputMaybe<Array<TemplatePermissionTemplatePermissionPkeyConnect>>;
  /** The primary key(s) for `templatePermission` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<TemplatePermissionNodeIdConnect>>;
  /** A `TemplatePermissionInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<TemplatePermissionTemplateIdFkeyTemplatePermissionCreateInput>>;
  /** The primary key(s) for `templatePermission` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<TemplatePermissionTemplatePermissionPkeyDelete>>;
  /** The primary key(s) for `templatePermission` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<TemplatePermissionNodeIdDelete>>;
  /** Flag indicating whether all other `templatePermission` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `templatePermission` for the far side of the relationship. */
  updateById?: InputMaybe<Array<TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePermissionPkeyUpdate>>;
  /** The primary key(s) and patch data for `templatePermission` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate>>;
};

/** The `template` to be created by this mutation. */
export type TemplatePermissionTemplateIdFkeyTemplateCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code: Scalars['String']['input'];
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId: Scalars['String']['input'];
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The `templatePermission` to be created by this mutation. */
export type TemplatePermissionTemplateIdFkeyTemplatePermissionCreateInput = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  canMakeFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  canSelfAssign?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  permissionNameId?: InputMaybe<Scalars['Int']['input']>;
  permissionNameToPermissionNameId?: InputMaybe<TemplatePermissionPermissionNameIdFkeyInput>;
  restrictions?: InputMaybe<Scalars['JSON']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplatePermissionTemplateIdFkeyInput>;
};

/** The fields on `templatePermission` to look up the row to connect. */
export type TemplatePermissionTemplatePermissionPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `templatePermission` to look up the row to delete. */
export type TemplatePermissionTemplatePermissionPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** A connection to a list of `TemplatePermission` values. */
export type TemplatePermissionsConnection = {
  __typename?: 'TemplatePermissionsConnection';
  /** A list of edges which contains the `TemplatePermission` and cursor to aid in pagination. */
  edges: Array<TemplatePermissionsEdge>;
  /** A list of `TemplatePermission` objects. */
  nodes: Array<Maybe<TemplatePermission>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TemplatePermission` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `TemplatePermission` edge in the connection. */
export type TemplatePermissionsEdge = {
  __typename?: 'TemplatePermissionsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `TemplatePermission` at the end of the edge. */
  node?: Maybe<TemplatePermission>;
};

/** Methods to use when ordering `TemplatePermission`. */
export enum TemplatePermissionsOrderBy {
  AllowedSectionsAsc = 'ALLOWED_SECTIONS_ASC',
  AllowedSectionsDesc = 'ALLOWED_SECTIONS_DESC',
  CanMakeFinalDecisionAsc = 'CAN_MAKE_FINAL_DECISION_ASC',
  CanMakeFinalDecisionDesc = 'CAN_MAKE_FINAL_DECISION_DESC',
  CanSelfAssignAsc = 'CAN_SELF_ASSIGN_ASC',
  CanSelfAssignDesc = 'CAN_SELF_ASSIGN_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  LevelNumberAsc = 'LEVEL_NUMBER_ASC',
  LevelNumberDesc = 'LEVEL_NUMBER_DESC',
  Natural = 'NATURAL',
  PermissionNameIdAsc = 'PERMISSION_NAME_ID_ASC',
  PermissionNameIdDesc = 'PERMISSION_NAME_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RestrictionsAsc = 'RESTRICTIONS_ASC',
  RestrictionsDesc = 'RESTRICTIONS_DESC',
  StageNumberAsc = 'STAGE_NUMBER_ASC',
  StageNumberDesc = 'STAGE_NUMBER_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC'
}

export type TemplateSection = Node & {
  __typename?: 'TemplateSection';
  code?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  index?: Maybe<Scalars['Int']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Template` that is related to this `TemplateSection`. */
  template?: Maybe<Template>;
  /** Reads and enables pagination through a set of `TemplateElement`. */
  templateElementsBySectionId: TemplateElementsConnection;
  templateId: Scalars['Int']['output'];
  title?: Maybe<Scalars['String']['output']>;
};


export type TemplateSectionTemplateElementsBySectionIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplateElementCondition>;
  filter?: InputMaybe<TemplateElementFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplateElementsOrderBy>>;
};

/**
 * A condition to be used against `TemplateSection` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type TemplateSectionCondition = {
  /** Checks for equality with the object’s `code` field. */
  code?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `index` field. */
  index?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `title` field. */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** A filter to be used against `TemplateSection` object types. All fields are combined with a logical ‘and.’ */
export type TemplateSectionFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<TemplateSectionFilter>>;
  /** Filter by the object’s `code` field. */
  code?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `index` field. */
  index?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<TemplateSectionFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<TemplateSectionFilter>>;
  /** Filter by the object’s `template` relation. */
  template?: InputMaybe<TemplateFilter>;
  /** Filter by the object’s `templateElementsBySectionId` relation. */
  templateElementsBySectionId?: InputMaybe<TemplateSectionToManyTemplateElementFilter>;
  /** Some related `templateElementsBySectionId` exist. */
  templateElementsBySectionIdExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `templateId` field. */
  templateId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `TemplateSection` */
export type TemplateSectionInput = {
  code?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  index?: InputMaybe<Scalars['Int']['input']>;
  templateElementsUsingId?: InputMaybe<TemplateElementSectionIdFkeyInverseInput>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplateSectionTemplateIdFkeyInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The globally unique `ID` look up for the row to connect. */
export type TemplateSectionNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `templateSection` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TemplateSectionNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `templateSection` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateElement` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `templateElement` being updated. */
  patch: TemplateElementPatch;
};

/** The fields on `templateSection` to look up the row to update. */
export type TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateSectionPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `templateSection` being updated. */
  patch: UpdateTemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyPatch;
};

/** The fields on `templateSection` to look up the row to update. */
export type TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateSectionTemplateIdCodeKeyUpdate = {
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `templateSection` being updated. */
  patch: UpdateTemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyPatch;
  templateId: Scalars['Int']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The fields on `templateSection` to look up the row to update. */
export type TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateSectionPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `templateSection` being updated. */
  patch: UpdateTemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch;
};

/** The fields on `templateSection` to look up the row to update. */
export type TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateSectionTemplateIdCodeKeyUpdate = {
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `templateSection` being updated. */
  patch: UpdateTemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch;
  templateId: Scalars['Int']['input'];
};

/** Represents an update to a `TemplateSection`. Fields that are set will be updated. */
export type TemplateSectionPatch = {
  code?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  index?: InputMaybe<Scalars['Int']['input']>;
  templateElementsUsingId?: InputMaybe<TemplateElementSectionIdFkeyInverseInput>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplateSectionTemplateIdFkeyInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** Input for the nested mutation of `template` in the `TemplateSectionInput` mutation. */
export type TemplateSectionTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: InputMaybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TemplateNodeIdConnect>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: InputMaybe<TemplateSectionTemplateIdFkeyTemplateCreateInput>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: InputMaybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByCodeAndVersionId?: InputMaybe<TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: InputMaybe<TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `templateSection` in the `TemplateInput` mutation. */
export type TemplateSectionTemplateIdFkeyInverseInput = {
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  connectById?: InputMaybe<Array<TemplateSectionTemplateSectionPkeyConnect>>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<TemplateSectionNodeIdConnect>>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  connectByTemplateIdAndCode?: InputMaybe<Array<TemplateSectionTemplateSectionTemplateIdCodeKeyConnect>>;
  /** A `TemplateSectionInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<TemplateSectionTemplateIdFkeyTemplateSectionCreateInput>>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<TemplateSectionTemplateSectionPkeyDelete>>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<TemplateSectionNodeIdDelete>>;
  /** The primary key(s) for `templateSection` for the far side of the relationship. */
  deleteByTemplateIdAndCode?: InputMaybe<Array<TemplateSectionTemplateSectionTemplateIdCodeKeyDelete>>;
  /** Flag indicating whether all other `templateSection` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `templateSection` for the far side of the relationship. */
  updateById?: InputMaybe<Array<TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateSectionPkeyUpdate>>;
  /** The primary key(s) and patch data for `templateSection` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate>>;
  /** The primary key(s) and patch data for `templateSection` for the far side of the relationship. */
  updateByTemplateIdAndCode?: InputMaybe<Array<TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateSectionTemplateIdCodeKeyUpdate>>;
};

/** The `template` to be created by this mutation. */
export type TemplateSectionTemplateIdFkeyTemplateCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code: Scalars['String']['input'];
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId: Scalars['String']['input'];
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The `templateSection` to be created by this mutation. */
export type TemplateSectionTemplateIdFkeyTemplateSectionCreateInput = {
  code?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  index?: InputMaybe<Scalars['Int']['input']>;
  templateElementsUsingId?: InputMaybe<TemplateElementSectionIdFkeyInverseInput>;
  templateToTemplateId?: InputMaybe<TemplateSectionTemplateIdFkeyInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The fields on `templateSection` to look up the row to connect. */
export type TemplateSectionTemplateSectionPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `templateSection` to look up the row to delete. */
export type TemplateSectionTemplateSectionPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** The fields on `templateSection` to look up the row to connect. */
export type TemplateSectionTemplateSectionTemplateIdCodeKeyConnect = {
  code: Scalars['String']['input'];
  templateId: Scalars['Int']['input'];
};

/** The fields on `templateSection` to look up the row to delete. */
export type TemplateSectionTemplateSectionTemplateIdCodeKeyDelete = {
  code: Scalars['String']['input'];
  templateId: Scalars['Int']['input'];
};

/** A filter to be used against many `TemplateElement` object types. All fields are combined with a logical ‘and.’ */
export type TemplateSectionToManyTemplateElementFilter = {
  /** Every related `TemplateElement` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<TemplateElementFilter>;
  /** No related `TemplateElement` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<TemplateElementFilter>;
  /** Some related `TemplateElement` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<TemplateElementFilter>;
};

/** A connection to a list of `TemplateSection` values. */
export type TemplateSectionsConnection = {
  __typename?: 'TemplateSectionsConnection';
  /** A list of edges which contains the `TemplateSection` and cursor to aid in pagination. */
  edges: Array<TemplateSectionsEdge>;
  /** A list of `TemplateSection` objects. */
  nodes: Array<Maybe<TemplateSection>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TemplateSection` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `TemplateSection` edge in the connection. */
export type TemplateSectionsEdge = {
  __typename?: 'TemplateSectionsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `TemplateSection` at the end of the edge. */
  node?: Maybe<TemplateSection>;
};

/** Methods to use when ordering `TemplateSection`. */
export enum TemplateSectionsOrderBy {
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IndexAsc = 'INDEX_ASC',
  IndexDesc = 'INDEX_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC'
}

export type TemplateStage = Node & {
  __typename?: 'TemplateStage';
  /** Reads and enables pagination through a set of `ApplicationStageHistory`. */
  applicationStageHistoriesByStageId: ApplicationStageHistoriesConnection;
  colour?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  number?: Maybe<Scalars['Int']['output']>;
  /** Reads and enables pagination through a set of `ReviewAssignment`. */
  reviewAssignmentsByStageId: ReviewAssignmentsConnection;
  /** Reads a single `Template` that is related to this `TemplateStage`. */
  template?: Maybe<Template>;
  templateId: Scalars['Int']['output'];
  /** Reads and enables pagination through a set of `TemplateStageReviewLevel`. */
  templateStageReviewLevelsByStageId: TemplateStageReviewLevelsConnection;
  title?: Maybe<Scalars['String']['output']>;
};


export type TemplateStageApplicationStageHistoriesByStageIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationStageHistoryCondition>;
  filter?: InputMaybe<ApplicationStageHistoryFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationStageHistoriesOrderBy>>;
};


export type TemplateStageReviewAssignmentsByStageIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewAssignmentCondition>;
  filter?: InputMaybe<ReviewAssignmentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewAssignmentsOrderBy>>;
};


export type TemplateStageTemplateStageReviewLevelsByStageIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<TemplateStageReviewLevelCondition>;
  filter?: InputMaybe<TemplateStageReviewLevelFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TemplateStageReviewLevelsOrderBy>>;
};

/**
 * A condition to be used against `TemplateStage` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type TemplateStageCondition = {
  /** Checks for equality with the object’s `colour` field. */
  colour?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `description` field. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `number` field. */
  number?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `title` field. */
  title?: InputMaybe<Scalars['String']['input']>;
};

/** A filter to be used against `TemplateStage` object types. All fields are combined with a logical ‘and.’ */
export type TemplateStageFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<TemplateStageFilter>>;
  /** Filter by the object’s `applicationStageHistoriesByStageId` relation. */
  applicationStageHistoriesByStageId?: InputMaybe<TemplateStageToManyApplicationStageHistoryFilter>;
  /** Some related `applicationStageHistoriesByStageId` exist. */
  applicationStageHistoriesByStageIdExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `colour` field. */
  colour?: InputMaybe<StringFilter>;
  /** Filter by the object’s `description` field. */
  description?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<TemplateStageFilter>;
  /** Filter by the object’s `number` field. */
  number?: InputMaybe<IntFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<TemplateStageFilter>>;
  /** Filter by the object’s `reviewAssignmentsByStageId` relation. */
  reviewAssignmentsByStageId?: InputMaybe<TemplateStageToManyReviewAssignmentFilter>;
  /** Some related `reviewAssignmentsByStageId` exist. */
  reviewAssignmentsByStageIdExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `template` relation. */
  template?: InputMaybe<TemplateFilter>;
  /** Filter by the object’s `templateId` field. */
  templateId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `templateStageReviewLevelsByStageId` relation. */
  templateStageReviewLevelsByStageId?: InputMaybe<TemplateStageToManyTemplateStageReviewLevelFilter>;
  /** Some related `templateStageReviewLevelsByStageId` exist. */
  templateStageReviewLevelsByStageIdExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `title` field. */
  title?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `TemplateStage` */
export type TemplateStageInput = {
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  colour?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  number?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelsUsingId?: InputMaybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
  templateToTemplateId?: InputMaybe<TemplateStageTemplateIdFkeyInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The globally unique `ID` look up for the row to connect. */
export type TemplateStageNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `templateStage` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TemplateStageNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `templateStage` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationStageHistory` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `applicationStageHistory` being updated. */
  patch: ApplicationStageHistoryPatch;
};

/** The fields on `templateStage` to look up the row to update. */
export type TemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyUsingTemplateStagePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `templateStage` being updated. */
  patch: UpdateTemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The fields on `templateStage` to look up the row to update. */
export type TemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyUsingTemplateStagePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `templateStage` being updated. */
  patch: UpdateTemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The fields on `templateStage` to look up the row to update. */
export type TemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplateStagePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `templateStage` being updated. */
  patch: UpdateTemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateStageReviewLevel` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `templateStageReviewLevel` being updated. */
  patch: TemplateStageReviewLevelPatch;
};

/** The fields on `templateStage` to look up the row to update. */
export type TemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyUsingTemplateStagePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `templateStage` being updated. */
  patch: UpdateTemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyPatch;
};

/** Represents an update to a `TemplateStage`. Fields that are set will be updated. */
export type TemplateStagePatch = {
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  colour?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  number?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelsUsingId?: InputMaybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
  templateToTemplateId?: InputMaybe<TemplateStageTemplateIdFkeyInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type TemplateStageReviewLevel = Node & {
  __typename?: 'TemplateStageReviewLevel';
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  number: Scalars['Int']['output'];
  /** Reads and enables pagination through a set of `ReviewAssignment`. */
  reviewAssignmentsByLevelId: ReviewAssignmentsConnection;
  singleReviewerAllSections: Scalars['Boolean']['output'];
  /** Reads a single `TemplateStage` that is related to this `TemplateStageReviewLevel`. */
  stage?: Maybe<TemplateStage>;
  stageId: Scalars['Int']['output'];
};


export type TemplateStageReviewLevelReviewAssignmentsByLevelIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewAssignmentCondition>;
  filter?: InputMaybe<ReviewAssignmentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewAssignmentsOrderBy>>;
};

/**
 * A condition to be used against `TemplateStageReviewLevel` object types. All
 * fields are tested for equality and combined with a logical ‘and.’
 */
export type TemplateStageReviewLevelCondition = {
  /** Checks for equality with the object’s `description` field. */
  description?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `name` field. */
  name?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `number` field. */
  number?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `singleReviewerAllSections` field. */
  singleReviewerAllSections?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `stageId` field. */
  stageId?: InputMaybe<Scalars['Int']['input']>;
};

/** A filter to be used against `TemplateStageReviewLevel` object types. All fields are combined with a logical ‘and.’ */
export type TemplateStageReviewLevelFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<TemplateStageReviewLevelFilter>>;
  /** Filter by the object’s `description` field. */
  description?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `name` field. */
  name?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<TemplateStageReviewLevelFilter>;
  /** Filter by the object’s `number` field. */
  number?: InputMaybe<IntFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<TemplateStageReviewLevelFilter>>;
  /** Filter by the object’s `reviewAssignmentsByLevelId` relation. */
  reviewAssignmentsByLevelId?: InputMaybe<TemplateStageReviewLevelToManyReviewAssignmentFilter>;
  /** Some related `reviewAssignmentsByLevelId` exist. */
  reviewAssignmentsByLevelIdExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `singleReviewerAllSections` field. */
  singleReviewerAllSections?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `stage` relation. */
  stage?: InputMaybe<TemplateStageFilter>;
  /** Filter by the object’s `stageId` field. */
  stageId?: InputMaybe<IntFilter>;
};

/** An input for mutations affecting `TemplateStageReviewLevel` */
export type TemplateStageReviewLevelInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  number: Scalars['Int']['input'];
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentLevelIdFkeyInverseInput>;
  singleReviewerAllSections?: InputMaybe<Scalars['Boolean']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  templateStageToStageId?: InputMaybe<TemplateStageReviewLevelStageIdFkeyInput>;
};

/** The globally unique `ID` look up for the row to connect. */
export type TemplateStageReviewLevelNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `templateStageReviewLevel` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TemplateStageReviewLevelNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `templateStageReviewLevel` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The fields on `templateStageReviewLevel` to look up the row to update. */
export type TemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyUsingTemplateStageReviewLevelPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `templateStageReviewLevel` being updated. */
  patch: UpdateTemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type TemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `templateStage` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `templateStage` being updated. */
  patch: TemplateStagePatch;
};

/** The fields on `templateStageReviewLevel` to look up the row to update. */
export type TemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyUsingTemplateStageReviewLevelPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `templateStageReviewLevel` being updated. */
  patch: UpdateTemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyPatch;
};

/** Represents an update to a `TemplateStageReviewLevel`. Fields that are set will be updated. */
export type TemplateStageReviewLevelPatch = {
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  number?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentLevelIdFkeyInverseInput>;
  singleReviewerAllSections?: InputMaybe<Scalars['Boolean']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  templateStageToStageId?: InputMaybe<TemplateStageReviewLevelStageIdFkeyInput>;
};

/** Input for the nested mutation of `templateStage` in the `TemplateStageReviewLevelInput` mutation. */
export type TemplateStageReviewLevelStageIdFkeyInput = {
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  connectById?: InputMaybe<TemplateStageTemplateStagePkeyConnect>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TemplateStageNodeIdConnect>;
  /** A `TemplateStageInput` object that will be created and connected to this object. */
  create?: InputMaybe<TemplateStageReviewLevelStageIdFkeyTemplateStageCreateInput>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  deleteById?: InputMaybe<TemplateStageTemplateStagePkeyDelete>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TemplateStageNodeIdDelete>;
  /** The primary key(s) and patch data for `templateStage` for the far side of the relationship. */
  updateById?: InputMaybe<TemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyUsingTemplateStagePkeyUpdate>;
  /** The primary key(s) and patch data for `templateStage` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<TemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `templateStageReviewLevel` in the `TemplateStageInput` mutation. */
export type TemplateStageReviewLevelStageIdFkeyInverseInput = {
  /** The primary key(s) for `templateStageReviewLevel` for the far side of the relationship. */
  connectById?: InputMaybe<Array<TemplateStageReviewLevelTemplateStageReviewLevelPkeyConnect>>;
  /** The primary key(s) for `templateStageReviewLevel` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<TemplateStageReviewLevelNodeIdConnect>>;
  /** A `TemplateStageReviewLevelInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<TemplateStageReviewLevelStageIdFkeyTemplateStageReviewLevelCreateInput>>;
  /** The primary key(s) for `templateStageReviewLevel` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<TemplateStageReviewLevelTemplateStageReviewLevelPkeyDelete>>;
  /** The primary key(s) for `templateStageReviewLevel` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<TemplateStageReviewLevelNodeIdDelete>>;
  /** Flag indicating whether all other `templateStageReviewLevel` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `templateStageReviewLevel` for the far side of the relationship. */
  updateById?: InputMaybe<Array<TemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyUsingTemplateStageReviewLevelPkeyUpdate>>;
  /** The primary key(s) and patch data for `templateStageReviewLevel` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyNodeIdUpdate>>;
};

/** The `templateStage` to be created by this mutation. */
export type TemplateStageReviewLevelStageIdFkeyTemplateStageCreateInput = {
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  colour?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  number?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelsUsingId?: InputMaybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
  templateToTemplateId?: InputMaybe<TemplateStageTemplateIdFkeyInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The `templateStageReviewLevel` to be created by this mutation. */
export type TemplateStageReviewLevelStageIdFkeyTemplateStageReviewLevelCreateInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  number: Scalars['Int']['input'];
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentLevelIdFkeyInverseInput>;
  singleReviewerAllSections?: InputMaybe<Scalars['Boolean']['input']>;
  templateStageToStageId?: InputMaybe<TemplateStageReviewLevelStageIdFkeyInput>;
};

/** The fields on `templateStageReviewLevel` to look up the row to connect. */
export type TemplateStageReviewLevelTemplateStageReviewLevelPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `templateStageReviewLevel` to look up the row to delete. */
export type TemplateStageReviewLevelTemplateStageReviewLevelPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** A filter to be used against many `ReviewAssignment` object types. All fields are combined with a logical ‘and.’ */
export type TemplateStageReviewLevelToManyReviewAssignmentFilter = {
  /** Every related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ReviewAssignmentFilter>;
  /** No related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ReviewAssignmentFilter>;
  /** Some related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ReviewAssignmentFilter>;
};

/** A connection to a list of `TemplateStageReviewLevel` values. */
export type TemplateStageReviewLevelsConnection = {
  __typename?: 'TemplateStageReviewLevelsConnection';
  /** A list of edges which contains the `TemplateStageReviewLevel` and cursor to aid in pagination. */
  edges: Array<TemplateStageReviewLevelsEdge>;
  /** A list of `TemplateStageReviewLevel` objects. */
  nodes: Array<Maybe<TemplateStageReviewLevel>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TemplateStageReviewLevel` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `TemplateStageReviewLevel` edge in the connection. */
export type TemplateStageReviewLevelsEdge = {
  __typename?: 'TemplateStageReviewLevelsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `TemplateStageReviewLevel` at the end of the edge. */
  node?: Maybe<TemplateStageReviewLevel>;
};

/** Methods to use when ordering `TemplateStageReviewLevel`. */
export enum TemplateStageReviewLevelsOrderBy {
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  Natural = 'NATURAL',
  NumberAsc = 'NUMBER_ASC',
  NumberDesc = 'NUMBER_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  SingleReviewerAllSectionsAsc = 'SINGLE_REVIEWER_ALL_SECTIONS_ASC',
  SingleReviewerAllSectionsDesc = 'SINGLE_REVIEWER_ALL_SECTIONS_DESC',
  StageIdAsc = 'STAGE_ID_ASC',
  StageIdDesc = 'STAGE_ID_DESC'
}

/** Input for the nested mutation of `template` in the `TemplateStageInput` mutation. */
export type TemplateStageTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: InputMaybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TemplateNodeIdConnect>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: InputMaybe<TemplateStageTemplateIdFkeyTemplateCreateInput>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: InputMaybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByCodeAndVersionId?: InputMaybe<TemplateOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: InputMaybe<TemplateOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<TemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `templateStage` in the `TemplateInput` mutation. */
export type TemplateStageTemplateIdFkeyInverseInput = {
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  connectById?: InputMaybe<Array<TemplateStageTemplateStagePkeyConnect>>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<TemplateStageNodeIdConnect>>;
  /** A `TemplateStageInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<TemplateStageTemplateIdFkeyTemplateStageCreateInput>>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<TemplateStageTemplateStagePkeyDelete>>;
  /** The primary key(s) for `templateStage` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<TemplateStageNodeIdDelete>>;
  /** Flag indicating whether all other `templateStage` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `templateStage` for the far side of the relationship. */
  updateById?: InputMaybe<Array<TemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplateStagePkeyUpdate>>;
  /** The primary key(s) and patch data for `templateStage` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TemplateOnTemplateStageForTemplateStageTemplateIdFkeyNodeIdUpdate>>;
};

/** The `template` to be created by this mutation. */
export type TemplateStageTemplateIdFkeyTemplateCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code: Scalars['String']['input'];
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId: Scalars['String']['input'];
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The `templateStage` to be created by this mutation. */
export type TemplateStageTemplateIdFkeyTemplateStageCreateInput = {
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  colour?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  number?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateStageReviewLevelsUsingId?: InputMaybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
  templateToTemplateId?: InputMaybe<TemplateStageTemplateIdFkeyInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The fields on `templateStage` to look up the row to connect. */
export type TemplateStageTemplateStagePkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `templateStage` to look up the row to delete. */
export type TemplateStageTemplateStagePkeyDelete = {
  id: Scalars['Int']['input'];
};

/** A filter to be used against many `ApplicationStageHistory` object types. All fields are combined with a logical ‘and.’ */
export type TemplateStageToManyApplicationStageHistoryFilter = {
  /** Every related `ApplicationStageHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ApplicationStageHistoryFilter>;
  /** No related `ApplicationStageHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ApplicationStageHistoryFilter>;
  /** Some related `ApplicationStageHistory` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ApplicationStageHistoryFilter>;
};

/** A filter to be used against many `ReviewAssignment` object types. All fields are combined with a logical ‘and.’ */
export type TemplateStageToManyReviewAssignmentFilter = {
  /** Every related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ReviewAssignmentFilter>;
  /** No related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ReviewAssignmentFilter>;
  /** Some related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ReviewAssignmentFilter>;
};

/** A filter to be used against many `TemplateStageReviewLevel` object types. All fields are combined with a logical ‘and.’ */
export type TemplateStageToManyTemplateStageReviewLevelFilter = {
  /** Every related `TemplateStageReviewLevel` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<TemplateStageReviewLevelFilter>;
  /** No related `TemplateStageReviewLevel` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<TemplateStageReviewLevelFilter>;
  /** Some related `TemplateStageReviewLevel` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<TemplateStageReviewLevelFilter>;
};

/** A connection to a list of `TemplateStage` values. */
export type TemplateStagesConnection = {
  __typename?: 'TemplateStagesConnection';
  /** A list of edges which contains the `TemplateStage` and cursor to aid in pagination. */
  edges: Array<TemplateStagesEdge>;
  /** A list of `TemplateStage` objects. */
  nodes: Array<Maybe<TemplateStage>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TemplateStage` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `TemplateStage` edge in the connection. */
export type TemplateStagesEdge = {
  __typename?: 'TemplateStagesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `TemplateStage` at the end of the edge. */
  node?: Maybe<TemplateStage>;
};

/** Methods to use when ordering `TemplateStage`. */
export enum TemplateStagesOrderBy {
  ColourAsc = 'COLOUR_ASC',
  ColourDesc = 'COLOUR_DESC',
  DescriptionAsc = 'DESCRIPTION_ASC',
  DescriptionDesc = 'DESCRIPTION_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  NumberAsc = 'NUMBER_ASC',
  NumberDesc = 'NUMBER_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  TitleAsc = 'TITLE_ASC',
  TitleDesc = 'TITLE_DESC'
}

export enum TemplateStatus {
  Available = 'AVAILABLE',
  Disabled = 'DISABLED',
  Draft = 'DRAFT'
}

/** A filter to be used against TemplateStatus fields. All fields are combined with a logical ‘and.’ */
export type TemplateStatusFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<TemplateStatus>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<TemplateStatus>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<TemplateStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<TemplateStatus>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<TemplateStatus>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<TemplateStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<TemplateStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<TemplateStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<TemplateStatus>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<TemplateStatus>>;
};

/** Input for the nested mutation of `templateCategory` in the `TemplateInput` mutation. */
export type TemplateTemplateCategoryIdFkeyInput = {
  /** The primary key(s) for `templateCategory` for the far side of the relationship. */
  connectByCode?: InputMaybe<TemplateCategoryTemplateCategoryCodeKeyConnect>;
  /** The primary key(s) for `templateCategory` for the far side of the relationship. */
  connectById?: InputMaybe<TemplateCategoryTemplateCategoryPkeyConnect>;
  /** The primary key(s) for `templateCategory` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TemplateCategoryNodeIdConnect>;
  /** A `TemplateCategoryInput` object that will be created and connected to this object. */
  create?: InputMaybe<TemplateTemplateCategoryIdFkeyTemplateCategoryCreateInput>;
  /** The primary key(s) for `templateCategory` for the far side of the relationship. */
  deleteByCode?: InputMaybe<TemplateCategoryTemplateCategoryCodeKeyDelete>;
  /** The primary key(s) for `templateCategory` for the far side of the relationship. */
  deleteById?: InputMaybe<TemplateCategoryTemplateCategoryPkeyDelete>;
  /** The primary key(s) for `templateCategory` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TemplateCategoryNodeIdDelete>;
  /** The primary key(s) and patch data for `templateCategory` for the far side of the relationship. */
  updateByCode?: InputMaybe<TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCategoryCodeKeyUpdate>;
  /** The primary key(s) and patch data for `templateCategory` for the far side of the relationship. */
  updateById?: InputMaybe<TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCategoryPkeyUpdate>;
  /** The primary key(s) and patch data for `templateCategory` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<TemplateOnTemplateForTemplateTemplateCategoryIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `template` in the `TemplateCategoryInput` mutation. */
export type TemplateTemplateCategoryIdFkeyInverseInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByCodeAndVersionId?: InputMaybe<Array<TemplateTemplateCodeVersionIdKeyConnect>>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: InputMaybe<Array<TemplateTemplatePkeyConnect>>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<TemplateNodeIdConnect>>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<TemplateTemplateCategoryIdFkeyTemplateCreateInput>>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByCodeAndVersionId?: InputMaybe<Array<TemplateTemplateCodeVersionIdKeyDelete>>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<TemplateTemplatePkeyDelete>>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<TemplateNodeIdDelete>>;
  /** Flag indicating whether all other `template` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByCodeAndVersionId?: InputMaybe<Array<TemplateOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCodeVersionIdKeyUpdate>>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: InputMaybe<Array<TemplateOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplatePkeyUpdate>>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyNodeIdUpdate>>;
};

/** The `templateCategory` to be created by this mutation. */
export type TemplateTemplateCategoryIdFkeyTemplateCategoryCreateInput = {
  code: Scalars['String']['input'];
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSubmenu?: InputMaybe<Scalars['Boolean']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  templatesUsingId?: InputMaybe<TemplateTemplateCategoryIdFkeyInverseInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  uiLocation?: InputMaybe<Array<InputMaybe<UiLocation>>>;
};

/** The `template` to be created by this mutation. */
export type TemplateTemplateCategoryIdFkeyTemplateCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code: Scalars['String']['input'];
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId: Scalars['String']['input'];
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The fields on `template` to look up the row to connect. */
export type TemplateTemplateCodeVersionIdKeyConnect = {
  code: Scalars['String']['input'];
  versionId: Scalars['String']['input'];
};

/** The fields on `template` to look up the row to delete. */
export type TemplateTemplateCodeVersionIdKeyDelete = {
  code: Scalars['String']['input'];
  versionId: Scalars['String']['input'];
};

/** The fields on `template` to look up the row to connect. */
export type TemplateTemplatePkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `template` to look up the row to delete. */
export type TemplateTemplatePkeyDelete = {
  id: Scalars['Int']['input'];
};

/** A filter to be used against many `ActionQueue` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyActionQueueFilter = {
  /** Every related `ActionQueue` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ActionQueueFilter>;
  /** No related `ActionQueue` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ActionQueueFilter>;
  /** Some related `ActionQueue` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ActionQueueFilter>;
};

/** A filter to be used against many `Application` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyApplicationFilter = {
  /** Every related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ApplicationFilter>;
  /** No related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ApplicationFilter>;
  /** Some related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ApplicationFilter>;
};

/** A filter to be used against many `File` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyFileFilter = {
  /** Every related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<FileFilter>;
  /** No related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<FileFilter>;
  /** Some related `File` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<FileFilter>;
};

/** A filter to be used against many `ReviewAssignment` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyReviewAssignmentFilter = {
  /** Every related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ReviewAssignmentFilter>;
  /** No related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ReviewAssignmentFilter>;
  /** Some related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ReviewAssignmentFilter>;
};

/** A filter to be used against many `TemplateAction` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyTemplateActionFilter = {
  /** Every related `TemplateAction` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<TemplateActionFilter>;
  /** No related `TemplateAction` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<TemplateActionFilter>;
  /** Some related `TemplateAction` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<TemplateActionFilter>;
};

/** A filter to be used against many `TemplateFilterJoin` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyTemplateFilterJoinFilter = {
  /** Every related `TemplateFilterJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<TemplateFilterJoinFilter>;
  /** No related `TemplateFilterJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<TemplateFilterJoinFilter>;
  /** Some related `TemplateFilterJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<TemplateFilterJoinFilter>;
};

/** A filter to be used against many `TemplatePermission` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyTemplatePermissionFilter = {
  /** Every related `TemplatePermission` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<TemplatePermissionFilter>;
  /** No related `TemplatePermission` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<TemplatePermissionFilter>;
  /** Some related `TemplatePermission` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<TemplatePermissionFilter>;
};

/** A filter to be used against many `TemplateSection` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyTemplateSectionFilter = {
  /** Every related `TemplateSection` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<TemplateSectionFilter>;
  /** No related `TemplateSection` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<TemplateSectionFilter>;
  /** Some related `TemplateSection` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<TemplateSectionFilter>;
};

/** A filter to be used against many `TemplateStage` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyTemplateStageFilter = {
  /** Every related `TemplateStage` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<TemplateStageFilter>;
  /** No related `TemplateStage` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<TemplateStageFilter>;
  /** Some related `TemplateStage` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<TemplateStageFilter>;
};

/** A filter to be used against many `TriggerSchedule` object types. All fields are combined with a logical ‘and.’ */
export type TemplateToManyTriggerScheduleFilter = {
  /** Every related `TriggerSchedule` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<TriggerScheduleFilter>;
  /** No related `TriggerSchedule` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<TriggerScheduleFilter>;
  /** Some related `TriggerSchedule` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<TriggerScheduleFilter>;
};

/** A connection to a list of `Template` values. */
export type TemplatesConnection = {
  __typename?: 'TemplatesConnection';
  /** A list of edges which contains the `Template` and cursor to aid in pagination. */
  edges: Array<TemplatesEdge>;
  /** A list of `Template` objects. */
  nodes: Array<Maybe<Template>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Template` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `Template` edge in the connection. */
export type TemplatesEdge = {
  __typename?: 'TemplatesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Template` at the end of the edge. */
  node?: Maybe<Template>;
};

/** Methods to use when ordering `Template`. */
export enum TemplatesOrderBy {
  CanApplicantMakeChangesAsc = 'CAN_APPLICANT_MAKE_CHANGES_ASC',
  CanApplicantMakeChangesDesc = 'CAN_APPLICANT_MAKE_CHANGES_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  DashboardRestrictionsAsc = 'DASHBOARD_RESTRICTIONS_ASC',
  DashboardRestrictionsDesc = 'DASHBOARD_RESTRICTIONS_DESC',
  IconAsc = 'ICON_ASC',
  IconDesc = 'ICON_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsLinearAsc = 'IS_LINEAR_ASC',
  IsLinearDesc = 'IS_LINEAR_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  NamePluralAsc = 'NAME_PLURAL_ASC',
  NamePluralDesc = 'NAME_PLURAL_DESC',
  Natural = 'NATURAL',
  ParentVersionIdAsc = 'PARENT_VERSION_ID_ASC',
  ParentVersionIdDesc = 'PARENT_VERSION_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  PriorityAsc = 'PRIORITY_ASC',
  PriorityDesc = 'PRIORITY_DESC',
  SerialPatternAsc = 'SERIAL_PATTERN_ASC',
  SerialPatternDesc = 'SERIAL_PATTERN_DESC',
  StartMessageAsc = 'START_MESSAGE_ASC',
  StartMessageDesc = 'START_MESSAGE_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  SubmissionMessageAsc = 'SUBMISSION_MESSAGE_ASC',
  SubmissionMessageDesc = 'SUBMISSION_MESSAGE_DESC',
  TemplateCategoryIdAsc = 'TEMPLATE_CATEGORY_ID_ASC',
  TemplateCategoryIdDesc = 'TEMPLATE_CATEGORY_ID_DESC',
  VersionCommentAsc = 'VERSION_COMMENT_ASC',
  VersionCommentDesc = 'VERSION_COMMENT_DESC',
  VersionHistoryAsc = 'VERSION_HISTORY_ASC',
  VersionHistoryDesc = 'VERSION_HISTORY_DESC',
  VersionIdAsc = 'VERSION_ID_ASC',
  VersionIdDesc = 'VERSION_ID_DESC',
  VersionTimestampAsc = 'VERSION_TIMESTAMP_ASC',
  VersionTimestampDesc = 'VERSION_TIMESTAMP_DESC'
}

export enum Trigger {
  DevTest = 'DEV_TEST',
  Error = 'ERROR',
  OnApplicationCreate = 'ON_APPLICATION_CREATE',
  OnApplicationRestart = 'ON_APPLICATION_RESTART',
  OnApplicationSave = 'ON_APPLICATION_SAVE',
  OnApplicationSubmit = 'ON_APPLICATION_SUBMIT',
  OnApplicationWithdraw = 'ON_APPLICATION_WITHDRAW',
  OnApprovalSubmit = 'ON_APPROVAL_SUBMIT',
  OnExtend = 'ON_EXTEND',
  OnPreview = 'ON_PREVIEW',
  OnReviewAssign = 'ON_REVIEW_ASSIGN',
  OnReviewCreate = 'ON_REVIEW_CREATE',
  OnReviewRestart = 'ON_REVIEW_RESTART',
  OnReviewSubmit = 'ON_REVIEW_SUBMIT',
  OnReviewUnassign = 'ON_REVIEW_UNASSIGN',
  OnSchedule = 'ON_SCHEDULE',
  OnVerification = 'ON_VERIFICATION',
  Processing = 'PROCESSING'
}

/** A filter to be used against Trigger fields. All fields are combined with a logical ‘and.’ */
export type TriggerFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Trigger>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Trigger>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Trigger>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Trigger>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Trigger>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Trigger>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Trigger>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Trigger>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Trigger>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Trigger>>;
};

export type TriggerQueue = Node & {
  __typename?: 'TriggerQueue';
  /** Reads and enables pagination through a set of `ActionQueue`. */
  actionQueuesByTriggerEvent: ActionQueuesConnection;
  /** Reads a single `Application` that is related to this `TriggerQueue`. */
  application?: Maybe<Application>;
  applicationId?: Maybe<Scalars['Int']['output']>;
  data?: Maybe<Scalars['JSON']['output']>;
  eventCode?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  log?: Maybe<Scalars['JSON']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  recordId?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<TriggerQueueStatus>;
  table?: Maybe<Scalars['String']['output']>;
  timestamp?: Maybe<Scalars['Datetime']['output']>;
  triggerType?: Maybe<Trigger>;
};


export type TriggerQueueActionQueuesByTriggerEventArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ActionQueueCondition>;
  filter?: InputMaybe<ActionQueueFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ActionQueuesOrderBy>>;
};

/** The `application` to be created by this mutation. */
export type TriggerQueueApplicationIdFkeyApplicationCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `application` in the `TriggerQueueInput` mutation. */
export type TriggerQueueApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: InputMaybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: InputMaybe<ApplicationApplicationSerialKeyConnect>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: InputMaybe<TriggerQueueApplicationIdFkeyApplicationCreateInput>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: InputMaybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ApplicationNodeIdDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: InputMaybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: InputMaybe<ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<TriggerQueueOnTriggerQueueForTriggerQueueApplicationIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByOutcomeRegistration?: InputMaybe<ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: InputMaybe<ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
};

/** Input for the nested mutation of `triggerQueue` in the `ApplicationInput` mutation. */
export type TriggerQueueApplicationIdFkeyInverseInput = {
  /** The primary key(s) for `triggerQueue` for the far side of the relationship. */
  connectById?: InputMaybe<Array<TriggerQueueTriggerQueuePkeyConnect>>;
  /** The primary key(s) for `triggerQueue` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<TriggerQueueNodeIdConnect>>;
  /** A `TriggerQueueInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<TriggerQueueApplicationIdFkeyTriggerQueueCreateInput>>;
  /** The primary key(s) for `triggerQueue` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<TriggerQueueTriggerQueuePkeyDelete>>;
  /** The primary key(s) for `triggerQueue` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<TriggerQueueNodeIdDelete>>;
  /** Flag indicating whether all other `triggerQueue` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `triggerQueue` for the far side of the relationship. */
  updateById?: InputMaybe<Array<TriggerQueueOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingTriggerQueuePkeyUpdate>>;
  /** The primary key(s) and patch data for `triggerQueue` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyNodeIdUpdate>>;
};

/** The `triggerQueue` to be created by this mutation. */
export type TriggerQueueApplicationIdFkeyTriggerQueueCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTriggerEventFkeyInverseInput>;
  applicationToApplicationId?: InputMaybe<TriggerQueueApplicationIdFkeyInput>;
  data?: InputMaybe<Scalars['JSON']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  log?: InputMaybe<Scalars['JSON']['input']>;
  recordId?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<TriggerQueueStatus>;
  table?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  triggerType?: InputMaybe<Trigger>;
};

/**
 * A condition to be used against `TriggerQueue` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type TriggerQueueCondition = {
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `data` field. */
  data?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `eventCode` field. */
  eventCode?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `log` field. */
  log?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `recordId` field. */
  recordId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `status` field. */
  status?: InputMaybe<TriggerQueueStatus>;
  /** Checks for equality with the object’s `table` field. */
  table?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `timestamp` field. */
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `triggerType` field. */
  triggerType?: InputMaybe<Trigger>;
};

/** A filter to be used against `TriggerQueue` object types. All fields are combined with a logical ‘and.’ */
export type TriggerQueueFilter = {
  /** Filter by the object’s `actionQueuesByTriggerEvent` relation. */
  actionQueuesByTriggerEvent?: InputMaybe<TriggerQueueToManyActionQueueFilter>;
  /** Some related `actionQueuesByTriggerEvent` exist. */
  actionQueuesByTriggerEventExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<TriggerQueueFilter>>;
  /** Filter by the object’s `application` relation. */
  application?: InputMaybe<ApplicationFilter>;
  /** A related `application` exists. */
  applicationExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `data` field. */
  data?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `eventCode` field. */
  eventCode?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `log` field. */
  log?: InputMaybe<JsonFilter>;
  /** Negates the expression. */
  not?: InputMaybe<TriggerQueueFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<TriggerQueueFilter>>;
  /** Filter by the object’s `recordId` field. */
  recordId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `status` field. */
  status?: InputMaybe<TriggerQueueStatusFilter>;
  /** Filter by the object’s `table` field. */
  table?: InputMaybe<StringFilter>;
  /** Filter by the object’s `timestamp` field. */
  timestamp?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `triggerType` field. */
  triggerType?: InputMaybe<TriggerFilter>;
};

/** An input for mutations affecting `TriggerQueue` */
export type TriggerQueueInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTriggerEventFkeyInverseInput>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<TriggerQueueApplicationIdFkeyInput>;
  data?: InputMaybe<Scalars['JSON']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  log?: InputMaybe<Scalars['JSON']['input']>;
  recordId?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<TriggerQueueStatus>;
  table?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  triggerType?: InputMaybe<Trigger>;
};

/** The globally unique `ID` look up for the row to connect. */
export type TriggerQueueNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `triggerQueue` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TriggerQueueNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `triggerQueue` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `actionQueue` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `actionQueue` being updated. */
  patch: ActionQueuePatch;
};

/** The fields on `triggerQueue` to look up the row to update. */
export type TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyUsingTriggerQueuePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `triggerQueue` being updated. */
  patch: UpdateTriggerQueueOnActionQueueForActionQueueTriggerEventFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type TriggerQueueOnTriggerQueueForTriggerQueueApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The fields on `triggerQueue` to look up the row to update. */
export type TriggerQueueOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingTriggerQueuePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `triggerQueue` being updated. */
  patch: UpdateTriggerQueueOnTriggerQueueForTriggerQueueApplicationIdFkeyPatch;
};

/** Represents an update to a `TriggerQueue`. Fields that are set will be updated. */
export type TriggerQueuePatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTriggerEventFkeyInverseInput>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<TriggerQueueApplicationIdFkeyInput>;
  data?: InputMaybe<Scalars['JSON']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  log?: InputMaybe<Scalars['JSON']['input']>;
  recordId?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<TriggerQueueStatus>;
  table?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  triggerType?: InputMaybe<Trigger>;
};

export enum TriggerQueueStatus {
  ActionsDispatched = 'ACTIONS_DISPATCHED',
  Completed = 'COMPLETED',
  Error = 'ERROR',
  Triggered = 'TRIGGERED'
}

/** A filter to be used against TriggerQueueStatus fields. All fields are combined with a logical ‘and.’ */
export type TriggerQueueStatusFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<TriggerQueueStatus>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<TriggerQueueStatus>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<TriggerQueueStatus>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<TriggerQueueStatus>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<TriggerQueueStatus>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<TriggerQueueStatus>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<TriggerQueueStatus>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<TriggerQueueStatus>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<TriggerQueueStatus>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<TriggerQueueStatus>>;
};

/** A filter to be used against many `ActionQueue` object types. All fields are combined with a logical ‘and.’ */
export type TriggerQueueToManyActionQueueFilter = {
  /** Every related `ActionQueue` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ActionQueueFilter>;
  /** No related `ActionQueue` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ActionQueueFilter>;
  /** Some related `ActionQueue` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ActionQueueFilter>;
};

/** The fields on `triggerQueue` to look up the row to connect. */
export type TriggerQueueTriggerQueuePkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `triggerQueue` to look up the row to delete. */
export type TriggerQueueTriggerQueuePkeyDelete = {
  id: Scalars['Int']['input'];
};

/** A connection to a list of `TriggerQueue` values. */
export type TriggerQueuesConnection = {
  __typename?: 'TriggerQueuesConnection';
  /** A list of edges which contains the `TriggerQueue` and cursor to aid in pagination. */
  edges: Array<TriggerQueuesEdge>;
  /** A list of `TriggerQueue` objects. */
  nodes: Array<Maybe<TriggerQueue>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TriggerQueue` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `TriggerQueue` edge in the connection. */
export type TriggerQueuesEdge = {
  __typename?: 'TriggerQueuesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `TriggerQueue` at the end of the edge. */
  node?: Maybe<TriggerQueue>;
};

/** Methods to use when ordering `TriggerQueue`. */
export enum TriggerQueuesOrderBy {
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  DataAsc = 'DATA_ASC',
  DataDesc = 'DATA_DESC',
  EventCodeAsc = 'EVENT_CODE_ASC',
  EventCodeDesc = 'EVENT_CODE_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  LogAsc = 'LOG_ASC',
  LogDesc = 'LOG_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  RecordIdAsc = 'RECORD_ID_ASC',
  RecordIdDesc = 'RECORD_ID_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TableAsc = 'TABLE_ASC',
  TableDesc = 'TABLE_DESC',
  TimestampAsc = 'TIMESTAMP_ASC',
  TimestampDesc = 'TIMESTAMP_DESC',
  TriggerTypeAsc = 'TRIGGER_TYPE_ASC',
  TriggerTypeDesc = 'TRIGGER_TYPE_DESC'
}

export type TriggerSchedule = Node & {
  __typename?: 'TriggerSchedule';
  /** Reads a single `Application` that is related to this `TriggerSchedule`. */
  application?: Maybe<Application>;
  applicationId: Scalars['Int']['output'];
  data?: Maybe<Scalars['JSON']['output']>;
  editorUserId?: Maybe<Scalars['Int']['output']>;
  eventCode?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  isActive?: Maybe<Scalars['Boolean']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Template` that is related to this `TriggerSchedule`. */
  template?: Maybe<Template>;
  templateId?: Maybe<Scalars['Int']['output']>;
  timeScheduled: Scalars['Datetime']['output'];
  trigger?: Maybe<Trigger>;
};

/** The `application` to be created by this mutation. */
export type TriggerScheduleApplicationIdFkeyApplicationCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `application` in the `TriggerScheduleInput` mutation. */
export type TriggerScheduleApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: InputMaybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: InputMaybe<ApplicationApplicationSerialKeyConnect>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: InputMaybe<TriggerScheduleApplicationIdFkeyApplicationCreateInput>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: InputMaybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ApplicationNodeIdDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: InputMaybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: InputMaybe<ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<TriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByOutcomeRegistration?: InputMaybe<ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: InputMaybe<ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
};

/** Input for the nested mutation of `triggerSchedule` in the `ApplicationInput` mutation. */
export type TriggerScheduleApplicationIdFkeyInverseInput = {
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  connectById?: InputMaybe<Array<TriggerScheduleTriggerSchedulePkeyConnect>>;
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<TriggerScheduleNodeIdConnect>>;
  /** A `TriggerScheduleInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<TriggerScheduleApplicationIdFkeyTriggerScheduleCreateInput>>;
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<TriggerScheduleTriggerSchedulePkeyDelete>>;
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<TriggerScheduleNodeIdDelete>>;
  /** Flag indicating whether all other `triggerSchedule` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `triggerSchedule` for the far side of the relationship. */
  updateById?: InputMaybe<Array<TriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingTriggerSchedulePkeyUpdate>>;
  /** The primary key(s) and patch data for `triggerSchedule` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyNodeIdUpdate>>;
};

/** The `triggerSchedule` to be created by this mutation. */
export type TriggerScheduleApplicationIdFkeyTriggerScheduleCreateInput = {
  applicationToApplicationId?: InputMaybe<TriggerScheduleApplicationIdFkeyInput>;
  data?: InputMaybe<Scalars['JSON']['input']>;
  editorUserId?: InputMaybe<Scalars['Int']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TriggerScheduleTemplateIdFkeyInput>;
  timeScheduled: Scalars['Datetime']['input'];
  trigger?: InputMaybe<Trigger>;
};

/**
 * A condition to be used against `TriggerSchedule` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type TriggerScheduleCondition = {
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `data` field. */
  data?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `editorUserId` field. */
  editorUserId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `eventCode` field. */
  eventCode?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isActive` field. */
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `templateId` field. */
  templateId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `timeScheduled` field. */
  timeScheduled?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `trigger` field. */
  trigger?: InputMaybe<Trigger>;
};

/** A filter to be used against `TriggerSchedule` object types. All fields are combined with a logical ‘and.’ */
export type TriggerScheduleFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<TriggerScheduleFilter>>;
  /** Filter by the object’s `application` relation. */
  application?: InputMaybe<ApplicationFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `data` field. */
  data?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `editorUserId` field. */
  editorUserId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `eventCode` field. */
  eventCode?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isActive` field. */
  isActive?: InputMaybe<BooleanFilter>;
  /** Negates the expression. */
  not?: InputMaybe<TriggerScheduleFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<TriggerScheduleFilter>>;
  /** Filter by the object’s `template` relation. */
  template?: InputMaybe<TemplateFilter>;
  /** A related `template` exists. */
  templateExists?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `templateId` field. */
  templateId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `timeScheduled` field. */
  timeScheduled?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `trigger` field. */
  trigger?: InputMaybe<TriggerFilter>;
};

/** An input for mutations affecting `TriggerSchedule` */
export type TriggerScheduleInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<TriggerScheduleApplicationIdFkeyInput>;
  data?: InputMaybe<Scalars['JSON']['input']>;
  editorUserId?: InputMaybe<Scalars['Int']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TriggerScheduleTemplateIdFkeyInput>;
  timeScheduled: Scalars['Datetime']['input'];
  trigger?: InputMaybe<Trigger>;
};

/** The globally unique `ID` look up for the row to connect. */
export type TriggerScheduleNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `triggerSchedule` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type TriggerScheduleNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `triggerSchedule` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type TriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The fields on `triggerSchedule` to look up the row to update. */
export type TriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingTriggerSchedulePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `triggerSchedule` being updated. */
  patch: UpdateTriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type TriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `template` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `template` being updated. */
  patch: TemplatePatch;
};

/** The fields on `triggerSchedule` to look up the row to update. */
export type TriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTriggerSchedulePkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `triggerSchedule` being updated. */
  patch: UpdateTriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyPatch;
};

/** Represents an update to a `TriggerSchedule`. Fields that are set will be updated. */
export type TriggerSchedulePatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<TriggerScheduleApplicationIdFkeyInput>;
  data?: InputMaybe<Scalars['JSON']['input']>;
  editorUserId?: InputMaybe<Scalars['Int']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TriggerScheduleTemplateIdFkeyInput>;
  timeScheduled?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
};

/** Input for the nested mutation of `template` in the `TriggerScheduleInput` mutation. */
export type TriggerScheduleTemplateIdFkeyInput = {
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectById?: InputMaybe<TemplateTemplatePkeyConnect>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<TemplateNodeIdConnect>;
  /** A `TemplateInput` object that will be created and connected to this object. */
  create?: InputMaybe<TriggerScheduleTemplateIdFkeyTemplateCreateInput>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByCodeAndVersionId?: InputMaybe<TemplateTemplateCodeVersionIdKeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteById?: InputMaybe<TemplateTemplatePkeyDelete>;
  /** The primary key(s) for `template` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<TemplateNodeIdDelete>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByCodeAndVersionId?: InputMaybe<TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateById?: InputMaybe<TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTemplatePkeyUpdate>;
  /** The primary key(s) and patch data for `template` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<TriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyNodeIdUpdate>;
};

/** Input for the nested mutation of `triggerSchedule` in the `TemplateInput` mutation. */
export type TriggerScheduleTemplateIdFkeyInverseInput = {
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  connectById?: InputMaybe<Array<TriggerScheduleTriggerSchedulePkeyConnect>>;
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<TriggerScheduleNodeIdConnect>>;
  /** A `TriggerScheduleInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<TriggerScheduleTemplateIdFkeyTriggerScheduleCreateInput>>;
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<TriggerScheduleTriggerSchedulePkeyDelete>>;
  /** The primary key(s) for `triggerSchedule` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<TriggerScheduleNodeIdDelete>>;
  /** Flag indicating whether all other `triggerSchedule` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `triggerSchedule` for the far side of the relationship. */
  updateById?: InputMaybe<Array<TriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTriggerSchedulePkeyUpdate>>;
  /** The primary key(s) and patch data for `triggerSchedule` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyNodeIdUpdate>>;
};

/** The `template` to be created by this mutation. */
export type TriggerScheduleTemplateIdFkeyTemplateCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code: Scalars['String']['input'];
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId: Scalars['String']['input'];
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** The `triggerSchedule` to be created by this mutation. */
export type TriggerScheduleTemplateIdFkeyTriggerScheduleCreateInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<TriggerScheduleApplicationIdFkeyInput>;
  data?: InputMaybe<Scalars['JSON']['input']>;
  editorUserId?: InputMaybe<Scalars['Int']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  templateToTemplateId?: InputMaybe<TriggerScheduleTemplateIdFkeyInput>;
  timeScheduled: Scalars['Datetime']['input'];
  trigger?: InputMaybe<Trigger>;
};

/** The fields on `triggerSchedule` to look up the row to connect. */
export type TriggerScheduleTriggerSchedulePkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `triggerSchedule` to look up the row to delete. */
export type TriggerScheduleTriggerSchedulePkeyDelete = {
  id: Scalars['Int']['input'];
};

/** A connection to a list of `TriggerSchedule` values. */
export type TriggerSchedulesConnection = {
  __typename?: 'TriggerSchedulesConnection';
  /** A list of edges which contains the `TriggerSchedule` and cursor to aid in pagination. */
  edges: Array<TriggerSchedulesEdge>;
  /** A list of `TriggerSchedule` objects. */
  nodes: Array<Maybe<TriggerSchedule>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `TriggerSchedule` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `TriggerSchedule` edge in the connection. */
export type TriggerSchedulesEdge = {
  __typename?: 'TriggerSchedulesEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `TriggerSchedule` at the end of the edge. */
  node?: Maybe<TriggerSchedule>;
};

/** Methods to use when ordering `TriggerSchedule`. */
export enum TriggerSchedulesOrderBy {
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  DataAsc = 'DATA_ASC',
  DataDesc = 'DATA_DESC',
  EditorUserIdAsc = 'EDITOR_USER_ID_ASC',
  EditorUserIdDesc = 'EDITOR_USER_ID_DESC',
  EventCodeAsc = 'EVENT_CODE_ASC',
  EventCodeDesc = 'EVENT_CODE_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsActiveAsc = 'IS_ACTIVE_ASC',
  IsActiveDesc = 'IS_ACTIVE_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  TemplateIdAsc = 'TEMPLATE_ID_ASC',
  TemplateIdDesc = 'TEMPLATE_ID_DESC',
  TimeScheduledAsc = 'TIME_SCHEDULED_ASC',
  TimeScheduledDesc = 'TIME_SCHEDULED_DESC',
  TriggerAsc = 'TRIGGER_ASC',
  TriggerDesc = 'TRIGGER_DESC'
}

export enum UiLocation {
  Admin = 'ADMIN',
  Dashboard = 'DASHBOARD',
  List = 'LIST',
  Management = 'MANAGEMENT',
  User = 'USER'
}

/** A filter to be used against UiLocation List fields. All fields are combined with a logical ‘and.’ */
export type UiLocationListFilter = {
  /** Any array item is equal to the specified value. */
  anyEqualTo?: InputMaybe<UiLocation>;
  /** Any array item is greater than the specified value. */
  anyGreaterThan?: InputMaybe<UiLocation>;
  /** Any array item is greater than or equal to the specified value. */
  anyGreaterThanOrEqualTo?: InputMaybe<UiLocation>;
  /** Any array item is less than the specified value. */
  anyLessThan?: InputMaybe<UiLocation>;
  /** Any array item is less than or equal to the specified value. */
  anyLessThanOrEqualTo?: InputMaybe<UiLocation>;
  /** Any array item is not equal to the specified value. */
  anyNotEqualTo?: InputMaybe<UiLocation>;
  /** Contained by the specified list of values. */
  containedBy?: InputMaybe<Array<InputMaybe<UiLocation>>>;
  /** Contains the specified list of values. */
  contains?: InputMaybe<Array<InputMaybe<UiLocation>>>;
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Array<InputMaybe<UiLocation>>>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Array<InputMaybe<UiLocation>>>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Array<InputMaybe<UiLocation>>>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Array<InputMaybe<UiLocation>>>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Array<InputMaybe<UiLocation>>>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Array<InputMaybe<UiLocation>>>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Array<InputMaybe<UiLocation>>>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Array<InputMaybe<UiLocation>>>;
  /** Overlaps the specified list of values. */
  overlaps?: InputMaybe<Array<InputMaybe<UiLocation>>>;
};

export type UnnestedSection = {
  __typename?: 'UnnestedSection';
  id?: Maybe<Scalars['Int']['output']>;
  section?: Maybe<Scalars['String']['output']>;
};

/**
 * A condition to be used against `UnnestedSection` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type UnnestedSectionCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `section` field. */
  section?: InputMaybe<Scalars['String']['input']>;
};

/** A filter to be used against `UnnestedSection` object types. All fields are combined with a logical ‘and.’ */
export type UnnestedSectionFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<UnnestedSectionFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<UnnestedSectionFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<UnnestedSectionFilter>>;
  /** Filter by the object’s `section` field. */
  section?: InputMaybe<StringFilter>;
};

/** A connection to a list of `UnnestedSection` values. */
export type UnnestedSectionsConnection = {
  __typename?: 'UnnestedSectionsConnection';
  /** A list of edges which contains the `UnnestedSection` and cursor to aid in pagination. */
  edges: Array<UnnestedSectionsEdge>;
  /** A list of `UnnestedSection` objects. */
  nodes: Array<Maybe<UnnestedSection>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UnnestedSection` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `UnnestedSection` edge in the connection. */
export type UnnestedSectionsEdge = {
  __typename?: 'UnnestedSectionsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `UnnestedSection` at the end of the edge. */
  node?: Maybe<UnnestedSection>;
};

/** Methods to use when ordering `UnnestedSection`. */
export enum UnnestedSectionsOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  SectionAsc = 'SECTION_ASC',
  SectionDesc = 'SECTION_DESC'
}

/** All input for the `updateActionPluginByCode` mutation. */
export type UpdateActionPluginByCodeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `ActionPlugin` being updated. */
  patch: ActionPluginPatch;
};

/** All input for the `updateActionPluginByNodeId` mutation. */
export type UpdateActionPluginByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ActionPlugin` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `ActionPlugin` being updated. */
  patch: ActionPluginPatch;
};

/** All input for the `updateActionPlugin` mutation. */
export type UpdateActionPluginInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `ActionPlugin` being updated. */
  patch: ActionPluginPatch;
};

/** The output of our update `ActionPlugin` mutation. */
export type UpdateActionPluginPayload = {
  __typename?: 'UpdateActionPluginPayload';
  /** The `ActionPlugin` that was updated by this mutation. */
  actionPlugin?: Maybe<ActionPlugin>;
  /** An edge for our `ActionPlugin`. May be used by Relay 1. */
  actionPluginEdge?: Maybe<ActionPluginsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `ActionPlugin` mutation. */
export type UpdateActionPluginPayloadActionPluginEdgeArgs = {
  orderBy?: InputMaybe<Array<ActionPluginsOrderBy>>;
};

/** All input for the `updateActionQueueByNodeId` mutation. */
export type UpdateActionQueueByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ActionQueue` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `ActionQueue` being updated. */
  patch: ActionQueuePatch;
};

/** All input for the `updateActionQueue` mutation. */
export type UpdateActionQueueInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `ActionQueue` being updated. */
  patch: ActionQueuePatch;
};

/** The output of our update `ActionQueue` mutation. */
export type UpdateActionQueuePayload = {
  __typename?: 'UpdateActionQueuePayload';
  /** The `ActionQueue` that was updated by this mutation. */
  actionQueue?: Maybe<ActionQueue>;
  /** An edge for our `ActionQueue`. May be used by Relay 1. */
  actionQueueEdge?: Maybe<ActionQueuesEdge>;
  /** Reads a single `Application` that is related to this `ActionQueue`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `ActionQueue`. */
  template?: Maybe<Template>;
  /** Reads a single `TriggerQueue` that is related to this `ActionQueue`. */
  triggerQueueByTriggerEvent?: Maybe<TriggerQueue>;
};


/** The output of our update `ActionQueue` mutation. */
export type UpdateActionQueuePayloadActionQueueEdgeArgs = {
  orderBy?: InputMaybe<Array<ActionQueuesOrderBy>>;
};

/** All input for the `updateActivityLogByNodeId` mutation. */
export type UpdateActivityLogByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ActivityLog` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `ActivityLog` being updated. */
  patch: ActivityLogPatch;
};

/** All input for the `updateActivityLog` mutation. */
export type UpdateActivityLogInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `ActivityLog` being updated. */
  patch: ActivityLogPatch;
};

/** The output of our update `ActivityLog` mutation. */
export type UpdateActivityLogPayload = {
  __typename?: 'UpdateActivityLogPayload';
  /** The `ActivityLog` that was updated by this mutation. */
  activityLog?: Maybe<ActivityLog>;
  /** An edge for our `ActivityLog`. May be used by Relay 1. */
  activityLogEdge?: Maybe<ActivityLogsEdge>;
  /** Reads a single `Application` that is related to this `ActivityLog`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `ActivityLog` mutation. */
export type UpdateActivityLogPayloadActivityLogEdgeArgs = {
  orderBy?: InputMaybe<Array<ActivityLogsOrderBy>>;
};

/** All input for the `updateApplicationByNodeId` mutation. */
export type UpdateApplicationByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `Application` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `Application` being updated. */
  patch: ApplicationPatch;
};

/** All input for the `updateApplicationByOutcomeRegistration` mutation. */
export type UpdateApplicationByOutcomeRegistrationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  outcomeRegistration: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `Application` being updated. */
  patch: ApplicationPatch;
};

/** All input for the `updateApplicationBySerial` mutation. */
export type UpdateApplicationBySerialInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** An object where the defined keys will be set on the `Application` being updated. */
  patch: ApplicationPatch;
  serial: Scalars['String']['input'];
};

/** All input for the `updateApplication` mutation. */
export type UpdateApplicationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `Application` being updated. */
  patch: ApplicationPatch;
};

/** All input for the `updateApplicationNoteByNodeId` mutation. */
export type UpdateApplicationNoteByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ApplicationNote` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `ApplicationNote` being updated. */
  patch: ApplicationNotePatch;
};

/** All input for the `updateApplicationNote` mutation. */
export type UpdateApplicationNoteInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `ApplicationNote` being updated. */
  patch: ApplicationNotePatch;
};

/** The output of our update `ApplicationNote` mutation. */
export type UpdateApplicationNotePayload = {
  __typename?: 'UpdateApplicationNotePayload';
  /** Reads a single `Application` that is related to this `ApplicationNote`. */
  application?: Maybe<Application>;
  /** The `ApplicationNote` that was updated by this mutation. */
  applicationNote?: Maybe<ApplicationNote>;
  /** An edge for our `ApplicationNote`. May be used by Relay 1. */
  applicationNoteEdge?: Maybe<ApplicationNotesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Reads a single `Organisation` that is related to this `ApplicationNote`. */
  org?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `UserList` that is related to this `ApplicationNote`. */
  user?: Maybe<UserList>;
};


/** The output of our update `ApplicationNote` mutation. */
export type UpdateApplicationNotePayloadApplicationNoteEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationNotesOrderBy>>;
};

/** The output of our update `Application` mutation. */
export type UpdateApplicationPayload = {
  __typename?: 'UpdateApplicationPayload';
  /** The `Application` that was updated by this mutation. */
  application?: Maybe<Application>;
  /** An edge for our `Application`. May be used by Relay 1. */
  applicationEdge?: Maybe<ApplicationsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Reads a single `Organisation` that is related to this `Application`. */
  org?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `Application`. */
  template?: Maybe<Template>;
  /** Reads a single `UserList` that is related to this `Application`. */
  user?: Maybe<UserList>;
};


/** The output of our update `Application` mutation. */
export type UpdateApplicationPayloadApplicationEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationsOrderBy>>;
};

/** All input for the `updateApplicationResponseByNodeId` mutation. */
export type UpdateApplicationResponseByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ApplicationResponse` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `ApplicationResponse` being updated. */
  patch: ApplicationResponsePatch;
};

/** All input for the `updateApplicationResponse` mutation. */
export type UpdateApplicationResponseInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `ApplicationResponse` being updated. */
  patch: ApplicationResponsePatch;
};

/** The output of our update `ApplicationResponse` mutation. */
export type UpdateApplicationResponsePayload = {
  __typename?: 'UpdateApplicationResponsePayload';
  /** Reads a single `Application` that is related to this `ApplicationResponse`. */
  application?: Maybe<Application>;
  /** The `ApplicationResponse` that was updated by this mutation. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /** An edge for our `ApplicationResponse`. May be used by Relay 1. */
  applicationResponseEdge?: Maybe<ApplicationResponsesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateElement` that is related to this `ApplicationResponse`. */
  templateElement?: Maybe<TemplateElement>;
};


/** The output of our update `ApplicationResponse` mutation. */
export type UpdateApplicationResponsePayloadApplicationResponseEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationResponsesOrderBy>>;
};

/** All input for the `updateApplicationReviewerActionByNodeId` mutation. */
export type UpdateApplicationReviewerActionByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ApplicationReviewerAction` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `ApplicationReviewerAction` being updated. */
  patch: ApplicationReviewerActionPatch;
};

/** All input for the `updateApplicationReviewerActionByUserIdAndApplicationId` mutation. */
export type UpdateApplicationReviewerActionByUserIdAndApplicationIdInput = {
  applicationId: Scalars['Int']['input'];
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** An object where the defined keys will be set on the `ApplicationReviewerAction` being updated. */
  patch: ApplicationReviewerActionPatch;
  userId: Scalars['Int']['input'];
};

/** All input for the `updateApplicationReviewerAction` mutation. */
export type UpdateApplicationReviewerActionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `ApplicationReviewerAction` being updated. */
  patch: ApplicationReviewerActionPatch;
};

/** The output of our update `ApplicationReviewerAction` mutation. */
export type UpdateApplicationReviewerActionPayload = {
  __typename?: 'UpdateApplicationReviewerActionPayload';
  /** Reads a single `Application` that is related to this `ApplicationReviewerAction`. */
  application?: Maybe<Application>;
  /** The `ApplicationReviewerAction` that was updated by this mutation. */
  applicationReviewerAction?: Maybe<ApplicationReviewerAction>;
  /** An edge for our `ApplicationReviewerAction`. May be used by Relay 1. */
  applicationReviewerActionEdge?: Maybe<ApplicationReviewerActionsEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `ApplicationReviewerAction` mutation. */
export type UpdateApplicationReviewerActionPayloadApplicationReviewerActionEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationReviewerActionsOrderBy>>;
};

/** All input for the `updateApplicationStageHistoryByNodeId` mutation. */
export type UpdateApplicationStageHistoryByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ApplicationStageHistory` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `ApplicationStageHistory` being updated. */
  patch: ApplicationStageHistoryPatch;
};

/** All input for the `updateApplicationStageHistory` mutation. */
export type UpdateApplicationStageHistoryInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `ApplicationStageHistory` being updated. */
  patch: ApplicationStageHistoryPatch;
};

/** The output of our update `ApplicationStageHistory` mutation. */
export type UpdateApplicationStageHistoryPayload = {
  __typename?: 'UpdateApplicationStageHistoryPayload';
  /** Reads a single `Application` that is related to this `ApplicationStageHistory`. */
  application?: Maybe<Application>;
  /** The `ApplicationStageHistory` that was updated by this mutation. */
  applicationStageHistory?: Maybe<ApplicationStageHistory>;
  /** An edge for our `ApplicationStageHistory`. May be used by Relay 1. */
  applicationStageHistoryEdge?: Maybe<ApplicationStageHistoriesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateStage` that is related to this `ApplicationStageHistory`. */
  stage?: Maybe<TemplateStage>;
};


/** The output of our update `ApplicationStageHistory` mutation. */
export type UpdateApplicationStageHistoryPayloadApplicationStageHistoryEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationStageHistoriesOrderBy>>;
};

/** All input for the `updateApplicationStatusHistoryByNodeId` mutation. */
export type UpdateApplicationStatusHistoryByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ApplicationStatusHistory` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `ApplicationStatusHistory` being updated. */
  patch: ApplicationStatusHistoryPatch;
};

/** All input for the `updateApplicationStatusHistory` mutation. */
export type UpdateApplicationStatusHistoryInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `ApplicationStatusHistory` being updated. */
  patch: ApplicationStatusHistoryPatch;
};

/** The output of our update `ApplicationStatusHistory` mutation. */
export type UpdateApplicationStatusHistoryPayload = {
  __typename?: 'UpdateApplicationStatusHistoryPayload';
  /** Reads a single `ApplicationStageHistory` that is related to this `ApplicationStatusHistory`. */
  applicationStageHistory?: Maybe<ApplicationStageHistory>;
  /** The `ApplicationStatusHistory` that was updated by this mutation. */
  applicationStatusHistory?: Maybe<ApplicationStatusHistory>;
  /** An edge for our `ApplicationStatusHistory`. May be used by Relay 1. */
  applicationStatusHistoryEdge?: Maybe<ApplicationStatusHistoriesEdge>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `ApplicationStatusHistory` mutation. */
export type UpdateApplicationStatusHistoryPayloadApplicationStatusHistoryEdgeArgs = {
  orderBy?: InputMaybe<Array<ApplicationStatusHistoriesOrderBy>>;
};

/** All input for the `updateCounterByName` mutation. */
export type UpdateCounterByNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `Counter` being updated. */
  patch: CounterPatch;
};

/** All input for the `updateCounterByNodeId` mutation. */
export type UpdateCounterByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `Counter` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `Counter` being updated. */
  patch: CounterPatch;
};

/** All input for the `updateCounter` mutation. */
export type UpdateCounterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `Counter` being updated. */
  patch: CounterPatch;
};

/** The output of our update `Counter` mutation. */
export type UpdateCounterPayload = {
  __typename?: 'UpdateCounterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `Counter` that was updated by this mutation. */
  counter?: Maybe<Counter>;
  /** An edge for our `Counter`. May be used by Relay 1. */
  counterEdge?: Maybe<CountersEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `Counter` mutation. */
export type UpdateCounterPayloadCounterEdgeArgs = {
  orderBy?: InputMaybe<Array<CountersOrderBy>>;
};

/** All input for the `updateDataChangelogByNodeId` mutation. */
export type UpdateDataChangelogByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `DataChangelog` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `DataChangelog` being updated. */
  patch: DataChangelogPatch;
};

/** All input for the `updateDataChangelog` mutation. */
export type UpdateDataChangelogInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `DataChangelog` being updated. */
  patch: DataChangelogPatch;
};

/** The output of our update `DataChangelog` mutation. */
export type UpdateDataChangelogPayload = {
  __typename?: 'UpdateDataChangelogPayload';
  /** Reads a single `Application` that is related to this `DataChangelog`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `DataChangelog` that was updated by this mutation. */
  dataChangelog?: Maybe<DataChangelog>;
  /** An edge for our `DataChangelog`. May be used by Relay 1. */
  dataChangelogEdge?: Maybe<DataChangelogsEdge>;
  /** Reads a single `Organisation` that is related to this `DataChangelog`. */
  org?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `DataChangelog` mutation. */
export type UpdateDataChangelogPayloadDataChangelogEdgeArgs = {
  orderBy?: InputMaybe<Array<DataChangelogsOrderBy>>;
};

/** All input for the `updateDataTableByNodeId` mutation. */
export type UpdateDataTableByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `DataTable` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `DataTable` being updated. */
  patch: DataTablePatch;
};

/** All input for the `updateDataTableByTableName` mutation. */
export type UpdateDataTableByTableNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** An object where the defined keys will be set on the `DataTable` being updated. */
  patch: DataTablePatch;
  tableName: Scalars['String']['input'];
};

/** All input for the `updateDataTable` mutation. */
export type UpdateDataTableInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `DataTable` being updated. */
  patch: DataTablePatch;
};

/** The output of our update `DataTable` mutation. */
export type UpdateDataTablePayload = {
  __typename?: 'UpdateDataTablePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `DataTable` that was updated by this mutation. */
  dataTable?: Maybe<DataTable>;
  /** An edge for our `DataTable`. May be used by Relay 1. */
  dataTableEdge?: Maybe<DataTablesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `DataTable` mutation. */
export type UpdateDataTablePayloadDataTableEdgeArgs = {
  orderBy?: InputMaybe<Array<DataTablesOrderBy>>;
};

/** All input for the `updateDataViewByIdentifier` mutation. */
export type UpdateDataViewByIdentifierInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  identifier: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `DataView` being updated. */
  patch: DataViewPatch;
};

/** All input for the `updateDataViewByNodeId` mutation. */
export type UpdateDataViewByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `DataView` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `DataView` being updated. */
  patch: DataViewPatch;
};

/** All input for the `updateDataViewColumnDefinitionByNodeId` mutation. */
export type UpdateDataViewColumnDefinitionByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `DataViewColumnDefinition` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `DataViewColumnDefinition` being updated. */
  patch: DataViewColumnDefinitionPatch;
};

/** All input for the `updateDataViewColumnDefinitionByTableNameAndColumnName` mutation. */
export type UpdateDataViewColumnDefinitionByTableNameAndColumnNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  columnName: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `DataViewColumnDefinition` being updated. */
  patch: DataViewColumnDefinitionPatch;
  tableName: Scalars['String']['input'];
};

/** All input for the `updateDataViewColumnDefinition` mutation. */
export type UpdateDataViewColumnDefinitionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `DataViewColumnDefinition` being updated. */
  patch: DataViewColumnDefinitionPatch;
};

/** The output of our update `DataViewColumnDefinition` mutation. */
export type UpdateDataViewColumnDefinitionPayload = {
  __typename?: 'UpdateDataViewColumnDefinitionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `DataViewColumnDefinition` that was updated by this mutation. */
  dataViewColumnDefinition?: Maybe<DataViewColumnDefinition>;
  /** An edge for our `DataViewColumnDefinition`. May be used by Relay 1. */
  dataViewColumnDefinitionEdge?: Maybe<DataViewColumnDefinitionsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `DataViewColumnDefinition` mutation. */
export type UpdateDataViewColumnDefinitionPayloadDataViewColumnDefinitionEdgeArgs = {
  orderBy?: InputMaybe<Array<DataViewColumnDefinitionsOrderBy>>;
};

/** All input for the `updateDataView` mutation. */
export type UpdateDataViewInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `DataView` being updated. */
  patch: DataViewPatch;
};

/** The output of our update `DataView` mutation. */
export type UpdateDataViewPayload = {
  __typename?: 'UpdateDataViewPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `DataView` that was updated by this mutation. */
  dataView?: Maybe<DataView>;
  /** An edge for our `DataView`. May be used by Relay 1. */
  dataViewEdge?: Maybe<DataViewsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `DataView` mutation. */
export type UpdateDataViewPayloadDataViewEdgeArgs = {
  orderBy?: InputMaybe<Array<DataViewsOrderBy>>;
};

/** All input for the `updateElementTypePluginByNodeId` mutation. */
export type UpdateElementTypePluginByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ElementTypePlugin` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `ElementTypePlugin` being updated. */
  patch: ElementTypePluginPatch;
};

/** All input for the `updateElementTypePlugin` mutation. */
export type UpdateElementTypePluginInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `ElementTypePlugin` being updated. */
  patch: ElementTypePluginPatch;
};

/** The output of our update `ElementTypePlugin` mutation. */
export type UpdateElementTypePluginPayload = {
  __typename?: 'UpdateElementTypePluginPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `ElementTypePlugin` that was updated by this mutation. */
  elementTypePlugin?: Maybe<ElementTypePlugin>;
  /** An edge for our `ElementTypePlugin`. May be used by Relay 1. */
  elementTypePluginEdge?: Maybe<ElementTypePluginsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `ElementTypePlugin` mutation. */
export type UpdateElementTypePluginPayloadElementTypePluginEdgeArgs = {
  orderBy?: InputMaybe<Array<ElementTypePluginsOrderBy>>;
};

/** All input for the `updateFileByNodeId` mutation. */
export type UpdateFileByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `File` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `File` being updated. */
  patch: FilePatch;
};

/** All input for the `updateFileByUniqueId` mutation. */
export type UpdateFileByUniqueIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** An object where the defined keys will be set on the `File` being updated. */
  patch: FilePatch;
  uniqueId: Scalars['String']['input'];
};

/** All input for the `updateFile` mutation. */
export type UpdateFileInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `File` being updated. */
  patch: FilePatch;
};

/** The output of our update `File` mutation. */
export type UpdateFilePayload = {
  __typename?: 'UpdateFilePayload';
  /** Reads a single `Application` that is related to this `File`. */
  applicationByApplicationSerial?: Maybe<Application>;
  /** Reads a single `ApplicationNote` that is related to this `File`. */
  applicationNote?: Maybe<ApplicationNote>;
  /** Reads a single `ApplicationResponse` that is related to this `File`. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `File` that was updated by this mutation. */
  file?: Maybe<File>;
  /** An edge for our `File`. May be used by Relay 1. */
  fileEdge?: Maybe<FilesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `File`. */
  template?: Maybe<Template>;
};


/** The output of our update `File` mutation. */
export type UpdateFilePayloadFileEdgeArgs = {
  orderBy?: InputMaybe<Array<FilesOrderBy>>;
};

/** All input for the `updateFilterByCode` mutation. */
export type UpdateFilterByCodeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `Filter` being updated. */
  patch: FilterPatch;
};

/** All input for the `updateFilterByNodeId` mutation. */
export type UpdateFilterByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `Filter` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `Filter` being updated. */
  patch: FilterPatch;
};

/** All input for the `updateFilter` mutation. */
export type UpdateFilterInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `Filter` being updated. */
  patch: FilterPatch;
};

/** The output of our update `Filter` mutation. */
export type UpdateFilterPayload = {
  __typename?: 'UpdateFilterPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `Filter` that was updated by this mutation. */
  filter?: Maybe<Filter>;
  /** An edge for our `Filter`. May be used by Relay 1. */
  filterEdge?: Maybe<FiltersEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `Filter` mutation. */
export type UpdateFilterPayloadFilterEdgeArgs = {
  orderBy?: InputMaybe<Array<FiltersOrderBy>>;
};

/** All input for the `updateNotificationByNodeId` mutation. */
export type UpdateNotificationByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `Notification` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `Notification` being updated. */
  patch: NotificationPatch;
};

/** All input for the `updateNotification` mutation. */
export type UpdateNotificationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `Notification` being updated. */
  patch: NotificationPatch;
};

/** The output of our update `Notification` mutation. */
export type UpdateNotificationPayload = {
  __typename?: 'UpdateNotificationPayload';
  /** Reads a single `Application` that is related to this `Notification`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `Notification` that was updated by this mutation. */
  notification?: Maybe<Notification>;
  /** An edge for our `Notification`. May be used by Relay 1. */
  notificationEdge?: Maybe<NotificationsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Review` that is related to this `Notification`. */
  review?: Maybe<Review>;
};


/** The output of our update `Notification` mutation. */
export type UpdateNotificationPayloadNotificationEdgeArgs = {
  orderBy?: InputMaybe<Array<NotificationsOrderBy>>;
};

/** All input for the `updateOrganisationByName` mutation. */
export type UpdateOrganisationByNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `Organisation` being updated. */
  patch: OrganisationPatch;
};

/** All input for the `updateOrganisationByNodeId` mutation. */
export type UpdateOrganisationByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `Organisation` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `Organisation` being updated. */
  patch: OrganisationPatch;
};

/** All input for the `updateOrganisationByRegistration` mutation. */
export type UpdateOrganisationByRegistrationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** An object where the defined keys will be set on the `Organisation` being updated. */
  patch: OrganisationPatch;
  registration: Scalars['String']['input'];
};

/** All input for the `updateOrganisation` mutation. */
export type UpdateOrganisationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `Organisation` being updated. */
  patch: OrganisationPatch;
};

/** The output of our update `Organisation` mutation. */
export type UpdateOrganisationPayload = {
  __typename?: 'UpdateOrganisationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `Organisation` that was updated by this mutation. */
  organisation?: Maybe<Organisation>;
  /** An edge for our `Organisation`. May be used by Relay 1. */
  organisationEdge?: Maybe<OrganisationsEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `Organisation` mutation. */
export type UpdateOrganisationPayloadOrganisationEdgeArgs = {
  orderBy?: InputMaybe<Array<OrganisationsOrderBy>>;
};

/** All input for the `updatePermissionJoinByNodeId` mutation. */
export type UpdatePermissionJoinByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `PermissionJoin` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `PermissionJoin` being updated. */
  patch: PermissionJoinPatch;
};

/** All input for the `updatePermissionJoin` mutation. */
export type UpdatePermissionJoinInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `PermissionJoin` being updated. */
  patch: PermissionJoinPatch;
};

/** The output of our update `PermissionJoin` mutation. */
export type UpdatePermissionJoinPayload = {
  __typename?: 'UpdatePermissionJoinPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Reads a single `Organisation` that is related to this `PermissionJoin`. */
  organisation?: Maybe<Organisation>;
  /** The `PermissionJoin` that was updated by this mutation. */
  permissionJoin?: Maybe<PermissionJoin>;
  /** An edge for our `PermissionJoin`. May be used by Relay 1. */
  permissionJoinEdge?: Maybe<PermissionJoinsEdge>;
  /** Reads a single `PermissionName` that is related to this `PermissionJoin`. */
  permissionName?: Maybe<PermissionName>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `UserList` that is related to this `PermissionJoin`. */
  user?: Maybe<UserList>;
};


/** The output of our update `PermissionJoin` mutation. */
export type UpdatePermissionJoinPayloadPermissionJoinEdgeArgs = {
  orderBy?: InputMaybe<Array<PermissionJoinsOrderBy>>;
};

/** All input for the `updatePermissionNameByName` mutation. */
export type UpdatePermissionNameByNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `PermissionName` being updated. */
  patch: PermissionNamePatch;
};

/** All input for the `updatePermissionNameByNodeId` mutation. */
export type UpdatePermissionNameByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `PermissionName` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `PermissionName` being updated. */
  patch: PermissionNamePatch;
};

/** All input for the `updatePermissionName` mutation. */
export type UpdatePermissionNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `PermissionName` being updated. */
  patch: PermissionNamePatch;
};

/** The output of our update `PermissionName` mutation. */
export type UpdatePermissionNamePayload = {
  __typename?: 'UpdatePermissionNamePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `PermissionName` that was updated by this mutation. */
  permissionName?: Maybe<PermissionName>;
  /** An edge for our `PermissionName`. May be used by Relay 1. */
  permissionNameEdge?: Maybe<PermissionNamesEdge>;
  /** Reads a single `PermissionPolicy` that is related to this `PermissionName`. */
  permissionPolicy?: Maybe<PermissionPolicy>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `PermissionName` mutation. */
export type UpdatePermissionNamePayloadPermissionNameEdgeArgs = {
  orderBy?: InputMaybe<Array<PermissionNamesOrderBy>>;
};

/** All input for the `updatePermissionPolicyByName` mutation. */
export type UpdatePermissionPolicyByNameInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `PermissionPolicy` being updated. */
  patch: PermissionPolicyPatch;
};

/** All input for the `updatePermissionPolicyByNodeId` mutation. */
export type UpdatePermissionPolicyByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `PermissionPolicy` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `PermissionPolicy` being updated. */
  patch: PermissionPolicyPatch;
};

/** All input for the `updatePermissionPolicy` mutation. */
export type UpdatePermissionPolicyInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `PermissionPolicy` being updated. */
  patch: PermissionPolicyPatch;
};

/** The output of our update `PermissionPolicy` mutation. */
export type UpdatePermissionPolicyPayload = {
  __typename?: 'UpdatePermissionPolicyPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** The `PermissionPolicy` that was updated by this mutation. */
  permissionPolicy?: Maybe<PermissionPolicy>;
  /** An edge for our `PermissionPolicy`. May be used by Relay 1. */
  permissionPolicyEdge?: Maybe<PermissionPoliciesEdge>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
};


/** The output of our update `PermissionPolicy` mutation. */
export type UpdatePermissionPolicyPayloadPermissionPolicyEdgeArgs = {
  orderBy?: InputMaybe<Array<PermissionPoliciesOrderBy>>;
};

/** All input for the `updateReviewAssignmentAssignerJoinByNodeId` mutation. */
export type UpdateReviewAssignmentAssignerJoinByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ReviewAssignmentAssignerJoin` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `ReviewAssignmentAssignerJoin` being updated. */
  patch: ReviewAssignmentAssignerJoinPatch;
};

/** All input for the `updateReviewAssignmentAssignerJoin` mutation. */
export type UpdateReviewAssignmentAssignerJoinInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `ReviewAssignmentAssignerJoin` being updated. */
  patch: ReviewAssignmentAssignerJoinPatch;
};

/** The output of our update `ReviewAssignmentAssignerJoin` mutation. */
export type UpdateReviewAssignmentAssignerJoinPayload = {
  __typename?: 'UpdateReviewAssignmentAssignerJoinPayload';
  /** Reads a single `UserList` that is related to this `ReviewAssignmentAssignerJoin`. */
  assigner?: Maybe<UserList>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Reads a single `Organisation` that is related to this `ReviewAssignmentAssignerJoin`. */
  organisation?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `ReviewAssignment` that is related to this `ReviewAssignmentAssignerJoin`. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** The `ReviewAssignmentAssignerJoin` that was updated by this mutation. */
  reviewAssignmentAssignerJoin?: Maybe<ReviewAssignmentAssignerJoin>;
  /** An edge for our `ReviewAssignmentAssignerJoin`. May be used by Relay 1. */
  reviewAssignmentAssignerJoinEdge?: Maybe<ReviewAssignmentAssignerJoinsEdge>;
};


/** The output of our update `ReviewAssignmentAssignerJoin` mutation. */
export type UpdateReviewAssignmentAssignerJoinPayloadReviewAssignmentAssignerJoinEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewAssignmentAssignerJoinsOrderBy>>;
};

/** All input for the `updateReviewAssignmentByNodeId` mutation. */
export type UpdateReviewAssignmentByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ReviewAssignment` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `ReviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** All input for the `updateReviewAssignment` mutation. */
export type UpdateReviewAssignmentInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `ReviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The output of our update `ReviewAssignment` mutation. */
export type UpdateReviewAssignmentPayload = {
  __typename?: 'UpdateReviewAssignmentPayload';
  /** Reads a single `Application` that is related to this `ReviewAssignment`. */
  application?: Maybe<Application>;
  /** Reads a single `UserList` that is related to this `ReviewAssignment`. */
  assigner?: Maybe<UserList>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Reads a single `TemplateStageReviewLevel` that is related to this `ReviewAssignment`. */
  level?: Maybe<TemplateStageReviewLevel>;
  /** Reads a single `Organisation` that is related to this `ReviewAssignment`. */
  organisation?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `ReviewAssignment` that was updated by this mutation. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** An edge for our `ReviewAssignment`. May be used by Relay 1. */
  reviewAssignmentEdge?: Maybe<ReviewAssignmentsEdge>;
  /** Reads a single `UserList` that is related to this `ReviewAssignment`. */
  reviewer?: Maybe<UserList>;
  /** Reads a single `TemplateStage` that is related to this `ReviewAssignment`. */
  stage?: Maybe<TemplateStage>;
  /** Reads a single `Template` that is related to this `ReviewAssignment`. */
  template?: Maybe<Template>;
};


/** The output of our update `ReviewAssignment` mutation. */
export type UpdateReviewAssignmentPayloadReviewAssignmentEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewAssignmentsOrderBy>>;
};

/** All input for the `updateReviewByNodeId` mutation. */
export type UpdateReviewByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `Review` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `Review` being updated. */
  patch: ReviewPatch;
};

/** All input for the `updateReviewByReviewAssignmentId` mutation. */
export type UpdateReviewByReviewAssignmentIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** An object where the defined keys will be set on the `Review` being updated. */
  patch: ReviewPatch;
  reviewAssignmentId: Scalars['Int']['input'];
};

/** All input for the `updateReviewDecisionByNodeId` mutation. */
export type UpdateReviewDecisionByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ReviewDecision` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `ReviewDecision` being updated. */
  patch: ReviewDecisionPatch;
};

/** All input for the `updateReviewDecision` mutation. */
export type UpdateReviewDecisionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `ReviewDecision` being updated. */
  patch: ReviewDecisionPatch;
};

/** The output of our update `ReviewDecision` mutation. */
export type UpdateReviewDecisionPayload = {
  __typename?: 'UpdateReviewDecisionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Review` that is related to this `ReviewDecision`. */
  review?: Maybe<Review>;
  /** The `ReviewDecision` that was updated by this mutation. */
  reviewDecision?: Maybe<ReviewDecision>;
  /** An edge for our `ReviewDecision`. May be used by Relay 1. */
  reviewDecisionEdge?: Maybe<ReviewDecisionsEdge>;
};


/** The output of our update `ReviewDecision` mutation. */
export type UpdateReviewDecisionPayloadReviewDecisionEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewDecisionsOrderBy>>;
};

/** All input for the `updateReview` mutation. */
export type UpdateReviewInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `Review` being updated. */
  patch: ReviewPatch;
};

/** The output of our update `Review` mutation. */
export type UpdateReviewPayload = {
  __typename?: 'UpdateReviewPayload';
  /** Reads a single `Application` that is related to this `Review`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Review` that was updated by this mutation. */
  review?: Maybe<Review>;
  /** Reads a single `ReviewAssignment` that is related to this `Review`. */
  reviewAssignment?: Maybe<ReviewAssignment>;
  /** An edge for our `Review`. May be used by Relay 1. */
  reviewEdge?: Maybe<ReviewsEdge>;
  /** Reads a single `UserList` that is related to this `Review`. */
  reviewer?: Maybe<UserList>;
};


/** The output of our update `Review` mutation. */
export type UpdateReviewPayloadReviewEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewsOrderBy>>;
};

/** All input for the `updateReviewResponseByNodeId` mutation. */
export type UpdateReviewResponseByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ReviewResponse` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `ReviewResponse` being updated. */
  patch: ReviewResponsePatch;
};

/** All input for the `updateReviewResponse` mutation. */
export type UpdateReviewResponseInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `ReviewResponse` being updated. */
  patch: ReviewResponsePatch;
};

/** The output of our update `ReviewResponse` mutation. */
export type UpdateReviewResponsePayload = {
  __typename?: 'UpdateReviewResponsePayload';
  /** Reads a single `ApplicationResponse` that is related to this `ReviewResponse`. */
  applicationResponse?: Maybe<ApplicationResponse>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Reads a single `ReviewResponse` that is related to this `ReviewResponse`. */
  originalReviewResponse?: Maybe<ReviewResponse>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Review` that is related to this `ReviewResponse`. */
  review?: Maybe<Review>;
  /** The `ReviewResponse` that was updated by this mutation. */
  reviewResponse?: Maybe<ReviewResponse>;
  /** An edge for our `ReviewResponse`. May be used by Relay 1. */
  reviewResponseEdge?: Maybe<ReviewResponsesEdge>;
  /** Reads a single `ReviewResponse` that is related to this `ReviewResponse`. */
  reviewResponseLink?: Maybe<ReviewResponse>;
  /** Reads a single `TemplateElement` that is related to this `ReviewResponse`. */
  templateElement?: Maybe<TemplateElement>;
};


/** The output of our update `ReviewResponse` mutation. */
export type UpdateReviewResponsePayloadReviewResponseEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewResponsesOrderBy>>;
};

/** All input for the `updateReviewStatusHistoryByNodeId` mutation. */
export type UpdateReviewStatusHistoryByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `ReviewStatusHistory` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `ReviewStatusHistory` being updated. */
  patch: ReviewStatusHistoryPatch;
};

/** All input for the `updateReviewStatusHistory` mutation. */
export type UpdateReviewStatusHistoryInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `ReviewStatusHistory` being updated. */
  patch: ReviewStatusHistoryPatch;
};

/** The output of our update `ReviewStatusHistory` mutation. */
export type UpdateReviewStatusHistoryPayload = {
  __typename?: 'UpdateReviewStatusHistoryPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Review` that is related to this `ReviewStatusHistory`. */
  review?: Maybe<Review>;
  /** The `ReviewStatusHistory` that was updated by this mutation. */
  reviewStatusHistory?: Maybe<ReviewStatusHistory>;
  /** An edge for our `ReviewStatusHistory`. May be used by Relay 1. */
  reviewStatusHistoryEdge?: Maybe<ReviewStatusHistoriesEdge>;
};


/** The output of our update `ReviewStatusHistory` mutation. */
export type UpdateReviewStatusHistoryPayloadReviewStatusHistoryEdgeArgs = {
  orderBy?: InputMaybe<Array<ReviewStatusHistoriesOrderBy>>;
};

/** All input for the `updateSystemInfoByNodeId` mutation. */
export type UpdateSystemInfoByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `SystemInfo` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `SystemInfo` being updated. */
  patch: SystemInfoPatch;
};

/** All input for the `updateSystemInfo` mutation. */
export type UpdateSystemInfoInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `SystemInfo` being updated. */
  patch: SystemInfoPatch;
};

/** The output of our update `SystemInfo` mutation. */
export type UpdateSystemInfoPayload = {
  __typename?: 'UpdateSystemInfoPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `SystemInfo` that was updated by this mutation. */
  systemInfo?: Maybe<SystemInfo>;
  /** An edge for our `SystemInfo`. May be used by Relay 1. */
  systemInfoEdge?: Maybe<SystemInfosEdge>;
};


/** The output of our update `SystemInfo` mutation. */
export type UpdateSystemInfoPayloadSystemInfoEdgeArgs = {
  orderBy?: InputMaybe<Array<SystemInfosOrderBy>>;
};

/** All input for the `updateTemplateActionByNodeId` mutation. */
export type UpdateTemplateActionByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TemplateAction` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `TemplateAction` being updated. */
  patch: TemplateActionPatch;
};

/** All input for the `updateTemplateAction` mutation. */
export type UpdateTemplateActionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `TemplateAction` being updated. */
  patch: TemplateActionPatch;
};

/** The output of our update `TemplateAction` mutation. */
export type UpdateTemplateActionPayload = {
  __typename?: 'UpdateTemplateActionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateAction`. */
  template?: Maybe<Template>;
  /** The `TemplateAction` that was updated by this mutation. */
  templateAction?: Maybe<TemplateAction>;
  /** An edge for our `TemplateAction`. May be used by Relay 1. */
  templateActionEdge?: Maybe<TemplateActionsEdge>;
};


/** The output of our update `TemplateAction` mutation. */
export type UpdateTemplateActionPayloadTemplateActionEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateActionsOrderBy>>;
};

/** All input for the `updateTemplateByCodeAndVersionId` mutation. */
export type UpdateTemplateByCodeAndVersionIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `Template` being updated. */
  patch: TemplatePatch;
  versionId: Scalars['String']['input'];
};

/** All input for the `updateTemplateByNodeId` mutation. */
export type UpdateTemplateByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `Template` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `Template` being updated. */
  patch: TemplatePatch;
};

/** All input for the `updateTemplateCategoryByCode` mutation. */
export type UpdateTemplateCategoryByCodeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `TemplateCategory` being updated. */
  patch: TemplateCategoryPatch;
};

/** All input for the `updateTemplateCategoryByNodeId` mutation. */
export type UpdateTemplateCategoryByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TemplateCategory` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `TemplateCategory` being updated. */
  patch: TemplateCategoryPatch;
};

/** All input for the `updateTemplateCategory` mutation. */
export type UpdateTemplateCategoryInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `TemplateCategory` being updated. */
  patch: TemplateCategoryPatch;
};

/** The output of our update `TemplateCategory` mutation. */
export type UpdateTemplateCategoryPayload = {
  __typename?: 'UpdateTemplateCategoryPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `TemplateCategory` that was updated by this mutation. */
  templateCategory?: Maybe<TemplateCategory>;
  /** An edge for our `TemplateCategory`. May be used by Relay 1. */
  templateCategoryEdge?: Maybe<TemplateCategoriesEdge>;
};


/** The output of our update `TemplateCategory` mutation. */
export type UpdateTemplateCategoryPayloadTemplateCategoryEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateCategoriesOrderBy>>;
};

/** All input for the `updateTemplateElementByNodeId` mutation. */
export type UpdateTemplateElementByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TemplateElement` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `TemplateElement` being updated. */
  patch: TemplateElementPatch;
};

/** All input for the `updateTemplateElementByTemplateCodeAndCodeAndTemplateVersion` mutation. */
export type UpdateTemplateElementByTemplateCodeAndCodeAndTemplateVersionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `TemplateElement` being updated. */
  patch: TemplateElementPatch;
  templateCode: Scalars['String']['input'];
  templateVersion: Scalars['String']['input'];
};

/** All input for the `updateTemplateElement` mutation. */
export type UpdateTemplateElementInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `TemplateElement` being updated. */
  patch: TemplateElementPatch;
};

/** The output of our update `TemplateElement` mutation. */
export type UpdateTemplateElementPayload = {
  __typename?: 'UpdateTemplateElementPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateSection` that is related to this `TemplateElement`. */
  section?: Maybe<TemplateSection>;
  /** The `TemplateElement` that was updated by this mutation. */
  templateElement?: Maybe<TemplateElement>;
  /** An edge for our `TemplateElement`. May be used by Relay 1. */
  templateElementEdge?: Maybe<TemplateElementsEdge>;
};


/** The output of our update `TemplateElement` mutation. */
export type UpdateTemplateElementPayloadTemplateElementEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateElementsOrderBy>>;
};

/** All input for the `updateTemplateFilterJoinByNodeId` mutation. */
export type UpdateTemplateFilterJoinByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TemplateFilterJoin` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `TemplateFilterJoin` being updated. */
  patch: TemplateFilterJoinPatch;
};

/** All input for the `updateTemplateFilterJoin` mutation. */
export type UpdateTemplateFilterJoinInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `TemplateFilterJoin` being updated. */
  patch: TemplateFilterJoinPatch;
};

/** The output of our update `TemplateFilterJoin` mutation. */
export type UpdateTemplateFilterJoinPayload = {
  __typename?: 'UpdateTemplateFilterJoinPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Reads a single `Filter` that is related to this `TemplateFilterJoin`. */
  filter?: Maybe<Filter>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateFilterJoin`. */
  template?: Maybe<Template>;
  /** The `TemplateFilterJoin` that was updated by this mutation. */
  templateFilterJoin?: Maybe<TemplateFilterJoin>;
  /** An edge for our `TemplateFilterJoin`. May be used by Relay 1. */
  templateFilterJoinEdge?: Maybe<TemplateFilterJoinsEdge>;
};


/** The output of our update `TemplateFilterJoin` mutation. */
export type UpdateTemplateFilterJoinPayloadTemplateFilterJoinEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateFilterJoinsOrderBy>>;
};

/** All input for the `updateTemplate` mutation. */
export type UpdateTemplateInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `Template` being updated. */
  patch: TemplatePatch;
};

/** The output of our update `Template` mutation. */
export type UpdateTemplatePayload = {
  __typename?: 'UpdateTemplatePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Template` that was updated by this mutation. */
  template?: Maybe<Template>;
  /** Reads a single `TemplateCategory` that is related to this `Template`. */
  templateCategory?: Maybe<TemplateCategory>;
  /** An edge for our `Template`. May be used by Relay 1. */
  templateEdge?: Maybe<TemplatesEdge>;
};


/** The output of our update `Template` mutation. */
export type UpdateTemplatePayloadTemplateEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplatesOrderBy>>;
};

/** All input for the `updateTemplatePermissionByNodeId` mutation. */
export type UpdateTemplatePermissionByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TemplatePermission` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `TemplatePermission` being updated. */
  patch: TemplatePermissionPatch;
};

/** All input for the `updateTemplatePermission` mutation. */
export type UpdateTemplatePermissionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `TemplatePermission` being updated. */
  patch: TemplatePermissionPatch;
};

/** The output of our update `TemplatePermission` mutation. */
export type UpdateTemplatePermissionPayload = {
  __typename?: 'UpdateTemplatePermissionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Reads a single `PermissionName` that is related to this `TemplatePermission`. */
  permissionName?: Maybe<PermissionName>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplatePermission`. */
  template?: Maybe<Template>;
  /** The `TemplatePermission` that was updated by this mutation. */
  templatePermission?: Maybe<TemplatePermission>;
  /** An edge for our `TemplatePermission`. May be used by Relay 1. */
  templatePermissionEdge?: Maybe<TemplatePermissionsEdge>;
};


/** The output of our update `TemplatePermission` mutation. */
export type UpdateTemplatePermissionPayloadTemplatePermissionEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplatePermissionsOrderBy>>;
};

/** All input for the `updateTemplateSectionByNodeId` mutation. */
export type UpdateTemplateSectionByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TemplateSection` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `TemplateSection` being updated. */
  patch: TemplateSectionPatch;
};

/** All input for the `updateTemplateSectionByTemplateIdAndCode` mutation. */
export type UpdateTemplateSectionByTemplateIdAndCodeInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  code: Scalars['String']['input'];
  /** An object where the defined keys will be set on the `TemplateSection` being updated. */
  patch: TemplateSectionPatch;
  templateId: Scalars['Int']['input'];
};

/** All input for the `updateTemplateSection` mutation. */
export type UpdateTemplateSectionInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `TemplateSection` being updated. */
  patch: TemplateSectionPatch;
};

/** The output of our update `TemplateSection` mutation. */
export type UpdateTemplateSectionPayload = {
  __typename?: 'UpdateTemplateSectionPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateSection`. */
  template?: Maybe<Template>;
  /** The `TemplateSection` that was updated by this mutation. */
  templateSection?: Maybe<TemplateSection>;
  /** An edge for our `TemplateSection`. May be used by Relay 1. */
  templateSectionEdge?: Maybe<TemplateSectionsEdge>;
};


/** The output of our update `TemplateSection` mutation. */
export type UpdateTemplateSectionPayloadTemplateSectionEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateSectionsOrderBy>>;
};

/** All input for the `updateTemplateStageByNodeId` mutation. */
export type UpdateTemplateStageByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TemplateStage` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `TemplateStage` being updated. */
  patch: TemplateStagePatch;
};

/** All input for the `updateTemplateStage` mutation. */
export type UpdateTemplateStageInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `TemplateStage` being updated. */
  patch: TemplateStagePatch;
};

/** The output of our update `TemplateStage` mutation. */
export type UpdateTemplateStagePayload = {
  __typename?: 'UpdateTemplateStagePayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TemplateStage`. */
  template?: Maybe<Template>;
  /** The `TemplateStage` that was updated by this mutation. */
  templateStage?: Maybe<TemplateStage>;
  /** An edge for our `TemplateStage`. May be used by Relay 1. */
  templateStageEdge?: Maybe<TemplateStagesEdge>;
};


/** The output of our update `TemplateStage` mutation. */
export type UpdateTemplateStagePayloadTemplateStageEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateStagesOrderBy>>;
};

/** All input for the `updateTemplateStageReviewLevelByNodeId` mutation. */
export type UpdateTemplateStageReviewLevelByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TemplateStageReviewLevel` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `TemplateStageReviewLevel` being updated. */
  patch: TemplateStageReviewLevelPatch;
};

/** All input for the `updateTemplateStageReviewLevel` mutation. */
export type UpdateTemplateStageReviewLevelInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `TemplateStageReviewLevel` being updated. */
  patch: TemplateStageReviewLevelPatch;
};

/** The output of our update `TemplateStageReviewLevel` mutation. */
export type UpdateTemplateStageReviewLevelPayload = {
  __typename?: 'UpdateTemplateStageReviewLevelPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `TemplateStage` that is related to this `TemplateStageReviewLevel`. */
  stage?: Maybe<TemplateStage>;
  /** The `TemplateStageReviewLevel` that was updated by this mutation. */
  templateStageReviewLevel?: Maybe<TemplateStageReviewLevel>;
  /** An edge for our `TemplateStageReviewLevel`. May be used by Relay 1. */
  templateStageReviewLevelEdge?: Maybe<TemplateStageReviewLevelsEdge>;
};


/** The output of our update `TemplateStageReviewLevel` mutation. */
export type UpdateTemplateStageReviewLevelPayloadTemplateStageReviewLevelEdgeArgs = {
  orderBy?: InputMaybe<Array<TemplateStageReviewLevelsOrderBy>>;
};

/** All input for the `updateTriggerQueueByNodeId` mutation. */
export type UpdateTriggerQueueByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TriggerQueue` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `TriggerQueue` being updated. */
  patch: TriggerQueuePatch;
};

/** All input for the `updateTriggerQueue` mutation. */
export type UpdateTriggerQueueInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `TriggerQueue` being updated. */
  patch: TriggerQueuePatch;
};

/** The output of our update `TriggerQueue` mutation. */
export type UpdateTriggerQueuePayload = {
  __typename?: 'UpdateTriggerQueuePayload';
  /** Reads a single `Application` that is related to this `TriggerQueue`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `TriggerQueue` that was updated by this mutation. */
  triggerQueue?: Maybe<TriggerQueue>;
  /** An edge for our `TriggerQueue`. May be used by Relay 1. */
  triggerQueueEdge?: Maybe<TriggerQueuesEdge>;
};


/** The output of our update `TriggerQueue` mutation. */
export type UpdateTriggerQueuePayloadTriggerQueueEdgeArgs = {
  orderBy?: InputMaybe<Array<TriggerQueuesOrderBy>>;
};

/** All input for the `updateTriggerScheduleByNodeId` mutation. */
export type UpdateTriggerScheduleByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `TriggerSchedule` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `TriggerSchedule` being updated. */
  patch: TriggerSchedulePatch;
};

/** All input for the `updateTriggerSchedule` mutation. */
export type UpdateTriggerScheduleInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `TriggerSchedule` being updated. */
  patch: TriggerSchedulePatch;
};

/** The output of our update `TriggerSchedule` mutation. */
export type UpdateTriggerSchedulePayload = {
  __typename?: 'UpdateTriggerSchedulePayload';
  /** Reads a single `Application` that is related to this `TriggerSchedule`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `Template` that is related to this `TriggerSchedule`. */
  template?: Maybe<Template>;
  /** The `TriggerSchedule` that was updated by this mutation. */
  triggerSchedule?: Maybe<TriggerSchedule>;
  /** An edge for our `TriggerSchedule`. May be used by Relay 1. */
  triggerScheduleEdge?: Maybe<TriggerSchedulesEdge>;
};


/** The output of our update `TriggerSchedule` mutation. */
export type UpdateTriggerSchedulePayloadTriggerScheduleEdgeArgs = {
  orderBy?: InputMaybe<Array<TriggerSchedulesOrderBy>>;
};

/** All input for the `updateUserOrganisationByNodeId` mutation. */
export type UpdateUserOrganisationByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `UserOrganisation` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `UserOrganisation` being updated. */
  patch: UserOrganisationPatch;
};

/** All input for the `updateUserOrganisationByUserIdAndOrganisationId` mutation. */
export type UpdateUserOrganisationByUserIdAndOrganisationIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  organisationId: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `UserOrganisation` being updated. */
  patch: UserOrganisationPatch;
  userId: Scalars['Int']['input'];
};

/** All input for the `updateUserOrganisation` mutation. */
export type UpdateUserOrganisationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `UserOrganisation` being updated. */
  patch: UserOrganisationPatch;
};

/** The output of our update `UserOrganisation` mutation. */
export type UpdateUserOrganisationPayload = {
  __typename?: 'UpdateUserOrganisationPayload';
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Reads a single `Organisation` that is related to this `UserOrganisation`. */
  organisation?: Maybe<Organisation>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** Reads a single `User` that is related to this `UserOrganisation`. */
  user?: Maybe<User>;
  /** The `UserOrganisation` that was updated by this mutation. */
  userOrganisation?: Maybe<UserOrganisation>;
  /** An edge for our `UserOrganisation`. May be used by Relay 1. */
  userOrganisationEdge?: Maybe<UserOrganisationsEdge>;
};


/** The output of our update `UserOrganisation` mutation. */
export type UpdateUserOrganisationPayloadUserOrganisationEdgeArgs = {
  orderBy?: InputMaybe<Array<UserOrganisationsOrderBy>>;
};

/** All input for the `updateVerificationByNodeId` mutation. */
export type UpdateVerificationByNodeIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** The globally unique `ID` which will identify a single `Verification` to be updated. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `Verification` being updated. */
  patch: VerificationPatch;
};

/** All input for the `updateVerificationByUniqueId` mutation. */
export type UpdateVerificationByUniqueIdInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  /** An object where the defined keys will be set on the `Verification` being updated. */
  patch: VerificationPatch;
  uniqueId: Scalars['String']['input'];
};

/** All input for the `updateVerification` mutation. */
export type UpdateVerificationInput = {
  /**
   * An arbitrary string value with no semantic meaning. Will be included in the
   * payload verbatim. May be used to track mutations by the client.
   */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `Verification` being updated. */
  patch: VerificationPatch;
};

/** The output of our update `Verification` mutation. */
export type UpdateVerificationPayload = {
  __typename?: 'UpdateVerificationPayload';
  /** Reads a single `Application` that is related to this `Verification`. */
  application?: Maybe<Application>;
  /**
   * The exact same `clientMutationId` that was provided in the mutation input,
   * unchanged and unused. May be used by a client to track mutations.
   */
  clientMutationId?: Maybe<Scalars['String']['output']>;
  /** Our root query field type. Allows us to run any query from our mutation payload. */
  query?: Maybe<Query>;
  /** The `Verification` that was updated by this mutation. */
  verification?: Maybe<Verification>;
  /** An edge for our `Verification`. May be used by Relay 1. */
  verificationEdge?: Maybe<VerificationsEdge>;
};


/** The output of our update `Verification` mutation. */
export type UpdateVerificationPayloadVerificationEdgeArgs = {
  orderBy?: InputMaybe<Array<VerificationsOrderBy>>;
};

export type User = {
  __typename?: 'User';
  dateOfBirth?: Maybe<Scalars['Date']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  firstName?: Maybe<Scalars['String']['output']>;
  fullName?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  lastName?: Maybe<Scalars['String']['output']>;
  passwordHash?: Maybe<Scalars['String']['output']>;
  /** Reads and enables pagination through a set of `UserOrganisation`. */
  userOrganisations: UserOrganisationsConnection;
  username?: Maybe<Scalars['String']['output']>;
};


export type UserUserOrganisationsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<UserOrganisationCondition>;
  filter?: InputMaybe<UserOrganisationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<UserOrganisationsOrderBy>>;
};

/** A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’ */
export type UserCondition = {
  /** Checks for equality with the object’s `dateOfBirth` field. */
  dateOfBirth?: InputMaybe<Scalars['Date']['input']>;
  /** Checks for equality with the object’s `email` field. */
  email?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `fullName` field. */
  fullName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `passwordHash` field. */
  passwordHash?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `username` field. */
  username?: InputMaybe<Scalars['String']['input']>;
};

/** A filter to be used against `User` object types. All fields are combined with a logical ‘and.’ */
export type UserFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<UserFilter>>;
  /** Filter by the object’s `dateOfBirth` field. */
  dateOfBirth?: InputMaybe<DateFilter>;
  /** Filter by the object’s `email` field. */
  email?: InputMaybe<StringFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `fullName` field. */
  fullName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<UserFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<UserFilter>>;
  /** Filter by the object’s `passwordHash` field. */
  passwordHash?: InputMaybe<StringFilter>;
  /** Filter by the object’s `userOrganisations` relation. */
  userOrganisations?: InputMaybe<UserToManyUserOrganisationFilter>;
  /** Some related `userOrganisations` exist. */
  userOrganisationsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `username` field. */
  username?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `User` */
export type UserInput = {
  dateOfBirth?: InputMaybe<Scalars['Date']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  fullName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  passwordHash?: InputMaybe<Scalars['String']['input']>;
  userOrganisations?: InputMaybe<FakePublicUserOrganisationForeignKey0InverseInput>;
  username?: InputMaybe<Scalars['String']['input']>;
};

export type UserList = {
  __typename?: 'UserList';
  /** Reads and enables pagination through a set of `ApplicationNote`. */
  applicationNotesByUserId: ApplicationNotesConnection;
  /** Reads and enables pagination through a set of `Application`. */
  applicationsByUserId: ApplicationsConnection;
  firstName?: Maybe<Scalars['String']['output']>;
  fullName?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  lastName?: Maybe<Scalars['String']['output']>;
  /** Reads and enables pagination through a set of `PermissionJoin`. */
  permissionJoinsByUserId: PermissionJoinsConnection;
  /** Reads and enables pagination through a set of `ReviewAssignmentAssignerJoin`. */
  reviewAssignmentAssignerJoinsByAssignerId: ReviewAssignmentAssignerJoinsConnection;
  /** Reads and enables pagination through a set of `ReviewAssignment`. */
  reviewAssignmentsByAssignerId: ReviewAssignmentsConnection;
  /** Reads and enables pagination through a set of `ReviewAssignment`. */
  reviewedReviewAssignments: ReviewAssignmentsConnection;
  /** Reads and enables pagination through a set of `Review`. */
  reviewedReviews: ReviewsConnection;
  username?: Maybe<Scalars['String']['output']>;
};


export type UserListApplicationNotesByUserIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationNoteCondition>;
  filter?: InputMaybe<ApplicationNoteFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationNotesOrderBy>>;
};


export type UserListApplicationsByUserIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ApplicationCondition>;
  filter?: InputMaybe<ApplicationFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ApplicationsOrderBy>>;
};


export type UserListPermissionJoinsByUserIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<PermissionJoinCondition>;
  filter?: InputMaybe<PermissionJoinFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PermissionJoinsOrderBy>>;
};


export type UserListReviewAssignmentAssignerJoinsByAssignerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewAssignmentAssignerJoinCondition>;
  filter?: InputMaybe<ReviewAssignmentAssignerJoinFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewAssignmentAssignerJoinsOrderBy>>;
};


export type UserListReviewAssignmentsByAssignerIdArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewAssignmentCondition>;
  filter?: InputMaybe<ReviewAssignmentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewAssignmentsOrderBy>>;
};


export type UserListReviewedReviewAssignmentsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewAssignmentCondition>;
  filter?: InputMaybe<ReviewAssignmentFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewAssignmentsOrderBy>>;
};


export type UserListReviewedReviewsArgs = {
  after?: InputMaybe<Scalars['Cursor']['input']>;
  before?: InputMaybe<Scalars['Cursor']['input']>;
  condition?: InputMaybe<ReviewCondition>;
  filter?: InputMaybe<ReviewFilter>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ReviewsOrderBy>>;
};

/**
 * A condition to be used against `UserList` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type UserListCondition = {
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `fullName` field. */
  fullName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `username` field. */
  username?: InputMaybe<Scalars['String']['input']>;
};

/** A filter to be used against `UserList` object types. All fields are combined with a logical ‘and.’ */
export type UserListFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<UserListFilter>>;
  /** Filter by the object’s `applicationNotesByUserId` relation. */
  applicationNotesByUserId?: InputMaybe<UserListToManyApplicationNoteFilter>;
  /** Some related `applicationNotesByUserId` exist. */
  applicationNotesByUserIdExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `applicationsByUserId` relation. */
  applicationsByUserId?: InputMaybe<UserListToManyApplicationFilter>;
  /** Some related `applicationsByUserId` exist. */
  applicationsByUserIdExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `firstName` field. */
  firstName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `fullName` field. */
  fullName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<UserListFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<UserListFilter>>;
  /** Filter by the object’s `permissionJoinsByUserId` relation. */
  permissionJoinsByUserId?: InputMaybe<UserListToManyPermissionJoinFilter>;
  /** Some related `permissionJoinsByUserId` exist. */
  permissionJoinsByUserIdExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `reviewAssignmentAssignerJoinsByAssignerId` relation. */
  reviewAssignmentAssignerJoinsByAssignerId?: InputMaybe<UserListToManyReviewAssignmentAssignerJoinFilter>;
  /** Some related `reviewAssignmentAssignerJoinsByAssignerId` exist. */
  reviewAssignmentAssignerJoinsByAssignerIdExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `reviewAssignmentsByAssignerId` relation. */
  reviewAssignmentsByAssignerId?: InputMaybe<UserListToManyReviewAssignmentFilter>;
  /** Some related `reviewAssignmentsByAssignerId` exist. */
  reviewAssignmentsByAssignerIdExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `reviewedReviewAssignments` relation. */
  reviewedReviewAssignments?: InputMaybe<UserListToManyReviewAssignmentFilter>;
  /** Some related `reviewedReviewAssignments` exist. */
  reviewedReviewAssignmentsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `reviewedReviews` relation. */
  reviewedReviews?: InputMaybe<UserListToManyReviewFilter>;
  /** Some related `reviewedReviews` exist. */
  reviewedReviewsExist?: InputMaybe<Scalars['Boolean']['input']>;
  /** Filter by the object’s `username` field. */
  username?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `UserList` */
export type UserListInput = {
  applicationNotesUsingId?: InputMaybe<FakePublicApplicationNoteForeignKey0InverseInput>;
  applicationsUsingId?: InputMaybe<FakePublicApplicationForeignKey0InverseInput>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  fullName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<FakePublicPermissionJoinForeignKey0InverseInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<FakePublicReviewAssignmentAssignerJoinForeignKey0InverseInput>;
  reviewAssignmentsToAssignerIdUsingId?: InputMaybe<FakePublicReviewAssignmentForeignKey1InverseInput>;
  reviewAssignmentsToReviewerIdUsingId?: InputMaybe<FakePublicReviewAssignmentForeignKey0InverseInput>;
  reviewsUsingId?: InputMaybe<FakePublicReviewForeignKey0InverseInput>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/** The globally unique `ID` look up for the row to update. */
export type UserListOnApplicationForFakePublicApplicationForeignKey0NodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type UserListOnApplicationNoteForFakePublicApplicationNoteForeignKey0NodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `applicationNote` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `applicationNote` being updated. */
  patch: ApplicationNotePatch;
};

/** The globally unique `ID` look up for the row to update. */
export type UserListOnPermissionJoinForFakePublicPermissionJoinForeignKey0NodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `permissionJoin` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `permissionJoin` being updated. */
  patch: PermissionJoinPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type UserListOnReviewAssignmentAssignerJoinForFakePublicReviewAssignmentAssignerJoinForeignKey0NodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignmentAssignerJoin` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewAssignmentAssignerJoin` being updated. */
  patch: ReviewAssignmentAssignerJoinPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type UserListOnReviewAssignmentForFakePublicReviewAssignmentForeignKey0NodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type UserListOnReviewAssignmentForFakePublicReviewAssignmentForeignKey1NodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `reviewAssignment` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `reviewAssignment` being updated. */
  patch: ReviewAssignmentPatch;
};

/** The globally unique `ID` look up for the row to update. */
export type UserListOnReviewForFakePublicReviewForeignKey0NodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `review` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `review` being updated. */
  patch: ReviewPatch;
};

/** A filter to be used against many `Application` object types. All fields are combined with a logical ‘and.’ */
export type UserListToManyApplicationFilter = {
  /** Every related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ApplicationFilter>;
  /** No related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ApplicationFilter>;
  /** Some related `Application` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ApplicationFilter>;
};

/** A filter to be used against many `ApplicationNote` object types. All fields are combined with a logical ‘and.’ */
export type UserListToManyApplicationNoteFilter = {
  /** Every related `ApplicationNote` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ApplicationNoteFilter>;
  /** No related `ApplicationNote` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ApplicationNoteFilter>;
  /** Some related `ApplicationNote` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ApplicationNoteFilter>;
};

/** A filter to be used against many `PermissionJoin` object types. All fields are combined with a logical ‘and.’ */
export type UserListToManyPermissionJoinFilter = {
  /** Every related `PermissionJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<PermissionJoinFilter>;
  /** No related `PermissionJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<PermissionJoinFilter>;
  /** Some related `PermissionJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<PermissionJoinFilter>;
};

/** A filter to be used against many `ReviewAssignmentAssignerJoin` object types. All fields are combined with a logical ‘and.’ */
export type UserListToManyReviewAssignmentAssignerJoinFilter = {
  /** Every related `ReviewAssignmentAssignerJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ReviewAssignmentAssignerJoinFilter>;
  /** No related `ReviewAssignmentAssignerJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ReviewAssignmentAssignerJoinFilter>;
  /** Some related `ReviewAssignmentAssignerJoin` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ReviewAssignmentAssignerJoinFilter>;
};

/** A filter to be used against many `ReviewAssignment` object types. All fields are combined with a logical ‘and.’ */
export type UserListToManyReviewAssignmentFilter = {
  /** Every related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ReviewAssignmentFilter>;
  /** No related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ReviewAssignmentFilter>;
  /** Some related `ReviewAssignment` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ReviewAssignmentFilter>;
};

/** A filter to be used against many `Review` object types. All fields are combined with a logical ‘and.’ */
export type UserListToManyReviewFilter = {
  /** Every related `Review` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<ReviewFilter>;
  /** No related `Review` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<ReviewFilter>;
  /** Some related `Review` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<ReviewFilter>;
};

/** A connection to a list of `UserList` values. */
export type UserListsConnection = {
  __typename?: 'UserListsConnection';
  /** A list of edges which contains the `UserList` and cursor to aid in pagination. */
  edges: Array<UserListsEdge>;
  /** A list of `UserList` objects. */
  nodes: Array<Maybe<UserList>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserList` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `UserList` edge in the connection. */
export type UserListsEdge = {
  __typename?: 'UserListsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `UserList` at the end of the edge. */
  node?: Maybe<UserList>;
};

/** Methods to use when ordering `UserList`. */
export enum UserListsOrderBy {
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  FullNameAsc = 'FULL_NAME_ASC',
  FullNameDesc = 'FULL_NAME_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  Natural = 'NATURAL',
  UsernameAsc = 'USERNAME_ASC',
  UsernameDesc = 'USERNAME_DESC'
}

/** The globally unique `ID` look up for the row to update. */
export type UserOnUserOrganisationForFakePublicUserOrganisationForeignKey0NodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `userOrganisation` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `userOrganisation` being updated. */
  patch: UserOrganisationPatch;
};

export type UserOrgJoin = {
  __typename?: 'UserOrgJoin';
  address?: Maybe<Scalars['String']['output']>;
  dateOfBirth?: Maybe<Scalars['Date']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  firstName?: Maybe<Scalars['String']['output']>;
  isSystemOrg?: Maybe<Scalars['Boolean']['output']>;
  lastName?: Maybe<Scalars['String']['output']>;
  logoUrl?: Maybe<Scalars['String']['output']>;
  orgId?: Maybe<Scalars['Int']['output']>;
  orgName?: Maybe<Scalars['String']['output']>;
  passwordHash?: Maybe<Scalars['String']['output']>;
  registration?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['Int']['output']>;
  userRole?: Maybe<Scalars['String']['output']>;
  username?: Maybe<Scalars['String']['output']>;
};

/**
 * A condition to be used against `UserOrgJoin` object types. All fields are tested
 * for equality and combined with a logical ‘and.’
 */
export type UserOrgJoinCondition = {
  /** Checks for equality with the object’s `address` field. */
  address?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `dateOfBirth` field. */
  dateOfBirth?: InputMaybe<Scalars['Date']['input']>;
  /** Checks for equality with the object’s `email` field. */
  email?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `firstName` field. */
  firstName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `isSystemOrg` field. */
  isSystemOrg?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `lastName` field. */
  lastName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `logoUrl` field. */
  logoUrl?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `orgId` field. */
  orgId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `orgName` field. */
  orgName?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `passwordHash` field. */
  passwordHash?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `registration` field. */
  registration?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `userRole` field. */
  userRole?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `username` field. */
  username?: InputMaybe<Scalars['String']['input']>;
};

/** A filter to be used against `UserOrgJoin` object types. All fields are combined with a logical ‘and.’ */
export type UserOrgJoinFilter = {
  /** Filter by the object’s `address` field. */
  address?: InputMaybe<StringFilter>;
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<UserOrgJoinFilter>>;
  /** Filter by the object’s `dateOfBirth` field. */
  dateOfBirth?: InputMaybe<DateFilter>;
  /** Filter by the object’s `email` field. */
  email?: InputMaybe<StringFilter>;
  /** Filter by the object’s `firstName` field. */
  firstName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `isSystemOrg` field. */
  isSystemOrg?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `lastName` field. */
  lastName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `logoUrl` field. */
  logoUrl?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<UserOrgJoinFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<UserOrgJoinFilter>>;
  /** Filter by the object’s `orgId` field. */
  orgId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `orgName` field. */
  orgName?: InputMaybe<StringFilter>;
  /** Filter by the object’s `passwordHash` field. */
  passwordHash?: InputMaybe<StringFilter>;
  /** Filter by the object’s `registration` field. */
  registration?: InputMaybe<StringFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `userRole` field. */
  userRole?: InputMaybe<StringFilter>;
  /** Filter by the object’s `username` field. */
  username?: InputMaybe<StringFilter>;
};

/** A connection to a list of `UserOrgJoin` values. */
export type UserOrgJoinsConnection = {
  __typename?: 'UserOrgJoinsConnection';
  /** A list of edges which contains the `UserOrgJoin` and cursor to aid in pagination. */
  edges: Array<UserOrgJoinsEdge>;
  /** A list of `UserOrgJoin` objects. */
  nodes: Array<Maybe<UserOrgJoin>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserOrgJoin` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `UserOrgJoin` edge in the connection. */
export type UserOrgJoinsEdge = {
  __typename?: 'UserOrgJoinsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `UserOrgJoin` at the end of the edge. */
  node?: Maybe<UserOrgJoin>;
};

/** Methods to use when ordering `UserOrgJoin`. */
export enum UserOrgJoinsOrderBy {
  AddressAsc = 'ADDRESS_ASC',
  AddressDesc = 'ADDRESS_DESC',
  DateOfBirthAsc = 'DATE_OF_BIRTH_ASC',
  DateOfBirthDesc = 'DATE_OF_BIRTH_DESC',
  EmailAsc = 'EMAIL_ASC',
  EmailDesc = 'EMAIL_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  IsSystemOrgAsc = 'IS_SYSTEM_ORG_ASC',
  IsSystemOrgDesc = 'IS_SYSTEM_ORG_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  LogoUrlAsc = 'LOGO_URL_ASC',
  LogoUrlDesc = 'LOGO_URL_DESC',
  Natural = 'NATURAL',
  OrgIdAsc = 'ORG_ID_ASC',
  OrgIdDesc = 'ORG_ID_DESC',
  OrgNameAsc = 'ORG_NAME_ASC',
  OrgNameDesc = 'ORG_NAME_DESC',
  PasswordHashAsc = 'PASSWORD_HASH_ASC',
  PasswordHashDesc = 'PASSWORD_HASH_DESC',
  RegistrationAsc = 'REGISTRATION_ASC',
  RegistrationDesc = 'REGISTRATION_DESC',
  UsernameAsc = 'USERNAME_ASC',
  UsernameDesc = 'USERNAME_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  UserRoleAsc = 'USER_ROLE_ASC',
  UserRoleDesc = 'USER_ROLE_DESC'
}

export type UserOrganisation = Node & {
  __typename?: 'UserOrganisation';
  id: Scalars['Int']['output'];
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  /** Reads a single `Organisation` that is related to this `UserOrganisation`. */
  organisation?: Maybe<Organisation>;
  organisationId: Scalars['Int']['output'];
  /** Reads a single `User` that is related to this `UserOrganisation`. */
  user?: Maybe<User>;
  userId: Scalars['Int']['output'];
  userRole?: Maybe<Scalars['String']['output']>;
};

/**
 * A condition to be used against `UserOrganisation` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type UserOrganisationCondition = {
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `organisationId` field. */
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `userId` field. */
  userId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `userRole` field. */
  userRole?: InputMaybe<Scalars['String']['input']>;
};

/** A filter to be used against `UserOrganisation` object types. All fields are combined with a logical ‘and.’ */
export type UserOrganisationFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<UserOrganisationFilter>>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Negates the expression. */
  not?: InputMaybe<UserOrganisationFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<UserOrganisationFilter>>;
  /** Filter by the object’s `organisation` relation. */
  organisation?: InputMaybe<OrganisationFilter>;
  /** Filter by the object’s `organisationId` field. */
  organisationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `user` relation. */
  user?: InputMaybe<UserFilter>;
  /** Filter by the object’s `userId` field. */
  userId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `userRole` field. */
  userRole?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `UserOrganisation` */
export type UserOrganisationInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<UserOrganisationOrganisationIdFkeyInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userRole?: InputMaybe<Scalars['String']['input']>;
  userToUserId?: InputMaybe<FakePublicUserOrganisationForeignKey0Input>;
};

/** The globally unique `ID` look up for the row to connect. */
export type UserOrganisationNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `userOrganisation` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type UserOrganisationNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `userOrganisation` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The fields on `userOrganisation` to look up the row to update. */
export type UserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0UsingUserOrganisationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `userOrganisation` being updated. */
  patch: UpdateUserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0Patch;
};

/** The fields on `userOrganisation` to look up the row to update. */
export type UserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0UsingUserOrganisationUserIdOrganisationIdKeyUpdate = {
  organisationId: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `userOrganisation` being updated. */
  patch: UpdateUserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0Patch;
  userId: Scalars['Int']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `organisation` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `organisation` being updated. */
  patch: OrganisationPatch;
};

/** The fields on `userOrganisation` to look up the row to update. */
export type UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingUserOrganisationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `userOrganisation` being updated. */
  patch: UpdateUserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch;
};

/** The fields on `userOrganisation` to look up the row to update. */
export type UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingUserOrganisationUserIdOrganisationIdKeyUpdate = {
  organisationId: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `userOrganisation` being updated. */
  patch: UpdateUserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch;
  userId: Scalars['Int']['input'];
};

/** Input for the nested mutation of `organisation` in the `UserOrganisationInput` mutation. */
export type UserOrganisationOrganisationIdFkeyInput = {
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectById?: InputMaybe<OrganisationOrganisationPkeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByName?: InputMaybe<OrganisationOrganisationNameKeyConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<OrganisationNodeIdConnect>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  connectByRegistration?: InputMaybe<OrganisationOrganisationRegistrationKeyConnect>;
  /** A `OrganisationInput` object that will be created and connected to this object. */
  create?: InputMaybe<UserOrganisationOrganisationIdFkeyOrganisationCreateInput>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteById?: InputMaybe<OrganisationOrganisationPkeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByName?: InputMaybe<OrganisationOrganisationNameKeyDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<OrganisationNodeIdDelete>;
  /** The primary key(s) for `organisation` for the far side of the relationship. */
  deleteByRegistration?: InputMaybe<OrganisationOrganisationRegistrationKeyDelete>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateById?: InputMaybe<OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationPkeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByName?: InputMaybe<OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationNameKeyUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `organisation` for the far side of the relationship. */
  updateByRegistration?: InputMaybe<OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate>;
};

/** Input for the nested mutation of `userOrganisation` in the `OrganisationInput` mutation. */
export type UserOrganisationOrganisationIdFkeyInverseInput = {
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  connectById?: InputMaybe<Array<UserOrganisationUserOrganisationPkeyConnect>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<UserOrganisationNodeIdConnect>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  connectByUserIdAndOrganisationId?: InputMaybe<Array<UserOrganisationUserOrganisationUserIdOrganisationIdKeyConnect>>;
  /** A `UserOrganisationInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<UserOrganisationOrganisationIdFkeyUserOrganisationCreateInput>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<UserOrganisationUserOrganisationPkeyDelete>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<UserOrganisationNodeIdDelete>>;
  /** The primary key(s) for `userOrganisation` for the far side of the relationship. */
  deleteByUserIdAndOrganisationId?: InputMaybe<Array<UserOrganisationUserOrganisationUserIdOrganisationIdKeyDelete>>;
  /** Flag indicating whether all other `userOrganisation` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `userOrganisation` for the far side of the relationship. */
  updateById?: InputMaybe<Array<UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingUserOrganisationPkeyUpdate>>;
  /** The primary key(s) and patch data for `userOrganisation` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyNodeIdUpdate>>;
  /** The primary key(s) and patch data for `userOrganisation` for the far side of the relationship. */
  updateByUserIdAndOrganisationId?: InputMaybe<Array<UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingUserOrganisationUserIdOrganisationIdKeyUpdate>>;
};

/** The `organisation` to be created by this mutation. */
export type UserOrganisationOrganisationIdFkeyOrganisationCreateInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteOrgIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationOrgIdFkeyInverseInput>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogOrgIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrg?: InputMaybe<Scalars['Boolean']['input']>;
  logoUrl?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  registration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: InputMaybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** The `userOrganisation` to be created by this mutation. */
export type UserOrganisationOrganisationIdFkeyUserOrganisationCreateInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<UserOrganisationOrganisationIdFkeyInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userRole?: InputMaybe<Scalars['String']['input']>;
  userToUserId?: InputMaybe<FakePublicUserOrganisationForeignKey0Input>;
};

/** Represents an update to a `UserOrganisation`. Fields that are set will be updated. */
export type UserOrganisationPatch = {
  id?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<UserOrganisationOrganisationIdFkeyInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userRole?: InputMaybe<Scalars['String']['input']>;
  userToUserId?: InputMaybe<FakePublicUserOrganisationForeignKey0Input>;
};

/** The fields on `userOrganisation` to look up the row to connect. */
export type UserOrganisationUserOrganisationPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `userOrganisation` to look up the row to delete. */
export type UserOrganisationUserOrganisationPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** The fields on `userOrganisation` to look up the row to connect. */
export type UserOrganisationUserOrganisationUserIdOrganisationIdKeyConnect = {
  organisationId: Scalars['Int']['input'];
  userId: Scalars['Int']['input'];
};

/** The fields on `userOrganisation` to look up the row to delete. */
export type UserOrganisationUserOrganisationUserIdOrganisationIdKeyDelete = {
  organisationId: Scalars['Int']['input'];
  userId: Scalars['Int']['input'];
};

/** A connection to a list of `UserOrganisation` values. */
export type UserOrganisationsConnection = {
  __typename?: 'UserOrganisationsConnection';
  /** A list of edges which contains the `UserOrganisation` and cursor to aid in pagination. */
  edges: Array<UserOrganisationsEdge>;
  /** A list of `UserOrganisation` objects. */
  nodes: Array<Maybe<UserOrganisation>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `UserOrganisation` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `UserOrganisation` edge in the connection. */
export type UserOrganisationsEdge = {
  __typename?: 'UserOrganisationsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `UserOrganisation` at the end of the edge. */
  node?: Maybe<UserOrganisation>;
};

/** Methods to use when ordering `UserOrganisation`. */
export enum UserOrganisationsOrderBy {
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  Natural = 'NATURAL',
  OrganisationIdAsc = 'ORGANISATION_ID_ASC',
  OrganisationIdDesc = 'ORGANISATION_ID_DESC',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  UserIdAsc = 'USER_ID_ASC',
  UserIdDesc = 'USER_ID_DESC',
  UserRoleAsc = 'USER_ROLE_ASC',
  UserRoleDesc = 'USER_ROLE_DESC'
}

/** A filter to be used against many `UserOrganisation` object types. All fields are combined with a logical ‘and.’ */
export type UserToManyUserOrganisationFilter = {
  /** Every related `UserOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  every?: InputMaybe<UserOrganisationFilter>;
  /** No related `UserOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  none?: InputMaybe<UserOrganisationFilter>;
  /** Some related `UserOrganisation` matches the filter criteria. All fields are combined with a logical ‘and.’ */
  some?: InputMaybe<UserOrganisationFilter>;
};

/** A connection to a list of `User` values. */
export type UsersConnection = {
  __typename?: 'UsersConnection';
  /** A list of edges which contains the `User` and cursor to aid in pagination. */
  edges: Array<UsersEdge>;
  /** A list of `User` objects. */
  nodes: Array<Maybe<User>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `User` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `User` edge in the connection. */
export type UsersEdge = {
  __typename?: 'UsersEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `User` at the end of the edge. */
  node?: Maybe<User>;
};

/** Methods to use when ordering `User`. */
export enum UsersOrderBy {
  DateOfBirthAsc = 'DATE_OF_BIRTH_ASC',
  DateOfBirthDesc = 'DATE_OF_BIRTH_DESC',
  EmailAsc = 'EMAIL_ASC',
  EmailDesc = 'EMAIL_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  FullNameAsc = 'FULL_NAME_ASC',
  FullNameDesc = 'FULL_NAME_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  Natural = 'NATURAL',
  PasswordHashAsc = 'PASSWORD_HASH_ASC',
  PasswordHashDesc = 'PASSWORD_HASH_DESC',
  UsernameAsc = 'USERNAME_ASC',
  UsernameDesc = 'USERNAME_DESC'
}

export type Verification = Node & {
  __typename?: 'Verification';
  /** Reads a single `Application` that is related to this `Verification`. */
  application?: Maybe<Application>;
  applicationId: Scalars['Int']['output'];
  data?: Maybe<Scalars['JSON']['output']>;
  eventCode?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  isVerified?: Maybe<Scalars['Boolean']['output']>;
  message?: Maybe<Scalars['String']['output']>;
  /** A globally unique identifier. Can be used in various places throughout the system to identify this single value. */
  nodeId: Scalars['ID']['output'];
  timeCreated?: Maybe<Scalars['Datetime']['output']>;
  timeExpired?: Maybe<Scalars['Datetime']['output']>;
  trigger?: Maybe<Trigger>;
  uniqueId: Scalars['String']['output'];
};

/** The `application` to be created by this mutation. */
export type VerificationApplicationIdFkeyApplicationCreateInput = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** Input for the nested mutation of `application` in the `VerificationInput` mutation. */
export type VerificationApplicationIdFkeyInput = {
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectById?: InputMaybe<ApplicationApplicationPkeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<ApplicationNodeIdConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyConnect>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  connectBySerial?: InputMaybe<ApplicationApplicationSerialKeyConnect>;
  /** A `ApplicationInput` object that will be created and connected to this object. */
  create?: InputMaybe<VerificationApplicationIdFkeyApplicationCreateInput>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteById?: InputMaybe<ApplicationApplicationPkeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<ApplicationNodeIdDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteByOutcomeRegistration?: InputMaybe<ApplicationApplicationOutcomeRegistrationKeyDelete>;
  /** The primary key(s) for `application` for the far side of the relationship. */
  deleteBySerial?: InputMaybe<ApplicationApplicationSerialKeyDelete>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateById?: InputMaybe<ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationPkeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<VerificationOnVerificationForVerificationApplicationIdFkeyNodeIdUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateByOutcomeRegistration?: InputMaybe<ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate>;
  /** The primary key(s) and patch data for `application` for the far side of the relationship. */
  updateBySerial?: InputMaybe<ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationSerialKeyUpdate>;
};

/** Input for the nested mutation of `verification` in the `ApplicationInput` mutation. */
export type VerificationApplicationIdFkeyInverseInput = {
  /** The primary key(s) for `verification` for the far side of the relationship. */
  connectById?: InputMaybe<Array<VerificationVerificationPkeyConnect>>;
  /** The primary key(s) for `verification` for the far side of the relationship. */
  connectByNodeId?: InputMaybe<Array<VerificationNodeIdConnect>>;
  /** The primary key(s) for `verification` for the far side of the relationship. */
  connectByUniqueId?: InputMaybe<Array<VerificationVerificationUniqueIdKeyConnect>>;
  /** A `VerificationInput` object that will be created and connected to this object. */
  create?: InputMaybe<Array<VerificationApplicationIdFkeyVerificationCreateInput>>;
  /** The primary key(s) for `verification` for the far side of the relationship. */
  deleteById?: InputMaybe<Array<VerificationVerificationPkeyDelete>>;
  /** The primary key(s) for `verification` for the far side of the relationship. */
  deleteByNodeId?: InputMaybe<Array<VerificationNodeIdDelete>>;
  /** The primary key(s) for `verification` for the far side of the relationship. */
  deleteByUniqueId?: InputMaybe<Array<VerificationVerificationUniqueIdKeyDelete>>;
  /** Flag indicating whether all other `verification` records that match this relationship should be removed. */
  deleteOthers?: InputMaybe<Scalars['Boolean']['input']>;
  /** The primary key(s) and patch data for `verification` for the far side of the relationship. */
  updateById?: InputMaybe<Array<VerificationOnVerificationForVerificationApplicationIdFkeyUsingVerificationPkeyUpdate>>;
  /** The primary key(s) and patch data for `verification` for the far side of the relationship. */
  updateByNodeId?: InputMaybe<Array<ApplicationOnVerificationForVerificationApplicationIdFkeyNodeIdUpdate>>;
  /** The primary key(s) and patch data for `verification` for the far side of the relationship. */
  updateByUniqueId?: InputMaybe<Array<VerificationOnVerificationForVerificationApplicationIdFkeyUsingVerificationUniqueIdKeyUpdate>>;
};

/** The `verification` to be created by this mutation. */
export type VerificationApplicationIdFkeyVerificationCreateInput = {
  applicationToApplicationId?: InputMaybe<VerificationApplicationIdFkeyInput>;
  data?: InputMaybe<Scalars['JSON']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isVerified?: InputMaybe<Scalars['Boolean']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeExpired?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  uniqueId: Scalars['String']['input'];
};

/**
 * A condition to be used against `Verification` object types. All fields are
 * tested for equality and combined with a logical ‘and.’
 */
export type VerificationCondition = {
  /** Checks for equality with the object’s `applicationId` field. */
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `data` field. */
  data?: InputMaybe<Scalars['JSON']['input']>;
  /** Checks for equality with the object’s `eventCode` field. */
  eventCode?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `id` field. */
  id?: InputMaybe<Scalars['Int']['input']>;
  /** Checks for equality with the object’s `isVerified` field. */
  isVerified?: InputMaybe<Scalars['Boolean']['input']>;
  /** Checks for equality with the object’s `message` field. */
  message?: InputMaybe<Scalars['String']['input']>;
  /** Checks for equality with the object’s `timeCreated` field. */
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `timeExpired` field. */
  timeExpired?: InputMaybe<Scalars['Datetime']['input']>;
  /** Checks for equality with the object’s `trigger` field. */
  trigger?: InputMaybe<Trigger>;
  /** Checks for equality with the object’s `uniqueId` field. */
  uniqueId?: InputMaybe<Scalars['String']['input']>;
};

/** A filter to be used against `Verification` object types. All fields are combined with a logical ‘and.’ */
export type VerificationFilter = {
  /** Checks for all expressions in this list. */
  and?: InputMaybe<Array<VerificationFilter>>;
  /** Filter by the object’s `application` relation. */
  application?: InputMaybe<ApplicationFilter>;
  /** Filter by the object’s `applicationId` field. */
  applicationId?: InputMaybe<IntFilter>;
  /** Filter by the object’s `data` field. */
  data?: InputMaybe<JsonFilter>;
  /** Filter by the object’s `eventCode` field. */
  eventCode?: InputMaybe<StringFilter>;
  /** Filter by the object’s `id` field. */
  id?: InputMaybe<IntFilter>;
  /** Filter by the object’s `isVerified` field. */
  isVerified?: InputMaybe<BooleanFilter>;
  /** Filter by the object’s `message` field. */
  message?: InputMaybe<StringFilter>;
  /** Negates the expression. */
  not?: InputMaybe<VerificationFilter>;
  /** Checks for any expressions in this list. */
  or?: InputMaybe<Array<VerificationFilter>>;
  /** Filter by the object’s `timeCreated` field. */
  timeCreated?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `timeExpired` field. */
  timeExpired?: InputMaybe<DatetimeFilter>;
  /** Filter by the object’s `trigger` field. */
  trigger?: InputMaybe<TriggerFilter>;
  /** Filter by the object’s `uniqueId` field. */
  uniqueId?: InputMaybe<StringFilter>;
};

/** An input for mutations affecting `Verification` */
export type VerificationInput = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<VerificationApplicationIdFkeyInput>;
  data?: InputMaybe<Scalars['JSON']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isVerified?: InputMaybe<Scalars['Boolean']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeExpired?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  uniqueId: Scalars['String']['input'];
};

/** The globally unique `ID` look up for the row to connect. */
export type VerificationNodeIdConnect = {
  /** The globally unique `ID` which identifies a single `verification` to be connected. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to delete. */
export type VerificationNodeIdDelete = {
  /** The globally unique `ID` which identifies a single `verification` to be deleted. */
  nodeId: Scalars['ID']['input'];
};

/** The globally unique `ID` look up for the row to update. */
export type VerificationOnVerificationForVerificationApplicationIdFkeyNodeIdUpdate = {
  /** The globally unique `ID` which identifies a single `application` to be connected. */
  nodeId: Scalars['ID']['input'];
  /** An object where the defined keys will be set on the `application` being updated. */
  patch: ApplicationPatch;
};

/** The fields on `verification` to look up the row to update. */
export type VerificationOnVerificationForVerificationApplicationIdFkeyUsingVerificationPkeyUpdate = {
  id: Scalars['Int']['input'];
  /** An object where the defined keys will be set on the `verification` being updated. */
  patch: UpdateVerificationOnVerificationForVerificationApplicationIdFkeyPatch;
};

/** The fields on `verification` to look up the row to update. */
export type VerificationOnVerificationForVerificationApplicationIdFkeyUsingVerificationUniqueIdKeyUpdate = {
  /** An object where the defined keys will be set on the `verification` being updated. */
  patch: UpdateVerificationOnVerificationForVerificationApplicationIdFkeyPatch;
  uniqueId: Scalars['String']['input'];
};

/** Represents an update to a `Verification`. Fields that are set will be updated. */
export type VerificationPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<VerificationApplicationIdFkeyInput>;
  data?: InputMaybe<Scalars['JSON']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isVerified?: InputMaybe<Scalars['Boolean']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeExpired?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  uniqueId?: InputMaybe<Scalars['String']['input']>;
};

/** The fields on `verification` to look up the row to connect. */
export type VerificationVerificationPkeyConnect = {
  id: Scalars['Int']['input'];
};

/** The fields on `verification` to look up the row to delete. */
export type VerificationVerificationPkeyDelete = {
  id: Scalars['Int']['input'];
};

/** The fields on `verification` to look up the row to connect. */
export type VerificationVerificationUniqueIdKeyConnect = {
  uniqueId: Scalars['String']['input'];
};

/** The fields on `verification` to look up the row to delete. */
export type VerificationVerificationUniqueIdKeyDelete = {
  uniqueId: Scalars['String']['input'];
};

/** A connection to a list of `Verification` values. */
export type VerificationsConnection = {
  __typename?: 'VerificationsConnection';
  /** A list of edges which contains the `Verification` and cursor to aid in pagination. */
  edges: Array<VerificationsEdge>;
  /** A list of `Verification` objects. */
  nodes: Array<Maybe<Verification>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** The count of *all* `Verification` you could get from the connection. */
  totalCount: Scalars['Int']['output'];
};

/** A `Verification` edge in the connection. */
export type VerificationsEdge = {
  __typename?: 'VerificationsEdge';
  /** A cursor for use in pagination. */
  cursor?: Maybe<Scalars['Cursor']['output']>;
  /** The `Verification` at the end of the edge. */
  node?: Maybe<Verification>;
};

/** Methods to use when ordering `Verification`. */
export enum VerificationsOrderBy {
  ApplicationIdAsc = 'APPLICATION_ID_ASC',
  ApplicationIdDesc = 'APPLICATION_ID_DESC',
  DataAsc = 'DATA_ASC',
  DataDesc = 'DATA_DESC',
  EventCodeAsc = 'EVENT_CODE_ASC',
  EventCodeDesc = 'EVENT_CODE_DESC',
  IdAsc = 'ID_ASC',
  IdDesc = 'ID_DESC',
  IsVerifiedAsc = 'IS_VERIFIED_ASC',
  IsVerifiedDesc = 'IS_VERIFIED_DESC',
  MessageAsc = 'MESSAGE_ASC',
  MessageDesc = 'MESSAGE_DESC',
  Natural = 'NATURAL',
  PrimaryKeyAsc = 'PRIMARY_KEY_ASC',
  PrimaryKeyDesc = 'PRIMARY_KEY_DESC',
  TimeCreatedAsc = 'TIME_CREATED_ASC',
  TimeCreatedDesc = 'TIME_CREATED_DESC',
  TimeExpiredAsc = 'TIME_EXPIRED_ASC',
  TimeExpiredDesc = 'TIME_EXPIRED_DESC',
  TriggerAsc = 'TRIGGER_ASC',
  TriggerDesc = 'TRIGGER_DESC',
  UniqueIdAsc = 'UNIQUE_ID_ASC',
  UniqueIdDesc = 'UNIQUE_ID_DESC'
}

/** A filter to be used against YesOrNo fields. All fields are combined with a logical ‘and.’ */
export type YesOrNoFilter = {
  /** Not equal to the specified value, treating null like an ordinary value. */
  distinctFrom?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Not equal to the specified value, treating null like an ordinary value (case-insensitive). */
  distinctFromInsensitive?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Ends with the specified string (case-sensitive). */
  endsWith?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Ends with the specified string (case-insensitive). */
  endsWithInsensitive?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Equal to the specified value. */
  equalTo?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Equal to the specified value (case-insensitive). */
  equalToInsensitive?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Greater than the specified value. */
  greaterThan?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Greater than the specified value (case-insensitive). */
  greaterThanInsensitive?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Greater than or equal to the specified value. */
  greaterThanOrEqualTo?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Greater than or equal to the specified value (case-insensitive). */
  greaterThanOrEqualToInsensitive?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Included in the specified list. */
  in?: InputMaybe<Array<Scalars['YesOrNo']['input']>>;
  /** Included in the specified list (case-insensitive). */
  inInsensitive?: InputMaybe<Array<Scalars['YesOrNo']['input']>>;
  /** Contains the specified string (case-sensitive). */
  includes?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Contains the specified string (case-insensitive). */
  includesInsensitive?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Is null (if `true` is specified) or is not null (if `false` is specified). */
  isNull?: InputMaybe<Scalars['Boolean']['input']>;
  /** Less than the specified value. */
  lessThan?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Less than the specified value (case-insensitive). */
  lessThanInsensitive?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Less than or equal to the specified value. */
  lessThanOrEqualTo?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Less than or equal to the specified value (case-insensitive). */
  lessThanOrEqualToInsensitive?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  like?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  likeInsensitive?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Equal to the specified value, treating null like an ordinary value. */
  notDistinctFrom?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Equal to the specified value, treating null like an ordinary value (case-insensitive). */
  notDistinctFromInsensitive?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Does not end with the specified string (case-sensitive). */
  notEndsWith?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Does not end with the specified string (case-insensitive). */
  notEndsWithInsensitive?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Not equal to the specified value. */
  notEqualTo?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Not equal to the specified value (case-insensitive). */
  notEqualToInsensitive?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Not included in the specified list. */
  notIn?: InputMaybe<Array<Scalars['YesOrNo']['input']>>;
  /** Not included in the specified list (case-insensitive). */
  notInInsensitive?: InputMaybe<Array<Scalars['YesOrNo']['input']>>;
  /** Does not contain the specified string (case-sensitive). */
  notIncludes?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Does not contain the specified string (case-insensitive). */
  notIncludesInsensitive?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLike?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters. */
  notLikeInsensitive?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Does not start with the specified string (case-sensitive). */
  notStartsWith?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Does not start with the specified string (case-insensitive). */
  notStartsWithInsensitive?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Starts with the specified string (case-sensitive). */
  startsWith?: InputMaybe<Scalars['YesOrNo']['input']>;
  /** Starts with the specified string (case-insensitive). */
  startsWithInsensitive?: InputMaybe<Scalars['YesOrNo']['input']>;
};

/** An object where the defined keys will be set on the `actionQueue` being updated. */
export type UpdateActionQueueOnActionQueueForActionQueueApplicationIdFkeyPatch = {
  actionCode?: InputMaybe<Scalars['String']['input']>;
  applicationToApplicationId?: InputMaybe<ActionQueueApplicationIdFkeyInput>;
  conditionExpression?: InputMaybe<Scalars['JSON']['input']>;
  errorLog?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  output?: InputMaybe<Scalars['JSON']['input']>;
  parameterQueries?: InputMaybe<Scalars['JSON']['input']>;
  parametersEvaluated?: InputMaybe<Scalars['JSON']['input']>;
  sequence?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ActionQueueStatus>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ActionQueueTemplateIdFkeyInput>;
  timeCompleted?: InputMaybe<Scalars['Datetime']['input']>;
  timeQueued?: InputMaybe<Scalars['Datetime']['input']>;
  triggerEvent?: InputMaybe<Scalars['Int']['input']>;
  triggerPayload?: InputMaybe<Scalars['JSON']['input']>;
  triggerQueueToTriggerEvent?: InputMaybe<ActionQueueTriggerEventFkeyInput>;
};

/** An object where the defined keys will be set on the `actionQueue` being updated. */
export type UpdateActionQueueOnActionQueueForActionQueueTemplateIdFkeyPatch = {
  actionCode?: InputMaybe<Scalars['String']['input']>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ActionQueueApplicationIdFkeyInput>;
  conditionExpression?: InputMaybe<Scalars['JSON']['input']>;
  errorLog?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  output?: InputMaybe<Scalars['JSON']['input']>;
  parameterQueries?: InputMaybe<Scalars['JSON']['input']>;
  parametersEvaluated?: InputMaybe<Scalars['JSON']['input']>;
  sequence?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ActionQueueStatus>;
  templateToTemplateId?: InputMaybe<ActionQueueTemplateIdFkeyInput>;
  timeCompleted?: InputMaybe<Scalars['Datetime']['input']>;
  timeQueued?: InputMaybe<Scalars['Datetime']['input']>;
  triggerEvent?: InputMaybe<Scalars['Int']['input']>;
  triggerPayload?: InputMaybe<Scalars['JSON']['input']>;
  triggerQueueToTriggerEvent?: InputMaybe<ActionQueueTriggerEventFkeyInput>;
};

/** An object where the defined keys will be set on the `actionQueue` being updated. */
export type UpdateActionQueueOnActionQueueForActionQueueTriggerEventFkeyPatch = {
  actionCode?: InputMaybe<Scalars['String']['input']>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ActionQueueApplicationIdFkeyInput>;
  conditionExpression?: InputMaybe<Scalars['JSON']['input']>;
  errorLog?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  output?: InputMaybe<Scalars['JSON']['input']>;
  parameterQueries?: InputMaybe<Scalars['JSON']['input']>;
  parametersEvaluated?: InputMaybe<Scalars['JSON']['input']>;
  sequence?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ActionQueueStatus>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ActionQueueTemplateIdFkeyInput>;
  timeCompleted?: InputMaybe<Scalars['Datetime']['input']>;
  timeQueued?: InputMaybe<Scalars['Datetime']['input']>;
  triggerPayload?: InputMaybe<Scalars['JSON']['input']>;
  triggerQueueToTriggerEvent?: InputMaybe<ActionQueueTriggerEventFkeyInput>;
};

/** An object where the defined keys will be set on the `activityLog` being updated. */
export type UpdateActivityLogOnActivityLogForActivityLogApplicationIdFkeyPatch = {
  applicationToApplicationId?: InputMaybe<ActivityLogApplicationIdFkeyInput>;
  details?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  recordId?: InputMaybe<Scalars['Int']['input']>;
  table?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  type?: InputMaybe<EventType>;
  value?: InputMaybe<Scalars['String']['input']>;
};

/** An object where the defined keys will be set on the `applicationNote` being updated. */
export type UpdateApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch = {
  applicationToApplicationId?: InputMaybe<ApplicationNoteApplicationIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  filesUsingId?: InputMaybe<FileApplicationNoteIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationNoteOrgIdFkeyInput>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationNoteForeignKey0Input>;
};

/** An object where the defined keys will be set on the `applicationNote` being updated. */
export type UpdateApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ApplicationNoteApplicationIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  filesUsingId?: InputMaybe<FileApplicationNoteIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationNoteOrgIdFkeyInput>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationNoteForeignKey0Input>;
};

/** An object where the defined keys will be set on the `applicationNote` being updated. */
export type UpdateApplicationNoteOnApplicationNoteForFakePublicApplicationNoteForeignKey0Patch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ApplicationNoteApplicationIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  filesUsingId?: InputMaybe<FileApplicationNoteIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationNoteOrgIdFkeyInput>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationNoteForeignKey0Input>;
};

/** An object where the defined keys will be set on the `applicationNote` being updated. */
export type UpdateApplicationNoteOnFileForFileApplicationNoteIdFkeyPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ApplicationNoteApplicationIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  filesUsingId?: InputMaybe<FileApplicationNoteIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationNoteOrgIdFkeyInput>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationNoteForeignKey0Input>;
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnActionQueueForActionQueueApplicationIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnActivityLogForActivityLogApplicationIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnApplicationForApplicationOrgIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnApplicationForApplicationTemplateIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnApplicationForFakePublicApplicationForeignKey0Patch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnDataChangelogForDataChangelogApplicationIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnFileForFileApplicationSerialFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnNotificationForNotificationApplicationIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnReviewForReviewApplicationIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `application` being updated. */
export type UpdateApplicationOnVerificationForVerificationApplicationIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueApplicationIdFkeyInverseInput>;
  activityLogsUsingId?: InputMaybe<ActivityLogApplicationIdFkeyInverseInput>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteApplicationIdFkeyInverseInput>;
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseApplicationIdFkeyInverseInput>;
  applicationReviewerActionsUsingId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInverseInput>;
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInverseInput>;
  assignerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogApplicationIdFkeyInverseInput>;
  filesUsingSerial?: InputMaybe<FileApplicationSerialFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  isConfig?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  notificationsUsingId?: InputMaybe<NotificationApplicationIdFkeyInverseInput>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<ApplicationOrgIdFkeyInput>;
  outcome?: InputMaybe<ApplicationOutcome>;
  outcomeRegistration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInverseInput>;
  reviewerList?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  reviewsUsingId?: InputMaybe<ReviewApplicationIdFkeyInverseInput>;
  serial?: InputMaybe<Scalars['String']['input']>;
  sessionId?: InputMaybe<Scalars['String']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<ApplicationTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
  triggerQueuesUsingId?: InputMaybe<TriggerQueueApplicationIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleApplicationIdFkeyInverseInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicApplicationForeignKey0Input>;
  verificationsUsingId?: InputMaybe<VerificationApplicationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `applicationResponse` being updated. */
export type UpdateApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch = {
  applicationToApplicationId?: InputMaybe<ApplicationResponseApplicationIdFkeyInput>;
  evaluatedParameters?: InputMaybe<Scalars['JSON']['input']>;
  filesUsingId?: InputMaybe<FileApplicationResponseIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isValid?: InputMaybe<Scalars['Boolean']['input']>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ApplicationResponseStatus>;
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  templateElementToTemplateElementId?: InputMaybe<ApplicationResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  value?: InputMaybe<Scalars['JSON']['input']>;
};

/** An object where the defined keys will be set on the `applicationResponse` being updated. */
export type UpdateApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ApplicationResponseApplicationIdFkeyInput>;
  evaluatedParameters?: InputMaybe<Scalars['JSON']['input']>;
  filesUsingId?: InputMaybe<FileApplicationResponseIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isValid?: InputMaybe<Scalars['Boolean']['input']>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ApplicationResponseStatus>;
  templateElementToTemplateElementId?: InputMaybe<ApplicationResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  value?: InputMaybe<Scalars['JSON']['input']>;
};

/** An object where the defined keys will be set on the `applicationResponse` being updated. */
export type UpdateApplicationResponseOnFileForFileApplicationResponseIdFkeyPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ApplicationResponseApplicationIdFkeyInput>;
  evaluatedParameters?: InputMaybe<Scalars['JSON']['input']>;
  filesUsingId?: InputMaybe<FileApplicationResponseIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isValid?: InputMaybe<Scalars['Boolean']['input']>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ApplicationResponseStatus>;
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  templateElementToTemplateElementId?: InputMaybe<ApplicationResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  value?: InputMaybe<Scalars['JSON']['input']>;
};

/** An object where the defined keys will be set on the `applicationResponse` being updated. */
export type UpdateApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ApplicationResponseApplicationIdFkeyInput>;
  evaluatedParameters?: InputMaybe<Scalars['JSON']['input']>;
  filesUsingId?: InputMaybe<FileApplicationResponseIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isValid?: InputMaybe<Scalars['Boolean']['input']>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInverseInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ApplicationResponseStatus>;
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  templateElementToTemplateElementId?: InputMaybe<ApplicationResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  value?: InputMaybe<Scalars['JSON']['input']>;
};

/** An object where the defined keys will be set on the `applicationReviewerAction` being updated. */
export type UpdateApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyPatch = {
  applicationToApplicationId?: InputMaybe<ApplicationReviewerActionApplicationIdFkeyInput>;
  assignerAction?: InputMaybe<AssignerAction>;
  id?: InputMaybe<Scalars['Int']['input']>;
  reviewerAction?: InputMaybe<ReviewerAction>;
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** An object where the defined keys will be set on the `applicationStageHistory` being updated. */
export type UpdateApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch = {
  applicationStatusHistoriesUsingId?: InputMaybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput>;
  applicationToApplicationId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  templateStageToStageId?: InputMaybe<ApplicationStageHistoryStageIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `applicationStageHistory` being updated. */
export type UpdateApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationStatusHistoriesUsingId?: InputMaybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput>;
  applicationToApplicationId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  templateStageToStageId?: InputMaybe<ApplicationStageHistoryStageIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `applicationStageHistory` being updated. */
export type UpdateApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationStatusHistoriesUsingId?: InputMaybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput>;
  applicationToApplicationId?: InputMaybe<ApplicationStageHistoryApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  templateStageToStageId?: InputMaybe<ApplicationStageHistoryStageIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `applicationStatusHistory` being updated. */
export type UpdateApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationStageHistoryToApplicationStageHistoryId?: InputMaybe<ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<ApplicationStatus>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `dataChangelog` being updated. */
export type UpdateDataChangelogOnDataChangelogForDataChangelogApplicationIdFkeyPatch = {
  applicationToApplicationId?: InputMaybe<DataChangelogApplicationIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  dataTable?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  newData?: InputMaybe<Scalars['JSON']['input']>;
  oldData?: InputMaybe<Scalars['JSON']['input']>;
  orgId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrgId?: InputMaybe<DataChangelogOrgIdFkeyInput>;
  recordId?: InputMaybe<Scalars['Int']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  updateType?: InputMaybe<ChangelogType>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/** An object where the defined keys will be set on the `dataChangelog` being updated. */
export type UpdateDataChangelogOnDataChangelogForDataChangelogOrgIdFkeyPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<DataChangelogApplicationIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  dataTable?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  newData?: InputMaybe<Scalars['JSON']['input']>;
  oldData?: InputMaybe<Scalars['JSON']['input']>;
  organisationToOrgId?: InputMaybe<DataChangelogOrgIdFkeyInput>;
  recordId?: InputMaybe<Scalars['Int']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  updateType?: InputMaybe<ChangelogType>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
};

/** An object where the defined keys will be set on the `file` being updated. */
export type UpdateFileOnFileForFileApplicationNoteIdFkeyPatch = {
  applicationNoteToApplicationNoteId?: InputMaybe<FileApplicationNoteIdFkeyInput>;
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  applicationResponseToApplicationResponseId?: InputMaybe<FileApplicationResponseIdFkeyInput>;
  applicationSerial?: InputMaybe<Scalars['String']['input']>;
  applicationToApplicationSerial?: InputMaybe<FileApplicationSerialFkeyInput>;
  archivePath?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  filePath?: InputMaybe<Scalars['String']['input']>;
  fileSize?: InputMaybe<Scalars['BigInt']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isExternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isInternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isOutputDoc?: InputMaybe<Scalars['Boolean']['input']>;
  mimetype?: InputMaybe<Scalars['String']['input']>;
  originalFilename?: InputMaybe<Scalars['String']['input']>;
  submitted?: InputMaybe<Scalars['Boolean']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<FileTemplateIdFkeyInput>;
  thumbnailPath?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  toBeDeleted?: InputMaybe<Scalars['Boolean']['input']>;
  uniqueId?: InputMaybe<Scalars['String']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** An object where the defined keys will be set on the `file` being updated. */
export type UpdateFileOnFileForFileApplicationResponseIdFkeyPatch = {
  applicationNoteId?: InputMaybe<Scalars['Int']['input']>;
  applicationNoteToApplicationNoteId?: InputMaybe<FileApplicationNoteIdFkeyInput>;
  applicationResponseToApplicationResponseId?: InputMaybe<FileApplicationResponseIdFkeyInput>;
  applicationSerial?: InputMaybe<Scalars['String']['input']>;
  applicationToApplicationSerial?: InputMaybe<FileApplicationSerialFkeyInput>;
  archivePath?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  filePath?: InputMaybe<Scalars['String']['input']>;
  fileSize?: InputMaybe<Scalars['BigInt']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isExternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isInternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isOutputDoc?: InputMaybe<Scalars['Boolean']['input']>;
  mimetype?: InputMaybe<Scalars['String']['input']>;
  originalFilename?: InputMaybe<Scalars['String']['input']>;
  submitted?: InputMaybe<Scalars['Boolean']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<FileTemplateIdFkeyInput>;
  thumbnailPath?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  toBeDeleted?: InputMaybe<Scalars['Boolean']['input']>;
  uniqueId?: InputMaybe<Scalars['String']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** An object where the defined keys will be set on the `file` being updated. */
export type UpdateFileOnFileForFileApplicationSerialFkeyPatch = {
  applicationNoteId?: InputMaybe<Scalars['Int']['input']>;
  applicationNoteToApplicationNoteId?: InputMaybe<FileApplicationNoteIdFkeyInput>;
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  applicationResponseToApplicationResponseId?: InputMaybe<FileApplicationResponseIdFkeyInput>;
  applicationToApplicationSerial?: InputMaybe<FileApplicationSerialFkeyInput>;
  archivePath?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  filePath?: InputMaybe<Scalars['String']['input']>;
  fileSize?: InputMaybe<Scalars['BigInt']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isExternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isInternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isOutputDoc?: InputMaybe<Scalars['Boolean']['input']>;
  mimetype?: InputMaybe<Scalars['String']['input']>;
  originalFilename?: InputMaybe<Scalars['String']['input']>;
  submitted?: InputMaybe<Scalars['Boolean']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<FileTemplateIdFkeyInput>;
  thumbnailPath?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  toBeDeleted?: InputMaybe<Scalars['Boolean']['input']>;
  uniqueId?: InputMaybe<Scalars['String']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** An object where the defined keys will be set on the `file` being updated. */
export type UpdateFileOnFileForFileTemplateIdFkeyPatch = {
  applicationNoteId?: InputMaybe<Scalars['Int']['input']>;
  applicationNoteToApplicationNoteId?: InputMaybe<FileApplicationNoteIdFkeyInput>;
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  applicationResponseToApplicationResponseId?: InputMaybe<FileApplicationResponseIdFkeyInput>;
  applicationSerial?: InputMaybe<Scalars['String']['input']>;
  applicationToApplicationSerial?: InputMaybe<FileApplicationSerialFkeyInput>;
  archivePath?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  filePath?: InputMaybe<Scalars['String']['input']>;
  fileSize?: InputMaybe<Scalars['BigInt']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isExternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isInternalReferenceDoc?: InputMaybe<Scalars['Boolean']['input']>;
  isOutputDoc?: InputMaybe<Scalars['Boolean']['input']>;
  mimetype?: InputMaybe<Scalars['String']['input']>;
  originalFilename?: InputMaybe<Scalars['String']['input']>;
  submitted?: InputMaybe<Scalars['Boolean']['input']>;
  templateToTemplateId?: InputMaybe<FileTemplateIdFkeyInput>;
  thumbnailPath?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  toBeDeleted?: InputMaybe<Scalars['Boolean']['input']>;
  uniqueId?: InputMaybe<Scalars['String']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** An object where the defined keys will be set on the `filter` being updated. */
export type UpdateFilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyPatch = {
  code?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  query?: InputMaybe<Scalars['JSON']['input']>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinFilterIdFkeyInverseInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  userRole?: InputMaybe<PermissionPolicyType>;
};

/** An object where the defined keys will be set on the `notification` being updated. */
export type UpdateNotificationOnNotificationForNotificationApplicationIdFkeyPatch = {
  applicationToApplicationId?: InputMaybe<NotificationApplicationIdFkeyInput>;
  attachments?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  emailRecipients?: InputMaybe<Scalars['String']['input']>;
  emailSent?: InputMaybe<Scalars['Boolean']['input']>;
  emailServerLog?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isRead?: InputMaybe<Scalars['Boolean']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  reviewToReviewId?: InputMaybe<NotificationReviewIdFkeyInput>;
  subject?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** An object where the defined keys will be set on the `notification` being updated. */
export type UpdateNotificationOnNotificationForNotificationReviewIdFkeyPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<NotificationApplicationIdFkeyInput>;
  attachments?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  emailRecipients?: InputMaybe<Scalars['String']['input']>;
  emailSent?: InputMaybe<Scalars['Boolean']['input']>;
  emailServerLog?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isRead?: InputMaybe<Scalars['Boolean']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  reviewToReviewId?: InputMaybe<NotificationReviewIdFkeyInput>;
  subject?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  userId?: InputMaybe<Scalars['Int']['input']>;
};

/** An object where the defined keys will be set on the `organisation` being updated. */
export type UpdateOrganisationOnApplicationForApplicationOrgIdFkeyPatch = {
  address?: InputMaybe<Scalars['String']['input']>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteOrgIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationOrgIdFkeyInverseInput>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogOrgIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrg?: InputMaybe<Scalars['Boolean']['input']>;
  logoUrl?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  registration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: InputMaybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `organisation` being updated. */
export type UpdateOrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyPatch = {
  address?: InputMaybe<Scalars['String']['input']>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteOrgIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationOrgIdFkeyInverseInput>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogOrgIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrg?: InputMaybe<Scalars['Boolean']['input']>;
  logoUrl?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  registration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: InputMaybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `organisation` being updated. */
export type UpdateOrganisationOnDataChangelogForDataChangelogOrgIdFkeyPatch = {
  address?: InputMaybe<Scalars['String']['input']>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteOrgIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationOrgIdFkeyInverseInput>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogOrgIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrg?: InputMaybe<Scalars['Boolean']['input']>;
  logoUrl?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  registration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: InputMaybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `organisation` being updated. */
export type UpdateOrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch = {
  address?: InputMaybe<Scalars['String']['input']>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteOrgIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationOrgIdFkeyInverseInput>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogOrgIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrg?: InputMaybe<Scalars['Boolean']['input']>;
  logoUrl?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  registration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: InputMaybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `organisation` being updated. */
export type UpdateOrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch = {
  address?: InputMaybe<Scalars['String']['input']>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteOrgIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationOrgIdFkeyInverseInput>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogOrgIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrg?: InputMaybe<Scalars['Boolean']['input']>;
  logoUrl?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  registration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: InputMaybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `organisation` being updated. */
export type UpdateOrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch = {
  address?: InputMaybe<Scalars['String']['input']>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteOrgIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationOrgIdFkeyInverseInput>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogOrgIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrg?: InputMaybe<Scalars['Boolean']['input']>;
  logoUrl?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  registration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: InputMaybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `organisation` being updated. */
export type UpdateOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch = {
  address?: InputMaybe<Scalars['String']['input']>;
  applicationNotesUsingId?: InputMaybe<ApplicationNoteOrgIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationOrgIdFkeyInverseInput>;
  dataChangelogsUsingId?: InputMaybe<DataChangelogOrgIdFkeyInverseInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrg?: InputMaybe<Scalars['Boolean']['input']>;
  logoUrl?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinOrganisationIdFkeyInverseInput>;
  registration?: InputMaybe<Scalars['String']['input']>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInverseInput>;
  userOrganisationsUsingId?: InputMaybe<UserOrganisationOrganisationIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `permissionJoin` being updated. */
export type UpdatePermissionJoinOnPermissionJoinForFakePublicPermissionJoinForeignKey0Patch = {
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<PermissionJoinOrganisationIdFkeyInput>;
  permissionNameId?: InputMaybe<Scalars['Int']['input']>;
  permissionNameToPermissionNameId?: InputMaybe<PermissionJoinPermissionNameIdFkeyInput>;
  userListToUserId?: InputMaybe<FakePublicPermissionJoinForeignKey0Input>;
};

/** An object where the defined keys will be set on the `permissionJoin` being updated. */
export type UpdatePermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch = {
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  organisationToOrganisationId?: InputMaybe<PermissionJoinOrganisationIdFkeyInput>;
  permissionNameId?: InputMaybe<Scalars['Int']['input']>;
  permissionNameToPermissionNameId?: InputMaybe<PermissionJoinPermissionNameIdFkeyInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicPermissionJoinForeignKey0Input>;
};

/** An object where the defined keys will be set on the `permissionJoin` being updated. */
export type UpdatePermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch = {
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<PermissionJoinOrganisationIdFkeyInput>;
  permissionNameToPermissionNameId?: InputMaybe<PermissionJoinPermissionNameIdFkeyInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userListToUserId?: InputMaybe<FakePublicPermissionJoinForeignKey0Input>;
};

/** An object where the defined keys will be set on the `permissionName` being updated. */
export type UpdatePermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch = {
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrgPermission?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinPermissionNameIdFkeyInverseInput>;
  permissionPolicyId?: InputMaybe<Scalars['Int']['input']>;
  permissionPolicyToPermissionPolicyId?: InputMaybe<PermissionNamePermissionPolicyIdFkeyInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionPermissionNameIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `permissionName` being updated. */
export type UpdatePermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch = {
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrgPermission?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinPermissionNameIdFkeyInverseInput>;
  permissionPolicyToPermissionPolicyId?: InputMaybe<PermissionNamePermissionPolicyIdFkeyInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionPermissionNameIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `permissionName` being updated. */
export type UpdatePermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyPatch = {
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSystemOrgPermission?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionJoinsUsingId?: InputMaybe<PermissionJoinPermissionNameIdFkeyInverseInput>;
  permissionPolicyId?: InputMaybe<Scalars['Int']['input']>;
  permissionPolicyToPermissionPolicyId?: InputMaybe<PermissionNamePermissionPolicyIdFkeyInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionPermissionNameIdFkeyInverseInput>;
};

/** An object where the defined keys will be set on the `permissionPolicy` being updated. */
export type UpdatePermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch = {
  defaultRestrictions?: InputMaybe<Scalars['JSON']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  permissionNamesUsingId?: InputMaybe<PermissionNamePermissionPolicyIdFkeyInverseInput>;
  rules?: InputMaybe<Scalars['JSON']['input']>;
  type?: InputMaybe<PermissionPolicyType>;
};

/** An object where the defined keys will be set on the `reviewAssignmentAssignerJoin` being updated. */
export type UpdateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForFakePublicReviewAssignmentAssignerJoinForeignKey0Patch = {
  id?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentAssignerJoinForeignKey0Input>;
};

/** An object where the defined keys will be set on the `reviewAssignmentAssignerJoin` being updated. */
export type UpdateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch = {
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentAssignerJoinForeignKey0Input>;
};

/** An object where the defined keys will be set on the `reviewAssignmentAssignerJoin` being updated. */
export type UpdateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyPatch = {
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentAssignerJoinOrganisationIdFkeyInput>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentAssignerJoinForeignKey0Input>;
};

/** An object where the defined keys will be set on the `reviewAssignment` being updated. */
export type UpdateReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyPatch = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewAssignmentStatus>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** An object where the defined keys will be set on the `reviewAssignment` being updated. */
export type UpdateReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey0Patch = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewAssignmentStatus>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** An object where the defined keys will be set on the `reviewAssignment` being updated. */
export type UpdateReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey1Patch = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewAssignmentStatus>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** An object where the defined keys will be set on the `reviewAssignment` being updated. */
export type UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewAssignmentStatus>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** An object where the defined keys will be set on the `reviewAssignment` being updated. */
export type UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyPatch = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewAssignmentStatus>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** An object where the defined keys will be set on the `reviewAssignment` being updated. */
export type UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewAssignmentStatus>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** An object where the defined keys will be set on the `reviewAssignment` being updated. */
export type UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyPatch = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewAssignmentStatus>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** An object where the defined keys will be set on the `reviewAssignment` being updated. */
export type UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyPatch = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewAssignmentStatus>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** An object where the defined keys will be set on the `reviewAssignment` being updated. */
export type UpdateReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyPatch = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewAssignmentApplicationIdFkeyInput>;
  assignedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  assignerId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  isSelfAssignable?: InputMaybe<Scalars['Boolean']['input']>;
  levelId?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<ReviewAssignmentOrganisationIdFkeyInput>;
  reviewAssignmentAssignerJoinsUsingId?: InputMaybe<ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput>;
  reviewUsingId?: InputMaybe<ReviewReviewAssignmentIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewAssignmentStatus>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelToLevelId?: InputMaybe<ReviewAssignmentLevelIdFkeyInput>;
  templateStageToStageId?: InputMaybe<ReviewAssignmentStageIdFkeyInput>;
  templateToTemplateId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInput>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToAssignerId?: InputMaybe<FakePublicReviewAssignmentForeignKey1Input>;
  userListToReviewerId?: InputMaybe<FakePublicReviewAssignmentForeignKey0Input>;
};

/** An object where the defined keys will be set on the `reviewDecision` being updated. */
export type UpdateReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyPatch = {
  comment?: InputMaybe<Scalars['String']['input']>;
  decision?: InputMaybe<Decision>;
  id?: InputMaybe<Scalars['Int']['input']>;
  reviewToReviewId?: InputMaybe<ReviewDecisionReviewIdFkeyInput>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `review` being updated. */
export type UpdateReviewOnNotificationForNotificationReviewIdFkeyPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  notificationsUsingId?: InputMaybe<NotificationReviewIdFkeyInverseInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewReviewAssignmentIdFkeyInput>;
  reviewDecisionsUsingId?: InputMaybe<ReviewDecisionReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToReviewerId?: InputMaybe<FakePublicReviewForeignKey0Input>;
};

/** An object where the defined keys will be set on the `review` being updated. */
export type UpdateReviewOnReviewDecisionForReviewDecisionReviewIdFkeyPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  notificationsUsingId?: InputMaybe<NotificationReviewIdFkeyInverseInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewReviewAssignmentIdFkeyInput>;
  reviewDecisionsUsingId?: InputMaybe<ReviewDecisionReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToReviewerId?: InputMaybe<FakePublicReviewForeignKey0Input>;
};

/** An object where the defined keys will be set on the `review` being updated. */
export type UpdateReviewOnReviewForFakePublicReviewForeignKey0Patch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  notificationsUsingId?: InputMaybe<NotificationReviewIdFkeyInverseInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewReviewAssignmentIdFkeyInput>;
  reviewDecisionsUsingId?: InputMaybe<ReviewDecisionReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToReviewerId?: InputMaybe<FakePublicReviewForeignKey0Input>;
};

/** An object where the defined keys will be set on the `review` being updated. */
export type UpdateReviewOnReviewForReviewApplicationIdFkeyPatch = {
  applicationToApplicationId?: InputMaybe<ReviewApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  notificationsUsingId?: InputMaybe<NotificationReviewIdFkeyInverseInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewReviewAssignmentIdFkeyInput>;
  reviewDecisionsUsingId?: InputMaybe<ReviewDecisionReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToReviewerId?: InputMaybe<FakePublicReviewForeignKey0Input>;
};

/** An object where the defined keys will be set on the `review` being updated. */
export type UpdateReviewOnReviewForReviewReviewAssignmentIdFkeyPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  notificationsUsingId?: InputMaybe<NotificationReviewIdFkeyInverseInput>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewReviewAssignmentIdFkeyInput>;
  reviewDecisionsUsingId?: InputMaybe<ReviewDecisionReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToReviewerId?: InputMaybe<FakePublicReviewForeignKey0Input>;
};

/** An object where the defined keys will be set on the `review` being updated. */
export type UpdateReviewOnReviewResponseForReviewResponseReviewIdFkeyPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  notificationsUsingId?: InputMaybe<NotificationReviewIdFkeyInverseInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewReviewAssignmentIdFkeyInput>;
  reviewDecisionsUsingId?: InputMaybe<ReviewDecisionReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToReviewerId?: InputMaybe<FakePublicReviewForeignKey0Input>;
};

/** An object where the defined keys will be set on the `review` being updated. */
export type UpdateReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<ReviewApplicationIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  isLastLevel?: InputMaybe<Scalars['Boolean']['input']>;
  isLastStage?: InputMaybe<Scalars['Boolean']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  notificationsUsingId?: InputMaybe<NotificationReviewIdFkeyInverseInput>;
  reviewAssignmentId?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentToReviewAssignmentId?: InputMaybe<ReviewReviewAssignmentIdFkeyInput>;
  reviewDecisionsUsingId?: InputMaybe<ReviewDecisionReviewIdFkeyInverseInput>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseReviewIdFkeyInverseInput>;
  reviewStatusHistoriesUsingId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInverseInput>;
  reviewerId?: InputMaybe<Scalars['Int']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  timeStageCreated?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  userListToReviewerId?: InputMaybe<FakePublicReviewForeignKey0Input>;
};

/** An object where the defined keys will be set on the `reviewResponse` being updated. */
export type UpdateReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch = {
  applicationResponseToApplicationResponseId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  decision?: InputMaybe<ReviewResponseDecision>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLatestReview?: InputMaybe<Scalars['Boolean']['input']>;
  isVisibleToApplicant?: InputMaybe<Scalars['Boolean']['input']>;
  originalReviewResponseId?: InputMaybe<Scalars['Int']['input']>;
  recommendedApplicantVisibility?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseLinkId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseToOriginalReviewResponseId?: InputMaybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: InputMaybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewToReviewId?: InputMaybe<ReviewResponseReviewIdFkeyInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewResponseStatus>;
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  templateElementToTemplateElementId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `reviewResponse` being updated. */
export type UpdateReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyPatch = {
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  applicationResponseToApplicationResponseId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  decision?: InputMaybe<ReviewResponseDecision>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLatestReview?: InputMaybe<Scalars['Boolean']['input']>;
  isVisibleToApplicant?: InputMaybe<Scalars['Boolean']['input']>;
  recommendedApplicantVisibility?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseLinkId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseToOriginalReviewResponseId?: InputMaybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: InputMaybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewToReviewId?: InputMaybe<ReviewResponseReviewIdFkeyInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewResponseStatus>;
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  templateElementToTemplateElementId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `reviewResponse` being updated. */
export type UpdateReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyPatch = {
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  applicationResponseToApplicationResponseId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  decision?: InputMaybe<ReviewResponseDecision>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLatestReview?: InputMaybe<Scalars['Boolean']['input']>;
  isVisibleToApplicant?: InputMaybe<Scalars['Boolean']['input']>;
  originalReviewResponseId?: InputMaybe<Scalars['Int']['input']>;
  recommendedApplicantVisibility?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  reviewResponseLinkId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseToOriginalReviewResponseId?: InputMaybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: InputMaybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewToReviewId?: InputMaybe<ReviewResponseReviewIdFkeyInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewResponseStatus>;
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  templateElementToTemplateElementId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `reviewResponse` being updated. */
export type UpdateReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyPatch = {
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  applicationResponseToApplicationResponseId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  decision?: InputMaybe<ReviewResponseDecision>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLatestReview?: InputMaybe<Scalars['Boolean']['input']>;
  isVisibleToApplicant?: InputMaybe<Scalars['Boolean']['input']>;
  originalReviewResponseId?: InputMaybe<Scalars['Int']['input']>;
  recommendedApplicantVisibility?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseToOriginalReviewResponseId?: InputMaybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: InputMaybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewToReviewId?: InputMaybe<ReviewResponseReviewIdFkeyInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewResponseStatus>;
  templateElementId?: InputMaybe<Scalars['Int']['input']>;
  templateElementToTemplateElementId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `reviewResponse` being updated. */
export type UpdateReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyPatch = {
  applicationResponseId?: InputMaybe<Scalars['Int']['input']>;
  applicationResponseToApplicationResponseId?: InputMaybe<ReviewResponseApplicationResponseIdFkeyInput>;
  comment?: InputMaybe<Scalars['String']['input']>;
  decision?: InputMaybe<ReviewResponseDecision>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLatestReview?: InputMaybe<Scalars['Boolean']['input']>;
  isVisibleToApplicant?: InputMaybe<Scalars['Boolean']['input']>;
  originalReviewResponseId?: InputMaybe<Scalars['Int']['input']>;
  recommendedApplicantVisibility?: InputMaybe<ReviewResponseRecommendedApplicantVisibility>;
  reviewId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseLinkId?: InputMaybe<Scalars['Int']['input']>;
  reviewResponseToOriginalReviewResponseId?: InputMaybe<ReviewResponseOriginalReviewResponseIdFkeyInput>;
  reviewResponseToReviewResponseLinkId?: InputMaybe<ReviewResponseReviewResponseLinkIdFkeyInput>;
  reviewToReviewId?: InputMaybe<ReviewResponseReviewIdFkeyInput>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<ReviewResponseStatus>;
  templateElementToTemplateElementId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInput>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeSubmitted?: InputMaybe<Scalars['Datetime']['input']>;
  timeUpdated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `reviewStatusHistory` being updated. */
export type UpdateReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyPatch = {
  id?: InputMaybe<Scalars['Int']['input']>;
  isCurrent?: InputMaybe<Scalars['Boolean']['input']>;
  reviewToReviewId?: InputMaybe<ReviewStatusHistoryReviewIdFkeyInput>;
  status?: InputMaybe<ReviewStatus>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `templateAction` being updated. */
export type UpdateTemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyPatch = {
  actionCode?: InputMaybe<Scalars['String']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  condition?: InputMaybe<Scalars['JSON']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  parameterQueries?: InputMaybe<Scalars['JSON']['input']>;
  sequence?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplateActionTemplateIdFkeyInput>;
  trigger?: InputMaybe<Trigger>;
};

/** An object where the defined keys will be set on the `templateCategory` being updated. */
export type UpdateTemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyPatch = {
  code?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isSubmenu?: InputMaybe<Scalars['Boolean']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  templatesUsingId?: InputMaybe<TemplateTemplateCategoryIdFkeyInverseInput>;
  title?: InputMaybe<Scalars['String']['input']>;
  uiLocation?: InputMaybe<Array<InputMaybe<UiLocation>>>;
};

/** An object where the defined keys will be set on the `templateElement` being updated. */
export type UpdateTemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyPatch = {
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseTemplateElementIdFkeyInverseInput>;
  category?: InputMaybe<TemplateElementCategory>;
  code?: InputMaybe<Scalars['String']['input']>;
  elementTypePluginCode?: InputMaybe<Scalars['String']['input']>;
  helpText?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  index?: InputMaybe<Scalars['Int']['input']>;
  initialValue?: InputMaybe<Scalars['JSON']['input']>;
  isEditable?: InputMaybe<Scalars['JSON']['input']>;
  isRequired?: InputMaybe<Scalars['JSON']['input']>;
  parameters?: InputMaybe<Scalars['JSON']['input']>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInverseInput>;
  reviewability?: InputMaybe<Reviewability>;
  sectionId?: InputMaybe<Scalars['Int']['input']>;
  templateCode?: InputMaybe<Scalars['String']['input']>;
  templateSectionToSectionId?: InputMaybe<TemplateElementSectionIdFkeyInput>;
  templateVersion?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  validation?: InputMaybe<Scalars['JSON']['input']>;
  validationMessage?: InputMaybe<Scalars['String']['input']>;
  visibilityCondition?: InputMaybe<Scalars['JSON']['input']>;
};

/** An object where the defined keys will be set on the `templateElement` being updated. */
export type UpdateTemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyPatch = {
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseTemplateElementIdFkeyInverseInput>;
  category?: InputMaybe<TemplateElementCategory>;
  code?: InputMaybe<Scalars['String']['input']>;
  elementTypePluginCode?: InputMaybe<Scalars['String']['input']>;
  helpText?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  index?: InputMaybe<Scalars['Int']['input']>;
  initialValue?: InputMaybe<Scalars['JSON']['input']>;
  isEditable?: InputMaybe<Scalars['JSON']['input']>;
  isRequired?: InputMaybe<Scalars['JSON']['input']>;
  parameters?: InputMaybe<Scalars['JSON']['input']>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInverseInput>;
  reviewability?: InputMaybe<Reviewability>;
  sectionId?: InputMaybe<Scalars['Int']['input']>;
  templateCode?: InputMaybe<Scalars['String']['input']>;
  templateSectionToSectionId?: InputMaybe<TemplateElementSectionIdFkeyInput>;
  templateVersion?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  validation?: InputMaybe<Scalars['JSON']['input']>;
  validationMessage?: InputMaybe<Scalars['String']['input']>;
  visibilityCondition?: InputMaybe<Scalars['JSON']['input']>;
};

/** An object where the defined keys will be set on the `templateElement` being updated. */
export type UpdateTemplateElementOnTemplateElementForTemplateElementSectionIdFkeyPatch = {
  applicationResponsesUsingId?: InputMaybe<ApplicationResponseTemplateElementIdFkeyInverseInput>;
  category?: InputMaybe<TemplateElementCategory>;
  code?: InputMaybe<Scalars['String']['input']>;
  elementTypePluginCode?: InputMaybe<Scalars['String']['input']>;
  helpText?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  index?: InputMaybe<Scalars['Int']['input']>;
  initialValue?: InputMaybe<Scalars['JSON']['input']>;
  isEditable?: InputMaybe<Scalars['JSON']['input']>;
  isRequired?: InputMaybe<Scalars['JSON']['input']>;
  parameters?: InputMaybe<Scalars['JSON']['input']>;
  reviewResponsesUsingId?: InputMaybe<ReviewResponseTemplateElementIdFkeyInverseInput>;
  reviewability?: InputMaybe<Reviewability>;
  templateCode?: InputMaybe<Scalars['String']['input']>;
  templateSectionToSectionId?: InputMaybe<TemplateElementSectionIdFkeyInput>;
  templateVersion?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  validation?: InputMaybe<Scalars['JSON']['input']>;
  validationMessage?: InputMaybe<Scalars['String']['input']>;
  visibilityCondition?: InputMaybe<Scalars['JSON']['input']>;
};

/** An object where the defined keys will be set on the `templateFilterJoin` being updated. */
export type UpdateTemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyPatch = {
  filterToFilterId?: InputMaybe<TemplateFilterJoinFilterIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInput>;
};

/** An object where the defined keys will be set on the `templateFilterJoin` being updated. */
export type UpdateTemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyPatch = {
  filterId?: InputMaybe<Scalars['Int']['input']>;
  filterToFilterId?: InputMaybe<TemplateFilterJoinFilterIdFkeyInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInput>;
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnActionQueueForActionQueueTemplateIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId?: InputMaybe<Scalars['String']['input']>;
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnApplicationForApplicationTemplateIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId?: InputMaybe<Scalars['String']['input']>;
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnFileForFileTemplateIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId?: InputMaybe<Scalars['String']['input']>;
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId?: InputMaybe<Scalars['String']['input']>;
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnTemplateActionForTemplateActionTemplateIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId?: InputMaybe<Scalars['String']['input']>;
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId?: InputMaybe<Scalars['String']['input']>;
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnTemplateForTemplateTemplateCategoryIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId?: InputMaybe<Scalars['String']['input']>;
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId?: InputMaybe<Scalars['String']['input']>;
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId?: InputMaybe<Scalars['String']['input']>;
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnTemplateStageForTemplateStageTemplateIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId?: InputMaybe<Scalars['String']['input']>;
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `template` being updated. */
export type UpdateTemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTemplateIdFkeyInverseInput>;
  applicationsUsingId?: InputMaybe<ApplicationTemplateIdFkeyInverseInput>;
  canApplicantMakeChanges?: InputMaybe<Scalars['Boolean']['input']>;
  code?: InputMaybe<Scalars['String']['input']>;
  dashboardRestrictions?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  filesUsingId?: InputMaybe<FileTemplateIdFkeyInverseInput>;
  icon?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isLinear?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  namePlural?: InputMaybe<Scalars['String']['input']>;
  parentVersionId?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentTemplateIdFkeyInverseInput>;
  serialPattern?: InputMaybe<Scalars['String']['input']>;
  startMessage?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<TemplateStatus>;
  submissionMessage?: InputMaybe<Scalars['JSON']['input']>;
  templateActionsUsingId?: InputMaybe<TemplateActionTemplateIdFkeyInverseInput>;
  templateCategoryId?: InputMaybe<Scalars['Int']['input']>;
  templateCategoryToTemplateCategoryId?: InputMaybe<TemplateTemplateCategoryIdFkeyInput>;
  templateFilterJoinsUsingId?: InputMaybe<TemplateFilterJoinTemplateIdFkeyInverseInput>;
  templatePermissionsUsingId?: InputMaybe<TemplatePermissionTemplateIdFkeyInverseInput>;
  templateSectionsUsingId?: InputMaybe<TemplateSectionTemplateIdFkeyInverseInput>;
  templateStagesUsingId?: InputMaybe<TemplateStageTemplateIdFkeyInverseInput>;
  triggerSchedulesUsingId?: InputMaybe<TriggerScheduleTemplateIdFkeyInverseInput>;
  versionComment?: InputMaybe<Scalars['String']['input']>;
  versionHistory?: InputMaybe<Scalars['JSON']['input']>;
  versionId?: InputMaybe<Scalars['String']['input']>;
  versionTimestamp?: InputMaybe<Scalars['Datetime']['input']>;
};

/** An object where the defined keys will be set on the `templatePermission` being updated. */
export type UpdateTemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyPatch = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  canMakeFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  canSelfAssign?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  permissionNameToPermissionNameId?: InputMaybe<TemplatePermissionPermissionNameIdFkeyInput>;
  restrictions?: InputMaybe<Scalars['JSON']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplatePermissionTemplateIdFkeyInput>;
};

/** An object where the defined keys will be set on the `templatePermission` being updated. */
export type UpdateTemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch = {
  allowedSections?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  canMakeFinalDecision?: InputMaybe<Scalars['Boolean']['input']>;
  canSelfAssign?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  levelNumber?: InputMaybe<Scalars['Int']['input']>;
  permissionNameId?: InputMaybe<Scalars['Int']['input']>;
  permissionNameToPermissionNameId?: InputMaybe<TemplatePermissionPermissionNameIdFkeyInput>;
  restrictions?: InputMaybe<Scalars['JSON']['input']>;
  stageNumber?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplatePermissionTemplateIdFkeyInput>;
};

/** An object where the defined keys will be set on the `templateSection` being updated. */
export type UpdateTemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyPatch = {
  code?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  index?: InputMaybe<Scalars['Int']['input']>;
  templateElementsUsingId?: InputMaybe<TemplateElementSectionIdFkeyInverseInput>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TemplateSectionTemplateIdFkeyInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** An object where the defined keys will be set on the `templateSection` being updated. */
export type UpdateTemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch = {
  code?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  index?: InputMaybe<Scalars['Int']['input']>;
  templateElementsUsingId?: InputMaybe<TemplateElementSectionIdFkeyInverseInput>;
  templateToTemplateId?: InputMaybe<TemplateSectionTemplateIdFkeyInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** An object where the defined keys will be set on the `templateStage` being updated. */
export type UpdateTemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyPatch = {
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  colour?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  number?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelsUsingId?: InputMaybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
  templateToTemplateId?: InputMaybe<TemplateStageTemplateIdFkeyInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** An object where the defined keys will be set on the `templateStage` being updated. */
export type UpdateTemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyPatch = {
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  colour?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  number?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelsUsingId?: InputMaybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
  templateToTemplateId?: InputMaybe<TemplateStageTemplateIdFkeyInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** An object where the defined keys will be set on the `templateStage` being updated. */
export type UpdateTemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyPatch = {
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  colour?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  number?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateStageReviewLevelsUsingId?: InputMaybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
  templateToTemplateId?: InputMaybe<TemplateStageTemplateIdFkeyInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** An object where the defined keys will be set on the `templateStage` being updated. */
export type UpdateTemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyPatch = {
  applicationStageHistoriesUsingId?: InputMaybe<ApplicationStageHistoryStageIdFkeyInverseInput>;
  colour?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  number?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentStageIdFkeyInverseInput>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateStageReviewLevelsUsingId?: InputMaybe<TemplateStageReviewLevelStageIdFkeyInverseInput>;
  templateToTemplateId?: InputMaybe<TemplateStageTemplateIdFkeyInput>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** An object where the defined keys will be set on the `templateStageReviewLevel` being updated. */
export type UpdateTemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyPatch = {
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  number?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentLevelIdFkeyInverseInput>;
  singleReviewerAllSections?: InputMaybe<Scalars['Boolean']['input']>;
  stageId?: InputMaybe<Scalars['Int']['input']>;
  templateStageToStageId?: InputMaybe<TemplateStageReviewLevelStageIdFkeyInput>;
};

/** An object where the defined keys will be set on the `templateStageReviewLevel` being updated. */
export type UpdateTemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyPatch = {
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  number?: InputMaybe<Scalars['Int']['input']>;
  reviewAssignmentsUsingId?: InputMaybe<ReviewAssignmentLevelIdFkeyInverseInput>;
  singleReviewerAllSections?: InputMaybe<Scalars['Boolean']['input']>;
  templateStageToStageId?: InputMaybe<TemplateStageReviewLevelStageIdFkeyInput>;
};

/** An object where the defined keys will be set on the `triggerQueue` being updated. */
export type UpdateTriggerQueueOnActionQueueForActionQueueTriggerEventFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTriggerEventFkeyInverseInput>;
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<TriggerQueueApplicationIdFkeyInput>;
  data?: InputMaybe<Scalars['JSON']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  log?: InputMaybe<Scalars['JSON']['input']>;
  recordId?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<TriggerQueueStatus>;
  table?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  triggerType?: InputMaybe<Trigger>;
};

/** An object where the defined keys will be set on the `triggerQueue` being updated. */
export type UpdateTriggerQueueOnTriggerQueueForTriggerQueueApplicationIdFkeyPatch = {
  actionQueuesUsingId?: InputMaybe<ActionQueueTriggerEventFkeyInverseInput>;
  applicationToApplicationId?: InputMaybe<TriggerQueueApplicationIdFkeyInput>;
  data?: InputMaybe<Scalars['JSON']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  log?: InputMaybe<Scalars['JSON']['input']>;
  recordId?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<TriggerQueueStatus>;
  table?: InputMaybe<Scalars['String']['input']>;
  timestamp?: InputMaybe<Scalars['Datetime']['input']>;
  triggerType?: InputMaybe<Trigger>;
};

/** An object where the defined keys will be set on the `triggerSchedule` being updated. */
export type UpdateTriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch = {
  applicationToApplicationId?: InputMaybe<TriggerScheduleApplicationIdFkeyInput>;
  data?: InputMaybe<Scalars['JSON']['input']>;
  editorUserId?: InputMaybe<Scalars['Int']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  templateId?: InputMaybe<Scalars['Int']['input']>;
  templateToTemplateId?: InputMaybe<TriggerScheduleTemplateIdFkeyInput>;
  timeScheduled?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
};

/** An object where the defined keys will be set on the `triggerSchedule` being updated. */
export type UpdateTriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyPatch = {
  applicationId?: InputMaybe<Scalars['Int']['input']>;
  applicationToApplicationId?: InputMaybe<TriggerScheduleApplicationIdFkeyInput>;
  data?: InputMaybe<Scalars['JSON']['input']>;
  editorUserId?: InputMaybe<Scalars['Int']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isActive?: InputMaybe<Scalars['Boolean']['input']>;
  templateToTemplateId?: InputMaybe<TriggerScheduleTemplateIdFkeyInput>;
  timeScheduled?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
};

/** An object where the defined keys will be set on the `userOrganisation` being updated. */
export type UpdateUserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0Patch = {
  id?: InputMaybe<Scalars['Int']['input']>;
  organisationId?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<UserOrganisationOrganisationIdFkeyInput>;
  userRole?: InputMaybe<Scalars['String']['input']>;
  userToUserId?: InputMaybe<FakePublicUserOrganisationForeignKey0Input>;
};

/** An object where the defined keys will be set on the `userOrganisation` being updated. */
export type UpdateUserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch = {
  id?: InputMaybe<Scalars['Int']['input']>;
  organisationToOrganisationId?: InputMaybe<UserOrganisationOrganisationIdFkeyInput>;
  userId?: InputMaybe<Scalars['Int']['input']>;
  userRole?: InputMaybe<Scalars['String']['input']>;
  userToUserId?: InputMaybe<FakePublicUserOrganisationForeignKey0Input>;
};

/** An object where the defined keys will be set on the `verification` being updated. */
export type UpdateVerificationOnVerificationForVerificationApplicationIdFkeyPatch = {
  applicationToApplicationId?: InputMaybe<VerificationApplicationIdFkeyInput>;
  data?: InputMaybe<Scalars['JSON']['input']>;
  eventCode?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  isVerified?: InputMaybe<Scalars['Boolean']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  timeCreated?: InputMaybe<Scalars['Datetime']['input']>;
  timeExpired?: InputMaybe<Scalars['Datetime']['input']>;
  trigger?: InputMaybe<Trigger>;
  uniqueId?: InputMaybe<Scalars['String']['input']>;
};



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;


/** Mapping of interface types */
export type ResolversInterfaceTypes<_RefType extends Record<string, unknown>> = {
  Node: ( ActionPlugin ) | ( ActionQueue ) | ( ActivityLog ) | ( Application ) | ( ApplicationNote ) | ( ApplicationResponse ) | ( ApplicationReviewerAction ) | ( ApplicationStageHistory ) | ( ApplicationStatusHistory ) | ( Counter ) | ( DataChangelog ) | ( DataTable ) | ( DataView ) | ( DataViewColumnDefinition ) | ( ElementTypePlugin ) | ( File ) | ( Filter ) | ( Notification ) | ( Organisation ) | ( PermissionJoin ) | ( PermissionName ) | ( PermissionPolicy ) | ( Omit<Query, 'actionPlugins' | 'node' | 'query'> & { actionPlugins?: Maybe<_RefType['ActionPluginsConnection']>, node?: Maybe<_RefType['Node']>, query: _RefType['Query'] } ) | ( Review ) | ( ReviewAssignment ) | ( ReviewAssignmentAssignerJoin ) | ( ReviewDecision ) | ( ReviewResponse ) | ( ReviewStatusHistory ) | ( SystemInfo ) | ( Template ) | ( TemplateAction ) | ( TemplateCategory ) | ( TemplateElement ) | ( TemplateFilterJoin ) | ( TemplatePermission ) | ( TemplateSection ) | ( TemplateStage ) | ( TemplateStageReviewLevel ) | ( TriggerQueue ) | ( TriggerSchedule ) | ( UserOrganisation ) | ( Verification );
};

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  ActionPlugin: ResolverTypeWrapper<ActionPlugin>;
  ActionPluginCondition: ActionPluginCondition;
  ActionPluginFilter: ActionPluginFilter;
  ActionPluginInput: ActionPluginInput;
  ActionPluginPatch: ActionPluginPatch;
  ActionPluginsConnection: ResolverTypeWrapper<ActionPluginsConnection>;
  ActionPluginsEdge: ResolverTypeWrapper<ActionPluginsEdge>;
  ActionPluginsOrderBy: ActionPluginsOrderBy;
  ActionQueue: ResolverTypeWrapper<ActionQueue>;
  ActionQueueActionQueuePkeyConnect: ActionQueueActionQueuePkeyConnect;
  ActionQueueActionQueuePkeyDelete: ActionQueueActionQueuePkeyDelete;
  ActionQueueApplicationIdFkeyActionQueueCreateInput: ActionQueueApplicationIdFkeyActionQueueCreateInput;
  ActionQueueApplicationIdFkeyApplicationCreateInput: ActionQueueApplicationIdFkeyApplicationCreateInput;
  ActionQueueApplicationIdFkeyInput: ActionQueueApplicationIdFkeyInput;
  ActionQueueApplicationIdFkeyInverseInput: ActionQueueApplicationIdFkeyInverseInput;
  ActionQueueCondition: ActionQueueCondition;
  ActionQueueFilter: ActionQueueFilter;
  ActionQueueInput: ActionQueueInput;
  ActionQueueNodeIdConnect: ActionQueueNodeIdConnect;
  ActionQueueNodeIdDelete: ActionQueueNodeIdDelete;
  ActionQueueOnActionQueueForActionQueueApplicationIdFkeyNodeIdUpdate: ActionQueueOnActionQueueForActionQueueApplicationIdFkeyNodeIdUpdate;
  ActionQueueOnActionQueueForActionQueueApplicationIdFkeyUsingActionQueuePkeyUpdate: ActionQueueOnActionQueueForActionQueueApplicationIdFkeyUsingActionQueuePkeyUpdate;
  ActionQueueOnActionQueueForActionQueueTemplateIdFkeyNodeIdUpdate: ActionQueueOnActionQueueForActionQueueTemplateIdFkeyNodeIdUpdate;
  ActionQueueOnActionQueueForActionQueueTemplateIdFkeyUsingActionQueuePkeyUpdate: ActionQueueOnActionQueueForActionQueueTemplateIdFkeyUsingActionQueuePkeyUpdate;
  ActionQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate: ActionQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate;
  ActionQueueOnActionQueueForActionQueueTriggerEventFkeyUsingActionQueuePkeyUpdate: ActionQueueOnActionQueueForActionQueueTriggerEventFkeyUsingActionQueuePkeyUpdate;
  ActionQueuePatch: ActionQueuePatch;
  ActionQueueStatus: ActionQueueStatus;
  ActionQueueStatusFilter: ActionQueueStatusFilter;
  ActionQueueTemplateIdFkeyActionQueueCreateInput: ActionQueueTemplateIdFkeyActionQueueCreateInput;
  ActionQueueTemplateIdFkeyInput: ActionQueueTemplateIdFkeyInput;
  ActionQueueTemplateIdFkeyInverseInput: ActionQueueTemplateIdFkeyInverseInput;
  ActionQueueTemplateIdFkeyTemplateCreateInput: ActionQueueTemplateIdFkeyTemplateCreateInput;
  ActionQueueTriggerEventFkeyActionQueueCreateInput: ActionQueueTriggerEventFkeyActionQueueCreateInput;
  ActionQueueTriggerEventFkeyInput: ActionQueueTriggerEventFkeyInput;
  ActionQueueTriggerEventFkeyInverseInput: ActionQueueTriggerEventFkeyInverseInput;
  ActionQueueTriggerEventFkeyTriggerQueueCreateInput: ActionQueueTriggerEventFkeyTriggerQueueCreateInput;
  ActionQueuesConnection: ResolverTypeWrapper<ActionQueuesConnection>;
  ActionQueuesEdge: ResolverTypeWrapper<ActionQueuesEdge>;
  ActionQueuesOrderBy: ActionQueuesOrderBy;
  ActivityLog: ResolverTypeWrapper<ActivityLog>;
  ActivityLogActivityLogPkeyConnect: ActivityLogActivityLogPkeyConnect;
  ActivityLogActivityLogPkeyDelete: ActivityLogActivityLogPkeyDelete;
  ActivityLogApplicationIdFkeyActivityLogCreateInput: ActivityLogApplicationIdFkeyActivityLogCreateInput;
  ActivityLogApplicationIdFkeyApplicationCreateInput: ActivityLogApplicationIdFkeyApplicationCreateInput;
  ActivityLogApplicationIdFkeyInput: ActivityLogApplicationIdFkeyInput;
  ActivityLogApplicationIdFkeyInverseInput: ActivityLogApplicationIdFkeyInverseInput;
  ActivityLogCondition: ActivityLogCondition;
  ActivityLogFilter: ActivityLogFilter;
  ActivityLogInput: ActivityLogInput;
  ActivityLogNodeIdConnect: ActivityLogNodeIdConnect;
  ActivityLogNodeIdDelete: ActivityLogNodeIdDelete;
  ActivityLogOnActivityLogForActivityLogApplicationIdFkeyNodeIdUpdate: ActivityLogOnActivityLogForActivityLogApplicationIdFkeyNodeIdUpdate;
  ActivityLogOnActivityLogForActivityLogApplicationIdFkeyUsingActivityLogPkeyUpdate: ActivityLogOnActivityLogForActivityLogApplicationIdFkeyUsingActivityLogPkeyUpdate;
  ActivityLogPatch: ActivityLogPatch;
  ActivityLogsConnection: ResolverTypeWrapper<ActivityLogsConnection>;
  ActivityLogsEdge: ResolverTypeWrapper<ActivityLogsEdge>;
  ActivityLogsOrderBy: ActivityLogsOrderBy;
  AllowedSelfAssignableSectionsShape: ResolverTypeWrapper<AllowedSelfAssignableSectionsShape>;
  AllowedSelfAssignableSectionsShapeCondition: AllowedSelfAssignableSectionsShapeCondition;
  AllowedSelfAssignableSectionsShapeFilter: AllowedSelfAssignableSectionsShapeFilter;
  AllowedSelfAssignableSectionsShapeInput: AllowedSelfAssignableSectionsShapeInput;
  AllowedSelfAssignableSectionsShapesConnection: ResolverTypeWrapper<AllowedSelfAssignableSectionsShapesConnection>;
  AllowedSelfAssignableSectionsShapesEdge: ResolverTypeWrapper<AllowedSelfAssignableSectionsShapesEdge>;
  AllowedSelfAssignableSectionsShapesOrderBy: AllowedSelfAssignableSectionsShapesOrderBy;
  Application: ResolverTypeWrapper<Application>;
  ApplicationApplicationOutcomeRegistrationKeyConnect: ApplicationApplicationOutcomeRegistrationKeyConnect;
  ApplicationApplicationOutcomeRegistrationKeyDelete: ApplicationApplicationOutcomeRegistrationKeyDelete;
  ApplicationApplicationPkeyConnect: ApplicationApplicationPkeyConnect;
  ApplicationApplicationPkeyDelete: ApplicationApplicationPkeyDelete;
  ApplicationApplicationSerialKeyConnect: ApplicationApplicationSerialKeyConnect;
  ApplicationApplicationSerialKeyDelete: ApplicationApplicationSerialKeyDelete;
  ApplicationCondition: ApplicationCondition;
  ApplicationFilter: ApplicationFilter;
  ApplicationInput: ApplicationInput;
  ApplicationListFilterApplicantConnection: ResolverTypeWrapper<ApplicationListFilterApplicantConnection>;
  ApplicationListFilterApplicantEdge: ResolverTypeWrapper<ApplicationListFilterApplicantEdge>;
  ApplicationListFilterAssignerConnection: ResolverTypeWrapper<ApplicationListFilterAssignerConnection>;
  ApplicationListFilterAssignerEdge: ResolverTypeWrapper<ApplicationListFilterAssignerEdge>;
  ApplicationListFilterOrganisationConnection: ResolverTypeWrapper<ApplicationListFilterOrganisationConnection>;
  ApplicationListFilterOrganisationEdge: ResolverTypeWrapper<ApplicationListFilterOrganisationEdge>;
  ApplicationListFilterReviewerConnection: ResolverTypeWrapper<ApplicationListFilterReviewerConnection>;
  ApplicationListFilterReviewerEdge: ResolverTypeWrapper<ApplicationListFilterReviewerEdge>;
  ApplicationListFilterStageConnection: ResolverTypeWrapper<ApplicationListFilterStageConnection>;
  ApplicationListFilterStageEdge: ResolverTypeWrapper<ApplicationListFilterStageEdge>;
  ApplicationListShape: ResolverTypeWrapper<ApplicationListShape>;
  ApplicationListShapeCondition: ApplicationListShapeCondition;
  ApplicationListShapeFilter: ApplicationListShapeFilter;
  ApplicationListShapeInput: ApplicationListShapeInput;
  ApplicationListShapesConnection: ResolverTypeWrapper<ApplicationListShapesConnection>;
  ApplicationListShapesEdge: ResolverTypeWrapper<ApplicationListShapesEdge>;
  ApplicationListShapesOrderBy: ApplicationListShapesOrderBy;
  ApplicationNodeIdConnect: ApplicationNodeIdConnect;
  ApplicationNodeIdDelete: ApplicationNodeIdDelete;
  ApplicationNote: ResolverTypeWrapper<ApplicationNote>;
  ApplicationNoteApplicationIdFkeyApplicationCreateInput: ApplicationNoteApplicationIdFkeyApplicationCreateInput;
  ApplicationNoteApplicationIdFkeyApplicationNoteCreateInput: ApplicationNoteApplicationIdFkeyApplicationNoteCreateInput;
  ApplicationNoteApplicationIdFkeyInput: ApplicationNoteApplicationIdFkeyInput;
  ApplicationNoteApplicationIdFkeyInverseInput: ApplicationNoteApplicationIdFkeyInverseInput;
  ApplicationNoteApplicationNotePkeyConnect: ApplicationNoteApplicationNotePkeyConnect;
  ApplicationNoteApplicationNotePkeyDelete: ApplicationNoteApplicationNotePkeyDelete;
  ApplicationNoteCondition: ApplicationNoteCondition;
  ApplicationNoteFilter: ApplicationNoteFilter;
  ApplicationNoteInput: ApplicationNoteInput;
  ApplicationNoteNodeIdConnect: ApplicationNoteNodeIdConnect;
  ApplicationNoteNodeIdDelete: ApplicationNoteNodeIdDelete;
  ApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyNodeIdUpdate: ApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyNodeIdUpdate;
  ApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationNotePkeyUpdate: ApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationNotePkeyUpdate;
  ApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyNodeIdUpdate: ApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyNodeIdUpdate;
  ApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyUsingApplicationNotePkeyUpdate: ApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyUsingApplicationNotePkeyUpdate;
  ApplicationNoteOnApplicationNoteForFakePublicApplicationNoteForeignKey0UsingApplicationNotePkeyUpdate: ApplicationNoteOnApplicationNoteForFakePublicApplicationNoteForeignKey0UsingApplicationNotePkeyUpdate;
  ApplicationNoteOnFileForFileApplicationNoteIdFkeyNodeIdUpdate: ApplicationNoteOnFileForFileApplicationNoteIdFkeyNodeIdUpdate;
  ApplicationNoteOnFileForFileApplicationNoteIdFkeyUsingApplicationNotePkeyUpdate: ApplicationNoteOnFileForFileApplicationNoteIdFkeyUsingApplicationNotePkeyUpdate;
  ApplicationNoteOrgIdFkeyApplicationNoteCreateInput: ApplicationNoteOrgIdFkeyApplicationNoteCreateInput;
  ApplicationNoteOrgIdFkeyInput: ApplicationNoteOrgIdFkeyInput;
  ApplicationNoteOrgIdFkeyInverseInput: ApplicationNoteOrgIdFkeyInverseInput;
  ApplicationNoteOrgIdFkeyOrganisationCreateInput: ApplicationNoteOrgIdFkeyOrganisationCreateInput;
  ApplicationNotePatch: ApplicationNotePatch;
  ApplicationNoteToManyFileFilter: ApplicationNoteToManyFileFilter;
  ApplicationNotesConnection: ResolverTypeWrapper<ApplicationNotesConnection>;
  ApplicationNotesEdge: ResolverTypeWrapper<ApplicationNotesEdge>;
  ApplicationNotesOrderBy: ApplicationNotesOrderBy;
  ApplicationOnActionQueueForActionQueueApplicationIdFkeyNodeIdUpdate: ApplicationOnActionQueueForActionQueueApplicationIdFkeyNodeIdUpdate;
  ApplicationOnActionQueueForActionQueueApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnActionQueueForActionQueueApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnActionQueueForActionQueueApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnActionQueueForActionQueueApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnActionQueueForActionQueueApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnActionQueueForActionQueueApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnActivityLogForActivityLogApplicationIdFkeyNodeIdUpdate: ApplicationOnActivityLogForActivityLogApplicationIdFkeyNodeIdUpdate;
  ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnApplicationForApplicationOrgIdFkeyNodeIdUpdate: ApplicationOnApplicationForApplicationOrgIdFkeyNodeIdUpdate;
  ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationPkeyUpdate: ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate: ApplicationOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate;
  ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationPkeyUpdate: ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnApplicationForFakePublicApplicationForeignKey0UsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnApplicationForFakePublicApplicationForeignKey0UsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnApplicationForFakePublicApplicationForeignKey0UsingApplicationPkeyUpdate: ApplicationOnApplicationForFakePublicApplicationForeignKey0UsingApplicationPkeyUpdate;
  ApplicationOnApplicationForFakePublicApplicationForeignKey0UsingApplicationSerialKeyUpdate: ApplicationOnApplicationForFakePublicApplicationForeignKey0UsingApplicationSerialKeyUpdate;
  ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyNodeIdUpdate: ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyNodeIdUpdate;
  ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate: ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate;
  ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyNodeIdUpdate: ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyNodeIdUpdate;
  ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate: ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate;
  ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyNodeIdUpdate: ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyNodeIdUpdate;
  ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnFileForFileApplicationSerialFkeyNodeIdUpdate: ApplicationOnFileForFileApplicationSerialFkeyNodeIdUpdate;
  ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationPkeyUpdate: ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationPkeyUpdate;
  ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationSerialKeyUpdate: ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate: ApplicationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate;
  ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyNodeIdUpdate: ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyNodeIdUpdate;
  ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnReviewForReviewApplicationIdFkeyNodeIdUpdate: ApplicationOnReviewForReviewApplicationIdFkeyNodeIdUpdate;
  ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyNodeIdUpdate: ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyNodeIdUpdate;
  ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyNodeIdUpdate: ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyNodeIdUpdate;
  ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnVerificationForVerificationApplicationIdFkeyNodeIdUpdate: ApplicationOnVerificationForVerificationApplicationIdFkeyNodeIdUpdate;
  ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOrgIdFkeyApplicationCreateInput: ApplicationOrgIdFkeyApplicationCreateInput;
  ApplicationOrgIdFkeyInput: ApplicationOrgIdFkeyInput;
  ApplicationOrgIdFkeyInverseInput: ApplicationOrgIdFkeyInverseInput;
  ApplicationOrgIdFkeyOrganisationCreateInput: ApplicationOrgIdFkeyOrganisationCreateInput;
  ApplicationOutcome: ApplicationOutcome;
  ApplicationOutcomeFilter: ApplicationOutcomeFilter;
  ApplicationPatch: ApplicationPatch;
  ApplicationResponse: ResolverTypeWrapper<ApplicationResponse>;
  ApplicationResponseApplicationIdFkeyApplicationCreateInput: ApplicationResponseApplicationIdFkeyApplicationCreateInput;
  ApplicationResponseApplicationIdFkeyApplicationResponseCreateInput: ApplicationResponseApplicationIdFkeyApplicationResponseCreateInput;
  ApplicationResponseApplicationIdFkeyInput: ApplicationResponseApplicationIdFkeyInput;
  ApplicationResponseApplicationIdFkeyInverseInput: ApplicationResponseApplicationIdFkeyInverseInput;
  ApplicationResponseApplicationResponsePkeyConnect: ApplicationResponseApplicationResponsePkeyConnect;
  ApplicationResponseApplicationResponsePkeyDelete: ApplicationResponseApplicationResponsePkeyDelete;
  ApplicationResponseCondition: ApplicationResponseCondition;
  ApplicationResponseFilter: ApplicationResponseFilter;
  ApplicationResponseInput: ApplicationResponseInput;
  ApplicationResponseNodeIdConnect: ApplicationResponseNodeIdConnect;
  ApplicationResponseNodeIdDelete: ApplicationResponseNodeIdDelete;
  ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate: ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate;
  ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationResponsePkeyUpdate: ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationResponsePkeyUpdate;
  ApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyNodeIdUpdate: ApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyNodeIdUpdate;
  ApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingApplicationResponsePkeyUpdate: ApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingApplicationResponsePkeyUpdate;
  ApplicationResponseOnFileForFileApplicationResponseIdFkeyNodeIdUpdate: ApplicationResponseOnFileForFileApplicationResponseIdFkeyNodeIdUpdate;
  ApplicationResponseOnFileForFileApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate: ApplicationResponseOnFileForFileApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate;
  ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate: ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate;
  ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate: ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate;
  ApplicationResponsePatch: ApplicationResponsePatch;
  ApplicationResponseStatus: ApplicationResponseStatus;
  ApplicationResponseStatusFilter: ApplicationResponseStatusFilter;
  ApplicationResponseTemplateElementIdFkeyApplicationResponseCreateInput: ApplicationResponseTemplateElementIdFkeyApplicationResponseCreateInput;
  ApplicationResponseTemplateElementIdFkeyInput: ApplicationResponseTemplateElementIdFkeyInput;
  ApplicationResponseTemplateElementIdFkeyInverseInput: ApplicationResponseTemplateElementIdFkeyInverseInput;
  ApplicationResponseTemplateElementIdFkeyTemplateElementCreateInput: ApplicationResponseTemplateElementIdFkeyTemplateElementCreateInput;
  ApplicationResponseToManyFileFilter: ApplicationResponseToManyFileFilter;
  ApplicationResponseToManyReviewResponseFilter: ApplicationResponseToManyReviewResponseFilter;
  ApplicationResponsesConnection: ResolverTypeWrapper<ApplicationResponsesConnection>;
  ApplicationResponsesEdge: ResolverTypeWrapper<ApplicationResponsesEdge>;
  ApplicationResponsesOrderBy: ApplicationResponsesOrderBy;
  ApplicationReviewerAction: ResolverTypeWrapper<ApplicationReviewerAction>;
  ApplicationReviewerActionApplicationIdFkeyApplicationCreateInput: ApplicationReviewerActionApplicationIdFkeyApplicationCreateInput;
  ApplicationReviewerActionApplicationIdFkeyApplicationReviewerActionCreateInput: ApplicationReviewerActionApplicationIdFkeyApplicationReviewerActionCreateInput;
  ApplicationReviewerActionApplicationIdFkeyInput: ApplicationReviewerActionApplicationIdFkeyInput;
  ApplicationReviewerActionApplicationIdFkeyInverseInput: ApplicationReviewerActionApplicationIdFkeyInverseInput;
  ApplicationReviewerActionApplicationReviewerActionPkeyConnect: ApplicationReviewerActionApplicationReviewerActionPkeyConnect;
  ApplicationReviewerActionApplicationReviewerActionPkeyDelete: ApplicationReviewerActionApplicationReviewerActionPkeyDelete;
  ApplicationReviewerActionApplicationReviewerActionUserIdApplicationIdKeyConnect: ApplicationReviewerActionApplicationReviewerActionUserIdApplicationIdKeyConnect;
  ApplicationReviewerActionApplicationReviewerActionUserIdApplicationIdKeyDelete: ApplicationReviewerActionApplicationReviewerActionUserIdApplicationIdKeyDelete;
  ApplicationReviewerActionCondition: ApplicationReviewerActionCondition;
  ApplicationReviewerActionFilter: ApplicationReviewerActionFilter;
  ApplicationReviewerActionInput: ApplicationReviewerActionInput;
  ApplicationReviewerActionNodeIdConnect: ApplicationReviewerActionNodeIdConnect;
  ApplicationReviewerActionNodeIdDelete: ApplicationReviewerActionNodeIdDelete;
  ApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyNodeIdUpdate: ApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyNodeIdUpdate;
  ApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationReviewerActionPkeyUpdate: ApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationReviewerActionPkeyUpdate;
  ApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationReviewerActionUserIdApplicationIdKeyUpdate: ApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationReviewerActionUserIdApplicationIdKeyUpdate;
  ApplicationReviewerActionPatch: ApplicationReviewerActionPatch;
  ApplicationReviewerActionsConnection: ResolverTypeWrapper<ApplicationReviewerActionsConnection>;
  ApplicationReviewerActionsEdge: ResolverTypeWrapper<ApplicationReviewerActionsEdge>;
  ApplicationReviewerActionsOrderBy: ApplicationReviewerActionsOrderBy;
  ApplicationStageHistoriesConnection: ResolverTypeWrapper<ApplicationStageHistoriesConnection>;
  ApplicationStageHistoriesEdge: ResolverTypeWrapper<ApplicationStageHistoriesEdge>;
  ApplicationStageHistoriesOrderBy: ApplicationStageHistoriesOrderBy;
  ApplicationStageHistory: ResolverTypeWrapper<ApplicationStageHistory>;
  ApplicationStageHistoryApplicationIdFkeyApplicationCreateInput: ApplicationStageHistoryApplicationIdFkeyApplicationCreateInput;
  ApplicationStageHistoryApplicationIdFkeyApplicationStageHistoryCreateInput: ApplicationStageHistoryApplicationIdFkeyApplicationStageHistoryCreateInput;
  ApplicationStageHistoryApplicationIdFkeyInput: ApplicationStageHistoryApplicationIdFkeyInput;
  ApplicationStageHistoryApplicationIdFkeyInverseInput: ApplicationStageHistoryApplicationIdFkeyInverseInput;
  ApplicationStageHistoryApplicationStageHistoryPkeyConnect: ApplicationStageHistoryApplicationStageHistoryPkeyConnect;
  ApplicationStageHistoryApplicationStageHistoryPkeyDelete: ApplicationStageHistoryApplicationStageHistoryPkeyDelete;
  ApplicationStageHistoryCondition: ApplicationStageHistoryCondition;
  ApplicationStageHistoryFilter: ApplicationStageHistoryFilter;
  ApplicationStageHistoryInput: ApplicationStageHistoryInput;
  ApplicationStageHistoryNodeIdConnect: ApplicationStageHistoryNodeIdConnect;
  ApplicationStageHistoryNodeIdDelete: ApplicationStageHistoryNodeIdDelete;
  ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate: ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate;
  ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationStageHistoryPkeyUpdate: ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationStageHistoryPkeyUpdate;
  ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyNodeIdUpdate: ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyNodeIdUpdate;
  ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyUsingApplicationStageHistoryPkeyUpdate: ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyUsingApplicationStageHistoryPkeyUpdate;
  ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate: ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate;
  ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStageHistoryPkeyUpdate: ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStageHistoryPkeyUpdate;
  ApplicationStageHistoryPatch: ApplicationStageHistoryPatch;
  ApplicationStageHistoryStageIdFkeyApplicationStageHistoryCreateInput: ApplicationStageHistoryStageIdFkeyApplicationStageHistoryCreateInput;
  ApplicationStageHistoryStageIdFkeyInput: ApplicationStageHistoryStageIdFkeyInput;
  ApplicationStageHistoryStageIdFkeyInverseInput: ApplicationStageHistoryStageIdFkeyInverseInput;
  ApplicationStageHistoryStageIdFkeyTemplateStageCreateInput: ApplicationStageHistoryStageIdFkeyTemplateStageCreateInput;
  ApplicationStageHistoryToManyApplicationStatusHistoryFilter: ApplicationStageHistoryToManyApplicationStatusHistoryFilter;
  ApplicationStageStatusAll: ResolverTypeWrapper<ApplicationStageStatusAll>;
  ApplicationStageStatusAllCondition: ApplicationStageStatusAllCondition;
  ApplicationStageStatusAllFilter: ApplicationStageStatusAllFilter;
  ApplicationStageStatusAllsConnection: ResolverTypeWrapper<ApplicationStageStatusAllsConnection>;
  ApplicationStageStatusAllsEdge: ResolverTypeWrapper<ApplicationStageStatusAllsEdge>;
  ApplicationStageStatusAllsOrderBy: ApplicationStageStatusAllsOrderBy;
  ApplicationStageStatusLatest: ResolverTypeWrapper<ApplicationStageStatusLatest>;
  ApplicationStageStatusLatestCondition: ApplicationStageStatusLatestCondition;
  ApplicationStageStatusLatestFilter: ApplicationStageStatusLatestFilter;
  ApplicationStageStatusLatestsConnection: ResolverTypeWrapper<ApplicationStageStatusLatestsConnection>;
  ApplicationStageStatusLatestsEdge: ResolverTypeWrapper<ApplicationStageStatusLatestsEdge>;
  ApplicationStageStatusLatestsOrderBy: ApplicationStageStatusLatestsOrderBy;
  ApplicationStatus: ApplicationStatus;
  ApplicationStatusFilter: ApplicationStatusFilter;
  ApplicationStatusHistoriesConnection: ResolverTypeWrapper<ApplicationStatusHistoriesConnection>;
  ApplicationStatusHistoriesEdge: ResolverTypeWrapper<ApplicationStatusHistoriesEdge>;
  ApplicationStatusHistoriesOrderBy: ApplicationStatusHistoriesOrderBy;
  ApplicationStatusHistory: ResolverTypeWrapper<ApplicationStatusHistory>;
  ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStageHistoryCreateInput: ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStageHistoryCreateInput;
  ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStatusHistoryCreateInput: ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStatusHistoryCreateInput;
  ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput: ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput;
  ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput: ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput;
  ApplicationStatusHistoryApplicationStatusHistoryPkeyConnect: ApplicationStatusHistoryApplicationStatusHistoryPkeyConnect;
  ApplicationStatusHistoryApplicationStatusHistoryPkeyDelete: ApplicationStatusHistoryApplicationStatusHistoryPkeyDelete;
  ApplicationStatusHistoryCondition: ApplicationStatusHistoryCondition;
  ApplicationStatusHistoryFilter: ApplicationStatusHistoryFilter;
  ApplicationStatusHistoryInput: ApplicationStatusHistoryInput;
  ApplicationStatusHistoryNodeIdConnect: ApplicationStatusHistoryNodeIdConnect;
  ApplicationStatusHistoryNodeIdDelete: ApplicationStatusHistoryNodeIdDelete;
  ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate: ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate;
  ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStatusHistoryPkeyUpdate: ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStatusHistoryPkeyUpdate;
  ApplicationStatusHistoryPatch: ApplicationStatusHistoryPatch;
  ApplicationTemplateIdFkeyApplicationCreateInput: ApplicationTemplateIdFkeyApplicationCreateInput;
  ApplicationTemplateIdFkeyInput: ApplicationTemplateIdFkeyInput;
  ApplicationTemplateIdFkeyInverseInput: ApplicationTemplateIdFkeyInverseInput;
  ApplicationTemplateIdFkeyTemplateCreateInput: ApplicationTemplateIdFkeyTemplateCreateInput;
  ApplicationToManyActionQueueFilter: ApplicationToManyActionQueueFilter;
  ApplicationToManyActivityLogFilter: ApplicationToManyActivityLogFilter;
  ApplicationToManyApplicationNoteFilter: ApplicationToManyApplicationNoteFilter;
  ApplicationToManyApplicationResponseFilter: ApplicationToManyApplicationResponseFilter;
  ApplicationToManyApplicationReviewerActionFilter: ApplicationToManyApplicationReviewerActionFilter;
  ApplicationToManyApplicationStageHistoryFilter: ApplicationToManyApplicationStageHistoryFilter;
  ApplicationToManyDataChangelogFilter: ApplicationToManyDataChangelogFilter;
  ApplicationToManyFileFilter: ApplicationToManyFileFilter;
  ApplicationToManyNotificationFilter: ApplicationToManyNotificationFilter;
  ApplicationToManyReviewAssignmentFilter: ApplicationToManyReviewAssignmentFilter;
  ApplicationToManyReviewFilter: ApplicationToManyReviewFilter;
  ApplicationToManyTriggerQueueFilter: ApplicationToManyTriggerQueueFilter;
  ApplicationToManyTriggerScheduleFilter: ApplicationToManyTriggerScheduleFilter;
  ApplicationToManyVerificationFilter: ApplicationToManyVerificationFilter;
  ApplicationsConnection: ResolverTypeWrapper<ApplicationsConnection>;
  ApplicationsEdge: ResolverTypeWrapper<ApplicationsEdge>;
  ApplicationsOrderBy: ApplicationsOrderBy;
  AssignedQuestionEdge: ResolverTypeWrapper<AssignedQuestionEdge>;
  AssignedQuestionsConnection: ResolverTypeWrapper<AssignedQuestionsConnection>;
  AssignedQuestionsRecord: ResolverTypeWrapper<AssignedQuestionsRecord>;
  AssignedQuestionsRecordFilter: AssignedQuestionsRecordFilter;
  AssignedSectionsByStageAndLevel: ResolverTypeWrapper<AssignedSectionsByStageAndLevel>;
  AssignedSectionsByStageAndLevelCondition: AssignedSectionsByStageAndLevelCondition;
  AssignedSectionsByStageAndLevelFilter: AssignedSectionsByStageAndLevelFilter;
  AssignedSectionsByStageAndLevelsConnection: ResolverTypeWrapper<AssignedSectionsByStageAndLevelsConnection>;
  AssignedSectionsByStageAndLevelsEdge: ResolverTypeWrapper<AssignedSectionsByStageAndLevelsEdge>;
  AssignedSectionsByStageAndLevelsOrderBy: AssignedSectionsByStageAndLevelsOrderBy;
  AssignerAction: AssignerAction;
  AssignerActionFilter: AssignerActionFilter;
  AssignerListConnection: ResolverTypeWrapper<AssignerListConnection>;
  AssignerListEdge: ResolverTypeWrapper<AssignerListEdge>;
  AssignerListRecord: ResolverTypeWrapper<AssignerListRecord>;
  AssignerListRecordFilter: AssignerListRecordFilter;
  AssignmentListConnection: ResolverTypeWrapper<AssignmentListConnection>;
  AssignmentListEdge: ResolverTypeWrapper<AssignmentListEdge>;
  AssignmentListRecord: ResolverTypeWrapper<AssignmentListRecord>;
  AssignmentListRecordFilter: AssignmentListRecordFilter;
  BigInt: ResolverTypeWrapper<Scalars['BigInt']['output']>;
  BigIntFilter: BigIntFilter;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']['output']>;
  BooleanFilter: BooleanFilter;
  ChangelogType: ChangelogType;
  ChangelogTypeFilter: ChangelogTypeFilter;
  CharacterData: ResolverTypeWrapper<Scalars['CharacterData']['output']>;
  CharacterDataFilter: CharacterDataFilter;
  ConstraintsInfo: ResolverTypeWrapper<ConstraintsInfo>;
  ConstraintsInfoCondition: ConstraintsInfoCondition;
  ConstraintsInfoFilter: ConstraintsInfoFilter;
  ConstraintsInfosConnection: ResolverTypeWrapper<ConstraintsInfosConnection>;
  ConstraintsInfosEdge: ResolverTypeWrapper<ConstraintsInfosEdge>;
  ConstraintsInfosOrderBy: ConstraintsInfosOrderBy;
  Counter: ResolverTypeWrapper<Counter>;
  CounterCondition: CounterCondition;
  CounterFilter: CounterFilter;
  CounterInput: CounterInput;
  CounterPatch: CounterPatch;
  CountersConnection: ResolverTypeWrapper<CountersConnection>;
  CountersEdge: ResolverTypeWrapper<CountersEdge>;
  CountersOrderBy: CountersOrderBy;
  CreateActionPluginInput: CreateActionPluginInput;
  CreateActionPluginPayload: ResolverTypeWrapper<Omit<CreateActionPluginPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateActionQueueInput: CreateActionQueueInput;
  CreateActionQueuePayload: ResolverTypeWrapper<Omit<CreateActionQueuePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateActivityLogInput: CreateActivityLogInput;
  CreateActivityLogPayload: ResolverTypeWrapper<Omit<CreateActivityLogPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateAllowedSelfAssignableSectionsShapeInput: CreateAllowedSelfAssignableSectionsShapeInput;
  CreateAllowedSelfAssignableSectionsShapePayload: ResolverTypeWrapper<Omit<CreateAllowedSelfAssignableSectionsShapePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateApplicationInput: CreateApplicationInput;
  CreateApplicationListShapeInput: CreateApplicationListShapeInput;
  CreateApplicationListShapePayload: ResolverTypeWrapper<Omit<CreateApplicationListShapePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateApplicationNoteInput: CreateApplicationNoteInput;
  CreateApplicationNotePayload: ResolverTypeWrapper<Omit<CreateApplicationNotePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateApplicationPayload: ResolverTypeWrapper<Omit<CreateApplicationPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateApplicationResponseInput: CreateApplicationResponseInput;
  CreateApplicationResponsePayload: ResolverTypeWrapper<Omit<CreateApplicationResponsePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateApplicationReviewerActionInput: CreateApplicationReviewerActionInput;
  CreateApplicationReviewerActionPayload: ResolverTypeWrapper<Omit<CreateApplicationReviewerActionPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateApplicationStageHistoryInput: CreateApplicationStageHistoryInput;
  CreateApplicationStageHistoryPayload: ResolverTypeWrapper<Omit<CreateApplicationStageHistoryPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateApplicationStatusHistoryInput: CreateApplicationStatusHistoryInput;
  CreateApplicationStatusHistoryPayload: ResolverTypeWrapper<Omit<CreateApplicationStatusHistoryPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateCounterInput: CreateCounterInput;
  CreateCounterPayload: ResolverTypeWrapper<Omit<CreateCounterPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateDataChangelogInput: CreateDataChangelogInput;
  CreateDataChangelogPayload: ResolverTypeWrapper<Omit<CreateDataChangelogPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateDataTableInput: CreateDataTableInput;
  CreateDataTablePayload: ResolverTypeWrapper<Omit<CreateDataTablePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateDataViewColumnDefinitionInput: CreateDataViewColumnDefinitionInput;
  CreateDataViewColumnDefinitionPayload: ResolverTypeWrapper<Omit<CreateDataViewColumnDefinitionPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateDataViewInput: CreateDataViewInput;
  CreateDataViewPayload: ResolverTypeWrapper<Omit<CreateDataViewPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateElementTypePluginInput: CreateElementTypePluginInput;
  CreateElementTypePluginPayload: ResolverTypeWrapper<Omit<CreateElementTypePluginPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateFileInput: CreateFileInput;
  CreateFilePayload: ResolverTypeWrapper<Omit<CreateFilePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateFilterInput: CreateFilterInput;
  CreateFilterPayload: ResolverTypeWrapper<Omit<CreateFilterPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateNotificationInput: CreateNotificationInput;
  CreateNotificationPayload: ResolverTypeWrapper<Omit<CreateNotificationPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateOrganisationInput: CreateOrganisationInput;
  CreateOrganisationPayload: ResolverTypeWrapper<Omit<CreateOrganisationPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreatePermissionJoinInput: CreatePermissionJoinInput;
  CreatePermissionJoinPayload: ResolverTypeWrapper<Omit<CreatePermissionJoinPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreatePermissionNameInput: CreatePermissionNameInput;
  CreatePermissionNamePayload: ResolverTypeWrapper<Omit<CreatePermissionNamePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreatePermissionPolicyInput: CreatePermissionPolicyInput;
  CreatePermissionPolicyPayload: ResolverTypeWrapper<Omit<CreatePermissionPolicyPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateReviewAssignmentAssignedSectionsShapeInput: CreateReviewAssignmentAssignedSectionsShapeInput;
  CreateReviewAssignmentAssignedSectionsShapePayload: ResolverTypeWrapper<Omit<CreateReviewAssignmentAssignedSectionsShapePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateReviewAssignmentAssignerJoinInput: CreateReviewAssignmentAssignerJoinInput;
  CreateReviewAssignmentAssignerJoinPayload: ResolverTypeWrapper<Omit<CreateReviewAssignmentAssignerJoinPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateReviewAssignmentInput: CreateReviewAssignmentInput;
  CreateReviewAssignmentPayload: ResolverTypeWrapper<Omit<CreateReviewAssignmentPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateReviewDecisionInput: CreateReviewDecisionInput;
  CreateReviewDecisionPayload: ResolverTypeWrapper<Omit<CreateReviewDecisionPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateReviewInput: CreateReviewInput;
  CreateReviewPayload: ResolverTypeWrapper<Omit<CreateReviewPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateReviewResponseInput: CreateReviewResponseInput;
  CreateReviewResponsePayload: ResolverTypeWrapper<Omit<CreateReviewResponsePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateReviewStatusHistoryInput: CreateReviewStatusHistoryInput;
  CreateReviewStatusHistoryPayload: ResolverTypeWrapper<Omit<CreateReviewStatusHistoryPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateSystemInfoInput: CreateSystemInfoInput;
  CreateSystemInfoPayload: ResolverTypeWrapper<Omit<CreateSystemInfoPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateTemplateActionInput: CreateTemplateActionInput;
  CreateTemplateActionPayload: ResolverTypeWrapper<Omit<CreateTemplateActionPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateTemplateCategoryInput: CreateTemplateCategoryInput;
  CreateTemplateCategoryPayload: ResolverTypeWrapper<Omit<CreateTemplateCategoryPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateTemplateElementInput: CreateTemplateElementInput;
  CreateTemplateElementPayload: ResolverTypeWrapper<Omit<CreateTemplateElementPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateTemplateFilterJoinInput: CreateTemplateFilterJoinInput;
  CreateTemplateFilterJoinPayload: ResolverTypeWrapper<Omit<CreateTemplateFilterJoinPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateTemplateInput: CreateTemplateInput;
  CreateTemplatePayload: ResolverTypeWrapper<Omit<CreateTemplatePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateTemplatePermissionInput: CreateTemplatePermissionInput;
  CreateTemplatePermissionPayload: ResolverTypeWrapper<Omit<CreateTemplatePermissionPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateTemplateSectionInput: CreateTemplateSectionInput;
  CreateTemplateSectionPayload: ResolverTypeWrapper<Omit<CreateTemplateSectionPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateTemplateStageInput: CreateTemplateStageInput;
  CreateTemplateStagePayload: ResolverTypeWrapper<Omit<CreateTemplateStagePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateTemplateStageReviewLevelInput: CreateTemplateStageReviewLevelInput;
  CreateTemplateStageReviewLevelPayload: ResolverTypeWrapper<Omit<CreateTemplateStageReviewLevelPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateTriggerQueueInput: CreateTriggerQueueInput;
  CreateTriggerQueuePayload: ResolverTypeWrapper<Omit<CreateTriggerQueuePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateTriggerScheduleInput: CreateTriggerScheduleInput;
  CreateTriggerSchedulePayload: ResolverTypeWrapper<Omit<CreateTriggerSchedulePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateUserInput: CreateUserInput;
  CreateUserListInput: CreateUserListInput;
  CreateUserListPayload: ResolverTypeWrapper<Omit<CreateUserListPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateUserOrganisationInput: CreateUserOrganisationInput;
  CreateUserOrganisationPayload: ResolverTypeWrapper<Omit<CreateUserOrganisationPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateUserPayload: ResolverTypeWrapper<Omit<CreateUserPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  CreateVerificationInput: CreateVerificationInput;
  CreateVerificationPayload: ResolverTypeWrapper<Omit<CreateVerificationPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  Cursor: ResolverTypeWrapper<Scalars['Cursor']['output']>;
  DataChangelog: ResolverTypeWrapper<DataChangelog>;
  DataChangelogApplicationIdFkeyApplicationCreateInput: DataChangelogApplicationIdFkeyApplicationCreateInput;
  DataChangelogApplicationIdFkeyDataChangelogCreateInput: DataChangelogApplicationIdFkeyDataChangelogCreateInput;
  DataChangelogApplicationIdFkeyInput: DataChangelogApplicationIdFkeyInput;
  DataChangelogApplicationIdFkeyInverseInput: DataChangelogApplicationIdFkeyInverseInput;
  DataChangelogCondition: DataChangelogCondition;
  DataChangelogDataChangelogPkeyConnect: DataChangelogDataChangelogPkeyConnect;
  DataChangelogDataChangelogPkeyDelete: DataChangelogDataChangelogPkeyDelete;
  DataChangelogFilter: DataChangelogFilter;
  DataChangelogInput: DataChangelogInput;
  DataChangelogNodeIdConnect: DataChangelogNodeIdConnect;
  DataChangelogNodeIdDelete: DataChangelogNodeIdDelete;
  DataChangelogOnDataChangelogForDataChangelogApplicationIdFkeyNodeIdUpdate: DataChangelogOnDataChangelogForDataChangelogApplicationIdFkeyNodeIdUpdate;
  DataChangelogOnDataChangelogForDataChangelogApplicationIdFkeyUsingDataChangelogPkeyUpdate: DataChangelogOnDataChangelogForDataChangelogApplicationIdFkeyUsingDataChangelogPkeyUpdate;
  DataChangelogOnDataChangelogForDataChangelogOrgIdFkeyNodeIdUpdate: DataChangelogOnDataChangelogForDataChangelogOrgIdFkeyNodeIdUpdate;
  DataChangelogOnDataChangelogForDataChangelogOrgIdFkeyUsingDataChangelogPkeyUpdate: DataChangelogOnDataChangelogForDataChangelogOrgIdFkeyUsingDataChangelogPkeyUpdate;
  DataChangelogOrgIdFkeyDataChangelogCreateInput: DataChangelogOrgIdFkeyDataChangelogCreateInput;
  DataChangelogOrgIdFkeyInput: DataChangelogOrgIdFkeyInput;
  DataChangelogOrgIdFkeyInverseInput: DataChangelogOrgIdFkeyInverseInput;
  DataChangelogOrgIdFkeyOrganisationCreateInput: DataChangelogOrgIdFkeyOrganisationCreateInput;
  DataChangelogPatch: DataChangelogPatch;
  DataChangelogsConnection: ResolverTypeWrapper<DataChangelogsConnection>;
  DataChangelogsEdge: ResolverTypeWrapper<DataChangelogsEdge>;
  DataChangelogsOrderBy: DataChangelogsOrderBy;
  DataTable: ResolverTypeWrapper<DataTable>;
  DataTableCondition: DataTableCondition;
  DataTableFilter: DataTableFilter;
  DataTableInput: DataTableInput;
  DataTablePatch: DataTablePatch;
  DataTablesConnection: ResolverTypeWrapper<DataTablesConnection>;
  DataTablesEdge: ResolverTypeWrapper<DataTablesEdge>;
  DataTablesOrderBy: DataTablesOrderBy;
  DataView: ResolverTypeWrapper<DataView>;
  DataViewColumnDefinition: ResolverTypeWrapper<DataViewColumnDefinition>;
  DataViewColumnDefinitionCondition: DataViewColumnDefinitionCondition;
  DataViewColumnDefinitionFilter: DataViewColumnDefinitionFilter;
  DataViewColumnDefinitionInput: DataViewColumnDefinitionInput;
  DataViewColumnDefinitionPatch: DataViewColumnDefinitionPatch;
  DataViewColumnDefinitionsConnection: ResolverTypeWrapper<DataViewColumnDefinitionsConnection>;
  DataViewColumnDefinitionsEdge: ResolverTypeWrapper<DataViewColumnDefinitionsEdge>;
  DataViewColumnDefinitionsOrderBy: DataViewColumnDefinitionsOrderBy;
  DataViewCondition: DataViewCondition;
  DataViewFilter: DataViewFilter;
  DataViewInput: DataViewInput;
  DataViewPatch: DataViewPatch;
  DataViewsConnection: ResolverTypeWrapper<DataViewsConnection>;
  DataViewsEdge: ResolverTypeWrapper<DataViewsEdge>;
  DataViewsOrderBy: DataViewsOrderBy;
  Date: ResolverTypeWrapper<Scalars['Date']['output']>;
  DateFilter: DateFilter;
  Datetime: ResolverTypeWrapper<Scalars['Datetime']['output']>;
  DatetimeFilter: DatetimeFilter;
  Decision: Decision;
  DecisionFilter: DecisionFilter;
  DeleteActionPluginByCodeInput: DeleteActionPluginByCodeInput;
  DeleteActionPluginByNodeIdInput: DeleteActionPluginByNodeIdInput;
  DeleteActionPluginInput: DeleteActionPluginInput;
  DeleteActionPluginPayload: ResolverTypeWrapper<Omit<DeleteActionPluginPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteActionQueueByNodeIdInput: DeleteActionQueueByNodeIdInput;
  DeleteActionQueueInput: DeleteActionQueueInput;
  DeleteActionQueuePayload: ResolverTypeWrapper<Omit<DeleteActionQueuePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteActivityLogByNodeIdInput: DeleteActivityLogByNodeIdInput;
  DeleteActivityLogInput: DeleteActivityLogInput;
  DeleteActivityLogPayload: ResolverTypeWrapper<Omit<DeleteActivityLogPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteApplicationByNodeIdInput: DeleteApplicationByNodeIdInput;
  DeleteApplicationByOutcomeRegistrationInput: DeleteApplicationByOutcomeRegistrationInput;
  DeleteApplicationBySerialInput: DeleteApplicationBySerialInput;
  DeleteApplicationInput: DeleteApplicationInput;
  DeleteApplicationNoteByNodeIdInput: DeleteApplicationNoteByNodeIdInput;
  DeleteApplicationNoteInput: DeleteApplicationNoteInput;
  DeleteApplicationNotePayload: ResolverTypeWrapper<Omit<DeleteApplicationNotePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteApplicationPayload: ResolverTypeWrapper<Omit<DeleteApplicationPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteApplicationResponseByNodeIdInput: DeleteApplicationResponseByNodeIdInput;
  DeleteApplicationResponseInput: DeleteApplicationResponseInput;
  DeleteApplicationResponsePayload: ResolverTypeWrapper<Omit<DeleteApplicationResponsePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteApplicationReviewerActionByNodeIdInput: DeleteApplicationReviewerActionByNodeIdInput;
  DeleteApplicationReviewerActionByUserIdAndApplicationIdInput: DeleteApplicationReviewerActionByUserIdAndApplicationIdInput;
  DeleteApplicationReviewerActionInput: DeleteApplicationReviewerActionInput;
  DeleteApplicationReviewerActionPayload: ResolverTypeWrapper<Omit<DeleteApplicationReviewerActionPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteApplicationStageHistoryByNodeIdInput: DeleteApplicationStageHistoryByNodeIdInput;
  DeleteApplicationStageHistoryInput: DeleteApplicationStageHistoryInput;
  DeleteApplicationStageHistoryPayload: ResolverTypeWrapper<Omit<DeleteApplicationStageHistoryPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteApplicationStatusHistoryByNodeIdInput: DeleteApplicationStatusHistoryByNodeIdInput;
  DeleteApplicationStatusHistoryInput: DeleteApplicationStatusHistoryInput;
  DeleteApplicationStatusHistoryPayload: ResolverTypeWrapper<Omit<DeleteApplicationStatusHistoryPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteCounterByNameInput: DeleteCounterByNameInput;
  DeleteCounterByNodeIdInput: DeleteCounterByNodeIdInput;
  DeleteCounterInput: DeleteCounterInput;
  DeleteCounterPayload: ResolverTypeWrapper<Omit<DeleteCounterPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteDataChangelogByNodeIdInput: DeleteDataChangelogByNodeIdInput;
  DeleteDataChangelogInput: DeleteDataChangelogInput;
  DeleteDataChangelogPayload: ResolverTypeWrapper<Omit<DeleteDataChangelogPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteDataTableByNodeIdInput: DeleteDataTableByNodeIdInput;
  DeleteDataTableByTableNameInput: DeleteDataTableByTableNameInput;
  DeleteDataTableInput: DeleteDataTableInput;
  DeleteDataTablePayload: ResolverTypeWrapper<Omit<DeleteDataTablePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteDataViewByIdentifierInput: DeleteDataViewByIdentifierInput;
  DeleteDataViewByNodeIdInput: DeleteDataViewByNodeIdInput;
  DeleteDataViewColumnDefinitionByNodeIdInput: DeleteDataViewColumnDefinitionByNodeIdInput;
  DeleteDataViewColumnDefinitionByTableNameAndColumnNameInput: DeleteDataViewColumnDefinitionByTableNameAndColumnNameInput;
  DeleteDataViewColumnDefinitionInput: DeleteDataViewColumnDefinitionInput;
  DeleteDataViewColumnDefinitionPayload: ResolverTypeWrapper<Omit<DeleteDataViewColumnDefinitionPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteDataViewInput: DeleteDataViewInput;
  DeleteDataViewPayload: ResolverTypeWrapper<Omit<DeleteDataViewPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteElementTypePluginByNodeIdInput: DeleteElementTypePluginByNodeIdInput;
  DeleteElementTypePluginInput: DeleteElementTypePluginInput;
  DeleteElementTypePluginPayload: ResolverTypeWrapper<Omit<DeleteElementTypePluginPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteFileByNodeIdInput: DeleteFileByNodeIdInput;
  DeleteFileByUniqueIdInput: DeleteFileByUniqueIdInput;
  DeleteFileInput: DeleteFileInput;
  DeleteFilePayload: ResolverTypeWrapper<Omit<DeleteFilePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteFilterByCodeInput: DeleteFilterByCodeInput;
  DeleteFilterByNodeIdInput: DeleteFilterByNodeIdInput;
  DeleteFilterInput: DeleteFilterInput;
  DeleteFilterPayload: ResolverTypeWrapper<Omit<DeleteFilterPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteNotificationByNodeIdInput: DeleteNotificationByNodeIdInput;
  DeleteNotificationInput: DeleteNotificationInput;
  DeleteNotificationPayload: ResolverTypeWrapper<Omit<DeleteNotificationPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteOrganisationByNameInput: DeleteOrganisationByNameInput;
  DeleteOrganisationByNodeIdInput: DeleteOrganisationByNodeIdInput;
  DeleteOrganisationByRegistrationInput: DeleteOrganisationByRegistrationInput;
  DeleteOrganisationInput: DeleteOrganisationInput;
  DeleteOrganisationPayload: ResolverTypeWrapper<Omit<DeleteOrganisationPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeletePermissionJoinByNodeIdInput: DeletePermissionJoinByNodeIdInput;
  DeletePermissionJoinInput: DeletePermissionJoinInput;
  DeletePermissionJoinPayload: ResolverTypeWrapper<Omit<DeletePermissionJoinPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeletePermissionNameByNameInput: DeletePermissionNameByNameInput;
  DeletePermissionNameByNodeIdInput: DeletePermissionNameByNodeIdInput;
  DeletePermissionNameInput: DeletePermissionNameInput;
  DeletePermissionNamePayload: ResolverTypeWrapper<Omit<DeletePermissionNamePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeletePermissionPolicyByNameInput: DeletePermissionPolicyByNameInput;
  DeletePermissionPolicyByNodeIdInput: DeletePermissionPolicyByNodeIdInput;
  DeletePermissionPolicyInput: DeletePermissionPolicyInput;
  DeletePermissionPolicyPayload: ResolverTypeWrapper<Omit<DeletePermissionPolicyPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteReviewAssignmentAssignerJoinByNodeIdInput: DeleteReviewAssignmentAssignerJoinByNodeIdInput;
  DeleteReviewAssignmentAssignerJoinInput: DeleteReviewAssignmentAssignerJoinInput;
  DeleteReviewAssignmentAssignerJoinPayload: ResolverTypeWrapper<Omit<DeleteReviewAssignmentAssignerJoinPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteReviewAssignmentByNodeIdInput: DeleteReviewAssignmentByNodeIdInput;
  DeleteReviewAssignmentInput: DeleteReviewAssignmentInput;
  DeleteReviewAssignmentPayload: ResolverTypeWrapper<Omit<DeleteReviewAssignmentPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteReviewByNodeIdInput: DeleteReviewByNodeIdInput;
  DeleteReviewByReviewAssignmentIdInput: DeleteReviewByReviewAssignmentIdInput;
  DeleteReviewDecisionByNodeIdInput: DeleteReviewDecisionByNodeIdInput;
  DeleteReviewDecisionInput: DeleteReviewDecisionInput;
  DeleteReviewDecisionPayload: ResolverTypeWrapper<Omit<DeleteReviewDecisionPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteReviewInput: DeleteReviewInput;
  DeleteReviewPayload: ResolverTypeWrapper<Omit<DeleteReviewPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteReviewResponseByNodeIdInput: DeleteReviewResponseByNodeIdInput;
  DeleteReviewResponseInput: DeleteReviewResponseInput;
  DeleteReviewResponsePayload: ResolverTypeWrapper<Omit<DeleteReviewResponsePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteReviewStatusHistoryByNodeIdInput: DeleteReviewStatusHistoryByNodeIdInput;
  DeleteReviewStatusHistoryInput: DeleteReviewStatusHistoryInput;
  DeleteReviewStatusHistoryPayload: ResolverTypeWrapper<Omit<DeleteReviewStatusHistoryPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteSystemInfoByNodeIdInput: DeleteSystemInfoByNodeIdInput;
  DeleteSystemInfoInput: DeleteSystemInfoInput;
  DeleteSystemInfoPayload: ResolverTypeWrapper<Omit<DeleteSystemInfoPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteTemplateActionByNodeIdInput: DeleteTemplateActionByNodeIdInput;
  DeleteTemplateActionInput: DeleteTemplateActionInput;
  DeleteTemplateActionPayload: ResolverTypeWrapper<Omit<DeleteTemplateActionPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteTemplateByCodeAndVersionIdInput: DeleteTemplateByCodeAndVersionIdInput;
  DeleteTemplateByNodeIdInput: DeleteTemplateByNodeIdInput;
  DeleteTemplateCategoryByCodeInput: DeleteTemplateCategoryByCodeInput;
  DeleteTemplateCategoryByNodeIdInput: DeleteTemplateCategoryByNodeIdInput;
  DeleteTemplateCategoryInput: DeleteTemplateCategoryInput;
  DeleteTemplateCategoryPayload: ResolverTypeWrapper<Omit<DeleteTemplateCategoryPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteTemplateElementByNodeIdInput: DeleteTemplateElementByNodeIdInput;
  DeleteTemplateElementByTemplateCodeAndCodeAndTemplateVersionInput: DeleteTemplateElementByTemplateCodeAndCodeAndTemplateVersionInput;
  DeleteTemplateElementInput: DeleteTemplateElementInput;
  DeleteTemplateElementPayload: ResolverTypeWrapper<Omit<DeleteTemplateElementPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteTemplateFilterJoinByNodeIdInput: DeleteTemplateFilterJoinByNodeIdInput;
  DeleteTemplateFilterJoinInput: DeleteTemplateFilterJoinInput;
  DeleteTemplateFilterJoinPayload: ResolverTypeWrapper<Omit<DeleteTemplateFilterJoinPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteTemplateInput: DeleteTemplateInput;
  DeleteTemplatePayload: ResolverTypeWrapper<Omit<DeleteTemplatePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteTemplatePermissionByNodeIdInput: DeleteTemplatePermissionByNodeIdInput;
  DeleteTemplatePermissionInput: DeleteTemplatePermissionInput;
  DeleteTemplatePermissionPayload: ResolverTypeWrapper<Omit<DeleteTemplatePermissionPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteTemplateSectionByNodeIdInput: DeleteTemplateSectionByNodeIdInput;
  DeleteTemplateSectionByTemplateIdAndCodeInput: DeleteTemplateSectionByTemplateIdAndCodeInput;
  DeleteTemplateSectionInput: DeleteTemplateSectionInput;
  DeleteTemplateSectionPayload: ResolverTypeWrapper<Omit<DeleteTemplateSectionPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteTemplateStageByNodeIdInput: DeleteTemplateStageByNodeIdInput;
  DeleteTemplateStageInput: DeleteTemplateStageInput;
  DeleteTemplateStagePayload: ResolverTypeWrapper<Omit<DeleteTemplateStagePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteTemplateStageReviewLevelByNodeIdInput: DeleteTemplateStageReviewLevelByNodeIdInput;
  DeleteTemplateStageReviewLevelInput: DeleteTemplateStageReviewLevelInput;
  DeleteTemplateStageReviewLevelPayload: ResolverTypeWrapper<Omit<DeleteTemplateStageReviewLevelPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteTriggerQueueByNodeIdInput: DeleteTriggerQueueByNodeIdInput;
  DeleteTriggerQueueInput: DeleteTriggerQueueInput;
  DeleteTriggerQueuePayload: ResolverTypeWrapper<Omit<DeleteTriggerQueuePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteTriggerScheduleByNodeIdInput: DeleteTriggerScheduleByNodeIdInput;
  DeleteTriggerScheduleInput: DeleteTriggerScheduleInput;
  DeleteTriggerSchedulePayload: ResolverTypeWrapper<Omit<DeleteTriggerSchedulePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteUserOrganisationByNodeIdInput: DeleteUserOrganisationByNodeIdInput;
  DeleteUserOrganisationByUserIdAndOrganisationIdInput: DeleteUserOrganisationByUserIdAndOrganisationIdInput;
  DeleteUserOrganisationInput: DeleteUserOrganisationInput;
  DeleteUserOrganisationPayload: ResolverTypeWrapper<Omit<DeleteUserOrganisationPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteVerificationByNodeIdInput: DeleteVerificationByNodeIdInput;
  DeleteVerificationByUniqueIdInput: DeleteVerificationByUniqueIdInput;
  DeleteVerificationInput: DeleteVerificationInput;
  DeleteVerificationPayload: ResolverTypeWrapper<Omit<DeleteVerificationPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  DeleteWholeApplicationInput: DeleteWholeApplicationInput;
  DeleteWholeApplicationPayload: ResolverTypeWrapper<Omit<DeleteWholeApplicationPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  ElementTypePlugin: ResolverTypeWrapper<ElementTypePlugin>;
  ElementTypePluginCondition: ElementTypePluginCondition;
  ElementTypePluginFilter: ElementTypePluginFilter;
  ElementTypePluginInput: ElementTypePluginInput;
  ElementTypePluginPatch: ElementTypePluginPatch;
  ElementTypePluginsConnection: ResolverTypeWrapper<ElementTypePluginsConnection>;
  ElementTypePluginsEdge: ResolverTypeWrapper<ElementTypePluginsEdge>;
  ElementTypePluginsOrderBy: ElementTypePluginsOrderBy;
  EventType: EventType;
  EventTypeFilter: EventTypeFilter;
  FakePublicApplicationForeignKey0ApplicationCreateInput: FakePublicApplicationForeignKey0ApplicationCreateInput;
  FakePublicApplicationForeignKey0Input: FakePublicApplicationForeignKey0Input;
  FakePublicApplicationForeignKey0InverseInput: FakePublicApplicationForeignKey0InverseInput;
  FakePublicApplicationForeignKey0UserListCreateInput: FakePublicApplicationForeignKey0UserListCreateInput;
  FakePublicApplicationNoteForeignKey0ApplicationNoteCreateInput: FakePublicApplicationNoteForeignKey0ApplicationNoteCreateInput;
  FakePublicApplicationNoteForeignKey0Input: FakePublicApplicationNoteForeignKey0Input;
  FakePublicApplicationNoteForeignKey0InverseInput: FakePublicApplicationNoteForeignKey0InverseInput;
  FakePublicApplicationNoteForeignKey0UserListCreateInput: FakePublicApplicationNoteForeignKey0UserListCreateInput;
  FakePublicPermissionJoinForeignKey0Input: FakePublicPermissionJoinForeignKey0Input;
  FakePublicPermissionJoinForeignKey0InverseInput: FakePublicPermissionJoinForeignKey0InverseInput;
  FakePublicPermissionJoinForeignKey0PermissionJoinCreateInput: FakePublicPermissionJoinForeignKey0PermissionJoinCreateInput;
  FakePublicPermissionJoinForeignKey0UserListCreateInput: FakePublicPermissionJoinForeignKey0UserListCreateInput;
  FakePublicReviewAssignmentAssignerJoinForeignKey0Input: FakePublicReviewAssignmentAssignerJoinForeignKey0Input;
  FakePublicReviewAssignmentAssignerJoinForeignKey0InverseInput: FakePublicReviewAssignmentAssignerJoinForeignKey0InverseInput;
  FakePublicReviewAssignmentAssignerJoinForeignKey0ReviewAssignmentAssignerJoinCreateInput: FakePublicReviewAssignmentAssignerJoinForeignKey0ReviewAssignmentAssignerJoinCreateInput;
  FakePublicReviewAssignmentAssignerJoinForeignKey0UserListCreateInput: FakePublicReviewAssignmentAssignerJoinForeignKey0UserListCreateInput;
  FakePublicReviewAssignmentForeignKey0Input: FakePublicReviewAssignmentForeignKey0Input;
  FakePublicReviewAssignmentForeignKey0InverseInput: FakePublicReviewAssignmentForeignKey0InverseInput;
  FakePublicReviewAssignmentForeignKey0ReviewAssignmentCreateInput: FakePublicReviewAssignmentForeignKey0ReviewAssignmentCreateInput;
  FakePublicReviewAssignmentForeignKey0UserListCreateInput: FakePublicReviewAssignmentForeignKey0UserListCreateInput;
  FakePublicReviewAssignmentForeignKey1Input: FakePublicReviewAssignmentForeignKey1Input;
  FakePublicReviewAssignmentForeignKey1InverseInput: FakePublicReviewAssignmentForeignKey1InverseInput;
  FakePublicReviewAssignmentForeignKey1ReviewAssignmentCreateInput: FakePublicReviewAssignmentForeignKey1ReviewAssignmentCreateInput;
  FakePublicReviewAssignmentForeignKey1UserListCreateInput: FakePublicReviewAssignmentForeignKey1UserListCreateInput;
  FakePublicReviewForeignKey0Input: FakePublicReviewForeignKey0Input;
  FakePublicReviewForeignKey0InverseInput: FakePublicReviewForeignKey0InverseInput;
  FakePublicReviewForeignKey0ReviewCreateInput: FakePublicReviewForeignKey0ReviewCreateInput;
  FakePublicReviewForeignKey0UserListCreateInput: FakePublicReviewForeignKey0UserListCreateInput;
  FakePublicUserOrganisationForeignKey0Input: FakePublicUserOrganisationForeignKey0Input;
  FakePublicUserOrganisationForeignKey0InverseInput: FakePublicUserOrganisationForeignKey0InverseInput;
  FakePublicUserOrganisationForeignKey0UserListAdminCreateInput: FakePublicUserOrganisationForeignKey0UserListAdminCreateInput;
  FakePublicUserOrganisationForeignKey0UserOrganisationCreateInput: FakePublicUserOrganisationForeignKey0UserOrganisationCreateInput;
  File: ResolverTypeWrapper<File>;
  FileApplicationNoteIdFkeyApplicationNoteCreateInput: FileApplicationNoteIdFkeyApplicationNoteCreateInput;
  FileApplicationNoteIdFkeyFileCreateInput: FileApplicationNoteIdFkeyFileCreateInput;
  FileApplicationNoteIdFkeyInput: FileApplicationNoteIdFkeyInput;
  FileApplicationNoteIdFkeyInverseInput: FileApplicationNoteIdFkeyInverseInput;
  FileApplicationResponseIdFkeyApplicationResponseCreateInput: FileApplicationResponseIdFkeyApplicationResponseCreateInput;
  FileApplicationResponseIdFkeyFileCreateInput: FileApplicationResponseIdFkeyFileCreateInput;
  FileApplicationResponseIdFkeyInput: FileApplicationResponseIdFkeyInput;
  FileApplicationResponseIdFkeyInverseInput: FileApplicationResponseIdFkeyInverseInput;
  FileApplicationSerialFkeyApplicationCreateInput: FileApplicationSerialFkeyApplicationCreateInput;
  FileApplicationSerialFkeyFileCreateInput: FileApplicationSerialFkeyFileCreateInput;
  FileApplicationSerialFkeyInput: FileApplicationSerialFkeyInput;
  FileApplicationSerialFkeyInverseInput: FileApplicationSerialFkeyInverseInput;
  FileCondition: FileCondition;
  FileFilePkeyConnect: FileFilePkeyConnect;
  FileFilePkeyDelete: FileFilePkeyDelete;
  FileFileUniqueIdKeyConnect: FileFileUniqueIdKeyConnect;
  FileFileUniqueIdKeyDelete: FileFileUniqueIdKeyDelete;
  FileFilter: FileFilter;
  FileInput: FileInput;
  FileNodeIdConnect: FileNodeIdConnect;
  FileNodeIdDelete: FileNodeIdDelete;
  FileOnFileForFileApplicationNoteIdFkeyNodeIdUpdate: FileOnFileForFileApplicationNoteIdFkeyNodeIdUpdate;
  FileOnFileForFileApplicationNoteIdFkeyUsingFilePkeyUpdate: FileOnFileForFileApplicationNoteIdFkeyUsingFilePkeyUpdate;
  FileOnFileForFileApplicationNoteIdFkeyUsingFileUniqueIdKeyUpdate: FileOnFileForFileApplicationNoteIdFkeyUsingFileUniqueIdKeyUpdate;
  FileOnFileForFileApplicationResponseIdFkeyNodeIdUpdate: FileOnFileForFileApplicationResponseIdFkeyNodeIdUpdate;
  FileOnFileForFileApplicationResponseIdFkeyUsingFilePkeyUpdate: FileOnFileForFileApplicationResponseIdFkeyUsingFilePkeyUpdate;
  FileOnFileForFileApplicationResponseIdFkeyUsingFileUniqueIdKeyUpdate: FileOnFileForFileApplicationResponseIdFkeyUsingFileUniqueIdKeyUpdate;
  FileOnFileForFileApplicationSerialFkeyNodeIdUpdate: FileOnFileForFileApplicationSerialFkeyNodeIdUpdate;
  FileOnFileForFileApplicationSerialFkeyUsingFilePkeyUpdate: FileOnFileForFileApplicationSerialFkeyUsingFilePkeyUpdate;
  FileOnFileForFileApplicationSerialFkeyUsingFileUniqueIdKeyUpdate: FileOnFileForFileApplicationSerialFkeyUsingFileUniqueIdKeyUpdate;
  FileOnFileForFileTemplateIdFkeyNodeIdUpdate: FileOnFileForFileTemplateIdFkeyNodeIdUpdate;
  FileOnFileForFileTemplateIdFkeyUsingFilePkeyUpdate: FileOnFileForFileTemplateIdFkeyUsingFilePkeyUpdate;
  FileOnFileForFileTemplateIdFkeyUsingFileUniqueIdKeyUpdate: FileOnFileForFileTemplateIdFkeyUsingFileUniqueIdKeyUpdate;
  FilePatch: FilePatch;
  FileTemplateIdFkeyFileCreateInput: FileTemplateIdFkeyFileCreateInput;
  FileTemplateIdFkeyInput: FileTemplateIdFkeyInput;
  FileTemplateIdFkeyInverseInput: FileTemplateIdFkeyInverseInput;
  FileTemplateIdFkeyTemplateCreateInput: FileTemplateIdFkeyTemplateCreateInput;
  FilesConnection: ResolverTypeWrapper<FilesConnection>;
  FilesEdge: ResolverTypeWrapper<FilesEdge>;
  FilesOrderBy: FilesOrderBy;
  Filter: ResolverTypeWrapper<Filter>;
  FilterCondition: FilterCondition;
  FilterFilter: FilterFilter;
  FilterFilterCodeKeyConnect: FilterFilterCodeKeyConnect;
  FilterFilterCodeKeyDelete: FilterFilterCodeKeyDelete;
  FilterFilterPkeyConnect: FilterFilterPkeyConnect;
  FilterFilterPkeyDelete: FilterFilterPkeyDelete;
  FilterInput: FilterInput;
  FilterNodeIdConnect: FilterNodeIdConnect;
  FilterNodeIdDelete: FilterNodeIdDelete;
  FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyNodeIdUpdate: FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyNodeIdUpdate;
  FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingFilterCodeKeyUpdate: FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingFilterCodeKeyUpdate;
  FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingFilterPkeyUpdate: FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingFilterPkeyUpdate;
  FilterPatch: FilterPatch;
  FilterToManyTemplateFilterJoinFilter: FilterToManyTemplateFilterJoinFilter;
  FiltersConnection: ResolverTypeWrapper<FiltersConnection>;
  FiltersEdge: ResolverTypeWrapper<FiltersEdge>;
  FiltersOrderBy: FiltersOrderBy;
  ID: ResolverTypeWrapper<Scalars['ID']['output']>;
  Int: ResolverTypeWrapper<Scalars['Int']['output']>;
  IntFilter: IntFilter;
  JSON: ResolverTypeWrapper<Scalars['JSON']['output']>;
  JSONFilter: JsonFilter;
  Mutation: ResolverTypeWrapper<{}>;
  Node: ResolverTypeWrapper<ResolversInterfaceTypes<ResolversTypes>['Node']>;
  Notification: ResolverTypeWrapper<Notification>;
  NotificationApplicationIdFkeyApplicationCreateInput: NotificationApplicationIdFkeyApplicationCreateInput;
  NotificationApplicationIdFkeyInput: NotificationApplicationIdFkeyInput;
  NotificationApplicationIdFkeyInverseInput: NotificationApplicationIdFkeyInverseInput;
  NotificationApplicationIdFkeyNotificationCreateInput: NotificationApplicationIdFkeyNotificationCreateInput;
  NotificationCondition: NotificationCondition;
  NotificationFilter: NotificationFilter;
  NotificationInput: NotificationInput;
  NotificationNodeIdConnect: NotificationNodeIdConnect;
  NotificationNodeIdDelete: NotificationNodeIdDelete;
  NotificationNotificationPkeyConnect: NotificationNotificationPkeyConnect;
  NotificationNotificationPkeyDelete: NotificationNotificationPkeyDelete;
  NotificationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate: NotificationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate;
  NotificationOnNotificationForNotificationApplicationIdFkeyUsingNotificationPkeyUpdate: NotificationOnNotificationForNotificationApplicationIdFkeyUsingNotificationPkeyUpdate;
  NotificationOnNotificationForNotificationReviewIdFkeyNodeIdUpdate: NotificationOnNotificationForNotificationReviewIdFkeyNodeIdUpdate;
  NotificationOnNotificationForNotificationReviewIdFkeyUsingNotificationPkeyUpdate: NotificationOnNotificationForNotificationReviewIdFkeyUsingNotificationPkeyUpdate;
  NotificationPatch: NotificationPatch;
  NotificationReviewIdFkeyInput: NotificationReviewIdFkeyInput;
  NotificationReviewIdFkeyInverseInput: NotificationReviewIdFkeyInverseInput;
  NotificationReviewIdFkeyNotificationCreateInput: NotificationReviewIdFkeyNotificationCreateInput;
  NotificationReviewIdFkeyReviewCreateInput: NotificationReviewIdFkeyReviewCreateInput;
  NotificationsConnection: ResolverTypeWrapper<NotificationsConnection>;
  NotificationsEdge: ResolverTypeWrapper<NotificationsEdge>;
  NotificationsOrderBy: NotificationsOrderBy;
  Organisation: ResolverTypeWrapper<Organisation>;
  OrganisationCondition: OrganisationCondition;
  OrganisationFilter: OrganisationFilter;
  OrganisationInput: OrganisationInput;
  OrganisationNodeIdConnect: OrganisationNodeIdConnect;
  OrganisationNodeIdDelete: OrganisationNodeIdDelete;
  OrganisationOnApplicationForApplicationOrgIdFkeyNodeIdUpdate: OrganisationOnApplicationForApplicationOrgIdFkeyNodeIdUpdate;
  OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationNameKeyUpdate: OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationNameKeyUpdate;
  OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationPkeyUpdate: OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationPkeyUpdate;
  OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationRegistrationKeyUpdate: OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationRegistrationKeyUpdate;
  OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyNodeIdUpdate: OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyNodeIdUpdate;
  OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationNameKeyUpdate: OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationNameKeyUpdate;
  OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationPkeyUpdate: OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationPkeyUpdate;
  OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationRegistrationKeyUpdate: OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationRegistrationKeyUpdate;
  OrganisationOnDataChangelogForDataChangelogOrgIdFkeyNodeIdUpdate: OrganisationOnDataChangelogForDataChangelogOrgIdFkeyNodeIdUpdate;
  OrganisationOnDataChangelogForDataChangelogOrgIdFkeyUsingOrganisationNameKeyUpdate: OrganisationOnDataChangelogForDataChangelogOrgIdFkeyUsingOrganisationNameKeyUpdate;
  OrganisationOnDataChangelogForDataChangelogOrgIdFkeyUsingOrganisationPkeyUpdate: OrganisationOnDataChangelogForDataChangelogOrgIdFkeyUsingOrganisationPkeyUpdate;
  OrganisationOnDataChangelogForDataChangelogOrgIdFkeyUsingOrganisationRegistrationKeyUpdate: OrganisationOnDataChangelogForDataChangelogOrgIdFkeyUsingOrganisationRegistrationKeyUpdate;
  OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyNodeIdUpdate: OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyNodeIdUpdate;
  OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationNameKeyUpdate: OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationNameKeyUpdate;
  OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationPkeyUpdate: OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationPkeyUpdate;
  OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate: OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate;
  OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyNodeIdUpdate: OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyNodeIdUpdate;
  OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationNameKeyUpdate: OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationNameKeyUpdate;
  OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationPkeyUpdate: OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationPkeyUpdate;
  OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate: OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate;
  OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyNodeIdUpdate: OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyNodeIdUpdate;
  OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationNameKeyUpdate: OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationNameKeyUpdate;
  OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationPkeyUpdate: OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationPkeyUpdate;
  OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate: OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate;
  OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyNodeIdUpdate: OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyNodeIdUpdate;
  OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationNameKeyUpdate: OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationNameKeyUpdate;
  OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationPkeyUpdate: OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationPkeyUpdate;
  OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate: OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate;
  OrganisationOrganisationNameKeyConnect: OrganisationOrganisationNameKeyConnect;
  OrganisationOrganisationNameKeyDelete: OrganisationOrganisationNameKeyDelete;
  OrganisationOrganisationPkeyConnect: OrganisationOrganisationPkeyConnect;
  OrganisationOrganisationPkeyDelete: OrganisationOrganisationPkeyDelete;
  OrganisationOrganisationRegistrationKeyConnect: OrganisationOrganisationRegistrationKeyConnect;
  OrganisationOrganisationRegistrationKeyDelete: OrganisationOrganisationRegistrationKeyDelete;
  OrganisationPatch: OrganisationPatch;
  OrganisationToManyApplicationFilter: OrganisationToManyApplicationFilter;
  OrganisationToManyApplicationNoteFilter: OrganisationToManyApplicationNoteFilter;
  OrganisationToManyDataChangelogFilter: OrganisationToManyDataChangelogFilter;
  OrganisationToManyPermissionJoinFilter: OrganisationToManyPermissionJoinFilter;
  OrganisationToManyReviewAssignmentAssignerJoinFilter: OrganisationToManyReviewAssignmentAssignerJoinFilter;
  OrganisationToManyReviewAssignmentFilter: OrganisationToManyReviewAssignmentFilter;
  OrganisationToManyUserOrganisationFilter: OrganisationToManyUserOrganisationFilter;
  OrganisationsConnection: ResolverTypeWrapper<OrganisationsConnection>;
  OrganisationsEdge: ResolverTypeWrapper<OrganisationsEdge>;
  OrganisationsOrderBy: OrganisationsOrderBy;
  PageInfo: ResolverTypeWrapper<PageInfo>;
  PermissionFlattened: ResolverTypeWrapper<PermissionFlattened>;
  PermissionFlattenedCondition: PermissionFlattenedCondition;
  PermissionFlattenedFilter: PermissionFlattenedFilter;
  PermissionFlattenedsConnection: ResolverTypeWrapper<PermissionFlattenedsConnection>;
  PermissionFlattenedsEdge: ResolverTypeWrapper<PermissionFlattenedsEdge>;
  PermissionFlattenedsOrderBy: PermissionFlattenedsOrderBy;
  PermissionJoin: ResolverTypeWrapper<PermissionJoin>;
  PermissionJoinCondition: PermissionJoinCondition;
  PermissionJoinFilter: PermissionJoinFilter;
  PermissionJoinInput: PermissionJoinInput;
  PermissionJoinNodeIdConnect: PermissionJoinNodeIdConnect;
  PermissionJoinNodeIdDelete: PermissionJoinNodeIdDelete;
  PermissionJoinOnPermissionJoinForFakePublicPermissionJoinForeignKey0UsingPermissionJoinPkeyUpdate: PermissionJoinOnPermissionJoinForFakePublicPermissionJoinForeignKey0UsingPermissionJoinPkeyUpdate;
  PermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyNodeIdUpdate: PermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyNodeIdUpdate;
  PermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingPermissionJoinPkeyUpdate: PermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingPermissionJoinPkeyUpdate;
  PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate: PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate;
  PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionJoinPkeyUpdate: PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionJoinPkeyUpdate;
  PermissionJoinOrganisationIdFkeyInput: PermissionJoinOrganisationIdFkeyInput;
  PermissionJoinOrganisationIdFkeyInverseInput: PermissionJoinOrganisationIdFkeyInverseInput;
  PermissionJoinOrganisationIdFkeyOrganisationCreateInput: PermissionJoinOrganisationIdFkeyOrganisationCreateInput;
  PermissionJoinOrganisationIdFkeyPermissionJoinCreateInput: PermissionJoinOrganisationIdFkeyPermissionJoinCreateInput;
  PermissionJoinPatch: PermissionJoinPatch;
  PermissionJoinPermissionJoinPkeyConnect: PermissionJoinPermissionJoinPkeyConnect;
  PermissionJoinPermissionJoinPkeyDelete: PermissionJoinPermissionJoinPkeyDelete;
  PermissionJoinPermissionNameIdFkeyInput: PermissionJoinPermissionNameIdFkeyInput;
  PermissionJoinPermissionNameIdFkeyInverseInput: PermissionJoinPermissionNameIdFkeyInverseInput;
  PermissionJoinPermissionNameIdFkeyPermissionJoinCreateInput: PermissionJoinPermissionNameIdFkeyPermissionJoinCreateInput;
  PermissionJoinPermissionNameIdFkeyPermissionNameCreateInput: PermissionJoinPermissionNameIdFkeyPermissionNameCreateInput;
  PermissionJoinsConnection: ResolverTypeWrapper<PermissionJoinsConnection>;
  PermissionJoinsEdge: ResolverTypeWrapper<PermissionJoinsEdge>;
  PermissionJoinsOrderBy: PermissionJoinsOrderBy;
  PermissionName: ResolverTypeWrapper<PermissionName>;
  PermissionNameCondition: PermissionNameCondition;
  PermissionNameFilter: PermissionNameFilter;
  PermissionNameInput: PermissionNameInput;
  PermissionNameNodeIdConnect: PermissionNameNodeIdConnect;
  PermissionNameNodeIdDelete: PermissionNameNodeIdDelete;
  PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate: PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate;
  PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionNameNameKeyUpdate: PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionNameNameKeyUpdate;
  PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionNamePkeyUpdate: PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionNamePkeyUpdate;
  PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyNodeIdUpdate: PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyNodeIdUpdate;
  PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionNameNameKeyUpdate: PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionNameNameKeyUpdate;
  PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionNamePkeyUpdate: PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionNamePkeyUpdate;
  PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyNodeIdUpdate: PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyNodeIdUpdate;
  PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingPermissionNameNameKeyUpdate: PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingPermissionNameNameKeyUpdate;
  PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingPermissionNamePkeyUpdate: PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingPermissionNamePkeyUpdate;
  PermissionNamePatch: PermissionNamePatch;
  PermissionNamePermissionNameNameKeyConnect: PermissionNamePermissionNameNameKeyConnect;
  PermissionNamePermissionNameNameKeyDelete: PermissionNamePermissionNameNameKeyDelete;
  PermissionNamePermissionNamePkeyConnect: PermissionNamePermissionNamePkeyConnect;
  PermissionNamePermissionNamePkeyDelete: PermissionNamePermissionNamePkeyDelete;
  PermissionNamePermissionPolicyIdFkeyInput: PermissionNamePermissionPolicyIdFkeyInput;
  PermissionNamePermissionPolicyIdFkeyInverseInput: PermissionNamePermissionPolicyIdFkeyInverseInput;
  PermissionNamePermissionPolicyIdFkeyPermissionNameCreateInput: PermissionNamePermissionPolicyIdFkeyPermissionNameCreateInput;
  PermissionNamePermissionPolicyIdFkeyPermissionPolicyCreateInput: PermissionNamePermissionPolicyIdFkeyPermissionPolicyCreateInput;
  PermissionNameToManyPermissionJoinFilter: PermissionNameToManyPermissionJoinFilter;
  PermissionNameToManyTemplatePermissionFilter: PermissionNameToManyTemplatePermissionFilter;
  PermissionNamesConnection: ResolverTypeWrapper<PermissionNamesConnection>;
  PermissionNamesEdge: ResolverTypeWrapper<PermissionNamesEdge>;
  PermissionNamesOrderBy: PermissionNamesOrderBy;
  PermissionPoliciesConnection: ResolverTypeWrapper<PermissionPoliciesConnection>;
  PermissionPoliciesEdge: ResolverTypeWrapper<PermissionPoliciesEdge>;
  PermissionPoliciesOrderBy: PermissionPoliciesOrderBy;
  PermissionPolicy: ResolverTypeWrapper<PermissionPolicy>;
  PermissionPolicyCondition: PermissionPolicyCondition;
  PermissionPolicyFilter: PermissionPolicyFilter;
  PermissionPolicyInput: PermissionPolicyInput;
  PermissionPolicyNodeIdConnect: PermissionPolicyNodeIdConnect;
  PermissionPolicyNodeIdDelete: PermissionPolicyNodeIdDelete;
  PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyNodeIdUpdate: PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyNodeIdUpdate;
  PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionPolicyNameKeyUpdate: PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionPolicyNameKeyUpdate;
  PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionPolicyPkeyUpdate: PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionPolicyPkeyUpdate;
  PermissionPolicyPatch: PermissionPolicyPatch;
  PermissionPolicyPermissionPolicyNameKeyConnect: PermissionPolicyPermissionPolicyNameKeyConnect;
  PermissionPolicyPermissionPolicyNameKeyDelete: PermissionPolicyPermissionPolicyNameKeyDelete;
  PermissionPolicyPermissionPolicyPkeyConnect: PermissionPolicyPermissionPolicyPkeyConnect;
  PermissionPolicyPermissionPolicyPkeyDelete: PermissionPolicyPermissionPolicyPkeyDelete;
  PermissionPolicyToManyPermissionNameFilter: PermissionPolicyToManyPermissionNameFilter;
  PermissionPolicyType: PermissionPolicyType;
  PermissionPolicyTypeFilter: PermissionPolicyTypeFilter;
  PermissionsAll: ResolverTypeWrapper<PermissionsAll>;
  PermissionsAllCondition: PermissionsAllCondition;
  PermissionsAllFilter: PermissionsAllFilter;
  PermissionsAllsConnection: ResolverTypeWrapper<PermissionsAllsConnection>;
  PermissionsAllsEdge: ResolverTypeWrapper<PermissionsAllsEdge>;
  PermissionsAllsOrderBy: PermissionsAllsOrderBy;
  PostgresRowLevel: ResolverTypeWrapper<PostgresRowLevel>;
  PostgresRowLevelCondition: PostgresRowLevelCondition;
  PostgresRowLevelFilter: PostgresRowLevelFilter;
  PostgresRowLevelsConnection: ResolverTypeWrapper<PostgresRowLevelsConnection>;
  PostgresRowLevelsEdge: ResolverTypeWrapper<PostgresRowLevelsEdge>;
  PostgresRowLevelsOrderBy: PostgresRowLevelsOrderBy;
  Query: ResolverTypeWrapper<{}>;
  Review: ResolverTypeWrapper<Review>;
  ReviewApplicationIdFkeyApplicationCreateInput: ReviewApplicationIdFkeyApplicationCreateInput;
  ReviewApplicationIdFkeyInput: ReviewApplicationIdFkeyInput;
  ReviewApplicationIdFkeyInverseInput: ReviewApplicationIdFkeyInverseInput;
  ReviewApplicationIdFkeyReviewCreateInput: ReviewApplicationIdFkeyReviewCreateInput;
  ReviewAssignment: ResolverTypeWrapper<ReviewAssignment>;
  ReviewAssignmentApplicationIdFkeyApplicationCreateInput: ReviewAssignmentApplicationIdFkeyApplicationCreateInput;
  ReviewAssignmentApplicationIdFkeyInput: ReviewAssignmentApplicationIdFkeyInput;
  ReviewAssignmentApplicationIdFkeyInverseInput: ReviewAssignmentApplicationIdFkeyInverseInput;
  ReviewAssignmentApplicationIdFkeyReviewAssignmentCreateInput: ReviewAssignmentApplicationIdFkeyReviewAssignmentCreateInput;
  ReviewAssignmentAssignedSectionsShape: ResolverTypeWrapper<ReviewAssignmentAssignedSectionsShape>;
  ReviewAssignmentAssignedSectionsShapeCondition: ReviewAssignmentAssignedSectionsShapeCondition;
  ReviewAssignmentAssignedSectionsShapeFilter: ReviewAssignmentAssignedSectionsShapeFilter;
  ReviewAssignmentAssignedSectionsShapeInput: ReviewAssignmentAssignedSectionsShapeInput;
  ReviewAssignmentAssignedSectionsShapesConnection: ResolverTypeWrapper<ReviewAssignmentAssignedSectionsShapesConnection>;
  ReviewAssignmentAssignedSectionsShapesEdge: ResolverTypeWrapper<ReviewAssignmentAssignedSectionsShapesEdge>;
  ReviewAssignmentAssignedSectionsShapesOrderBy: ReviewAssignmentAssignedSectionsShapesOrderBy;
  ReviewAssignmentAssignerJoin: ResolverTypeWrapper<ReviewAssignmentAssignerJoin>;
  ReviewAssignmentAssignerJoinCondition: ReviewAssignmentAssignerJoinCondition;
  ReviewAssignmentAssignerJoinFilter: ReviewAssignmentAssignerJoinFilter;
  ReviewAssignmentAssignerJoinInput: ReviewAssignmentAssignerJoinInput;
  ReviewAssignmentAssignerJoinNodeIdConnect: ReviewAssignmentAssignerJoinNodeIdConnect;
  ReviewAssignmentAssignerJoinNodeIdDelete: ReviewAssignmentAssignerJoinNodeIdDelete;
  ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForFakePublicReviewAssignmentAssignerJoinForeignKey0UsingReviewAssignmentAssignerJoinPkeyUpdate: ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForFakePublicReviewAssignmentAssignerJoinForeignKey0UsingReviewAssignmentAssignerJoinPkeyUpdate;
  ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyNodeIdUpdate: ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyNodeIdUpdate;
  ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingReviewAssignmentAssignerJoinPkeyUpdate: ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingReviewAssignmentAssignerJoinPkeyUpdate;
  ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyNodeIdUpdate: ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyNodeIdUpdate;
  ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyUsingReviewAssignmentAssignerJoinPkeyUpdate: ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyUsingReviewAssignmentAssignerJoinPkeyUpdate;
  ReviewAssignmentAssignerJoinOrganisationIdFkeyInput: ReviewAssignmentAssignerJoinOrganisationIdFkeyInput;
  ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput: ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput;
  ReviewAssignmentAssignerJoinOrganisationIdFkeyOrganisationCreateInput: ReviewAssignmentAssignerJoinOrganisationIdFkeyOrganisationCreateInput;
  ReviewAssignmentAssignerJoinOrganisationIdFkeyReviewAssignmentAssignerJoinCreateInput: ReviewAssignmentAssignerJoinOrganisationIdFkeyReviewAssignmentAssignerJoinCreateInput;
  ReviewAssignmentAssignerJoinPatch: ReviewAssignmentAssignerJoinPatch;
  ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyConnect: ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyConnect;
  ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyDelete: ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyDelete;
  ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput: ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput;
  ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput: ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput;
  ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyReviewAssignmentAssignerJoinCreateInput: ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyReviewAssignmentAssignerJoinCreateInput;
  ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyReviewAssignmentCreateInput: ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyReviewAssignmentCreateInput;
  ReviewAssignmentAssignerJoinsConnection: ResolverTypeWrapper<ReviewAssignmentAssignerJoinsConnection>;
  ReviewAssignmentAssignerJoinsEdge: ResolverTypeWrapper<ReviewAssignmentAssignerJoinsEdge>;
  ReviewAssignmentAssignerJoinsOrderBy: ReviewAssignmentAssignerJoinsOrderBy;
  ReviewAssignmentCondition: ReviewAssignmentCondition;
  ReviewAssignmentFilter: ReviewAssignmentFilter;
  ReviewAssignmentInput: ReviewAssignmentInput;
  ReviewAssignmentLevelIdFkeyInput: ReviewAssignmentLevelIdFkeyInput;
  ReviewAssignmentLevelIdFkeyInverseInput: ReviewAssignmentLevelIdFkeyInverseInput;
  ReviewAssignmentLevelIdFkeyReviewAssignmentCreateInput: ReviewAssignmentLevelIdFkeyReviewAssignmentCreateInput;
  ReviewAssignmentLevelIdFkeyTemplateStageReviewLevelCreateInput: ReviewAssignmentLevelIdFkeyTemplateStageReviewLevelCreateInput;
  ReviewAssignmentNodeIdConnect: ReviewAssignmentNodeIdConnect;
  ReviewAssignmentNodeIdDelete: ReviewAssignmentNodeIdDelete;
  ReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyNodeIdUpdate: ReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyNodeIdUpdate;
  ReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyUsingReviewAssignmentPkeyUpdate: ReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyUsingReviewAssignmentPkeyUpdate;
  ReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey0UsingReviewAssignmentPkeyUpdate: ReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey0UsingReviewAssignmentPkeyUpdate;
  ReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey1UsingReviewAssignmentPkeyUpdate: ReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey1UsingReviewAssignmentPkeyUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyNodeIdUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyNodeIdUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingReviewAssignmentPkeyUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingReviewAssignmentPkeyUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyNodeIdUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyNodeIdUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyUsingReviewAssignmentPkeyUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyUsingReviewAssignmentPkeyUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyNodeIdUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyNodeIdUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingReviewAssignmentPkeyUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingReviewAssignmentPkeyUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyNodeIdUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyNodeIdUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyUsingReviewAssignmentPkeyUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyUsingReviewAssignmentPkeyUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyNodeIdUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyNodeIdUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingReviewAssignmentPkeyUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingReviewAssignmentPkeyUpdate;
  ReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyNodeIdUpdate: ReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyNodeIdUpdate;
  ReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyUsingReviewAssignmentPkeyUpdate: ReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyUsingReviewAssignmentPkeyUpdate;
  ReviewAssignmentOrganisationIdFkeyInput: ReviewAssignmentOrganisationIdFkeyInput;
  ReviewAssignmentOrganisationIdFkeyInverseInput: ReviewAssignmentOrganisationIdFkeyInverseInput;
  ReviewAssignmentOrganisationIdFkeyOrganisationCreateInput: ReviewAssignmentOrganisationIdFkeyOrganisationCreateInput;
  ReviewAssignmentOrganisationIdFkeyReviewAssignmentCreateInput: ReviewAssignmentOrganisationIdFkeyReviewAssignmentCreateInput;
  ReviewAssignmentPatch: ReviewAssignmentPatch;
  ReviewAssignmentReviewAssignmentPkeyConnect: ReviewAssignmentReviewAssignmentPkeyConnect;
  ReviewAssignmentReviewAssignmentPkeyDelete: ReviewAssignmentReviewAssignmentPkeyDelete;
  ReviewAssignmentStageIdFkeyInput: ReviewAssignmentStageIdFkeyInput;
  ReviewAssignmentStageIdFkeyInverseInput: ReviewAssignmentStageIdFkeyInverseInput;
  ReviewAssignmentStageIdFkeyReviewAssignmentCreateInput: ReviewAssignmentStageIdFkeyReviewAssignmentCreateInput;
  ReviewAssignmentStageIdFkeyTemplateStageCreateInput: ReviewAssignmentStageIdFkeyTemplateStageCreateInput;
  ReviewAssignmentStatus: ReviewAssignmentStatus;
  ReviewAssignmentStatusFilter: ReviewAssignmentStatusFilter;
  ReviewAssignmentTemplateIdFkeyInput: ReviewAssignmentTemplateIdFkeyInput;
  ReviewAssignmentTemplateIdFkeyInverseInput: ReviewAssignmentTemplateIdFkeyInverseInput;
  ReviewAssignmentTemplateIdFkeyReviewAssignmentCreateInput: ReviewAssignmentTemplateIdFkeyReviewAssignmentCreateInput;
  ReviewAssignmentTemplateIdFkeyTemplateCreateInput: ReviewAssignmentTemplateIdFkeyTemplateCreateInput;
  ReviewAssignmentToManyReviewAssignmentAssignerJoinFilter: ReviewAssignmentToManyReviewAssignmentAssignerJoinFilter;
  ReviewAssignmentsConnection: ResolverTypeWrapper<ReviewAssignmentsConnection>;
  ReviewAssignmentsEdge: ResolverTypeWrapper<ReviewAssignmentsEdge>;
  ReviewAssignmentsOrderBy: ReviewAssignmentsOrderBy;
  ReviewCondition: ReviewCondition;
  ReviewDecision: ResolverTypeWrapper<ReviewDecision>;
  ReviewDecisionCondition: ReviewDecisionCondition;
  ReviewDecisionFilter: ReviewDecisionFilter;
  ReviewDecisionInput: ReviewDecisionInput;
  ReviewDecisionNodeIdConnect: ReviewDecisionNodeIdConnect;
  ReviewDecisionNodeIdDelete: ReviewDecisionNodeIdDelete;
  ReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyNodeIdUpdate: ReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyNodeIdUpdate;
  ReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewDecisionPkeyUpdate: ReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewDecisionPkeyUpdate;
  ReviewDecisionPatch: ReviewDecisionPatch;
  ReviewDecisionReviewDecisionPkeyConnect: ReviewDecisionReviewDecisionPkeyConnect;
  ReviewDecisionReviewDecisionPkeyDelete: ReviewDecisionReviewDecisionPkeyDelete;
  ReviewDecisionReviewIdFkeyInput: ReviewDecisionReviewIdFkeyInput;
  ReviewDecisionReviewIdFkeyInverseInput: ReviewDecisionReviewIdFkeyInverseInput;
  ReviewDecisionReviewIdFkeyReviewCreateInput: ReviewDecisionReviewIdFkeyReviewCreateInput;
  ReviewDecisionReviewIdFkeyReviewDecisionCreateInput: ReviewDecisionReviewIdFkeyReviewDecisionCreateInput;
  ReviewDecisionsConnection: ResolverTypeWrapper<ReviewDecisionsConnection>;
  ReviewDecisionsEdge: ResolverTypeWrapper<ReviewDecisionsEdge>;
  ReviewDecisionsOrderBy: ReviewDecisionsOrderBy;
  ReviewFilter: ReviewFilter;
  ReviewInput: ReviewInput;
  ReviewListConnection: ResolverTypeWrapper<ReviewListConnection>;
  ReviewListEdge: ResolverTypeWrapper<ReviewListEdge>;
  ReviewListRecord: ResolverTypeWrapper<ReviewListRecord>;
  ReviewListRecordFilter: ReviewListRecordFilter;
  ReviewNodeIdConnect: ReviewNodeIdConnect;
  ReviewNodeIdDelete: ReviewNodeIdDelete;
  ReviewOnNotificationForNotificationReviewIdFkeyNodeIdUpdate: ReviewOnNotificationForNotificationReviewIdFkeyNodeIdUpdate;
  ReviewOnNotificationForNotificationReviewIdFkeyUsingReviewPkeyUpdate: ReviewOnNotificationForNotificationReviewIdFkeyUsingReviewPkeyUpdate;
  ReviewOnNotificationForNotificationReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate: ReviewOnNotificationForNotificationReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate;
  ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyNodeIdUpdate: ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyNodeIdUpdate;
  ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewPkeyUpdate: ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewPkeyUpdate;
  ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate: ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate;
  ReviewOnReviewForFakePublicReviewForeignKey0UsingReviewPkeyUpdate: ReviewOnReviewForFakePublicReviewForeignKey0UsingReviewPkeyUpdate;
  ReviewOnReviewForFakePublicReviewForeignKey0UsingReviewReviewAssignmentIdKeyUpdate: ReviewOnReviewForFakePublicReviewForeignKey0UsingReviewReviewAssignmentIdKeyUpdate;
  ReviewOnReviewForReviewApplicationIdFkeyNodeIdUpdate: ReviewOnReviewForReviewApplicationIdFkeyNodeIdUpdate;
  ReviewOnReviewForReviewApplicationIdFkeyUsingReviewPkeyUpdate: ReviewOnReviewForReviewApplicationIdFkeyUsingReviewPkeyUpdate;
  ReviewOnReviewForReviewApplicationIdFkeyUsingReviewReviewAssignmentIdKeyUpdate: ReviewOnReviewForReviewApplicationIdFkeyUsingReviewReviewAssignmentIdKeyUpdate;
  ReviewOnReviewForReviewReviewAssignmentIdFkeyNodeIdUpdate: ReviewOnReviewForReviewReviewAssignmentIdFkeyNodeIdUpdate;
  ReviewOnReviewForReviewReviewAssignmentIdFkeyUsingReviewPkeyUpdate: ReviewOnReviewForReviewReviewAssignmentIdFkeyUsingReviewPkeyUpdate;
  ReviewOnReviewForReviewReviewAssignmentIdFkeyUsingReviewReviewAssignmentIdKeyUpdate: ReviewOnReviewForReviewReviewAssignmentIdFkeyUsingReviewReviewAssignmentIdKeyUpdate;
  ReviewOnReviewResponseForReviewResponseReviewIdFkeyNodeIdUpdate: ReviewOnReviewResponseForReviewResponseReviewIdFkeyNodeIdUpdate;
  ReviewOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewPkeyUpdate: ReviewOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewPkeyUpdate;
  ReviewOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate: ReviewOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate;
  ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyNodeIdUpdate: ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyNodeIdUpdate;
  ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewPkeyUpdate: ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewPkeyUpdate;
  ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate: ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate;
  ReviewPatch: ReviewPatch;
  ReviewResponse: ResolverTypeWrapper<ReviewResponse>;
  ReviewResponseApplicationResponseIdFkeyApplicationResponseCreateInput: ReviewResponseApplicationResponseIdFkeyApplicationResponseCreateInput;
  ReviewResponseApplicationResponseIdFkeyInput: ReviewResponseApplicationResponseIdFkeyInput;
  ReviewResponseApplicationResponseIdFkeyInverseInput: ReviewResponseApplicationResponseIdFkeyInverseInput;
  ReviewResponseApplicationResponseIdFkeyReviewResponseCreateInput: ReviewResponseApplicationResponseIdFkeyReviewResponseCreateInput;
  ReviewResponseCondition: ReviewResponseCondition;
  ReviewResponseDecision: ReviewResponseDecision;
  ReviewResponseDecisionFilter: ReviewResponseDecisionFilter;
  ReviewResponseFilter: ReviewResponseFilter;
  ReviewResponseInput: ReviewResponseInput;
  ReviewResponseNodeIdConnect: ReviewResponseNodeIdConnect;
  ReviewResponseNodeIdDelete: ReviewResponseNodeIdDelete;
  ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate: ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate;
  ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingReviewResponsePkeyUpdate: ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingReviewResponsePkeyUpdate;
  ReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyNodeIdUpdate: ReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyNodeIdUpdate;
  ReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyUsingReviewResponsePkeyUpdate: ReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyUsingReviewResponsePkeyUpdate;
  ReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyNodeIdUpdate: ReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyNodeIdUpdate;
  ReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewResponsePkeyUpdate: ReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewResponsePkeyUpdate;
  ReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyNodeIdUpdate: ReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyNodeIdUpdate;
  ReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyUsingReviewResponsePkeyUpdate: ReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyUsingReviewResponsePkeyUpdate;
  ReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyNodeIdUpdate: ReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyNodeIdUpdate;
  ReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingReviewResponsePkeyUpdate: ReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingReviewResponsePkeyUpdate;
  ReviewResponseOriginalReviewResponseIdFkeyInput: ReviewResponseOriginalReviewResponseIdFkeyInput;
  ReviewResponseOriginalReviewResponseIdFkeyReviewResponseCreateInput: ReviewResponseOriginalReviewResponseIdFkeyReviewResponseCreateInput;
  ReviewResponsePatch: ReviewResponsePatch;
  ReviewResponseRecommendedApplicantVisibility: ReviewResponseRecommendedApplicantVisibility;
  ReviewResponseRecommendedApplicantVisibilityFilter: ReviewResponseRecommendedApplicantVisibilityFilter;
  ReviewResponseReviewIdFkeyInput: ReviewResponseReviewIdFkeyInput;
  ReviewResponseReviewIdFkeyInverseInput: ReviewResponseReviewIdFkeyInverseInput;
  ReviewResponseReviewIdFkeyReviewCreateInput: ReviewResponseReviewIdFkeyReviewCreateInput;
  ReviewResponseReviewIdFkeyReviewResponseCreateInput: ReviewResponseReviewIdFkeyReviewResponseCreateInput;
  ReviewResponseReviewResponseLinkIdFkeyInput: ReviewResponseReviewResponseLinkIdFkeyInput;
  ReviewResponseReviewResponseLinkIdFkeyReviewResponseCreateInput: ReviewResponseReviewResponseLinkIdFkeyReviewResponseCreateInput;
  ReviewResponseReviewResponsePkeyConnect: ReviewResponseReviewResponsePkeyConnect;
  ReviewResponseReviewResponsePkeyDelete: ReviewResponseReviewResponsePkeyDelete;
  ReviewResponseStatus: ReviewResponseStatus;
  ReviewResponseStatusFilter: ReviewResponseStatusFilter;
  ReviewResponseTemplateElementIdFkeyInput: ReviewResponseTemplateElementIdFkeyInput;
  ReviewResponseTemplateElementIdFkeyInverseInput: ReviewResponseTemplateElementIdFkeyInverseInput;
  ReviewResponseTemplateElementIdFkeyReviewResponseCreateInput: ReviewResponseTemplateElementIdFkeyReviewResponseCreateInput;
  ReviewResponseTemplateElementIdFkeyTemplateElementCreateInput: ReviewResponseTemplateElementIdFkeyTemplateElementCreateInput;
  ReviewResponseToManyReviewResponseFilter: ReviewResponseToManyReviewResponseFilter;
  ReviewResponsesConnection: ResolverTypeWrapper<ReviewResponsesConnection>;
  ReviewResponsesEdge: ResolverTypeWrapper<ReviewResponsesEdge>;
  ReviewResponsesOrderBy: ReviewResponsesOrderBy;
  ReviewReviewAssignmentIdFkeyInput: ReviewReviewAssignmentIdFkeyInput;
  ReviewReviewAssignmentIdFkeyInverseInput: ReviewReviewAssignmentIdFkeyInverseInput;
  ReviewReviewAssignmentIdFkeyReviewAssignmentCreateInput: ReviewReviewAssignmentIdFkeyReviewAssignmentCreateInput;
  ReviewReviewAssignmentIdFkeyReviewCreateInput: ReviewReviewAssignmentIdFkeyReviewCreateInput;
  ReviewReviewPkeyConnect: ReviewReviewPkeyConnect;
  ReviewReviewPkeyDelete: ReviewReviewPkeyDelete;
  ReviewReviewReviewAssignmentIdKeyConnect: ReviewReviewReviewAssignmentIdKeyConnect;
  ReviewReviewReviewAssignmentIdKeyDelete: ReviewReviewReviewAssignmentIdKeyDelete;
  ReviewStatus: ReviewStatus;
  ReviewStatusFilter: ReviewStatusFilter;
  ReviewStatusHistoriesConnection: ResolverTypeWrapper<ReviewStatusHistoriesConnection>;
  ReviewStatusHistoriesEdge: ResolverTypeWrapper<ReviewStatusHistoriesEdge>;
  ReviewStatusHistoriesOrderBy: ReviewStatusHistoriesOrderBy;
  ReviewStatusHistory: ResolverTypeWrapper<ReviewStatusHistory>;
  ReviewStatusHistoryCondition: ReviewStatusHistoryCondition;
  ReviewStatusHistoryFilter: ReviewStatusHistoryFilter;
  ReviewStatusHistoryInput: ReviewStatusHistoryInput;
  ReviewStatusHistoryNodeIdConnect: ReviewStatusHistoryNodeIdConnect;
  ReviewStatusHistoryNodeIdDelete: ReviewStatusHistoryNodeIdDelete;
  ReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyNodeIdUpdate: ReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyNodeIdUpdate;
  ReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewStatusHistoryPkeyUpdate: ReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewStatusHistoryPkeyUpdate;
  ReviewStatusHistoryPatch: ReviewStatusHistoryPatch;
  ReviewStatusHistoryReviewIdFkeyInput: ReviewStatusHistoryReviewIdFkeyInput;
  ReviewStatusHistoryReviewIdFkeyInverseInput: ReviewStatusHistoryReviewIdFkeyInverseInput;
  ReviewStatusHistoryReviewIdFkeyReviewCreateInput: ReviewStatusHistoryReviewIdFkeyReviewCreateInput;
  ReviewStatusHistoryReviewIdFkeyReviewStatusHistoryCreateInput: ReviewStatusHistoryReviewIdFkeyReviewStatusHistoryCreateInput;
  ReviewStatusHistoryReviewStatusHistoryPkeyConnect: ReviewStatusHistoryReviewStatusHistoryPkeyConnect;
  ReviewStatusHistoryReviewStatusHistoryPkeyDelete: ReviewStatusHistoryReviewStatusHistoryPkeyDelete;
  ReviewToManyNotificationFilter: ReviewToManyNotificationFilter;
  ReviewToManyReviewDecisionFilter: ReviewToManyReviewDecisionFilter;
  ReviewToManyReviewResponseFilter: ReviewToManyReviewResponseFilter;
  ReviewToManyReviewStatusHistoryFilter: ReviewToManyReviewStatusHistoryFilter;
  Reviewability: Reviewability;
  ReviewabilityFilter: ReviewabilityFilter;
  ReviewableQuestionEdge: ResolverTypeWrapper<ReviewableQuestionEdge>;
  ReviewableQuestionsConnection: ResolverTypeWrapper<ReviewableQuestionsConnection>;
  ReviewableQuestionsRecord: ResolverTypeWrapper<ReviewableQuestionsRecord>;
  ReviewableQuestionsRecordFilter: ReviewableQuestionsRecordFilter;
  ReviewerAction: ReviewerAction;
  ReviewerActionFilter: ReviewerActionFilter;
  ReviewsConnection: ResolverTypeWrapper<ReviewsConnection>;
  ReviewsEdge: ResolverTypeWrapper<ReviewsEdge>;
  ReviewsOrderBy: ReviewsOrderBy;
  SchemaColumn: ResolverTypeWrapper<SchemaColumn>;
  SchemaColumnCondition: SchemaColumnCondition;
  SchemaColumnFilter: SchemaColumnFilter;
  SchemaColumnsConnection: ResolverTypeWrapper<SchemaColumnsConnection>;
  SchemaColumnsEdge: ResolverTypeWrapper<SchemaColumnsEdge>;
  SchemaColumnsOrderBy: SchemaColumnsOrderBy;
  SingleApplicationDetailConnection: ResolverTypeWrapper<SingleApplicationDetailConnection>;
  SingleApplicationDetailEdge: ResolverTypeWrapper<SingleApplicationDetailEdge>;
  SingleApplicationDetailRecord: ResolverTypeWrapper<SingleApplicationDetailRecord>;
  SingleApplicationDetailRecordFilter: SingleApplicationDetailRecordFilter;
  SqlIdentifier: ResolverTypeWrapper<Scalars['SqlIdentifier']['output']>;
  SqlIdentifierFilter: SqlIdentifierFilter;
  String: ResolverTypeWrapper<Scalars['String']['output']>;
  StringFilter: StringFilter;
  StringListFilter: StringListFilter;
  SystemInfo: ResolverTypeWrapper<SystemInfo>;
  SystemInfoCondition: SystemInfoCondition;
  SystemInfoFilter: SystemInfoFilter;
  SystemInfoInput: SystemInfoInput;
  SystemInfoPatch: SystemInfoPatch;
  SystemInfosConnection: ResolverTypeWrapper<SystemInfosConnection>;
  SystemInfosEdge: ResolverTypeWrapper<SystemInfosEdge>;
  SystemInfosOrderBy: SystemInfosOrderBy;
  Template: ResolverTypeWrapper<Template>;
  TemplateAction: ResolverTypeWrapper<TemplateAction>;
  TemplateActionCondition: TemplateActionCondition;
  TemplateActionFilter: TemplateActionFilter;
  TemplateActionInput: TemplateActionInput;
  TemplateActionNodeIdConnect: TemplateActionNodeIdConnect;
  TemplateActionNodeIdDelete: TemplateActionNodeIdDelete;
  TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate: TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate;
  TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplateActionPkeyUpdate: TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplateActionPkeyUpdate;
  TemplateActionPatch: TemplateActionPatch;
  TemplateActionTemplateActionPkeyConnect: TemplateActionTemplateActionPkeyConnect;
  TemplateActionTemplateActionPkeyDelete: TemplateActionTemplateActionPkeyDelete;
  TemplateActionTemplateIdFkeyInput: TemplateActionTemplateIdFkeyInput;
  TemplateActionTemplateIdFkeyInverseInput: TemplateActionTemplateIdFkeyInverseInput;
  TemplateActionTemplateIdFkeyTemplateActionCreateInput: TemplateActionTemplateIdFkeyTemplateActionCreateInput;
  TemplateActionTemplateIdFkeyTemplateCreateInput: TemplateActionTemplateIdFkeyTemplateCreateInput;
  TemplateActionsConnection: ResolverTypeWrapper<TemplateActionsConnection>;
  TemplateActionsEdge: ResolverTypeWrapper<TemplateActionsEdge>;
  TemplateActionsOrderBy: TemplateActionsOrderBy;
  TemplateCategoriesConnection: ResolverTypeWrapper<TemplateCategoriesConnection>;
  TemplateCategoriesEdge: ResolverTypeWrapper<TemplateCategoriesEdge>;
  TemplateCategoriesOrderBy: TemplateCategoriesOrderBy;
  TemplateCategory: ResolverTypeWrapper<TemplateCategory>;
  TemplateCategoryCondition: TemplateCategoryCondition;
  TemplateCategoryFilter: TemplateCategoryFilter;
  TemplateCategoryInput: TemplateCategoryInput;
  TemplateCategoryNodeIdConnect: TemplateCategoryNodeIdConnect;
  TemplateCategoryNodeIdDelete: TemplateCategoryNodeIdDelete;
  TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyNodeIdUpdate: TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyNodeIdUpdate;
  TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCategoryCodeKeyUpdate: TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCategoryCodeKeyUpdate;
  TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCategoryPkeyUpdate: TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCategoryPkeyUpdate;
  TemplateCategoryPatch: TemplateCategoryPatch;
  TemplateCategoryTemplateCategoryCodeKeyConnect: TemplateCategoryTemplateCategoryCodeKeyConnect;
  TemplateCategoryTemplateCategoryCodeKeyDelete: TemplateCategoryTemplateCategoryCodeKeyDelete;
  TemplateCategoryTemplateCategoryPkeyConnect: TemplateCategoryTemplateCategoryPkeyConnect;
  TemplateCategoryTemplateCategoryPkeyDelete: TemplateCategoryTemplateCategoryPkeyDelete;
  TemplateCategoryToManyTemplateFilter: TemplateCategoryToManyTemplateFilter;
  TemplateCondition: TemplateCondition;
  TemplateElement: ResolverTypeWrapper<TemplateElement>;
  TemplateElementCategory: TemplateElementCategory;
  TemplateElementCategoryFilter: TemplateElementCategoryFilter;
  TemplateElementCondition: TemplateElementCondition;
  TemplateElementFilter: TemplateElementFilter;
  TemplateElementInput: TemplateElementInput;
  TemplateElementNodeIdConnect: TemplateElementNodeIdConnect;
  TemplateElementNodeIdDelete: TemplateElementNodeIdDelete;
  TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyNodeIdUpdate: TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyNodeIdUpdate;
  TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingTemplateElementPkeyUpdate: TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingTemplateElementPkeyUpdate;
  TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate: TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate;
  TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyNodeIdUpdate: TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyNodeIdUpdate;
  TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingTemplateElementPkeyUpdate: TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingTemplateElementPkeyUpdate;
  TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate: TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate;
  TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate: TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate;
  TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateElementPkeyUpdate: TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateElementPkeyUpdate;
  TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate: TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate;
  TemplateElementPatch: TemplateElementPatch;
  TemplateElementSectionIdFkeyInput: TemplateElementSectionIdFkeyInput;
  TemplateElementSectionIdFkeyInverseInput: TemplateElementSectionIdFkeyInverseInput;
  TemplateElementSectionIdFkeyTemplateElementCreateInput: TemplateElementSectionIdFkeyTemplateElementCreateInput;
  TemplateElementSectionIdFkeyTemplateSectionCreateInput: TemplateElementSectionIdFkeyTemplateSectionCreateInput;
  TemplateElementTemplateElementPkeyConnect: TemplateElementTemplateElementPkeyConnect;
  TemplateElementTemplateElementPkeyDelete: TemplateElementTemplateElementPkeyDelete;
  TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyConnect: TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyConnect;
  TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyDelete: TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyDelete;
  TemplateElementToManyApplicationResponseFilter: TemplateElementToManyApplicationResponseFilter;
  TemplateElementToManyReviewResponseFilter: TemplateElementToManyReviewResponseFilter;
  TemplateElementsConnection: ResolverTypeWrapper<TemplateElementsConnection>;
  TemplateElementsEdge: ResolverTypeWrapper<TemplateElementsEdge>;
  TemplateElementsOrderBy: TemplateElementsOrderBy;
  TemplateFilter: TemplateFilter;
  TemplateFilterJoin: ResolverTypeWrapper<TemplateFilterJoin>;
  TemplateFilterJoinCondition: TemplateFilterJoinCondition;
  TemplateFilterJoinFilter: TemplateFilterJoinFilter;
  TemplateFilterJoinFilterIdFkeyFilterCreateInput: TemplateFilterJoinFilterIdFkeyFilterCreateInput;
  TemplateFilterJoinFilterIdFkeyInput: TemplateFilterJoinFilterIdFkeyInput;
  TemplateFilterJoinFilterIdFkeyInverseInput: TemplateFilterJoinFilterIdFkeyInverseInput;
  TemplateFilterJoinFilterIdFkeyTemplateFilterJoinCreateInput: TemplateFilterJoinFilterIdFkeyTemplateFilterJoinCreateInput;
  TemplateFilterJoinInput: TemplateFilterJoinInput;
  TemplateFilterJoinNodeIdConnect: TemplateFilterJoinNodeIdConnect;
  TemplateFilterJoinNodeIdDelete: TemplateFilterJoinNodeIdDelete;
  TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyNodeIdUpdate: TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyNodeIdUpdate;
  TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingTemplateFilterJoinPkeyUpdate: TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingTemplateFilterJoinPkeyUpdate;
  TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyNodeIdUpdate: TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyNodeIdUpdate;
  TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplateFilterJoinPkeyUpdate: TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplateFilterJoinPkeyUpdate;
  TemplateFilterJoinPatch: TemplateFilterJoinPatch;
  TemplateFilterJoinTemplateFilterJoinPkeyConnect: TemplateFilterJoinTemplateFilterJoinPkeyConnect;
  TemplateFilterJoinTemplateFilterJoinPkeyDelete: TemplateFilterJoinTemplateFilterJoinPkeyDelete;
  TemplateFilterJoinTemplateIdFkeyInput: TemplateFilterJoinTemplateIdFkeyInput;
  TemplateFilterJoinTemplateIdFkeyInverseInput: TemplateFilterJoinTemplateIdFkeyInverseInput;
  TemplateFilterJoinTemplateIdFkeyTemplateCreateInput: TemplateFilterJoinTemplateIdFkeyTemplateCreateInput;
  TemplateFilterJoinTemplateIdFkeyTemplateFilterJoinCreateInput: TemplateFilterJoinTemplateIdFkeyTemplateFilterJoinCreateInput;
  TemplateFilterJoinsConnection: ResolverTypeWrapper<TemplateFilterJoinsConnection>;
  TemplateFilterJoinsEdge: ResolverTypeWrapper<TemplateFilterJoinsEdge>;
  TemplateFilterJoinsOrderBy: TemplateFilterJoinsOrderBy;
  TemplateInput: TemplateInput;
  TemplateNodeIdConnect: TemplateNodeIdConnect;
  TemplateNodeIdDelete: TemplateNodeIdDelete;
  TemplateOnActionQueueForActionQueueTemplateIdFkeyNodeIdUpdate: TemplateOnActionQueueForActionQueueTemplateIdFkeyNodeIdUpdate;
  TemplateOnActionQueueForActionQueueTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnActionQueueForActionQueueTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnActionQueueForActionQueueTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnActionQueueForActionQueueTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate: TemplateOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate;
  TemplateOnApplicationForApplicationTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnApplicationForApplicationTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnApplicationForApplicationTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnApplicationForApplicationTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnFileForFileTemplateIdFkeyNodeIdUpdate: TemplateOnFileForFileTemplateIdFkeyNodeIdUpdate;
  TemplateOnFileForFileTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnFileForFileTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnFileForFileTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnFileForFileTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyNodeIdUpdate: TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyNodeIdUpdate;
  TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate: TemplateOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate;
  TemplateOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyNodeIdUpdate: TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyNodeIdUpdate;
  TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnTemplateForTemplateTemplateCategoryIdFkeyNodeIdUpdate: TemplateOnTemplateForTemplateTemplateCategoryIdFkeyNodeIdUpdate;
  TemplateOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplatePkeyUpdate: TemplateOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate: TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate;
  TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate: TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate;
  TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnTemplateStageForTemplateStageTemplateIdFkeyNodeIdUpdate: TemplateOnTemplateStageForTemplateStageTemplateIdFkeyNodeIdUpdate;
  TemplateOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyNodeIdUpdate: TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyNodeIdUpdate;
  TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplatePatch: TemplatePatch;
  TemplatePermission: ResolverTypeWrapper<TemplatePermission>;
  TemplatePermissionCondition: TemplatePermissionCondition;
  TemplatePermissionFilter: TemplatePermissionFilter;
  TemplatePermissionInput: TemplatePermissionInput;
  TemplatePermissionNodeIdConnect: TemplatePermissionNodeIdConnect;
  TemplatePermissionNodeIdDelete: TemplatePermissionNodeIdDelete;
  TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyNodeIdUpdate: TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyNodeIdUpdate;
  TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingTemplatePermissionPkeyUpdate: TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingTemplatePermissionPkeyUpdate;
  TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate: TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate;
  TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePermissionPkeyUpdate: TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePermissionPkeyUpdate;
  TemplatePermissionPatch: TemplatePermissionPatch;
  TemplatePermissionPermissionNameIdFkeyInput: TemplatePermissionPermissionNameIdFkeyInput;
  TemplatePermissionPermissionNameIdFkeyInverseInput: TemplatePermissionPermissionNameIdFkeyInverseInput;
  TemplatePermissionPermissionNameIdFkeyPermissionNameCreateInput: TemplatePermissionPermissionNameIdFkeyPermissionNameCreateInput;
  TemplatePermissionPermissionNameIdFkeyTemplatePermissionCreateInput: TemplatePermissionPermissionNameIdFkeyTemplatePermissionCreateInput;
  TemplatePermissionTemplateIdFkeyInput: TemplatePermissionTemplateIdFkeyInput;
  TemplatePermissionTemplateIdFkeyInverseInput: TemplatePermissionTemplateIdFkeyInverseInput;
  TemplatePermissionTemplateIdFkeyTemplateCreateInput: TemplatePermissionTemplateIdFkeyTemplateCreateInput;
  TemplatePermissionTemplateIdFkeyTemplatePermissionCreateInput: TemplatePermissionTemplateIdFkeyTemplatePermissionCreateInput;
  TemplatePermissionTemplatePermissionPkeyConnect: TemplatePermissionTemplatePermissionPkeyConnect;
  TemplatePermissionTemplatePermissionPkeyDelete: TemplatePermissionTemplatePermissionPkeyDelete;
  TemplatePermissionsConnection: ResolverTypeWrapper<TemplatePermissionsConnection>;
  TemplatePermissionsEdge: ResolverTypeWrapper<TemplatePermissionsEdge>;
  TemplatePermissionsOrderBy: TemplatePermissionsOrderBy;
  TemplateSection: ResolverTypeWrapper<TemplateSection>;
  TemplateSectionCondition: TemplateSectionCondition;
  TemplateSectionFilter: TemplateSectionFilter;
  TemplateSectionInput: TemplateSectionInput;
  TemplateSectionNodeIdConnect: TemplateSectionNodeIdConnect;
  TemplateSectionNodeIdDelete: TemplateSectionNodeIdDelete;
  TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate: TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate;
  TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateSectionPkeyUpdate: TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateSectionPkeyUpdate;
  TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateSectionTemplateIdCodeKeyUpdate: TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateSectionTemplateIdCodeKeyUpdate;
  TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate: TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate;
  TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateSectionPkeyUpdate: TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateSectionPkeyUpdate;
  TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateSectionTemplateIdCodeKeyUpdate: TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateSectionTemplateIdCodeKeyUpdate;
  TemplateSectionPatch: TemplateSectionPatch;
  TemplateSectionTemplateIdFkeyInput: TemplateSectionTemplateIdFkeyInput;
  TemplateSectionTemplateIdFkeyInverseInput: TemplateSectionTemplateIdFkeyInverseInput;
  TemplateSectionTemplateIdFkeyTemplateCreateInput: TemplateSectionTemplateIdFkeyTemplateCreateInput;
  TemplateSectionTemplateIdFkeyTemplateSectionCreateInput: TemplateSectionTemplateIdFkeyTemplateSectionCreateInput;
  TemplateSectionTemplateSectionPkeyConnect: TemplateSectionTemplateSectionPkeyConnect;
  TemplateSectionTemplateSectionPkeyDelete: TemplateSectionTemplateSectionPkeyDelete;
  TemplateSectionTemplateSectionTemplateIdCodeKeyConnect: TemplateSectionTemplateSectionTemplateIdCodeKeyConnect;
  TemplateSectionTemplateSectionTemplateIdCodeKeyDelete: TemplateSectionTemplateSectionTemplateIdCodeKeyDelete;
  TemplateSectionToManyTemplateElementFilter: TemplateSectionToManyTemplateElementFilter;
  TemplateSectionsConnection: ResolverTypeWrapper<TemplateSectionsConnection>;
  TemplateSectionsEdge: ResolverTypeWrapper<TemplateSectionsEdge>;
  TemplateSectionsOrderBy: TemplateSectionsOrderBy;
  TemplateStage: ResolverTypeWrapper<TemplateStage>;
  TemplateStageCondition: TemplateStageCondition;
  TemplateStageFilter: TemplateStageFilter;
  TemplateStageInput: TemplateStageInput;
  TemplateStageNodeIdConnect: TemplateStageNodeIdConnect;
  TemplateStageNodeIdDelete: TemplateStageNodeIdDelete;
  TemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyNodeIdUpdate: TemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyNodeIdUpdate;
  TemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyUsingTemplateStagePkeyUpdate: TemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyUsingTemplateStagePkeyUpdate;
  TemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyNodeIdUpdate: TemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyNodeIdUpdate;
  TemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyUsingTemplateStagePkeyUpdate: TemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyUsingTemplateStagePkeyUpdate;
  TemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyNodeIdUpdate: TemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyNodeIdUpdate;
  TemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplateStagePkeyUpdate: TemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplateStagePkeyUpdate;
  TemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyNodeIdUpdate: TemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyNodeIdUpdate;
  TemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyUsingTemplateStagePkeyUpdate: TemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyUsingTemplateStagePkeyUpdate;
  TemplateStagePatch: TemplateStagePatch;
  TemplateStageReviewLevel: ResolverTypeWrapper<TemplateStageReviewLevel>;
  TemplateStageReviewLevelCondition: TemplateStageReviewLevelCondition;
  TemplateStageReviewLevelFilter: TemplateStageReviewLevelFilter;
  TemplateStageReviewLevelInput: TemplateStageReviewLevelInput;
  TemplateStageReviewLevelNodeIdConnect: TemplateStageReviewLevelNodeIdConnect;
  TemplateStageReviewLevelNodeIdDelete: TemplateStageReviewLevelNodeIdDelete;
  TemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyNodeIdUpdate: TemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyNodeIdUpdate;
  TemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyUsingTemplateStageReviewLevelPkeyUpdate: TemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyUsingTemplateStageReviewLevelPkeyUpdate;
  TemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyNodeIdUpdate: TemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyNodeIdUpdate;
  TemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyUsingTemplateStageReviewLevelPkeyUpdate: TemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyUsingTemplateStageReviewLevelPkeyUpdate;
  TemplateStageReviewLevelPatch: TemplateStageReviewLevelPatch;
  TemplateStageReviewLevelStageIdFkeyInput: TemplateStageReviewLevelStageIdFkeyInput;
  TemplateStageReviewLevelStageIdFkeyInverseInput: TemplateStageReviewLevelStageIdFkeyInverseInput;
  TemplateStageReviewLevelStageIdFkeyTemplateStageCreateInput: TemplateStageReviewLevelStageIdFkeyTemplateStageCreateInput;
  TemplateStageReviewLevelStageIdFkeyTemplateStageReviewLevelCreateInput: TemplateStageReviewLevelStageIdFkeyTemplateStageReviewLevelCreateInput;
  TemplateStageReviewLevelTemplateStageReviewLevelPkeyConnect: TemplateStageReviewLevelTemplateStageReviewLevelPkeyConnect;
  TemplateStageReviewLevelTemplateStageReviewLevelPkeyDelete: TemplateStageReviewLevelTemplateStageReviewLevelPkeyDelete;
  TemplateStageReviewLevelToManyReviewAssignmentFilter: TemplateStageReviewLevelToManyReviewAssignmentFilter;
  TemplateStageReviewLevelsConnection: ResolverTypeWrapper<TemplateStageReviewLevelsConnection>;
  TemplateStageReviewLevelsEdge: ResolverTypeWrapper<TemplateStageReviewLevelsEdge>;
  TemplateStageReviewLevelsOrderBy: TemplateStageReviewLevelsOrderBy;
  TemplateStageTemplateIdFkeyInput: TemplateStageTemplateIdFkeyInput;
  TemplateStageTemplateIdFkeyInverseInput: TemplateStageTemplateIdFkeyInverseInput;
  TemplateStageTemplateIdFkeyTemplateCreateInput: TemplateStageTemplateIdFkeyTemplateCreateInput;
  TemplateStageTemplateIdFkeyTemplateStageCreateInput: TemplateStageTemplateIdFkeyTemplateStageCreateInput;
  TemplateStageTemplateStagePkeyConnect: TemplateStageTemplateStagePkeyConnect;
  TemplateStageTemplateStagePkeyDelete: TemplateStageTemplateStagePkeyDelete;
  TemplateStageToManyApplicationStageHistoryFilter: TemplateStageToManyApplicationStageHistoryFilter;
  TemplateStageToManyReviewAssignmentFilter: TemplateStageToManyReviewAssignmentFilter;
  TemplateStageToManyTemplateStageReviewLevelFilter: TemplateStageToManyTemplateStageReviewLevelFilter;
  TemplateStagesConnection: ResolverTypeWrapper<TemplateStagesConnection>;
  TemplateStagesEdge: ResolverTypeWrapper<TemplateStagesEdge>;
  TemplateStagesOrderBy: TemplateStagesOrderBy;
  TemplateStatus: TemplateStatus;
  TemplateStatusFilter: TemplateStatusFilter;
  TemplateTemplateCategoryIdFkeyInput: TemplateTemplateCategoryIdFkeyInput;
  TemplateTemplateCategoryIdFkeyInverseInput: TemplateTemplateCategoryIdFkeyInverseInput;
  TemplateTemplateCategoryIdFkeyTemplateCategoryCreateInput: TemplateTemplateCategoryIdFkeyTemplateCategoryCreateInput;
  TemplateTemplateCategoryIdFkeyTemplateCreateInput: TemplateTemplateCategoryIdFkeyTemplateCreateInput;
  TemplateTemplateCodeVersionIdKeyConnect: TemplateTemplateCodeVersionIdKeyConnect;
  TemplateTemplateCodeVersionIdKeyDelete: TemplateTemplateCodeVersionIdKeyDelete;
  TemplateTemplatePkeyConnect: TemplateTemplatePkeyConnect;
  TemplateTemplatePkeyDelete: TemplateTemplatePkeyDelete;
  TemplateToManyActionQueueFilter: TemplateToManyActionQueueFilter;
  TemplateToManyApplicationFilter: TemplateToManyApplicationFilter;
  TemplateToManyFileFilter: TemplateToManyFileFilter;
  TemplateToManyReviewAssignmentFilter: TemplateToManyReviewAssignmentFilter;
  TemplateToManyTemplateActionFilter: TemplateToManyTemplateActionFilter;
  TemplateToManyTemplateFilterJoinFilter: TemplateToManyTemplateFilterJoinFilter;
  TemplateToManyTemplatePermissionFilter: TemplateToManyTemplatePermissionFilter;
  TemplateToManyTemplateSectionFilter: TemplateToManyTemplateSectionFilter;
  TemplateToManyTemplateStageFilter: TemplateToManyTemplateStageFilter;
  TemplateToManyTriggerScheduleFilter: TemplateToManyTriggerScheduleFilter;
  TemplatesConnection: ResolverTypeWrapper<TemplatesConnection>;
  TemplatesEdge: ResolverTypeWrapper<TemplatesEdge>;
  TemplatesOrderBy: TemplatesOrderBy;
  Trigger: Trigger;
  TriggerFilter: TriggerFilter;
  TriggerQueue: ResolverTypeWrapper<TriggerQueue>;
  TriggerQueueApplicationIdFkeyApplicationCreateInput: TriggerQueueApplicationIdFkeyApplicationCreateInput;
  TriggerQueueApplicationIdFkeyInput: TriggerQueueApplicationIdFkeyInput;
  TriggerQueueApplicationIdFkeyInverseInput: TriggerQueueApplicationIdFkeyInverseInput;
  TriggerQueueApplicationIdFkeyTriggerQueueCreateInput: TriggerQueueApplicationIdFkeyTriggerQueueCreateInput;
  TriggerQueueCondition: TriggerQueueCondition;
  TriggerQueueFilter: TriggerQueueFilter;
  TriggerQueueInput: TriggerQueueInput;
  TriggerQueueNodeIdConnect: TriggerQueueNodeIdConnect;
  TriggerQueueNodeIdDelete: TriggerQueueNodeIdDelete;
  TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate: TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate;
  TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyUsingTriggerQueuePkeyUpdate: TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyUsingTriggerQueuePkeyUpdate;
  TriggerQueueOnTriggerQueueForTriggerQueueApplicationIdFkeyNodeIdUpdate: TriggerQueueOnTriggerQueueForTriggerQueueApplicationIdFkeyNodeIdUpdate;
  TriggerQueueOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingTriggerQueuePkeyUpdate: TriggerQueueOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingTriggerQueuePkeyUpdate;
  TriggerQueuePatch: TriggerQueuePatch;
  TriggerQueueStatus: TriggerQueueStatus;
  TriggerQueueStatusFilter: TriggerQueueStatusFilter;
  TriggerQueueToManyActionQueueFilter: TriggerQueueToManyActionQueueFilter;
  TriggerQueueTriggerQueuePkeyConnect: TriggerQueueTriggerQueuePkeyConnect;
  TriggerQueueTriggerQueuePkeyDelete: TriggerQueueTriggerQueuePkeyDelete;
  TriggerQueuesConnection: ResolverTypeWrapper<TriggerQueuesConnection>;
  TriggerQueuesEdge: ResolverTypeWrapper<TriggerQueuesEdge>;
  TriggerQueuesOrderBy: TriggerQueuesOrderBy;
  TriggerSchedule: ResolverTypeWrapper<TriggerSchedule>;
  TriggerScheduleApplicationIdFkeyApplicationCreateInput: TriggerScheduleApplicationIdFkeyApplicationCreateInput;
  TriggerScheduleApplicationIdFkeyInput: TriggerScheduleApplicationIdFkeyInput;
  TriggerScheduleApplicationIdFkeyInverseInput: TriggerScheduleApplicationIdFkeyInverseInput;
  TriggerScheduleApplicationIdFkeyTriggerScheduleCreateInput: TriggerScheduleApplicationIdFkeyTriggerScheduleCreateInput;
  TriggerScheduleCondition: TriggerScheduleCondition;
  TriggerScheduleFilter: TriggerScheduleFilter;
  TriggerScheduleInput: TriggerScheduleInput;
  TriggerScheduleNodeIdConnect: TriggerScheduleNodeIdConnect;
  TriggerScheduleNodeIdDelete: TriggerScheduleNodeIdDelete;
  TriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyNodeIdUpdate: TriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyNodeIdUpdate;
  TriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingTriggerSchedulePkeyUpdate: TriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingTriggerSchedulePkeyUpdate;
  TriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyNodeIdUpdate: TriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyNodeIdUpdate;
  TriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTriggerSchedulePkeyUpdate: TriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTriggerSchedulePkeyUpdate;
  TriggerSchedulePatch: TriggerSchedulePatch;
  TriggerScheduleTemplateIdFkeyInput: TriggerScheduleTemplateIdFkeyInput;
  TriggerScheduleTemplateIdFkeyInverseInput: TriggerScheduleTemplateIdFkeyInverseInput;
  TriggerScheduleTemplateIdFkeyTemplateCreateInput: TriggerScheduleTemplateIdFkeyTemplateCreateInput;
  TriggerScheduleTemplateIdFkeyTriggerScheduleCreateInput: TriggerScheduleTemplateIdFkeyTriggerScheduleCreateInput;
  TriggerScheduleTriggerSchedulePkeyConnect: TriggerScheduleTriggerSchedulePkeyConnect;
  TriggerScheduleTriggerSchedulePkeyDelete: TriggerScheduleTriggerSchedulePkeyDelete;
  TriggerSchedulesConnection: ResolverTypeWrapper<TriggerSchedulesConnection>;
  TriggerSchedulesEdge: ResolverTypeWrapper<TriggerSchedulesEdge>;
  TriggerSchedulesOrderBy: TriggerSchedulesOrderBy;
  UiLocation: UiLocation;
  UiLocationListFilter: UiLocationListFilter;
  UnnestedSection: ResolverTypeWrapper<UnnestedSection>;
  UnnestedSectionCondition: UnnestedSectionCondition;
  UnnestedSectionFilter: UnnestedSectionFilter;
  UnnestedSectionsConnection: ResolverTypeWrapper<UnnestedSectionsConnection>;
  UnnestedSectionsEdge: ResolverTypeWrapper<UnnestedSectionsEdge>;
  UnnestedSectionsOrderBy: UnnestedSectionsOrderBy;
  UpdateActionPluginByCodeInput: UpdateActionPluginByCodeInput;
  UpdateActionPluginByNodeIdInput: UpdateActionPluginByNodeIdInput;
  UpdateActionPluginInput: UpdateActionPluginInput;
  UpdateActionPluginPayload: ResolverTypeWrapper<Omit<UpdateActionPluginPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateActionQueueByNodeIdInput: UpdateActionQueueByNodeIdInput;
  UpdateActionQueueInput: UpdateActionQueueInput;
  UpdateActionQueuePayload: ResolverTypeWrapper<Omit<UpdateActionQueuePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateActivityLogByNodeIdInput: UpdateActivityLogByNodeIdInput;
  UpdateActivityLogInput: UpdateActivityLogInput;
  UpdateActivityLogPayload: ResolverTypeWrapper<Omit<UpdateActivityLogPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateApplicationByNodeIdInput: UpdateApplicationByNodeIdInput;
  UpdateApplicationByOutcomeRegistrationInput: UpdateApplicationByOutcomeRegistrationInput;
  UpdateApplicationBySerialInput: UpdateApplicationBySerialInput;
  UpdateApplicationInput: UpdateApplicationInput;
  UpdateApplicationNoteByNodeIdInput: UpdateApplicationNoteByNodeIdInput;
  UpdateApplicationNoteInput: UpdateApplicationNoteInput;
  UpdateApplicationNotePayload: ResolverTypeWrapper<Omit<UpdateApplicationNotePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateApplicationPayload: ResolverTypeWrapper<Omit<UpdateApplicationPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateApplicationResponseByNodeIdInput: UpdateApplicationResponseByNodeIdInput;
  UpdateApplicationResponseInput: UpdateApplicationResponseInput;
  UpdateApplicationResponsePayload: ResolverTypeWrapper<Omit<UpdateApplicationResponsePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateApplicationReviewerActionByNodeIdInput: UpdateApplicationReviewerActionByNodeIdInput;
  UpdateApplicationReviewerActionByUserIdAndApplicationIdInput: UpdateApplicationReviewerActionByUserIdAndApplicationIdInput;
  UpdateApplicationReviewerActionInput: UpdateApplicationReviewerActionInput;
  UpdateApplicationReviewerActionPayload: ResolverTypeWrapper<Omit<UpdateApplicationReviewerActionPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateApplicationStageHistoryByNodeIdInput: UpdateApplicationStageHistoryByNodeIdInput;
  UpdateApplicationStageHistoryInput: UpdateApplicationStageHistoryInput;
  UpdateApplicationStageHistoryPayload: ResolverTypeWrapper<Omit<UpdateApplicationStageHistoryPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateApplicationStatusHistoryByNodeIdInput: UpdateApplicationStatusHistoryByNodeIdInput;
  UpdateApplicationStatusHistoryInput: UpdateApplicationStatusHistoryInput;
  UpdateApplicationStatusHistoryPayload: ResolverTypeWrapper<Omit<UpdateApplicationStatusHistoryPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateCounterByNameInput: UpdateCounterByNameInput;
  UpdateCounterByNodeIdInput: UpdateCounterByNodeIdInput;
  UpdateCounterInput: UpdateCounterInput;
  UpdateCounterPayload: ResolverTypeWrapper<Omit<UpdateCounterPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateDataChangelogByNodeIdInput: UpdateDataChangelogByNodeIdInput;
  UpdateDataChangelogInput: UpdateDataChangelogInput;
  UpdateDataChangelogPayload: ResolverTypeWrapper<Omit<UpdateDataChangelogPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateDataTableByNodeIdInput: UpdateDataTableByNodeIdInput;
  UpdateDataTableByTableNameInput: UpdateDataTableByTableNameInput;
  UpdateDataTableInput: UpdateDataTableInput;
  UpdateDataTablePayload: ResolverTypeWrapper<Omit<UpdateDataTablePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateDataViewByIdentifierInput: UpdateDataViewByIdentifierInput;
  UpdateDataViewByNodeIdInput: UpdateDataViewByNodeIdInput;
  UpdateDataViewColumnDefinitionByNodeIdInput: UpdateDataViewColumnDefinitionByNodeIdInput;
  UpdateDataViewColumnDefinitionByTableNameAndColumnNameInput: UpdateDataViewColumnDefinitionByTableNameAndColumnNameInput;
  UpdateDataViewColumnDefinitionInput: UpdateDataViewColumnDefinitionInput;
  UpdateDataViewColumnDefinitionPayload: ResolverTypeWrapper<Omit<UpdateDataViewColumnDefinitionPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateDataViewInput: UpdateDataViewInput;
  UpdateDataViewPayload: ResolverTypeWrapper<Omit<UpdateDataViewPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateElementTypePluginByNodeIdInput: UpdateElementTypePluginByNodeIdInput;
  UpdateElementTypePluginInput: UpdateElementTypePluginInput;
  UpdateElementTypePluginPayload: ResolverTypeWrapper<Omit<UpdateElementTypePluginPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateFileByNodeIdInput: UpdateFileByNodeIdInput;
  UpdateFileByUniqueIdInput: UpdateFileByUniqueIdInput;
  UpdateFileInput: UpdateFileInput;
  UpdateFilePayload: ResolverTypeWrapper<Omit<UpdateFilePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateFilterByCodeInput: UpdateFilterByCodeInput;
  UpdateFilterByNodeIdInput: UpdateFilterByNodeIdInput;
  UpdateFilterInput: UpdateFilterInput;
  UpdateFilterPayload: ResolverTypeWrapper<Omit<UpdateFilterPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateNotificationByNodeIdInput: UpdateNotificationByNodeIdInput;
  UpdateNotificationInput: UpdateNotificationInput;
  UpdateNotificationPayload: ResolverTypeWrapper<Omit<UpdateNotificationPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateOrganisationByNameInput: UpdateOrganisationByNameInput;
  UpdateOrganisationByNodeIdInput: UpdateOrganisationByNodeIdInput;
  UpdateOrganisationByRegistrationInput: UpdateOrganisationByRegistrationInput;
  UpdateOrganisationInput: UpdateOrganisationInput;
  UpdateOrganisationPayload: ResolverTypeWrapper<Omit<UpdateOrganisationPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdatePermissionJoinByNodeIdInput: UpdatePermissionJoinByNodeIdInput;
  UpdatePermissionJoinInput: UpdatePermissionJoinInput;
  UpdatePermissionJoinPayload: ResolverTypeWrapper<Omit<UpdatePermissionJoinPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdatePermissionNameByNameInput: UpdatePermissionNameByNameInput;
  UpdatePermissionNameByNodeIdInput: UpdatePermissionNameByNodeIdInput;
  UpdatePermissionNameInput: UpdatePermissionNameInput;
  UpdatePermissionNamePayload: ResolverTypeWrapper<Omit<UpdatePermissionNamePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdatePermissionPolicyByNameInput: UpdatePermissionPolicyByNameInput;
  UpdatePermissionPolicyByNodeIdInput: UpdatePermissionPolicyByNodeIdInput;
  UpdatePermissionPolicyInput: UpdatePermissionPolicyInput;
  UpdatePermissionPolicyPayload: ResolverTypeWrapper<Omit<UpdatePermissionPolicyPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateReviewAssignmentAssignerJoinByNodeIdInput: UpdateReviewAssignmentAssignerJoinByNodeIdInput;
  UpdateReviewAssignmentAssignerJoinInput: UpdateReviewAssignmentAssignerJoinInput;
  UpdateReviewAssignmentAssignerJoinPayload: ResolverTypeWrapper<Omit<UpdateReviewAssignmentAssignerJoinPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateReviewAssignmentByNodeIdInput: UpdateReviewAssignmentByNodeIdInput;
  UpdateReviewAssignmentInput: UpdateReviewAssignmentInput;
  UpdateReviewAssignmentPayload: ResolverTypeWrapper<Omit<UpdateReviewAssignmentPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateReviewByNodeIdInput: UpdateReviewByNodeIdInput;
  UpdateReviewByReviewAssignmentIdInput: UpdateReviewByReviewAssignmentIdInput;
  UpdateReviewDecisionByNodeIdInput: UpdateReviewDecisionByNodeIdInput;
  UpdateReviewDecisionInput: UpdateReviewDecisionInput;
  UpdateReviewDecisionPayload: ResolverTypeWrapper<Omit<UpdateReviewDecisionPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateReviewInput: UpdateReviewInput;
  UpdateReviewPayload: ResolverTypeWrapper<Omit<UpdateReviewPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateReviewResponseByNodeIdInput: UpdateReviewResponseByNodeIdInput;
  UpdateReviewResponseInput: UpdateReviewResponseInput;
  UpdateReviewResponsePayload: ResolverTypeWrapper<Omit<UpdateReviewResponsePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateReviewStatusHistoryByNodeIdInput: UpdateReviewStatusHistoryByNodeIdInput;
  UpdateReviewStatusHistoryInput: UpdateReviewStatusHistoryInput;
  UpdateReviewStatusHistoryPayload: ResolverTypeWrapper<Omit<UpdateReviewStatusHistoryPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateSystemInfoByNodeIdInput: UpdateSystemInfoByNodeIdInput;
  UpdateSystemInfoInput: UpdateSystemInfoInput;
  UpdateSystemInfoPayload: ResolverTypeWrapper<Omit<UpdateSystemInfoPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateTemplateActionByNodeIdInput: UpdateTemplateActionByNodeIdInput;
  UpdateTemplateActionInput: UpdateTemplateActionInput;
  UpdateTemplateActionPayload: ResolverTypeWrapper<Omit<UpdateTemplateActionPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateTemplateByCodeAndVersionIdInput: UpdateTemplateByCodeAndVersionIdInput;
  UpdateTemplateByNodeIdInput: UpdateTemplateByNodeIdInput;
  UpdateTemplateCategoryByCodeInput: UpdateTemplateCategoryByCodeInput;
  UpdateTemplateCategoryByNodeIdInput: UpdateTemplateCategoryByNodeIdInput;
  UpdateTemplateCategoryInput: UpdateTemplateCategoryInput;
  UpdateTemplateCategoryPayload: ResolverTypeWrapper<Omit<UpdateTemplateCategoryPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateTemplateElementByNodeIdInput: UpdateTemplateElementByNodeIdInput;
  UpdateTemplateElementByTemplateCodeAndCodeAndTemplateVersionInput: UpdateTemplateElementByTemplateCodeAndCodeAndTemplateVersionInput;
  UpdateTemplateElementInput: UpdateTemplateElementInput;
  UpdateTemplateElementPayload: ResolverTypeWrapper<Omit<UpdateTemplateElementPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateTemplateFilterJoinByNodeIdInput: UpdateTemplateFilterJoinByNodeIdInput;
  UpdateTemplateFilterJoinInput: UpdateTemplateFilterJoinInput;
  UpdateTemplateFilterJoinPayload: ResolverTypeWrapper<Omit<UpdateTemplateFilterJoinPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateTemplateInput: UpdateTemplateInput;
  UpdateTemplatePayload: ResolverTypeWrapper<Omit<UpdateTemplatePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateTemplatePermissionByNodeIdInput: UpdateTemplatePermissionByNodeIdInput;
  UpdateTemplatePermissionInput: UpdateTemplatePermissionInput;
  UpdateTemplatePermissionPayload: ResolverTypeWrapper<Omit<UpdateTemplatePermissionPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateTemplateSectionByNodeIdInput: UpdateTemplateSectionByNodeIdInput;
  UpdateTemplateSectionByTemplateIdAndCodeInput: UpdateTemplateSectionByTemplateIdAndCodeInput;
  UpdateTemplateSectionInput: UpdateTemplateSectionInput;
  UpdateTemplateSectionPayload: ResolverTypeWrapper<Omit<UpdateTemplateSectionPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateTemplateStageByNodeIdInput: UpdateTemplateStageByNodeIdInput;
  UpdateTemplateStageInput: UpdateTemplateStageInput;
  UpdateTemplateStagePayload: ResolverTypeWrapper<Omit<UpdateTemplateStagePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateTemplateStageReviewLevelByNodeIdInput: UpdateTemplateStageReviewLevelByNodeIdInput;
  UpdateTemplateStageReviewLevelInput: UpdateTemplateStageReviewLevelInput;
  UpdateTemplateStageReviewLevelPayload: ResolverTypeWrapper<Omit<UpdateTemplateStageReviewLevelPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateTriggerQueueByNodeIdInput: UpdateTriggerQueueByNodeIdInput;
  UpdateTriggerQueueInput: UpdateTriggerQueueInput;
  UpdateTriggerQueuePayload: ResolverTypeWrapper<Omit<UpdateTriggerQueuePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateTriggerScheduleByNodeIdInput: UpdateTriggerScheduleByNodeIdInput;
  UpdateTriggerScheduleInput: UpdateTriggerScheduleInput;
  UpdateTriggerSchedulePayload: ResolverTypeWrapper<Omit<UpdateTriggerSchedulePayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateUserOrganisationByNodeIdInput: UpdateUserOrganisationByNodeIdInput;
  UpdateUserOrganisationByUserIdAndOrganisationIdInput: UpdateUserOrganisationByUserIdAndOrganisationIdInput;
  UpdateUserOrganisationInput: UpdateUserOrganisationInput;
  UpdateUserOrganisationPayload: ResolverTypeWrapper<Omit<UpdateUserOrganisationPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  UpdateVerificationByNodeIdInput: UpdateVerificationByNodeIdInput;
  UpdateVerificationByUniqueIdInput: UpdateVerificationByUniqueIdInput;
  UpdateVerificationInput: UpdateVerificationInput;
  UpdateVerificationPayload: ResolverTypeWrapper<Omit<UpdateVerificationPayload, 'query'> & { query?: Maybe<ResolversTypes['Query']> }>;
  User: ResolverTypeWrapper<User>;
  UserCondition: UserCondition;
  UserFilter: UserFilter;
  UserInput: UserInput;
  UserList: ResolverTypeWrapper<UserList>;
  UserListCondition: UserListCondition;
  UserListFilter: UserListFilter;
  UserListInput: UserListInput;
  UserListOnApplicationForFakePublicApplicationForeignKey0NodeIdUpdate: UserListOnApplicationForFakePublicApplicationForeignKey0NodeIdUpdate;
  UserListOnApplicationNoteForFakePublicApplicationNoteForeignKey0NodeIdUpdate: UserListOnApplicationNoteForFakePublicApplicationNoteForeignKey0NodeIdUpdate;
  UserListOnPermissionJoinForFakePublicPermissionJoinForeignKey0NodeIdUpdate: UserListOnPermissionJoinForFakePublicPermissionJoinForeignKey0NodeIdUpdate;
  UserListOnReviewAssignmentAssignerJoinForFakePublicReviewAssignmentAssignerJoinForeignKey0NodeIdUpdate: UserListOnReviewAssignmentAssignerJoinForFakePublicReviewAssignmentAssignerJoinForeignKey0NodeIdUpdate;
  UserListOnReviewAssignmentForFakePublicReviewAssignmentForeignKey0NodeIdUpdate: UserListOnReviewAssignmentForFakePublicReviewAssignmentForeignKey0NodeIdUpdate;
  UserListOnReviewAssignmentForFakePublicReviewAssignmentForeignKey1NodeIdUpdate: UserListOnReviewAssignmentForFakePublicReviewAssignmentForeignKey1NodeIdUpdate;
  UserListOnReviewForFakePublicReviewForeignKey0NodeIdUpdate: UserListOnReviewForFakePublicReviewForeignKey0NodeIdUpdate;
  UserListToManyApplicationFilter: UserListToManyApplicationFilter;
  UserListToManyApplicationNoteFilter: UserListToManyApplicationNoteFilter;
  UserListToManyPermissionJoinFilter: UserListToManyPermissionJoinFilter;
  UserListToManyReviewAssignmentAssignerJoinFilter: UserListToManyReviewAssignmentAssignerJoinFilter;
  UserListToManyReviewAssignmentFilter: UserListToManyReviewAssignmentFilter;
  UserListToManyReviewFilter: UserListToManyReviewFilter;
  UserListsConnection: ResolverTypeWrapper<UserListsConnection>;
  UserListsEdge: ResolverTypeWrapper<UserListsEdge>;
  UserListsOrderBy: UserListsOrderBy;
  UserOnUserOrganisationForFakePublicUserOrganisationForeignKey0NodeIdUpdate: UserOnUserOrganisationForFakePublicUserOrganisationForeignKey0NodeIdUpdate;
  UserOrgJoin: ResolverTypeWrapper<UserOrgJoin>;
  UserOrgJoinCondition: UserOrgJoinCondition;
  UserOrgJoinFilter: UserOrgJoinFilter;
  UserOrgJoinsConnection: ResolverTypeWrapper<UserOrgJoinsConnection>;
  UserOrgJoinsEdge: ResolverTypeWrapper<UserOrgJoinsEdge>;
  UserOrgJoinsOrderBy: UserOrgJoinsOrderBy;
  UserOrganisation: ResolverTypeWrapper<UserOrganisation>;
  UserOrganisationCondition: UserOrganisationCondition;
  UserOrganisationFilter: UserOrganisationFilter;
  UserOrganisationInput: UserOrganisationInput;
  UserOrganisationNodeIdConnect: UserOrganisationNodeIdConnect;
  UserOrganisationNodeIdDelete: UserOrganisationNodeIdDelete;
  UserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0UsingUserOrganisationPkeyUpdate: UserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0UsingUserOrganisationPkeyUpdate;
  UserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0UsingUserOrganisationUserIdOrganisationIdKeyUpdate: UserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0UsingUserOrganisationUserIdOrganisationIdKeyUpdate;
  UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyNodeIdUpdate: UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyNodeIdUpdate;
  UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingUserOrganisationPkeyUpdate: UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingUserOrganisationPkeyUpdate;
  UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingUserOrganisationUserIdOrganisationIdKeyUpdate: UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingUserOrganisationUserIdOrganisationIdKeyUpdate;
  UserOrganisationOrganisationIdFkeyInput: UserOrganisationOrganisationIdFkeyInput;
  UserOrganisationOrganisationIdFkeyInverseInput: UserOrganisationOrganisationIdFkeyInverseInput;
  UserOrganisationOrganisationIdFkeyOrganisationCreateInput: UserOrganisationOrganisationIdFkeyOrganisationCreateInput;
  UserOrganisationOrganisationIdFkeyUserOrganisationCreateInput: UserOrganisationOrganisationIdFkeyUserOrganisationCreateInput;
  UserOrganisationPatch: UserOrganisationPatch;
  UserOrganisationUserOrganisationPkeyConnect: UserOrganisationUserOrganisationPkeyConnect;
  UserOrganisationUserOrganisationPkeyDelete: UserOrganisationUserOrganisationPkeyDelete;
  UserOrganisationUserOrganisationUserIdOrganisationIdKeyConnect: UserOrganisationUserOrganisationUserIdOrganisationIdKeyConnect;
  UserOrganisationUserOrganisationUserIdOrganisationIdKeyDelete: UserOrganisationUserOrganisationUserIdOrganisationIdKeyDelete;
  UserOrganisationsConnection: ResolverTypeWrapper<UserOrganisationsConnection>;
  UserOrganisationsEdge: ResolverTypeWrapper<UserOrganisationsEdge>;
  UserOrganisationsOrderBy: UserOrganisationsOrderBy;
  UserToManyUserOrganisationFilter: UserToManyUserOrganisationFilter;
  UsersConnection: ResolverTypeWrapper<UsersConnection>;
  UsersEdge: ResolverTypeWrapper<UsersEdge>;
  UsersOrderBy: UsersOrderBy;
  Verification: ResolverTypeWrapper<Verification>;
  VerificationApplicationIdFkeyApplicationCreateInput: VerificationApplicationIdFkeyApplicationCreateInput;
  VerificationApplicationIdFkeyInput: VerificationApplicationIdFkeyInput;
  VerificationApplicationIdFkeyInverseInput: VerificationApplicationIdFkeyInverseInput;
  VerificationApplicationIdFkeyVerificationCreateInput: VerificationApplicationIdFkeyVerificationCreateInput;
  VerificationCondition: VerificationCondition;
  VerificationFilter: VerificationFilter;
  VerificationInput: VerificationInput;
  VerificationNodeIdConnect: VerificationNodeIdConnect;
  VerificationNodeIdDelete: VerificationNodeIdDelete;
  VerificationOnVerificationForVerificationApplicationIdFkeyNodeIdUpdate: VerificationOnVerificationForVerificationApplicationIdFkeyNodeIdUpdate;
  VerificationOnVerificationForVerificationApplicationIdFkeyUsingVerificationPkeyUpdate: VerificationOnVerificationForVerificationApplicationIdFkeyUsingVerificationPkeyUpdate;
  VerificationOnVerificationForVerificationApplicationIdFkeyUsingVerificationUniqueIdKeyUpdate: VerificationOnVerificationForVerificationApplicationIdFkeyUsingVerificationUniqueIdKeyUpdate;
  VerificationPatch: VerificationPatch;
  VerificationVerificationPkeyConnect: VerificationVerificationPkeyConnect;
  VerificationVerificationPkeyDelete: VerificationVerificationPkeyDelete;
  VerificationVerificationUniqueIdKeyConnect: VerificationVerificationUniqueIdKeyConnect;
  VerificationVerificationUniqueIdKeyDelete: VerificationVerificationUniqueIdKeyDelete;
  VerificationsConnection: ResolverTypeWrapper<VerificationsConnection>;
  VerificationsEdge: ResolverTypeWrapper<VerificationsEdge>;
  VerificationsOrderBy: VerificationsOrderBy;
  YesOrNo: ResolverTypeWrapper<Scalars['YesOrNo']['output']>;
  YesOrNoFilter: YesOrNoFilter;
  updateActionQueueOnActionQueueForActionQueueApplicationIdFkeyPatch: UpdateActionQueueOnActionQueueForActionQueueApplicationIdFkeyPatch;
  updateActionQueueOnActionQueueForActionQueueTemplateIdFkeyPatch: UpdateActionQueueOnActionQueueForActionQueueTemplateIdFkeyPatch;
  updateActionQueueOnActionQueueForActionQueueTriggerEventFkeyPatch: UpdateActionQueueOnActionQueueForActionQueueTriggerEventFkeyPatch;
  updateActivityLogOnActivityLogForActivityLogApplicationIdFkeyPatch: UpdateActivityLogOnActivityLogForActivityLogApplicationIdFkeyPatch;
  updateApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch: UpdateApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch;
  updateApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyPatch: UpdateApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyPatch;
  updateApplicationNoteOnApplicationNoteForFakePublicApplicationNoteForeignKey0Patch: UpdateApplicationNoteOnApplicationNoteForFakePublicApplicationNoteForeignKey0Patch;
  updateApplicationNoteOnFileForFileApplicationNoteIdFkeyPatch: UpdateApplicationNoteOnFileForFileApplicationNoteIdFkeyPatch;
  updateApplicationOnActionQueueForActionQueueApplicationIdFkeyPatch: UpdateApplicationOnActionQueueForActionQueueApplicationIdFkeyPatch;
  updateApplicationOnActivityLogForActivityLogApplicationIdFkeyPatch: UpdateApplicationOnActivityLogForActivityLogApplicationIdFkeyPatch;
  updateApplicationOnApplicationForApplicationOrgIdFkeyPatch: UpdateApplicationOnApplicationForApplicationOrgIdFkeyPatch;
  updateApplicationOnApplicationForApplicationTemplateIdFkeyPatch: UpdateApplicationOnApplicationForApplicationTemplateIdFkeyPatch;
  updateApplicationOnApplicationForFakePublicApplicationForeignKey0Patch: UpdateApplicationOnApplicationForFakePublicApplicationForeignKey0Patch;
  updateApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch: UpdateApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch;
  updateApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch: UpdateApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch;
  updateApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyPatch: UpdateApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyPatch;
  updateApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch: UpdateApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch;
  updateApplicationOnDataChangelogForDataChangelogApplicationIdFkeyPatch: UpdateApplicationOnDataChangelogForDataChangelogApplicationIdFkeyPatch;
  updateApplicationOnFileForFileApplicationSerialFkeyPatch: UpdateApplicationOnFileForFileApplicationSerialFkeyPatch;
  updateApplicationOnNotificationForNotificationApplicationIdFkeyPatch: UpdateApplicationOnNotificationForNotificationApplicationIdFkeyPatch;
  updateApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch: UpdateApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch;
  updateApplicationOnReviewForReviewApplicationIdFkeyPatch: UpdateApplicationOnReviewForReviewApplicationIdFkeyPatch;
  updateApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyPatch: UpdateApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyPatch;
  updateApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch: UpdateApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch;
  updateApplicationOnVerificationForVerificationApplicationIdFkeyPatch: UpdateApplicationOnVerificationForVerificationApplicationIdFkeyPatch;
  updateApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch: UpdateApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch;
  updateApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyPatch: UpdateApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyPatch;
  updateApplicationResponseOnFileForFileApplicationResponseIdFkeyPatch: UpdateApplicationResponseOnFileForFileApplicationResponseIdFkeyPatch;
  updateApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch: UpdateApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch;
  updateApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyPatch: UpdateApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyPatch;
  updateApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch: UpdateApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch;
  updateApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyPatch: UpdateApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyPatch;
  updateApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch: UpdateApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch;
  updateApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch: UpdateApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch;
  updateDataChangelogOnDataChangelogForDataChangelogApplicationIdFkeyPatch: UpdateDataChangelogOnDataChangelogForDataChangelogApplicationIdFkeyPatch;
  updateDataChangelogOnDataChangelogForDataChangelogOrgIdFkeyPatch: UpdateDataChangelogOnDataChangelogForDataChangelogOrgIdFkeyPatch;
  updateFileOnFileForFileApplicationNoteIdFkeyPatch: UpdateFileOnFileForFileApplicationNoteIdFkeyPatch;
  updateFileOnFileForFileApplicationResponseIdFkeyPatch: UpdateFileOnFileForFileApplicationResponseIdFkeyPatch;
  updateFileOnFileForFileApplicationSerialFkeyPatch: UpdateFileOnFileForFileApplicationSerialFkeyPatch;
  updateFileOnFileForFileTemplateIdFkeyPatch: UpdateFileOnFileForFileTemplateIdFkeyPatch;
  updateFilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyPatch: UpdateFilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyPatch;
  updateNotificationOnNotificationForNotificationApplicationIdFkeyPatch: UpdateNotificationOnNotificationForNotificationApplicationIdFkeyPatch;
  updateNotificationOnNotificationForNotificationReviewIdFkeyPatch: UpdateNotificationOnNotificationForNotificationReviewIdFkeyPatch;
  updateOrganisationOnApplicationForApplicationOrgIdFkeyPatch: UpdateOrganisationOnApplicationForApplicationOrgIdFkeyPatch;
  updateOrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyPatch: UpdateOrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyPatch;
  updateOrganisationOnDataChangelogForDataChangelogOrgIdFkeyPatch: UpdateOrganisationOnDataChangelogForDataChangelogOrgIdFkeyPatch;
  updateOrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch: UpdateOrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch;
  updateOrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch: UpdateOrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch;
  updateOrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch: UpdateOrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch;
  updateOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch: UpdateOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch;
  updatePermissionJoinOnPermissionJoinForFakePublicPermissionJoinForeignKey0Patch: UpdatePermissionJoinOnPermissionJoinForFakePublicPermissionJoinForeignKey0Patch;
  updatePermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch: UpdatePermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch;
  updatePermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch: UpdatePermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch;
  updatePermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch: UpdatePermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch;
  updatePermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch: UpdatePermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch;
  updatePermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyPatch: UpdatePermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyPatch;
  updatePermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch: UpdatePermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch;
  updateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForFakePublicReviewAssignmentAssignerJoinForeignKey0Patch: UpdateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForFakePublicReviewAssignmentAssignerJoinForeignKey0Patch;
  updateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch: UpdateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch;
  updateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyPatch: UpdateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyPatch;
  updateReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyPatch: UpdateReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyPatch;
  updateReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey0Patch: UpdateReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey0Patch;
  updateReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey1Patch: UpdateReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey1Patch;
  updateReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch;
  updateReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyPatch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyPatch;
  updateReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch;
  updateReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyPatch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyPatch;
  updateReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyPatch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyPatch;
  updateReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyPatch: UpdateReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyPatch;
  updateReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyPatch: UpdateReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyPatch;
  updateReviewOnNotificationForNotificationReviewIdFkeyPatch: UpdateReviewOnNotificationForNotificationReviewIdFkeyPatch;
  updateReviewOnReviewDecisionForReviewDecisionReviewIdFkeyPatch: UpdateReviewOnReviewDecisionForReviewDecisionReviewIdFkeyPatch;
  updateReviewOnReviewForFakePublicReviewForeignKey0Patch: UpdateReviewOnReviewForFakePublicReviewForeignKey0Patch;
  updateReviewOnReviewForReviewApplicationIdFkeyPatch: UpdateReviewOnReviewForReviewApplicationIdFkeyPatch;
  updateReviewOnReviewForReviewReviewAssignmentIdFkeyPatch: UpdateReviewOnReviewForReviewReviewAssignmentIdFkeyPatch;
  updateReviewOnReviewResponseForReviewResponseReviewIdFkeyPatch: UpdateReviewOnReviewResponseForReviewResponseReviewIdFkeyPatch;
  updateReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyPatch: UpdateReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyPatch;
  updateReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch: UpdateReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch;
  updateReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyPatch: UpdateReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyPatch;
  updateReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyPatch: UpdateReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyPatch;
  updateReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyPatch: UpdateReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyPatch;
  updateReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyPatch: UpdateReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyPatch;
  updateReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyPatch: UpdateReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyPatch;
  updateTemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyPatch: UpdateTemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyPatch;
  updateTemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyPatch: UpdateTemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyPatch;
  updateTemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyPatch: UpdateTemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyPatch;
  updateTemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyPatch: UpdateTemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyPatch;
  updateTemplateElementOnTemplateElementForTemplateElementSectionIdFkeyPatch: UpdateTemplateElementOnTemplateElementForTemplateElementSectionIdFkeyPatch;
  updateTemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyPatch: UpdateTemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyPatch;
  updateTemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyPatch: UpdateTemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyPatch;
  updateTemplateOnActionQueueForActionQueueTemplateIdFkeyPatch: UpdateTemplateOnActionQueueForActionQueueTemplateIdFkeyPatch;
  updateTemplateOnApplicationForApplicationTemplateIdFkeyPatch: UpdateTemplateOnApplicationForApplicationTemplateIdFkeyPatch;
  updateTemplateOnFileForFileTemplateIdFkeyPatch: UpdateTemplateOnFileForFileTemplateIdFkeyPatch;
  updateTemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyPatch: UpdateTemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyPatch;
  updateTemplateOnTemplateActionForTemplateActionTemplateIdFkeyPatch: UpdateTemplateOnTemplateActionForTemplateActionTemplateIdFkeyPatch;
  updateTemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyPatch: UpdateTemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyPatch;
  updateTemplateOnTemplateForTemplateTemplateCategoryIdFkeyPatch: UpdateTemplateOnTemplateForTemplateTemplateCategoryIdFkeyPatch;
  updateTemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch: UpdateTemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch;
  updateTemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch: UpdateTemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch;
  updateTemplateOnTemplateStageForTemplateStageTemplateIdFkeyPatch: UpdateTemplateOnTemplateStageForTemplateStageTemplateIdFkeyPatch;
  updateTemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyPatch: UpdateTemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyPatch;
  updateTemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyPatch: UpdateTemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyPatch;
  updateTemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch: UpdateTemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch;
  updateTemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyPatch: UpdateTemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyPatch;
  updateTemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch: UpdateTemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch;
  updateTemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyPatch: UpdateTemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyPatch;
  updateTemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyPatch: UpdateTemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyPatch;
  updateTemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyPatch: UpdateTemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyPatch;
  updateTemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyPatch: UpdateTemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyPatch;
  updateTemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyPatch: UpdateTemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyPatch;
  updateTemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyPatch: UpdateTemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyPatch;
  updateTriggerQueueOnActionQueueForActionQueueTriggerEventFkeyPatch: UpdateTriggerQueueOnActionQueueForActionQueueTriggerEventFkeyPatch;
  updateTriggerQueueOnTriggerQueueForTriggerQueueApplicationIdFkeyPatch: UpdateTriggerQueueOnTriggerQueueForTriggerQueueApplicationIdFkeyPatch;
  updateTriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch: UpdateTriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch;
  updateTriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyPatch: UpdateTriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyPatch;
  updateUserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0Patch: UpdateUserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0Patch;
  updateUserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch: UpdateUserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch;
  updateVerificationOnVerificationForVerificationApplicationIdFkeyPatch: UpdateVerificationOnVerificationForVerificationApplicationIdFkeyPatch;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  ActionPlugin: ActionPlugin;
  ActionPluginCondition: ActionPluginCondition;
  ActionPluginFilter: ActionPluginFilter;
  ActionPluginInput: ActionPluginInput;
  ActionPluginPatch: ActionPluginPatch;
  ActionPluginsConnection: ActionPluginsConnection;
  ActionPluginsEdge: ActionPluginsEdge;
  ActionQueue: ActionQueue;
  ActionQueueActionQueuePkeyConnect: ActionQueueActionQueuePkeyConnect;
  ActionQueueActionQueuePkeyDelete: ActionQueueActionQueuePkeyDelete;
  ActionQueueApplicationIdFkeyActionQueueCreateInput: ActionQueueApplicationIdFkeyActionQueueCreateInput;
  ActionQueueApplicationIdFkeyApplicationCreateInput: ActionQueueApplicationIdFkeyApplicationCreateInput;
  ActionQueueApplicationIdFkeyInput: ActionQueueApplicationIdFkeyInput;
  ActionQueueApplicationIdFkeyInverseInput: ActionQueueApplicationIdFkeyInverseInput;
  ActionQueueCondition: ActionQueueCondition;
  ActionQueueFilter: ActionQueueFilter;
  ActionQueueInput: ActionQueueInput;
  ActionQueueNodeIdConnect: ActionQueueNodeIdConnect;
  ActionQueueNodeIdDelete: ActionQueueNodeIdDelete;
  ActionQueueOnActionQueueForActionQueueApplicationIdFkeyNodeIdUpdate: ActionQueueOnActionQueueForActionQueueApplicationIdFkeyNodeIdUpdate;
  ActionQueueOnActionQueueForActionQueueApplicationIdFkeyUsingActionQueuePkeyUpdate: ActionQueueOnActionQueueForActionQueueApplicationIdFkeyUsingActionQueuePkeyUpdate;
  ActionQueueOnActionQueueForActionQueueTemplateIdFkeyNodeIdUpdate: ActionQueueOnActionQueueForActionQueueTemplateIdFkeyNodeIdUpdate;
  ActionQueueOnActionQueueForActionQueueTemplateIdFkeyUsingActionQueuePkeyUpdate: ActionQueueOnActionQueueForActionQueueTemplateIdFkeyUsingActionQueuePkeyUpdate;
  ActionQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate: ActionQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate;
  ActionQueueOnActionQueueForActionQueueTriggerEventFkeyUsingActionQueuePkeyUpdate: ActionQueueOnActionQueueForActionQueueTriggerEventFkeyUsingActionQueuePkeyUpdate;
  ActionQueuePatch: ActionQueuePatch;
  ActionQueueStatusFilter: ActionQueueStatusFilter;
  ActionQueueTemplateIdFkeyActionQueueCreateInput: ActionQueueTemplateIdFkeyActionQueueCreateInput;
  ActionQueueTemplateIdFkeyInput: ActionQueueTemplateIdFkeyInput;
  ActionQueueTemplateIdFkeyInverseInput: ActionQueueTemplateIdFkeyInverseInput;
  ActionQueueTemplateIdFkeyTemplateCreateInput: ActionQueueTemplateIdFkeyTemplateCreateInput;
  ActionQueueTriggerEventFkeyActionQueueCreateInput: ActionQueueTriggerEventFkeyActionQueueCreateInput;
  ActionQueueTriggerEventFkeyInput: ActionQueueTriggerEventFkeyInput;
  ActionQueueTriggerEventFkeyInverseInput: ActionQueueTriggerEventFkeyInverseInput;
  ActionQueueTriggerEventFkeyTriggerQueueCreateInput: ActionQueueTriggerEventFkeyTriggerQueueCreateInput;
  ActionQueuesConnection: ActionQueuesConnection;
  ActionQueuesEdge: ActionQueuesEdge;
  ActivityLog: ActivityLog;
  ActivityLogActivityLogPkeyConnect: ActivityLogActivityLogPkeyConnect;
  ActivityLogActivityLogPkeyDelete: ActivityLogActivityLogPkeyDelete;
  ActivityLogApplicationIdFkeyActivityLogCreateInput: ActivityLogApplicationIdFkeyActivityLogCreateInput;
  ActivityLogApplicationIdFkeyApplicationCreateInput: ActivityLogApplicationIdFkeyApplicationCreateInput;
  ActivityLogApplicationIdFkeyInput: ActivityLogApplicationIdFkeyInput;
  ActivityLogApplicationIdFkeyInverseInput: ActivityLogApplicationIdFkeyInverseInput;
  ActivityLogCondition: ActivityLogCondition;
  ActivityLogFilter: ActivityLogFilter;
  ActivityLogInput: ActivityLogInput;
  ActivityLogNodeIdConnect: ActivityLogNodeIdConnect;
  ActivityLogNodeIdDelete: ActivityLogNodeIdDelete;
  ActivityLogOnActivityLogForActivityLogApplicationIdFkeyNodeIdUpdate: ActivityLogOnActivityLogForActivityLogApplicationIdFkeyNodeIdUpdate;
  ActivityLogOnActivityLogForActivityLogApplicationIdFkeyUsingActivityLogPkeyUpdate: ActivityLogOnActivityLogForActivityLogApplicationIdFkeyUsingActivityLogPkeyUpdate;
  ActivityLogPatch: ActivityLogPatch;
  ActivityLogsConnection: ActivityLogsConnection;
  ActivityLogsEdge: ActivityLogsEdge;
  AllowedSelfAssignableSectionsShape: AllowedSelfAssignableSectionsShape;
  AllowedSelfAssignableSectionsShapeCondition: AllowedSelfAssignableSectionsShapeCondition;
  AllowedSelfAssignableSectionsShapeFilter: AllowedSelfAssignableSectionsShapeFilter;
  AllowedSelfAssignableSectionsShapeInput: AllowedSelfAssignableSectionsShapeInput;
  AllowedSelfAssignableSectionsShapesConnection: AllowedSelfAssignableSectionsShapesConnection;
  AllowedSelfAssignableSectionsShapesEdge: AllowedSelfAssignableSectionsShapesEdge;
  Application: Application;
  ApplicationApplicationOutcomeRegistrationKeyConnect: ApplicationApplicationOutcomeRegistrationKeyConnect;
  ApplicationApplicationOutcomeRegistrationKeyDelete: ApplicationApplicationOutcomeRegistrationKeyDelete;
  ApplicationApplicationPkeyConnect: ApplicationApplicationPkeyConnect;
  ApplicationApplicationPkeyDelete: ApplicationApplicationPkeyDelete;
  ApplicationApplicationSerialKeyConnect: ApplicationApplicationSerialKeyConnect;
  ApplicationApplicationSerialKeyDelete: ApplicationApplicationSerialKeyDelete;
  ApplicationCondition: ApplicationCondition;
  ApplicationFilter: ApplicationFilter;
  ApplicationInput: ApplicationInput;
  ApplicationListFilterApplicantConnection: ApplicationListFilterApplicantConnection;
  ApplicationListFilterApplicantEdge: ApplicationListFilterApplicantEdge;
  ApplicationListFilterAssignerConnection: ApplicationListFilterAssignerConnection;
  ApplicationListFilterAssignerEdge: ApplicationListFilterAssignerEdge;
  ApplicationListFilterOrganisationConnection: ApplicationListFilterOrganisationConnection;
  ApplicationListFilterOrganisationEdge: ApplicationListFilterOrganisationEdge;
  ApplicationListFilterReviewerConnection: ApplicationListFilterReviewerConnection;
  ApplicationListFilterReviewerEdge: ApplicationListFilterReviewerEdge;
  ApplicationListFilterStageConnection: ApplicationListFilterStageConnection;
  ApplicationListFilterStageEdge: ApplicationListFilterStageEdge;
  ApplicationListShape: ApplicationListShape;
  ApplicationListShapeCondition: ApplicationListShapeCondition;
  ApplicationListShapeFilter: ApplicationListShapeFilter;
  ApplicationListShapeInput: ApplicationListShapeInput;
  ApplicationListShapesConnection: ApplicationListShapesConnection;
  ApplicationListShapesEdge: ApplicationListShapesEdge;
  ApplicationNodeIdConnect: ApplicationNodeIdConnect;
  ApplicationNodeIdDelete: ApplicationNodeIdDelete;
  ApplicationNote: ApplicationNote;
  ApplicationNoteApplicationIdFkeyApplicationCreateInput: ApplicationNoteApplicationIdFkeyApplicationCreateInput;
  ApplicationNoteApplicationIdFkeyApplicationNoteCreateInput: ApplicationNoteApplicationIdFkeyApplicationNoteCreateInput;
  ApplicationNoteApplicationIdFkeyInput: ApplicationNoteApplicationIdFkeyInput;
  ApplicationNoteApplicationIdFkeyInverseInput: ApplicationNoteApplicationIdFkeyInverseInput;
  ApplicationNoteApplicationNotePkeyConnect: ApplicationNoteApplicationNotePkeyConnect;
  ApplicationNoteApplicationNotePkeyDelete: ApplicationNoteApplicationNotePkeyDelete;
  ApplicationNoteCondition: ApplicationNoteCondition;
  ApplicationNoteFilter: ApplicationNoteFilter;
  ApplicationNoteInput: ApplicationNoteInput;
  ApplicationNoteNodeIdConnect: ApplicationNoteNodeIdConnect;
  ApplicationNoteNodeIdDelete: ApplicationNoteNodeIdDelete;
  ApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyNodeIdUpdate: ApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyNodeIdUpdate;
  ApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationNotePkeyUpdate: ApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationNotePkeyUpdate;
  ApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyNodeIdUpdate: ApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyNodeIdUpdate;
  ApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyUsingApplicationNotePkeyUpdate: ApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyUsingApplicationNotePkeyUpdate;
  ApplicationNoteOnApplicationNoteForFakePublicApplicationNoteForeignKey0UsingApplicationNotePkeyUpdate: ApplicationNoteOnApplicationNoteForFakePublicApplicationNoteForeignKey0UsingApplicationNotePkeyUpdate;
  ApplicationNoteOnFileForFileApplicationNoteIdFkeyNodeIdUpdate: ApplicationNoteOnFileForFileApplicationNoteIdFkeyNodeIdUpdate;
  ApplicationNoteOnFileForFileApplicationNoteIdFkeyUsingApplicationNotePkeyUpdate: ApplicationNoteOnFileForFileApplicationNoteIdFkeyUsingApplicationNotePkeyUpdate;
  ApplicationNoteOrgIdFkeyApplicationNoteCreateInput: ApplicationNoteOrgIdFkeyApplicationNoteCreateInput;
  ApplicationNoteOrgIdFkeyInput: ApplicationNoteOrgIdFkeyInput;
  ApplicationNoteOrgIdFkeyInverseInput: ApplicationNoteOrgIdFkeyInverseInput;
  ApplicationNoteOrgIdFkeyOrganisationCreateInput: ApplicationNoteOrgIdFkeyOrganisationCreateInput;
  ApplicationNotePatch: ApplicationNotePatch;
  ApplicationNoteToManyFileFilter: ApplicationNoteToManyFileFilter;
  ApplicationNotesConnection: ApplicationNotesConnection;
  ApplicationNotesEdge: ApplicationNotesEdge;
  ApplicationOnActionQueueForActionQueueApplicationIdFkeyNodeIdUpdate: ApplicationOnActionQueueForActionQueueApplicationIdFkeyNodeIdUpdate;
  ApplicationOnActionQueueForActionQueueApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnActionQueueForActionQueueApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnActionQueueForActionQueueApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnActionQueueForActionQueueApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnActionQueueForActionQueueApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnActionQueueForActionQueueApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnActivityLogForActivityLogApplicationIdFkeyNodeIdUpdate: ApplicationOnActivityLogForActivityLogApplicationIdFkeyNodeIdUpdate;
  ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnActivityLogForActivityLogApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnApplicationForApplicationOrgIdFkeyNodeIdUpdate: ApplicationOnApplicationForApplicationOrgIdFkeyNodeIdUpdate;
  ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationPkeyUpdate: ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnApplicationForApplicationOrgIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate: ApplicationOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate;
  ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationPkeyUpdate: ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnApplicationForApplicationTemplateIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnApplicationForFakePublicApplicationForeignKey0UsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnApplicationForFakePublicApplicationForeignKey0UsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnApplicationForFakePublicApplicationForeignKey0UsingApplicationPkeyUpdate: ApplicationOnApplicationForFakePublicApplicationForeignKey0UsingApplicationPkeyUpdate;
  ApplicationOnApplicationForFakePublicApplicationForeignKey0UsingApplicationSerialKeyUpdate: ApplicationOnApplicationForFakePublicApplicationForeignKey0UsingApplicationSerialKeyUpdate;
  ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyNodeIdUpdate: ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyNodeIdUpdate;
  ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate: ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate;
  ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyNodeIdUpdate: ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyNodeIdUpdate;
  ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate: ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate;
  ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyNodeIdUpdate: ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyNodeIdUpdate;
  ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnDataChangelogForDataChangelogApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnFileForFileApplicationSerialFkeyNodeIdUpdate: ApplicationOnFileForFileApplicationSerialFkeyNodeIdUpdate;
  ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationPkeyUpdate: ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationPkeyUpdate;
  ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationSerialKeyUpdate: ApplicationOnFileForFileApplicationSerialFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate: ApplicationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate;
  ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnNotificationForNotificationApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyNodeIdUpdate: ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyNodeIdUpdate;
  ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnReviewForReviewApplicationIdFkeyNodeIdUpdate: ApplicationOnReviewForReviewApplicationIdFkeyNodeIdUpdate;
  ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnReviewForReviewApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyNodeIdUpdate: ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyNodeIdUpdate;
  ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyNodeIdUpdate: ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyNodeIdUpdate;
  ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOnVerificationForVerificationApplicationIdFkeyNodeIdUpdate: ApplicationOnVerificationForVerificationApplicationIdFkeyNodeIdUpdate;
  ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate: ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationOutcomeRegistrationKeyUpdate;
  ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationPkeyUpdate: ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationPkeyUpdate;
  ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationSerialKeyUpdate: ApplicationOnVerificationForVerificationApplicationIdFkeyUsingApplicationSerialKeyUpdate;
  ApplicationOrgIdFkeyApplicationCreateInput: ApplicationOrgIdFkeyApplicationCreateInput;
  ApplicationOrgIdFkeyInput: ApplicationOrgIdFkeyInput;
  ApplicationOrgIdFkeyInverseInput: ApplicationOrgIdFkeyInverseInput;
  ApplicationOrgIdFkeyOrganisationCreateInput: ApplicationOrgIdFkeyOrganisationCreateInput;
  ApplicationOutcomeFilter: ApplicationOutcomeFilter;
  ApplicationPatch: ApplicationPatch;
  ApplicationResponse: ApplicationResponse;
  ApplicationResponseApplicationIdFkeyApplicationCreateInput: ApplicationResponseApplicationIdFkeyApplicationCreateInput;
  ApplicationResponseApplicationIdFkeyApplicationResponseCreateInput: ApplicationResponseApplicationIdFkeyApplicationResponseCreateInput;
  ApplicationResponseApplicationIdFkeyInput: ApplicationResponseApplicationIdFkeyInput;
  ApplicationResponseApplicationIdFkeyInverseInput: ApplicationResponseApplicationIdFkeyInverseInput;
  ApplicationResponseApplicationResponsePkeyConnect: ApplicationResponseApplicationResponsePkeyConnect;
  ApplicationResponseApplicationResponsePkeyDelete: ApplicationResponseApplicationResponsePkeyDelete;
  ApplicationResponseCondition: ApplicationResponseCondition;
  ApplicationResponseFilter: ApplicationResponseFilter;
  ApplicationResponseInput: ApplicationResponseInput;
  ApplicationResponseNodeIdConnect: ApplicationResponseNodeIdConnect;
  ApplicationResponseNodeIdDelete: ApplicationResponseNodeIdDelete;
  ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate: ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyNodeIdUpdate;
  ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationResponsePkeyUpdate: ApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyUsingApplicationResponsePkeyUpdate;
  ApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyNodeIdUpdate: ApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyNodeIdUpdate;
  ApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingApplicationResponsePkeyUpdate: ApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingApplicationResponsePkeyUpdate;
  ApplicationResponseOnFileForFileApplicationResponseIdFkeyNodeIdUpdate: ApplicationResponseOnFileForFileApplicationResponseIdFkeyNodeIdUpdate;
  ApplicationResponseOnFileForFileApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate: ApplicationResponseOnFileForFileApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate;
  ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate: ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate;
  ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate: ApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingApplicationResponsePkeyUpdate;
  ApplicationResponsePatch: ApplicationResponsePatch;
  ApplicationResponseStatusFilter: ApplicationResponseStatusFilter;
  ApplicationResponseTemplateElementIdFkeyApplicationResponseCreateInput: ApplicationResponseTemplateElementIdFkeyApplicationResponseCreateInput;
  ApplicationResponseTemplateElementIdFkeyInput: ApplicationResponseTemplateElementIdFkeyInput;
  ApplicationResponseTemplateElementIdFkeyInverseInput: ApplicationResponseTemplateElementIdFkeyInverseInput;
  ApplicationResponseTemplateElementIdFkeyTemplateElementCreateInput: ApplicationResponseTemplateElementIdFkeyTemplateElementCreateInput;
  ApplicationResponseToManyFileFilter: ApplicationResponseToManyFileFilter;
  ApplicationResponseToManyReviewResponseFilter: ApplicationResponseToManyReviewResponseFilter;
  ApplicationResponsesConnection: ApplicationResponsesConnection;
  ApplicationResponsesEdge: ApplicationResponsesEdge;
  ApplicationReviewerAction: ApplicationReviewerAction;
  ApplicationReviewerActionApplicationIdFkeyApplicationCreateInput: ApplicationReviewerActionApplicationIdFkeyApplicationCreateInput;
  ApplicationReviewerActionApplicationIdFkeyApplicationReviewerActionCreateInput: ApplicationReviewerActionApplicationIdFkeyApplicationReviewerActionCreateInput;
  ApplicationReviewerActionApplicationIdFkeyInput: ApplicationReviewerActionApplicationIdFkeyInput;
  ApplicationReviewerActionApplicationIdFkeyInverseInput: ApplicationReviewerActionApplicationIdFkeyInverseInput;
  ApplicationReviewerActionApplicationReviewerActionPkeyConnect: ApplicationReviewerActionApplicationReviewerActionPkeyConnect;
  ApplicationReviewerActionApplicationReviewerActionPkeyDelete: ApplicationReviewerActionApplicationReviewerActionPkeyDelete;
  ApplicationReviewerActionApplicationReviewerActionUserIdApplicationIdKeyConnect: ApplicationReviewerActionApplicationReviewerActionUserIdApplicationIdKeyConnect;
  ApplicationReviewerActionApplicationReviewerActionUserIdApplicationIdKeyDelete: ApplicationReviewerActionApplicationReviewerActionUserIdApplicationIdKeyDelete;
  ApplicationReviewerActionCondition: ApplicationReviewerActionCondition;
  ApplicationReviewerActionFilter: ApplicationReviewerActionFilter;
  ApplicationReviewerActionInput: ApplicationReviewerActionInput;
  ApplicationReviewerActionNodeIdConnect: ApplicationReviewerActionNodeIdConnect;
  ApplicationReviewerActionNodeIdDelete: ApplicationReviewerActionNodeIdDelete;
  ApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyNodeIdUpdate: ApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyNodeIdUpdate;
  ApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationReviewerActionPkeyUpdate: ApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationReviewerActionPkeyUpdate;
  ApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationReviewerActionUserIdApplicationIdKeyUpdate: ApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyUsingApplicationReviewerActionUserIdApplicationIdKeyUpdate;
  ApplicationReviewerActionPatch: ApplicationReviewerActionPatch;
  ApplicationReviewerActionsConnection: ApplicationReviewerActionsConnection;
  ApplicationReviewerActionsEdge: ApplicationReviewerActionsEdge;
  ApplicationStageHistoriesConnection: ApplicationStageHistoriesConnection;
  ApplicationStageHistoriesEdge: ApplicationStageHistoriesEdge;
  ApplicationStageHistory: ApplicationStageHistory;
  ApplicationStageHistoryApplicationIdFkeyApplicationCreateInput: ApplicationStageHistoryApplicationIdFkeyApplicationCreateInput;
  ApplicationStageHistoryApplicationIdFkeyApplicationStageHistoryCreateInput: ApplicationStageHistoryApplicationIdFkeyApplicationStageHistoryCreateInput;
  ApplicationStageHistoryApplicationIdFkeyInput: ApplicationStageHistoryApplicationIdFkeyInput;
  ApplicationStageHistoryApplicationIdFkeyInverseInput: ApplicationStageHistoryApplicationIdFkeyInverseInput;
  ApplicationStageHistoryApplicationStageHistoryPkeyConnect: ApplicationStageHistoryApplicationStageHistoryPkeyConnect;
  ApplicationStageHistoryApplicationStageHistoryPkeyDelete: ApplicationStageHistoryApplicationStageHistoryPkeyDelete;
  ApplicationStageHistoryCondition: ApplicationStageHistoryCondition;
  ApplicationStageHistoryFilter: ApplicationStageHistoryFilter;
  ApplicationStageHistoryInput: ApplicationStageHistoryInput;
  ApplicationStageHistoryNodeIdConnect: ApplicationStageHistoryNodeIdConnect;
  ApplicationStageHistoryNodeIdDelete: ApplicationStageHistoryNodeIdDelete;
  ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate: ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyNodeIdUpdate;
  ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationStageHistoryPkeyUpdate: ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyUsingApplicationStageHistoryPkeyUpdate;
  ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyNodeIdUpdate: ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyNodeIdUpdate;
  ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyUsingApplicationStageHistoryPkeyUpdate: ApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyUsingApplicationStageHistoryPkeyUpdate;
  ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate: ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate;
  ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStageHistoryPkeyUpdate: ApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStageHistoryPkeyUpdate;
  ApplicationStageHistoryPatch: ApplicationStageHistoryPatch;
  ApplicationStageHistoryStageIdFkeyApplicationStageHistoryCreateInput: ApplicationStageHistoryStageIdFkeyApplicationStageHistoryCreateInput;
  ApplicationStageHistoryStageIdFkeyInput: ApplicationStageHistoryStageIdFkeyInput;
  ApplicationStageHistoryStageIdFkeyInverseInput: ApplicationStageHistoryStageIdFkeyInverseInput;
  ApplicationStageHistoryStageIdFkeyTemplateStageCreateInput: ApplicationStageHistoryStageIdFkeyTemplateStageCreateInput;
  ApplicationStageHistoryToManyApplicationStatusHistoryFilter: ApplicationStageHistoryToManyApplicationStatusHistoryFilter;
  ApplicationStageStatusAll: ApplicationStageStatusAll;
  ApplicationStageStatusAllCondition: ApplicationStageStatusAllCondition;
  ApplicationStageStatusAllFilter: ApplicationStageStatusAllFilter;
  ApplicationStageStatusAllsConnection: ApplicationStageStatusAllsConnection;
  ApplicationStageStatusAllsEdge: ApplicationStageStatusAllsEdge;
  ApplicationStageStatusLatest: ApplicationStageStatusLatest;
  ApplicationStageStatusLatestCondition: ApplicationStageStatusLatestCondition;
  ApplicationStageStatusLatestFilter: ApplicationStageStatusLatestFilter;
  ApplicationStageStatusLatestsConnection: ApplicationStageStatusLatestsConnection;
  ApplicationStageStatusLatestsEdge: ApplicationStageStatusLatestsEdge;
  ApplicationStatusFilter: ApplicationStatusFilter;
  ApplicationStatusHistoriesConnection: ApplicationStatusHistoriesConnection;
  ApplicationStatusHistoriesEdge: ApplicationStatusHistoriesEdge;
  ApplicationStatusHistory: ApplicationStatusHistory;
  ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStageHistoryCreateInput: ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStageHistoryCreateInput;
  ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStatusHistoryCreateInput: ApplicationStatusHistoryApplicationStageHistoryIdFkeyApplicationStatusHistoryCreateInput;
  ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput: ApplicationStatusHistoryApplicationStageHistoryIdFkeyInput;
  ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput: ApplicationStatusHistoryApplicationStageHistoryIdFkeyInverseInput;
  ApplicationStatusHistoryApplicationStatusHistoryPkeyConnect: ApplicationStatusHistoryApplicationStatusHistoryPkeyConnect;
  ApplicationStatusHistoryApplicationStatusHistoryPkeyDelete: ApplicationStatusHistoryApplicationStatusHistoryPkeyDelete;
  ApplicationStatusHistoryCondition: ApplicationStatusHistoryCondition;
  ApplicationStatusHistoryFilter: ApplicationStatusHistoryFilter;
  ApplicationStatusHistoryInput: ApplicationStatusHistoryInput;
  ApplicationStatusHistoryNodeIdConnect: ApplicationStatusHistoryNodeIdConnect;
  ApplicationStatusHistoryNodeIdDelete: ApplicationStatusHistoryNodeIdDelete;
  ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate: ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyNodeIdUpdate;
  ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStatusHistoryPkeyUpdate: ApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyUsingApplicationStatusHistoryPkeyUpdate;
  ApplicationStatusHistoryPatch: ApplicationStatusHistoryPatch;
  ApplicationTemplateIdFkeyApplicationCreateInput: ApplicationTemplateIdFkeyApplicationCreateInput;
  ApplicationTemplateIdFkeyInput: ApplicationTemplateIdFkeyInput;
  ApplicationTemplateIdFkeyInverseInput: ApplicationTemplateIdFkeyInverseInput;
  ApplicationTemplateIdFkeyTemplateCreateInput: ApplicationTemplateIdFkeyTemplateCreateInput;
  ApplicationToManyActionQueueFilter: ApplicationToManyActionQueueFilter;
  ApplicationToManyActivityLogFilter: ApplicationToManyActivityLogFilter;
  ApplicationToManyApplicationNoteFilter: ApplicationToManyApplicationNoteFilter;
  ApplicationToManyApplicationResponseFilter: ApplicationToManyApplicationResponseFilter;
  ApplicationToManyApplicationReviewerActionFilter: ApplicationToManyApplicationReviewerActionFilter;
  ApplicationToManyApplicationStageHistoryFilter: ApplicationToManyApplicationStageHistoryFilter;
  ApplicationToManyDataChangelogFilter: ApplicationToManyDataChangelogFilter;
  ApplicationToManyFileFilter: ApplicationToManyFileFilter;
  ApplicationToManyNotificationFilter: ApplicationToManyNotificationFilter;
  ApplicationToManyReviewAssignmentFilter: ApplicationToManyReviewAssignmentFilter;
  ApplicationToManyReviewFilter: ApplicationToManyReviewFilter;
  ApplicationToManyTriggerQueueFilter: ApplicationToManyTriggerQueueFilter;
  ApplicationToManyTriggerScheduleFilter: ApplicationToManyTriggerScheduleFilter;
  ApplicationToManyVerificationFilter: ApplicationToManyVerificationFilter;
  ApplicationsConnection: ApplicationsConnection;
  ApplicationsEdge: ApplicationsEdge;
  AssignedQuestionEdge: AssignedQuestionEdge;
  AssignedQuestionsConnection: AssignedQuestionsConnection;
  AssignedQuestionsRecord: AssignedQuestionsRecord;
  AssignedQuestionsRecordFilter: AssignedQuestionsRecordFilter;
  AssignedSectionsByStageAndLevel: AssignedSectionsByStageAndLevel;
  AssignedSectionsByStageAndLevelCondition: AssignedSectionsByStageAndLevelCondition;
  AssignedSectionsByStageAndLevelFilter: AssignedSectionsByStageAndLevelFilter;
  AssignedSectionsByStageAndLevelsConnection: AssignedSectionsByStageAndLevelsConnection;
  AssignedSectionsByStageAndLevelsEdge: AssignedSectionsByStageAndLevelsEdge;
  AssignerActionFilter: AssignerActionFilter;
  AssignerListConnection: AssignerListConnection;
  AssignerListEdge: AssignerListEdge;
  AssignerListRecord: AssignerListRecord;
  AssignerListRecordFilter: AssignerListRecordFilter;
  AssignmentListConnection: AssignmentListConnection;
  AssignmentListEdge: AssignmentListEdge;
  AssignmentListRecord: AssignmentListRecord;
  AssignmentListRecordFilter: AssignmentListRecordFilter;
  BigInt: Scalars['BigInt']['output'];
  BigIntFilter: BigIntFilter;
  Boolean: Scalars['Boolean']['output'];
  BooleanFilter: BooleanFilter;
  ChangelogTypeFilter: ChangelogTypeFilter;
  CharacterData: Scalars['CharacterData']['output'];
  CharacterDataFilter: CharacterDataFilter;
  ConstraintsInfo: ConstraintsInfo;
  ConstraintsInfoCondition: ConstraintsInfoCondition;
  ConstraintsInfoFilter: ConstraintsInfoFilter;
  ConstraintsInfosConnection: ConstraintsInfosConnection;
  ConstraintsInfosEdge: ConstraintsInfosEdge;
  Counter: Counter;
  CounterCondition: CounterCondition;
  CounterFilter: CounterFilter;
  CounterInput: CounterInput;
  CounterPatch: CounterPatch;
  CountersConnection: CountersConnection;
  CountersEdge: CountersEdge;
  CreateActionPluginInput: CreateActionPluginInput;
  CreateActionPluginPayload: Omit<CreateActionPluginPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateActionQueueInput: CreateActionQueueInput;
  CreateActionQueuePayload: Omit<CreateActionQueuePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateActivityLogInput: CreateActivityLogInput;
  CreateActivityLogPayload: Omit<CreateActivityLogPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateAllowedSelfAssignableSectionsShapeInput: CreateAllowedSelfAssignableSectionsShapeInput;
  CreateAllowedSelfAssignableSectionsShapePayload: Omit<CreateAllowedSelfAssignableSectionsShapePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateApplicationInput: CreateApplicationInput;
  CreateApplicationListShapeInput: CreateApplicationListShapeInput;
  CreateApplicationListShapePayload: Omit<CreateApplicationListShapePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateApplicationNoteInput: CreateApplicationNoteInput;
  CreateApplicationNotePayload: Omit<CreateApplicationNotePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateApplicationPayload: Omit<CreateApplicationPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateApplicationResponseInput: CreateApplicationResponseInput;
  CreateApplicationResponsePayload: Omit<CreateApplicationResponsePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateApplicationReviewerActionInput: CreateApplicationReviewerActionInput;
  CreateApplicationReviewerActionPayload: Omit<CreateApplicationReviewerActionPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateApplicationStageHistoryInput: CreateApplicationStageHistoryInput;
  CreateApplicationStageHistoryPayload: Omit<CreateApplicationStageHistoryPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateApplicationStatusHistoryInput: CreateApplicationStatusHistoryInput;
  CreateApplicationStatusHistoryPayload: Omit<CreateApplicationStatusHistoryPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateCounterInput: CreateCounterInput;
  CreateCounterPayload: Omit<CreateCounterPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateDataChangelogInput: CreateDataChangelogInput;
  CreateDataChangelogPayload: Omit<CreateDataChangelogPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateDataTableInput: CreateDataTableInput;
  CreateDataTablePayload: Omit<CreateDataTablePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateDataViewColumnDefinitionInput: CreateDataViewColumnDefinitionInput;
  CreateDataViewColumnDefinitionPayload: Omit<CreateDataViewColumnDefinitionPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateDataViewInput: CreateDataViewInput;
  CreateDataViewPayload: Omit<CreateDataViewPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateElementTypePluginInput: CreateElementTypePluginInput;
  CreateElementTypePluginPayload: Omit<CreateElementTypePluginPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateFileInput: CreateFileInput;
  CreateFilePayload: Omit<CreateFilePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateFilterInput: CreateFilterInput;
  CreateFilterPayload: Omit<CreateFilterPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateNotificationInput: CreateNotificationInput;
  CreateNotificationPayload: Omit<CreateNotificationPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateOrganisationInput: CreateOrganisationInput;
  CreateOrganisationPayload: Omit<CreateOrganisationPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreatePermissionJoinInput: CreatePermissionJoinInput;
  CreatePermissionJoinPayload: Omit<CreatePermissionJoinPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreatePermissionNameInput: CreatePermissionNameInput;
  CreatePermissionNamePayload: Omit<CreatePermissionNamePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreatePermissionPolicyInput: CreatePermissionPolicyInput;
  CreatePermissionPolicyPayload: Omit<CreatePermissionPolicyPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateReviewAssignmentAssignedSectionsShapeInput: CreateReviewAssignmentAssignedSectionsShapeInput;
  CreateReviewAssignmentAssignedSectionsShapePayload: Omit<CreateReviewAssignmentAssignedSectionsShapePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateReviewAssignmentAssignerJoinInput: CreateReviewAssignmentAssignerJoinInput;
  CreateReviewAssignmentAssignerJoinPayload: Omit<CreateReviewAssignmentAssignerJoinPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateReviewAssignmentInput: CreateReviewAssignmentInput;
  CreateReviewAssignmentPayload: Omit<CreateReviewAssignmentPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateReviewDecisionInput: CreateReviewDecisionInput;
  CreateReviewDecisionPayload: Omit<CreateReviewDecisionPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateReviewInput: CreateReviewInput;
  CreateReviewPayload: Omit<CreateReviewPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateReviewResponseInput: CreateReviewResponseInput;
  CreateReviewResponsePayload: Omit<CreateReviewResponsePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateReviewStatusHistoryInput: CreateReviewStatusHistoryInput;
  CreateReviewStatusHistoryPayload: Omit<CreateReviewStatusHistoryPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateSystemInfoInput: CreateSystemInfoInput;
  CreateSystemInfoPayload: Omit<CreateSystemInfoPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateTemplateActionInput: CreateTemplateActionInput;
  CreateTemplateActionPayload: Omit<CreateTemplateActionPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateTemplateCategoryInput: CreateTemplateCategoryInput;
  CreateTemplateCategoryPayload: Omit<CreateTemplateCategoryPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateTemplateElementInput: CreateTemplateElementInput;
  CreateTemplateElementPayload: Omit<CreateTemplateElementPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateTemplateFilterJoinInput: CreateTemplateFilterJoinInput;
  CreateTemplateFilterJoinPayload: Omit<CreateTemplateFilterJoinPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateTemplateInput: CreateTemplateInput;
  CreateTemplatePayload: Omit<CreateTemplatePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateTemplatePermissionInput: CreateTemplatePermissionInput;
  CreateTemplatePermissionPayload: Omit<CreateTemplatePermissionPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateTemplateSectionInput: CreateTemplateSectionInput;
  CreateTemplateSectionPayload: Omit<CreateTemplateSectionPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateTemplateStageInput: CreateTemplateStageInput;
  CreateTemplateStagePayload: Omit<CreateTemplateStagePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateTemplateStageReviewLevelInput: CreateTemplateStageReviewLevelInput;
  CreateTemplateStageReviewLevelPayload: Omit<CreateTemplateStageReviewLevelPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateTriggerQueueInput: CreateTriggerQueueInput;
  CreateTriggerQueuePayload: Omit<CreateTriggerQueuePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateTriggerScheduleInput: CreateTriggerScheduleInput;
  CreateTriggerSchedulePayload: Omit<CreateTriggerSchedulePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateUserInput: CreateUserInput;
  CreateUserListInput: CreateUserListInput;
  CreateUserListPayload: Omit<CreateUserListPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateUserOrganisationInput: CreateUserOrganisationInput;
  CreateUserOrganisationPayload: Omit<CreateUserOrganisationPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateUserPayload: Omit<CreateUserPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  CreateVerificationInput: CreateVerificationInput;
  CreateVerificationPayload: Omit<CreateVerificationPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  Cursor: Scalars['Cursor']['output'];
  DataChangelog: DataChangelog;
  DataChangelogApplicationIdFkeyApplicationCreateInput: DataChangelogApplicationIdFkeyApplicationCreateInput;
  DataChangelogApplicationIdFkeyDataChangelogCreateInput: DataChangelogApplicationIdFkeyDataChangelogCreateInput;
  DataChangelogApplicationIdFkeyInput: DataChangelogApplicationIdFkeyInput;
  DataChangelogApplicationIdFkeyInverseInput: DataChangelogApplicationIdFkeyInverseInput;
  DataChangelogCondition: DataChangelogCondition;
  DataChangelogDataChangelogPkeyConnect: DataChangelogDataChangelogPkeyConnect;
  DataChangelogDataChangelogPkeyDelete: DataChangelogDataChangelogPkeyDelete;
  DataChangelogFilter: DataChangelogFilter;
  DataChangelogInput: DataChangelogInput;
  DataChangelogNodeIdConnect: DataChangelogNodeIdConnect;
  DataChangelogNodeIdDelete: DataChangelogNodeIdDelete;
  DataChangelogOnDataChangelogForDataChangelogApplicationIdFkeyNodeIdUpdate: DataChangelogOnDataChangelogForDataChangelogApplicationIdFkeyNodeIdUpdate;
  DataChangelogOnDataChangelogForDataChangelogApplicationIdFkeyUsingDataChangelogPkeyUpdate: DataChangelogOnDataChangelogForDataChangelogApplicationIdFkeyUsingDataChangelogPkeyUpdate;
  DataChangelogOnDataChangelogForDataChangelogOrgIdFkeyNodeIdUpdate: DataChangelogOnDataChangelogForDataChangelogOrgIdFkeyNodeIdUpdate;
  DataChangelogOnDataChangelogForDataChangelogOrgIdFkeyUsingDataChangelogPkeyUpdate: DataChangelogOnDataChangelogForDataChangelogOrgIdFkeyUsingDataChangelogPkeyUpdate;
  DataChangelogOrgIdFkeyDataChangelogCreateInput: DataChangelogOrgIdFkeyDataChangelogCreateInput;
  DataChangelogOrgIdFkeyInput: DataChangelogOrgIdFkeyInput;
  DataChangelogOrgIdFkeyInverseInput: DataChangelogOrgIdFkeyInverseInput;
  DataChangelogOrgIdFkeyOrganisationCreateInput: DataChangelogOrgIdFkeyOrganisationCreateInput;
  DataChangelogPatch: DataChangelogPatch;
  DataChangelogsConnection: DataChangelogsConnection;
  DataChangelogsEdge: DataChangelogsEdge;
  DataTable: DataTable;
  DataTableCondition: DataTableCondition;
  DataTableFilter: DataTableFilter;
  DataTableInput: DataTableInput;
  DataTablePatch: DataTablePatch;
  DataTablesConnection: DataTablesConnection;
  DataTablesEdge: DataTablesEdge;
  DataView: DataView;
  DataViewColumnDefinition: DataViewColumnDefinition;
  DataViewColumnDefinitionCondition: DataViewColumnDefinitionCondition;
  DataViewColumnDefinitionFilter: DataViewColumnDefinitionFilter;
  DataViewColumnDefinitionInput: DataViewColumnDefinitionInput;
  DataViewColumnDefinitionPatch: DataViewColumnDefinitionPatch;
  DataViewColumnDefinitionsConnection: DataViewColumnDefinitionsConnection;
  DataViewColumnDefinitionsEdge: DataViewColumnDefinitionsEdge;
  DataViewCondition: DataViewCondition;
  DataViewFilter: DataViewFilter;
  DataViewInput: DataViewInput;
  DataViewPatch: DataViewPatch;
  DataViewsConnection: DataViewsConnection;
  DataViewsEdge: DataViewsEdge;
  Date: Scalars['Date']['output'];
  DateFilter: DateFilter;
  Datetime: Scalars['Datetime']['output'];
  DatetimeFilter: DatetimeFilter;
  DecisionFilter: DecisionFilter;
  DeleteActionPluginByCodeInput: DeleteActionPluginByCodeInput;
  DeleteActionPluginByNodeIdInput: DeleteActionPluginByNodeIdInput;
  DeleteActionPluginInput: DeleteActionPluginInput;
  DeleteActionPluginPayload: Omit<DeleteActionPluginPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteActionQueueByNodeIdInput: DeleteActionQueueByNodeIdInput;
  DeleteActionQueueInput: DeleteActionQueueInput;
  DeleteActionQueuePayload: Omit<DeleteActionQueuePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteActivityLogByNodeIdInput: DeleteActivityLogByNodeIdInput;
  DeleteActivityLogInput: DeleteActivityLogInput;
  DeleteActivityLogPayload: Omit<DeleteActivityLogPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteApplicationByNodeIdInput: DeleteApplicationByNodeIdInput;
  DeleteApplicationByOutcomeRegistrationInput: DeleteApplicationByOutcomeRegistrationInput;
  DeleteApplicationBySerialInput: DeleteApplicationBySerialInput;
  DeleteApplicationInput: DeleteApplicationInput;
  DeleteApplicationNoteByNodeIdInput: DeleteApplicationNoteByNodeIdInput;
  DeleteApplicationNoteInput: DeleteApplicationNoteInput;
  DeleteApplicationNotePayload: Omit<DeleteApplicationNotePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteApplicationPayload: Omit<DeleteApplicationPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteApplicationResponseByNodeIdInput: DeleteApplicationResponseByNodeIdInput;
  DeleteApplicationResponseInput: DeleteApplicationResponseInput;
  DeleteApplicationResponsePayload: Omit<DeleteApplicationResponsePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteApplicationReviewerActionByNodeIdInput: DeleteApplicationReviewerActionByNodeIdInput;
  DeleteApplicationReviewerActionByUserIdAndApplicationIdInput: DeleteApplicationReviewerActionByUserIdAndApplicationIdInput;
  DeleteApplicationReviewerActionInput: DeleteApplicationReviewerActionInput;
  DeleteApplicationReviewerActionPayload: Omit<DeleteApplicationReviewerActionPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteApplicationStageHistoryByNodeIdInput: DeleteApplicationStageHistoryByNodeIdInput;
  DeleteApplicationStageHistoryInput: DeleteApplicationStageHistoryInput;
  DeleteApplicationStageHistoryPayload: Omit<DeleteApplicationStageHistoryPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteApplicationStatusHistoryByNodeIdInput: DeleteApplicationStatusHistoryByNodeIdInput;
  DeleteApplicationStatusHistoryInput: DeleteApplicationStatusHistoryInput;
  DeleteApplicationStatusHistoryPayload: Omit<DeleteApplicationStatusHistoryPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteCounterByNameInput: DeleteCounterByNameInput;
  DeleteCounterByNodeIdInput: DeleteCounterByNodeIdInput;
  DeleteCounterInput: DeleteCounterInput;
  DeleteCounterPayload: Omit<DeleteCounterPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteDataChangelogByNodeIdInput: DeleteDataChangelogByNodeIdInput;
  DeleteDataChangelogInput: DeleteDataChangelogInput;
  DeleteDataChangelogPayload: Omit<DeleteDataChangelogPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteDataTableByNodeIdInput: DeleteDataTableByNodeIdInput;
  DeleteDataTableByTableNameInput: DeleteDataTableByTableNameInput;
  DeleteDataTableInput: DeleteDataTableInput;
  DeleteDataTablePayload: Omit<DeleteDataTablePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteDataViewByIdentifierInput: DeleteDataViewByIdentifierInput;
  DeleteDataViewByNodeIdInput: DeleteDataViewByNodeIdInput;
  DeleteDataViewColumnDefinitionByNodeIdInput: DeleteDataViewColumnDefinitionByNodeIdInput;
  DeleteDataViewColumnDefinitionByTableNameAndColumnNameInput: DeleteDataViewColumnDefinitionByTableNameAndColumnNameInput;
  DeleteDataViewColumnDefinitionInput: DeleteDataViewColumnDefinitionInput;
  DeleteDataViewColumnDefinitionPayload: Omit<DeleteDataViewColumnDefinitionPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteDataViewInput: DeleteDataViewInput;
  DeleteDataViewPayload: Omit<DeleteDataViewPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteElementTypePluginByNodeIdInput: DeleteElementTypePluginByNodeIdInput;
  DeleteElementTypePluginInput: DeleteElementTypePluginInput;
  DeleteElementTypePluginPayload: Omit<DeleteElementTypePluginPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteFileByNodeIdInput: DeleteFileByNodeIdInput;
  DeleteFileByUniqueIdInput: DeleteFileByUniqueIdInput;
  DeleteFileInput: DeleteFileInput;
  DeleteFilePayload: Omit<DeleteFilePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteFilterByCodeInput: DeleteFilterByCodeInput;
  DeleteFilterByNodeIdInput: DeleteFilterByNodeIdInput;
  DeleteFilterInput: DeleteFilterInput;
  DeleteFilterPayload: Omit<DeleteFilterPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteNotificationByNodeIdInput: DeleteNotificationByNodeIdInput;
  DeleteNotificationInput: DeleteNotificationInput;
  DeleteNotificationPayload: Omit<DeleteNotificationPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteOrganisationByNameInput: DeleteOrganisationByNameInput;
  DeleteOrganisationByNodeIdInput: DeleteOrganisationByNodeIdInput;
  DeleteOrganisationByRegistrationInput: DeleteOrganisationByRegistrationInput;
  DeleteOrganisationInput: DeleteOrganisationInput;
  DeleteOrganisationPayload: Omit<DeleteOrganisationPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeletePermissionJoinByNodeIdInput: DeletePermissionJoinByNodeIdInput;
  DeletePermissionJoinInput: DeletePermissionJoinInput;
  DeletePermissionJoinPayload: Omit<DeletePermissionJoinPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeletePermissionNameByNameInput: DeletePermissionNameByNameInput;
  DeletePermissionNameByNodeIdInput: DeletePermissionNameByNodeIdInput;
  DeletePermissionNameInput: DeletePermissionNameInput;
  DeletePermissionNamePayload: Omit<DeletePermissionNamePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeletePermissionPolicyByNameInput: DeletePermissionPolicyByNameInput;
  DeletePermissionPolicyByNodeIdInput: DeletePermissionPolicyByNodeIdInput;
  DeletePermissionPolicyInput: DeletePermissionPolicyInput;
  DeletePermissionPolicyPayload: Omit<DeletePermissionPolicyPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteReviewAssignmentAssignerJoinByNodeIdInput: DeleteReviewAssignmentAssignerJoinByNodeIdInput;
  DeleteReviewAssignmentAssignerJoinInput: DeleteReviewAssignmentAssignerJoinInput;
  DeleteReviewAssignmentAssignerJoinPayload: Omit<DeleteReviewAssignmentAssignerJoinPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteReviewAssignmentByNodeIdInput: DeleteReviewAssignmentByNodeIdInput;
  DeleteReviewAssignmentInput: DeleteReviewAssignmentInput;
  DeleteReviewAssignmentPayload: Omit<DeleteReviewAssignmentPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteReviewByNodeIdInput: DeleteReviewByNodeIdInput;
  DeleteReviewByReviewAssignmentIdInput: DeleteReviewByReviewAssignmentIdInput;
  DeleteReviewDecisionByNodeIdInput: DeleteReviewDecisionByNodeIdInput;
  DeleteReviewDecisionInput: DeleteReviewDecisionInput;
  DeleteReviewDecisionPayload: Omit<DeleteReviewDecisionPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteReviewInput: DeleteReviewInput;
  DeleteReviewPayload: Omit<DeleteReviewPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteReviewResponseByNodeIdInput: DeleteReviewResponseByNodeIdInput;
  DeleteReviewResponseInput: DeleteReviewResponseInput;
  DeleteReviewResponsePayload: Omit<DeleteReviewResponsePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteReviewStatusHistoryByNodeIdInput: DeleteReviewStatusHistoryByNodeIdInput;
  DeleteReviewStatusHistoryInput: DeleteReviewStatusHistoryInput;
  DeleteReviewStatusHistoryPayload: Omit<DeleteReviewStatusHistoryPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteSystemInfoByNodeIdInput: DeleteSystemInfoByNodeIdInput;
  DeleteSystemInfoInput: DeleteSystemInfoInput;
  DeleteSystemInfoPayload: Omit<DeleteSystemInfoPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteTemplateActionByNodeIdInput: DeleteTemplateActionByNodeIdInput;
  DeleteTemplateActionInput: DeleteTemplateActionInput;
  DeleteTemplateActionPayload: Omit<DeleteTemplateActionPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteTemplateByCodeAndVersionIdInput: DeleteTemplateByCodeAndVersionIdInput;
  DeleteTemplateByNodeIdInput: DeleteTemplateByNodeIdInput;
  DeleteTemplateCategoryByCodeInput: DeleteTemplateCategoryByCodeInput;
  DeleteTemplateCategoryByNodeIdInput: DeleteTemplateCategoryByNodeIdInput;
  DeleteTemplateCategoryInput: DeleteTemplateCategoryInput;
  DeleteTemplateCategoryPayload: Omit<DeleteTemplateCategoryPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteTemplateElementByNodeIdInput: DeleteTemplateElementByNodeIdInput;
  DeleteTemplateElementByTemplateCodeAndCodeAndTemplateVersionInput: DeleteTemplateElementByTemplateCodeAndCodeAndTemplateVersionInput;
  DeleteTemplateElementInput: DeleteTemplateElementInput;
  DeleteTemplateElementPayload: Omit<DeleteTemplateElementPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteTemplateFilterJoinByNodeIdInput: DeleteTemplateFilterJoinByNodeIdInput;
  DeleteTemplateFilterJoinInput: DeleteTemplateFilterJoinInput;
  DeleteTemplateFilterJoinPayload: Omit<DeleteTemplateFilterJoinPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteTemplateInput: DeleteTemplateInput;
  DeleteTemplatePayload: Omit<DeleteTemplatePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteTemplatePermissionByNodeIdInput: DeleteTemplatePermissionByNodeIdInput;
  DeleteTemplatePermissionInput: DeleteTemplatePermissionInput;
  DeleteTemplatePermissionPayload: Omit<DeleteTemplatePermissionPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteTemplateSectionByNodeIdInput: DeleteTemplateSectionByNodeIdInput;
  DeleteTemplateSectionByTemplateIdAndCodeInput: DeleteTemplateSectionByTemplateIdAndCodeInput;
  DeleteTemplateSectionInput: DeleteTemplateSectionInput;
  DeleteTemplateSectionPayload: Omit<DeleteTemplateSectionPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteTemplateStageByNodeIdInput: DeleteTemplateStageByNodeIdInput;
  DeleteTemplateStageInput: DeleteTemplateStageInput;
  DeleteTemplateStagePayload: Omit<DeleteTemplateStagePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteTemplateStageReviewLevelByNodeIdInput: DeleteTemplateStageReviewLevelByNodeIdInput;
  DeleteTemplateStageReviewLevelInput: DeleteTemplateStageReviewLevelInput;
  DeleteTemplateStageReviewLevelPayload: Omit<DeleteTemplateStageReviewLevelPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteTriggerQueueByNodeIdInput: DeleteTriggerQueueByNodeIdInput;
  DeleteTriggerQueueInput: DeleteTriggerQueueInput;
  DeleteTriggerQueuePayload: Omit<DeleteTriggerQueuePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteTriggerScheduleByNodeIdInput: DeleteTriggerScheduleByNodeIdInput;
  DeleteTriggerScheduleInput: DeleteTriggerScheduleInput;
  DeleteTriggerSchedulePayload: Omit<DeleteTriggerSchedulePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteUserOrganisationByNodeIdInput: DeleteUserOrganisationByNodeIdInput;
  DeleteUserOrganisationByUserIdAndOrganisationIdInput: DeleteUserOrganisationByUserIdAndOrganisationIdInput;
  DeleteUserOrganisationInput: DeleteUserOrganisationInput;
  DeleteUserOrganisationPayload: Omit<DeleteUserOrganisationPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteVerificationByNodeIdInput: DeleteVerificationByNodeIdInput;
  DeleteVerificationByUniqueIdInput: DeleteVerificationByUniqueIdInput;
  DeleteVerificationInput: DeleteVerificationInput;
  DeleteVerificationPayload: Omit<DeleteVerificationPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  DeleteWholeApplicationInput: DeleteWholeApplicationInput;
  DeleteWholeApplicationPayload: Omit<DeleteWholeApplicationPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  ElementTypePlugin: ElementTypePlugin;
  ElementTypePluginCondition: ElementTypePluginCondition;
  ElementTypePluginFilter: ElementTypePluginFilter;
  ElementTypePluginInput: ElementTypePluginInput;
  ElementTypePluginPatch: ElementTypePluginPatch;
  ElementTypePluginsConnection: ElementTypePluginsConnection;
  ElementTypePluginsEdge: ElementTypePluginsEdge;
  EventTypeFilter: EventTypeFilter;
  FakePublicApplicationForeignKey0ApplicationCreateInput: FakePublicApplicationForeignKey0ApplicationCreateInput;
  FakePublicApplicationForeignKey0Input: FakePublicApplicationForeignKey0Input;
  FakePublicApplicationForeignKey0InverseInput: FakePublicApplicationForeignKey0InverseInput;
  FakePublicApplicationForeignKey0UserListCreateInput: FakePublicApplicationForeignKey0UserListCreateInput;
  FakePublicApplicationNoteForeignKey0ApplicationNoteCreateInput: FakePublicApplicationNoteForeignKey0ApplicationNoteCreateInput;
  FakePublicApplicationNoteForeignKey0Input: FakePublicApplicationNoteForeignKey0Input;
  FakePublicApplicationNoteForeignKey0InverseInput: FakePublicApplicationNoteForeignKey0InverseInput;
  FakePublicApplicationNoteForeignKey0UserListCreateInput: FakePublicApplicationNoteForeignKey0UserListCreateInput;
  FakePublicPermissionJoinForeignKey0Input: FakePublicPermissionJoinForeignKey0Input;
  FakePublicPermissionJoinForeignKey0InverseInput: FakePublicPermissionJoinForeignKey0InverseInput;
  FakePublicPermissionJoinForeignKey0PermissionJoinCreateInput: FakePublicPermissionJoinForeignKey0PermissionJoinCreateInput;
  FakePublicPermissionJoinForeignKey0UserListCreateInput: FakePublicPermissionJoinForeignKey0UserListCreateInput;
  FakePublicReviewAssignmentAssignerJoinForeignKey0Input: FakePublicReviewAssignmentAssignerJoinForeignKey0Input;
  FakePublicReviewAssignmentAssignerJoinForeignKey0InverseInput: FakePublicReviewAssignmentAssignerJoinForeignKey0InverseInput;
  FakePublicReviewAssignmentAssignerJoinForeignKey0ReviewAssignmentAssignerJoinCreateInput: FakePublicReviewAssignmentAssignerJoinForeignKey0ReviewAssignmentAssignerJoinCreateInput;
  FakePublicReviewAssignmentAssignerJoinForeignKey0UserListCreateInput: FakePublicReviewAssignmentAssignerJoinForeignKey0UserListCreateInput;
  FakePublicReviewAssignmentForeignKey0Input: FakePublicReviewAssignmentForeignKey0Input;
  FakePublicReviewAssignmentForeignKey0InverseInput: FakePublicReviewAssignmentForeignKey0InverseInput;
  FakePublicReviewAssignmentForeignKey0ReviewAssignmentCreateInput: FakePublicReviewAssignmentForeignKey0ReviewAssignmentCreateInput;
  FakePublicReviewAssignmentForeignKey0UserListCreateInput: FakePublicReviewAssignmentForeignKey0UserListCreateInput;
  FakePublicReviewAssignmentForeignKey1Input: FakePublicReviewAssignmentForeignKey1Input;
  FakePublicReviewAssignmentForeignKey1InverseInput: FakePublicReviewAssignmentForeignKey1InverseInput;
  FakePublicReviewAssignmentForeignKey1ReviewAssignmentCreateInput: FakePublicReviewAssignmentForeignKey1ReviewAssignmentCreateInput;
  FakePublicReviewAssignmentForeignKey1UserListCreateInput: FakePublicReviewAssignmentForeignKey1UserListCreateInput;
  FakePublicReviewForeignKey0Input: FakePublicReviewForeignKey0Input;
  FakePublicReviewForeignKey0InverseInput: FakePublicReviewForeignKey0InverseInput;
  FakePublicReviewForeignKey0ReviewCreateInput: FakePublicReviewForeignKey0ReviewCreateInput;
  FakePublicReviewForeignKey0UserListCreateInput: FakePublicReviewForeignKey0UserListCreateInput;
  FakePublicUserOrganisationForeignKey0Input: FakePublicUserOrganisationForeignKey0Input;
  FakePublicUserOrganisationForeignKey0InverseInput: FakePublicUserOrganisationForeignKey0InverseInput;
  FakePublicUserOrganisationForeignKey0UserListAdminCreateInput: FakePublicUserOrganisationForeignKey0UserListAdminCreateInput;
  FakePublicUserOrganisationForeignKey0UserOrganisationCreateInput: FakePublicUserOrganisationForeignKey0UserOrganisationCreateInput;
  File: File;
  FileApplicationNoteIdFkeyApplicationNoteCreateInput: FileApplicationNoteIdFkeyApplicationNoteCreateInput;
  FileApplicationNoteIdFkeyFileCreateInput: FileApplicationNoteIdFkeyFileCreateInput;
  FileApplicationNoteIdFkeyInput: FileApplicationNoteIdFkeyInput;
  FileApplicationNoteIdFkeyInverseInput: FileApplicationNoteIdFkeyInverseInput;
  FileApplicationResponseIdFkeyApplicationResponseCreateInput: FileApplicationResponseIdFkeyApplicationResponseCreateInput;
  FileApplicationResponseIdFkeyFileCreateInput: FileApplicationResponseIdFkeyFileCreateInput;
  FileApplicationResponseIdFkeyInput: FileApplicationResponseIdFkeyInput;
  FileApplicationResponseIdFkeyInverseInput: FileApplicationResponseIdFkeyInverseInput;
  FileApplicationSerialFkeyApplicationCreateInput: FileApplicationSerialFkeyApplicationCreateInput;
  FileApplicationSerialFkeyFileCreateInput: FileApplicationSerialFkeyFileCreateInput;
  FileApplicationSerialFkeyInput: FileApplicationSerialFkeyInput;
  FileApplicationSerialFkeyInverseInput: FileApplicationSerialFkeyInverseInput;
  FileCondition: FileCondition;
  FileFilePkeyConnect: FileFilePkeyConnect;
  FileFilePkeyDelete: FileFilePkeyDelete;
  FileFileUniqueIdKeyConnect: FileFileUniqueIdKeyConnect;
  FileFileUniqueIdKeyDelete: FileFileUniqueIdKeyDelete;
  FileFilter: FileFilter;
  FileInput: FileInput;
  FileNodeIdConnect: FileNodeIdConnect;
  FileNodeIdDelete: FileNodeIdDelete;
  FileOnFileForFileApplicationNoteIdFkeyNodeIdUpdate: FileOnFileForFileApplicationNoteIdFkeyNodeIdUpdate;
  FileOnFileForFileApplicationNoteIdFkeyUsingFilePkeyUpdate: FileOnFileForFileApplicationNoteIdFkeyUsingFilePkeyUpdate;
  FileOnFileForFileApplicationNoteIdFkeyUsingFileUniqueIdKeyUpdate: FileOnFileForFileApplicationNoteIdFkeyUsingFileUniqueIdKeyUpdate;
  FileOnFileForFileApplicationResponseIdFkeyNodeIdUpdate: FileOnFileForFileApplicationResponseIdFkeyNodeIdUpdate;
  FileOnFileForFileApplicationResponseIdFkeyUsingFilePkeyUpdate: FileOnFileForFileApplicationResponseIdFkeyUsingFilePkeyUpdate;
  FileOnFileForFileApplicationResponseIdFkeyUsingFileUniqueIdKeyUpdate: FileOnFileForFileApplicationResponseIdFkeyUsingFileUniqueIdKeyUpdate;
  FileOnFileForFileApplicationSerialFkeyNodeIdUpdate: FileOnFileForFileApplicationSerialFkeyNodeIdUpdate;
  FileOnFileForFileApplicationSerialFkeyUsingFilePkeyUpdate: FileOnFileForFileApplicationSerialFkeyUsingFilePkeyUpdate;
  FileOnFileForFileApplicationSerialFkeyUsingFileUniqueIdKeyUpdate: FileOnFileForFileApplicationSerialFkeyUsingFileUniqueIdKeyUpdate;
  FileOnFileForFileTemplateIdFkeyNodeIdUpdate: FileOnFileForFileTemplateIdFkeyNodeIdUpdate;
  FileOnFileForFileTemplateIdFkeyUsingFilePkeyUpdate: FileOnFileForFileTemplateIdFkeyUsingFilePkeyUpdate;
  FileOnFileForFileTemplateIdFkeyUsingFileUniqueIdKeyUpdate: FileOnFileForFileTemplateIdFkeyUsingFileUniqueIdKeyUpdate;
  FilePatch: FilePatch;
  FileTemplateIdFkeyFileCreateInput: FileTemplateIdFkeyFileCreateInput;
  FileTemplateIdFkeyInput: FileTemplateIdFkeyInput;
  FileTemplateIdFkeyInverseInput: FileTemplateIdFkeyInverseInput;
  FileTemplateIdFkeyTemplateCreateInput: FileTemplateIdFkeyTemplateCreateInput;
  FilesConnection: FilesConnection;
  FilesEdge: FilesEdge;
  Filter: Filter;
  FilterCondition: FilterCondition;
  FilterFilter: FilterFilter;
  FilterFilterCodeKeyConnect: FilterFilterCodeKeyConnect;
  FilterFilterCodeKeyDelete: FilterFilterCodeKeyDelete;
  FilterFilterPkeyConnect: FilterFilterPkeyConnect;
  FilterFilterPkeyDelete: FilterFilterPkeyDelete;
  FilterInput: FilterInput;
  FilterNodeIdConnect: FilterNodeIdConnect;
  FilterNodeIdDelete: FilterNodeIdDelete;
  FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyNodeIdUpdate: FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyNodeIdUpdate;
  FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingFilterCodeKeyUpdate: FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingFilterCodeKeyUpdate;
  FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingFilterPkeyUpdate: FilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingFilterPkeyUpdate;
  FilterPatch: FilterPatch;
  FilterToManyTemplateFilterJoinFilter: FilterToManyTemplateFilterJoinFilter;
  FiltersConnection: FiltersConnection;
  FiltersEdge: FiltersEdge;
  ID: Scalars['ID']['output'];
  Int: Scalars['Int']['output'];
  IntFilter: IntFilter;
  JSON: Scalars['JSON']['output'];
  JSONFilter: JsonFilter;
  Mutation: {};
  Node: ResolversInterfaceTypes<ResolversParentTypes>['Node'];
  Notification: Notification;
  NotificationApplicationIdFkeyApplicationCreateInput: NotificationApplicationIdFkeyApplicationCreateInput;
  NotificationApplicationIdFkeyInput: NotificationApplicationIdFkeyInput;
  NotificationApplicationIdFkeyInverseInput: NotificationApplicationIdFkeyInverseInput;
  NotificationApplicationIdFkeyNotificationCreateInput: NotificationApplicationIdFkeyNotificationCreateInput;
  NotificationCondition: NotificationCondition;
  NotificationFilter: NotificationFilter;
  NotificationInput: NotificationInput;
  NotificationNodeIdConnect: NotificationNodeIdConnect;
  NotificationNodeIdDelete: NotificationNodeIdDelete;
  NotificationNotificationPkeyConnect: NotificationNotificationPkeyConnect;
  NotificationNotificationPkeyDelete: NotificationNotificationPkeyDelete;
  NotificationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate: NotificationOnNotificationForNotificationApplicationIdFkeyNodeIdUpdate;
  NotificationOnNotificationForNotificationApplicationIdFkeyUsingNotificationPkeyUpdate: NotificationOnNotificationForNotificationApplicationIdFkeyUsingNotificationPkeyUpdate;
  NotificationOnNotificationForNotificationReviewIdFkeyNodeIdUpdate: NotificationOnNotificationForNotificationReviewIdFkeyNodeIdUpdate;
  NotificationOnNotificationForNotificationReviewIdFkeyUsingNotificationPkeyUpdate: NotificationOnNotificationForNotificationReviewIdFkeyUsingNotificationPkeyUpdate;
  NotificationPatch: NotificationPatch;
  NotificationReviewIdFkeyInput: NotificationReviewIdFkeyInput;
  NotificationReviewIdFkeyInverseInput: NotificationReviewIdFkeyInverseInput;
  NotificationReviewIdFkeyNotificationCreateInput: NotificationReviewIdFkeyNotificationCreateInput;
  NotificationReviewIdFkeyReviewCreateInput: NotificationReviewIdFkeyReviewCreateInput;
  NotificationsConnection: NotificationsConnection;
  NotificationsEdge: NotificationsEdge;
  Organisation: Organisation;
  OrganisationCondition: OrganisationCondition;
  OrganisationFilter: OrganisationFilter;
  OrganisationInput: OrganisationInput;
  OrganisationNodeIdConnect: OrganisationNodeIdConnect;
  OrganisationNodeIdDelete: OrganisationNodeIdDelete;
  OrganisationOnApplicationForApplicationOrgIdFkeyNodeIdUpdate: OrganisationOnApplicationForApplicationOrgIdFkeyNodeIdUpdate;
  OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationNameKeyUpdate: OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationNameKeyUpdate;
  OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationPkeyUpdate: OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationPkeyUpdate;
  OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationRegistrationKeyUpdate: OrganisationOnApplicationForApplicationOrgIdFkeyUsingOrganisationRegistrationKeyUpdate;
  OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyNodeIdUpdate: OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyNodeIdUpdate;
  OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationNameKeyUpdate: OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationNameKeyUpdate;
  OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationPkeyUpdate: OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationPkeyUpdate;
  OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationRegistrationKeyUpdate: OrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyUsingOrganisationRegistrationKeyUpdate;
  OrganisationOnDataChangelogForDataChangelogOrgIdFkeyNodeIdUpdate: OrganisationOnDataChangelogForDataChangelogOrgIdFkeyNodeIdUpdate;
  OrganisationOnDataChangelogForDataChangelogOrgIdFkeyUsingOrganisationNameKeyUpdate: OrganisationOnDataChangelogForDataChangelogOrgIdFkeyUsingOrganisationNameKeyUpdate;
  OrganisationOnDataChangelogForDataChangelogOrgIdFkeyUsingOrganisationPkeyUpdate: OrganisationOnDataChangelogForDataChangelogOrgIdFkeyUsingOrganisationPkeyUpdate;
  OrganisationOnDataChangelogForDataChangelogOrgIdFkeyUsingOrganisationRegistrationKeyUpdate: OrganisationOnDataChangelogForDataChangelogOrgIdFkeyUsingOrganisationRegistrationKeyUpdate;
  OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyNodeIdUpdate: OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyNodeIdUpdate;
  OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationNameKeyUpdate: OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationNameKeyUpdate;
  OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationPkeyUpdate: OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationPkeyUpdate;
  OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate: OrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate;
  OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyNodeIdUpdate: OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyNodeIdUpdate;
  OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationNameKeyUpdate: OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationNameKeyUpdate;
  OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationPkeyUpdate: OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationPkeyUpdate;
  OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate: OrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate;
  OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyNodeIdUpdate: OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyNodeIdUpdate;
  OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationNameKeyUpdate: OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationNameKeyUpdate;
  OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationPkeyUpdate: OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationPkeyUpdate;
  OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate: OrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate;
  OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyNodeIdUpdate: OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyNodeIdUpdate;
  OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationNameKeyUpdate: OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationNameKeyUpdate;
  OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationPkeyUpdate: OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationPkeyUpdate;
  OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate: OrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingOrganisationRegistrationKeyUpdate;
  OrganisationOrganisationNameKeyConnect: OrganisationOrganisationNameKeyConnect;
  OrganisationOrganisationNameKeyDelete: OrganisationOrganisationNameKeyDelete;
  OrganisationOrganisationPkeyConnect: OrganisationOrganisationPkeyConnect;
  OrganisationOrganisationPkeyDelete: OrganisationOrganisationPkeyDelete;
  OrganisationOrganisationRegistrationKeyConnect: OrganisationOrganisationRegistrationKeyConnect;
  OrganisationOrganisationRegistrationKeyDelete: OrganisationOrganisationRegistrationKeyDelete;
  OrganisationPatch: OrganisationPatch;
  OrganisationToManyApplicationFilter: OrganisationToManyApplicationFilter;
  OrganisationToManyApplicationNoteFilter: OrganisationToManyApplicationNoteFilter;
  OrganisationToManyDataChangelogFilter: OrganisationToManyDataChangelogFilter;
  OrganisationToManyPermissionJoinFilter: OrganisationToManyPermissionJoinFilter;
  OrganisationToManyReviewAssignmentAssignerJoinFilter: OrganisationToManyReviewAssignmentAssignerJoinFilter;
  OrganisationToManyReviewAssignmentFilter: OrganisationToManyReviewAssignmentFilter;
  OrganisationToManyUserOrganisationFilter: OrganisationToManyUserOrganisationFilter;
  OrganisationsConnection: OrganisationsConnection;
  OrganisationsEdge: OrganisationsEdge;
  PageInfo: PageInfo;
  PermissionFlattened: PermissionFlattened;
  PermissionFlattenedCondition: PermissionFlattenedCondition;
  PermissionFlattenedFilter: PermissionFlattenedFilter;
  PermissionFlattenedsConnection: PermissionFlattenedsConnection;
  PermissionFlattenedsEdge: PermissionFlattenedsEdge;
  PermissionJoin: PermissionJoin;
  PermissionJoinCondition: PermissionJoinCondition;
  PermissionJoinFilter: PermissionJoinFilter;
  PermissionJoinInput: PermissionJoinInput;
  PermissionJoinNodeIdConnect: PermissionJoinNodeIdConnect;
  PermissionJoinNodeIdDelete: PermissionJoinNodeIdDelete;
  PermissionJoinOnPermissionJoinForFakePublicPermissionJoinForeignKey0UsingPermissionJoinPkeyUpdate: PermissionJoinOnPermissionJoinForFakePublicPermissionJoinForeignKey0UsingPermissionJoinPkeyUpdate;
  PermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyNodeIdUpdate: PermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyNodeIdUpdate;
  PermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingPermissionJoinPkeyUpdate: PermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyUsingPermissionJoinPkeyUpdate;
  PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate: PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate;
  PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionJoinPkeyUpdate: PermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionJoinPkeyUpdate;
  PermissionJoinOrganisationIdFkeyInput: PermissionJoinOrganisationIdFkeyInput;
  PermissionJoinOrganisationIdFkeyInverseInput: PermissionJoinOrganisationIdFkeyInverseInput;
  PermissionJoinOrganisationIdFkeyOrganisationCreateInput: PermissionJoinOrganisationIdFkeyOrganisationCreateInput;
  PermissionJoinOrganisationIdFkeyPermissionJoinCreateInput: PermissionJoinOrganisationIdFkeyPermissionJoinCreateInput;
  PermissionJoinPatch: PermissionJoinPatch;
  PermissionJoinPermissionJoinPkeyConnect: PermissionJoinPermissionJoinPkeyConnect;
  PermissionJoinPermissionJoinPkeyDelete: PermissionJoinPermissionJoinPkeyDelete;
  PermissionJoinPermissionNameIdFkeyInput: PermissionJoinPermissionNameIdFkeyInput;
  PermissionJoinPermissionNameIdFkeyInverseInput: PermissionJoinPermissionNameIdFkeyInverseInput;
  PermissionJoinPermissionNameIdFkeyPermissionJoinCreateInput: PermissionJoinPermissionNameIdFkeyPermissionJoinCreateInput;
  PermissionJoinPermissionNameIdFkeyPermissionNameCreateInput: PermissionJoinPermissionNameIdFkeyPermissionNameCreateInput;
  PermissionJoinsConnection: PermissionJoinsConnection;
  PermissionJoinsEdge: PermissionJoinsEdge;
  PermissionName: PermissionName;
  PermissionNameCondition: PermissionNameCondition;
  PermissionNameFilter: PermissionNameFilter;
  PermissionNameInput: PermissionNameInput;
  PermissionNameNodeIdConnect: PermissionNameNodeIdConnect;
  PermissionNameNodeIdDelete: PermissionNameNodeIdDelete;
  PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate: PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyNodeIdUpdate;
  PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionNameNameKeyUpdate: PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionNameNameKeyUpdate;
  PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionNamePkeyUpdate: PermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyUsingPermissionNamePkeyUpdate;
  PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyNodeIdUpdate: PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyNodeIdUpdate;
  PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionNameNameKeyUpdate: PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionNameNameKeyUpdate;
  PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionNamePkeyUpdate: PermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionNamePkeyUpdate;
  PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyNodeIdUpdate: PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyNodeIdUpdate;
  PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingPermissionNameNameKeyUpdate: PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingPermissionNameNameKeyUpdate;
  PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingPermissionNamePkeyUpdate: PermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingPermissionNamePkeyUpdate;
  PermissionNamePatch: PermissionNamePatch;
  PermissionNamePermissionNameNameKeyConnect: PermissionNamePermissionNameNameKeyConnect;
  PermissionNamePermissionNameNameKeyDelete: PermissionNamePermissionNameNameKeyDelete;
  PermissionNamePermissionNamePkeyConnect: PermissionNamePermissionNamePkeyConnect;
  PermissionNamePermissionNamePkeyDelete: PermissionNamePermissionNamePkeyDelete;
  PermissionNamePermissionPolicyIdFkeyInput: PermissionNamePermissionPolicyIdFkeyInput;
  PermissionNamePermissionPolicyIdFkeyInverseInput: PermissionNamePermissionPolicyIdFkeyInverseInput;
  PermissionNamePermissionPolicyIdFkeyPermissionNameCreateInput: PermissionNamePermissionPolicyIdFkeyPermissionNameCreateInput;
  PermissionNamePermissionPolicyIdFkeyPermissionPolicyCreateInput: PermissionNamePermissionPolicyIdFkeyPermissionPolicyCreateInput;
  PermissionNameToManyPermissionJoinFilter: PermissionNameToManyPermissionJoinFilter;
  PermissionNameToManyTemplatePermissionFilter: PermissionNameToManyTemplatePermissionFilter;
  PermissionNamesConnection: PermissionNamesConnection;
  PermissionNamesEdge: PermissionNamesEdge;
  PermissionPoliciesConnection: PermissionPoliciesConnection;
  PermissionPoliciesEdge: PermissionPoliciesEdge;
  PermissionPolicy: PermissionPolicy;
  PermissionPolicyCondition: PermissionPolicyCondition;
  PermissionPolicyFilter: PermissionPolicyFilter;
  PermissionPolicyInput: PermissionPolicyInput;
  PermissionPolicyNodeIdConnect: PermissionPolicyNodeIdConnect;
  PermissionPolicyNodeIdDelete: PermissionPolicyNodeIdDelete;
  PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyNodeIdUpdate: PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyNodeIdUpdate;
  PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionPolicyNameKeyUpdate: PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionPolicyNameKeyUpdate;
  PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionPolicyPkeyUpdate: PermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyUsingPermissionPolicyPkeyUpdate;
  PermissionPolicyPatch: PermissionPolicyPatch;
  PermissionPolicyPermissionPolicyNameKeyConnect: PermissionPolicyPermissionPolicyNameKeyConnect;
  PermissionPolicyPermissionPolicyNameKeyDelete: PermissionPolicyPermissionPolicyNameKeyDelete;
  PermissionPolicyPermissionPolicyPkeyConnect: PermissionPolicyPermissionPolicyPkeyConnect;
  PermissionPolicyPermissionPolicyPkeyDelete: PermissionPolicyPermissionPolicyPkeyDelete;
  PermissionPolicyToManyPermissionNameFilter: PermissionPolicyToManyPermissionNameFilter;
  PermissionPolicyTypeFilter: PermissionPolicyTypeFilter;
  PermissionsAll: PermissionsAll;
  PermissionsAllCondition: PermissionsAllCondition;
  PermissionsAllFilter: PermissionsAllFilter;
  PermissionsAllsConnection: PermissionsAllsConnection;
  PermissionsAllsEdge: PermissionsAllsEdge;
  PostgresRowLevel: PostgresRowLevel;
  PostgresRowLevelCondition: PostgresRowLevelCondition;
  PostgresRowLevelFilter: PostgresRowLevelFilter;
  PostgresRowLevelsConnection: PostgresRowLevelsConnection;
  PostgresRowLevelsEdge: PostgresRowLevelsEdge;
  Query: {};
  Review: Review;
  ReviewApplicationIdFkeyApplicationCreateInput: ReviewApplicationIdFkeyApplicationCreateInput;
  ReviewApplicationIdFkeyInput: ReviewApplicationIdFkeyInput;
  ReviewApplicationIdFkeyInverseInput: ReviewApplicationIdFkeyInverseInput;
  ReviewApplicationIdFkeyReviewCreateInput: ReviewApplicationIdFkeyReviewCreateInput;
  ReviewAssignment: ReviewAssignment;
  ReviewAssignmentApplicationIdFkeyApplicationCreateInput: ReviewAssignmentApplicationIdFkeyApplicationCreateInput;
  ReviewAssignmentApplicationIdFkeyInput: ReviewAssignmentApplicationIdFkeyInput;
  ReviewAssignmentApplicationIdFkeyInverseInput: ReviewAssignmentApplicationIdFkeyInverseInput;
  ReviewAssignmentApplicationIdFkeyReviewAssignmentCreateInput: ReviewAssignmentApplicationIdFkeyReviewAssignmentCreateInput;
  ReviewAssignmentAssignedSectionsShape: ReviewAssignmentAssignedSectionsShape;
  ReviewAssignmentAssignedSectionsShapeCondition: ReviewAssignmentAssignedSectionsShapeCondition;
  ReviewAssignmentAssignedSectionsShapeFilter: ReviewAssignmentAssignedSectionsShapeFilter;
  ReviewAssignmentAssignedSectionsShapeInput: ReviewAssignmentAssignedSectionsShapeInput;
  ReviewAssignmentAssignedSectionsShapesConnection: ReviewAssignmentAssignedSectionsShapesConnection;
  ReviewAssignmentAssignedSectionsShapesEdge: ReviewAssignmentAssignedSectionsShapesEdge;
  ReviewAssignmentAssignerJoin: ReviewAssignmentAssignerJoin;
  ReviewAssignmentAssignerJoinCondition: ReviewAssignmentAssignerJoinCondition;
  ReviewAssignmentAssignerJoinFilter: ReviewAssignmentAssignerJoinFilter;
  ReviewAssignmentAssignerJoinInput: ReviewAssignmentAssignerJoinInput;
  ReviewAssignmentAssignerJoinNodeIdConnect: ReviewAssignmentAssignerJoinNodeIdConnect;
  ReviewAssignmentAssignerJoinNodeIdDelete: ReviewAssignmentAssignerJoinNodeIdDelete;
  ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForFakePublicReviewAssignmentAssignerJoinForeignKey0UsingReviewAssignmentAssignerJoinPkeyUpdate: ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForFakePublicReviewAssignmentAssignerJoinForeignKey0UsingReviewAssignmentAssignerJoinPkeyUpdate;
  ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyNodeIdUpdate: ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyNodeIdUpdate;
  ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingReviewAssignmentAssignerJoinPkeyUpdate: ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyUsingReviewAssignmentAssignerJoinPkeyUpdate;
  ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyNodeIdUpdate: ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyNodeIdUpdate;
  ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyUsingReviewAssignmentAssignerJoinPkeyUpdate: ReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyUsingReviewAssignmentAssignerJoinPkeyUpdate;
  ReviewAssignmentAssignerJoinOrganisationIdFkeyInput: ReviewAssignmentAssignerJoinOrganisationIdFkeyInput;
  ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput: ReviewAssignmentAssignerJoinOrganisationIdFkeyInverseInput;
  ReviewAssignmentAssignerJoinOrganisationIdFkeyOrganisationCreateInput: ReviewAssignmentAssignerJoinOrganisationIdFkeyOrganisationCreateInput;
  ReviewAssignmentAssignerJoinOrganisationIdFkeyReviewAssignmentAssignerJoinCreateInput: ReviewAssignmentAssignerJoinOrganisationIdFkeyReviewAssignmentAssignerJoinCreateInput;
  ReviewAssignmentAssignerJoinPatch: ReviewAssignmentAssignerJoinPatch;
  ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyConnect: ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyConnect;
  ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyDelete: ReviewAssignmentAssignerJoinReviewAssignmentAssignerJoinPkeyDelete;
  ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput: ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInput;
  ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput: ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyInverseInput;
  ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyReviewAssignmentAssignerJoinCreateInput: ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyReviewAssignmentAssignerJoinCreateInput;
  ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyReviewAssignmentCreateInput: ReviewAssignmentAssignerJoinReviewAssignmentIdFkeyReviewAssignmentCreateInput;
  ReviewAssignmentAssignerJoinsConnection: ReviewAssignmentAssignerJoinsConnection;
  ReviewAssignmentAssignerJoinsEdge: ReviewAssignmentAssignerJoinsEdge;
  ReviewAssignmentCondition: ReviewAssignmentCondition;
  ReviewAssignmentFilter: ReviewAssignmentFilter;
  ReviewAssignmentInput: ReviewAssignmentInput;
  ReviewAssignmentLevelIdFkeyInput: ReviewAssignmentLevelIdFkeyInput;
  ReviewAssignmentLevelIdFkeyInverseInput: ReviewAssignmentLevelIdFkeyInverseInput;
  ReviewAssignmentLevelIdFkeyReviewAssignmentCreateInput: ReviewAssignmentLevelIdFkeyReviewAssignmentCreateInput;
  ReviewAssignmentLevelIdFkeyTemplateStageReviewLevelCreateInput: ReviewAssignmentLevelIdFkeyTemplateStageReviewLevelCreateInput;
  ReviewAssignmentNodeIdConnect: ReviewAssignmentNodeIdConnect;
  ReviewAssignmentNodeIdDelete: ReviewAssignmentNodeIdDelete;
  ReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyNodeIdUpdate: ReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyNodeIdUpdate;
  ReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyUsingReviewAssignmentPkeyUpdate: ReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyUsingReviewAssignmentPkeyUpdate;
  ReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey0UsingReviewAssignmentPkeyUpdate: ReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey0UsingReviewAssignmentPkeyUpdate;
  ReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey1UsingReviewAssignmentPkeyUpdate: ReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey1UsingReviewAssignmentPkeyUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyNodeIdUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyNodeIdUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingReviewAssignmentPkeyUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyUsingReviewAssignmentPkeyUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyNodeIdUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyNodeIdUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyUsingReviewAssignmentPkeyUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyUsingReviewAssignmentPkeyUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyNodeIdUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyNodeIdUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingReviewAssignmentPkeyUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyUsingReviewAssignmentPkeyUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyNodeIdUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyNodeIdUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyUsingReviewAssignmentPkeyUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyUsingReviewAssignmentPkeyUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyNodeIdUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyNodeIdUpdate;
  ReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingReviewAssignmentPkeyUpdate: ReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingReviewAssignmentPkeyUpdate;
  ReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyNodeIdUpdate: ReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyNodeIdUpdate;
  ReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyUsingReviewAssignmentPkeyUpdate: ReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyUsingReviewAssignmentPkeyUpdate;
  ReviewAssignmentOrganisationIdFkeyInput: ReviewAssignmentOrganisationIdFkeyInput;
  ReviewAssignmentOrganisationIdFkeyInverseInput: ReviewAssignmentOrganisationIdFkeyInverseInput;
  ReviewAssignmentOrganisationIdFkeyOrganisationCreateInput: ReviewAssignmentOrganisationIdFkeyOrganisationCreateInput;
  ReviewAssignmentOrganisationIdFkeyReviewAssignmentCreateInput: ReviewAssignmentOrganisationIdFkeyReviewAssignmentCreateInput;
  ReviewAssignmentPatch: ReviewAssignmentPatch;
  ReviewAssignmentReviewAssignmentPkeyConnect: ReviewAssignmentReviewAssignmentPkeyConnect;
  ReviewAssignmentReviewAssignmentPkeyDelete: ReviewAssignmentReviewAssignmentPkeyDelete;
  ReviewAssignmentStageIdFkeyInput: ReviewAssignmentStageIdFkeyInput;
  ReviewAssignmentStageIdFkeyInverseInput: ReviewAssignmentStageIdFkeyInverseInput;
  ReviewAssignmentStageIdFkeyReviewAssignmentCreateInput: ReviewAssignmentStageIdFkeyReviewAssignmentCreateInput;
  ReviewAssignmentStageIdFkeyTemplateStageCreateInput: ReviewAssignmentStageIdFkeyTemplateStageCreateInput;
  ReviewAssignmentStatusFilter: ReviewAssignmentStatusFilter;
  ReviewAssignmentTemplateIdFkeyInput: ReviewAssignmentTemplateIdFkeyInput;
  ReviewAssignmentTemplateIdFkeyInverseInput: ReviewAssignmentTemplateIdFkeyInverseInput;
  ReviewAssignmentTemplateIdFkeyReviewAssignmentCreateInput: ReviewAssignmentTemplateIdFkeyReviewAssignmentCreateInput;
  ReviewAssignmentTemplateIdFkeyTemplateCreateInput: ReviewAssignmentTemplateIdFkeyTemplateCreateInput;
  ReviewAssignmentToManyReviewAssignmentAssignerJoinFilter: ReviewAssignmentToManyReviewAssignmentAssignerJoinFilter;
  ReviewAssignmentsConnection: ReviewAssignmentsConnection;
  ReviewAssignmentsEdge: ReviewAssignmentsEdge;
  ReviewCondition: ReviewCondition;
  ReviewDecision: ReviewDecision;
  ReviewDecisionCondition: ReviewDecisionCondition;
  ReviewDecisionFilter: ReviewDecisionFilter;
  ReviewDecisionInput: ReviewDecisionInput;
  ReviewDecisionNodeIdConnect: ReviewDecisionNodeIdConnect;
  ReviewDecisionNodeIdDelete: ReviewDecisionNodeIdDelete;
  ReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyNodeIdUpdate: ReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyNodeIdUpdate;
  ReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewDecisionPkeyUpdate: ReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewDecisionPkeyUpdate;
  ReviewDecisionPatch: ReviewDecisionPatch;
  ReviewDecisionReviewDecisionPkeyConnect: ReviewDecisionReviewDecisionPkeyConnect;
  ReviewDecisionReviewDecisionPkeyDelete: ReviewDecisionReviewDecisionPkeyDelete;
  ReviewDecisionReviewIdFkeyInput: ReviewDecisionReviewIdFkeyInput;
  ReviewDecisionReviewIdFkeyInverseInput: ReviewDecisionReviewIdFkeyInverseInput;
  ReviewDecisionReviewIdFkeyReviewCreateInput: ReviewDecisionReviewIdFkeyReviewCreateInput;
  ReviewDecisionReviewIdFkeyReviewDecisionCreateInput: ReviewDecisionReviewIdFkeyReviewDecisionCreateInput;
  ReviewDecisionsConnection: ReviewDecisionsConnection;
  ReviewDecisionsEdge: ReviewDecisionsEdge;
  ReviewFilter: ReviewFilter;
  ReviewInput: ReviewInput;
  ReviewListConnection: ReviewListConnection;
  ReviewListEdge: ReviewListEdge;
  ReviewListRecord: ReviewListRecord;
  ReviewListRecordFilter: ReviewListRecordFilter;
  ReviewNodeIdConnect: ReviewNodeIdConnect;
  ReviewNodeIdDelete: ReviewNodeIdDelete;
  ReviewOnNotificationForNotificationReviewIdFkeyNodeIdUpdate: ReviewOnNotificationForNotificationReviewIdFkeyNodeIdUpdate;
  ReviewOnNotificationForNotificationReviewIdFkeyUsingReviewPkeyUpdate: ReviewOnNotificationForNotificationReviewIdFkeyUsingReviewPkeyUpdate;
  ReviewOnNotificationForNotificationReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate: ReviewOnNotificationForNotificationReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate;
  ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyNodeIdUpdate: ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyNodeIdUpdate;
  ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewPkeyUpdate: ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewPkeyUpdate;
  ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate: ReviewOnReviewDecisionForReviewDecisionReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate;
  ReviewOnReviewForFakePublicReviewForeignKey0UsingReviewPkeyUpdate: ReviewOnReviewForFakePublicReviewForeignKey0UsingReviewPkeyUpdate;
  ReviewOnReviewForFakePublicReviewForeignKey0UsingReviewReviewAssignmentIdKeyUpdate: ReviewOnReviewForFakePublicReviewForeignKey0UsingReviewReviewAssignmentIdKeyUpdate;
  ReviewOnReviewForReviewApplicationIdFkeyNodeIdUpdate: ReviewOnReviewForReviewApplicationIdFkeyNodeIdUpdate;
  ReviewOnReviewForReviewApplicationIdFkeyUsingReviewPkeyUpdate: ReviewOnReviewForReviewApplicationIdFkeyUsingReviewPkeyUpdate;
  ReviewOnReviewForReviewApplicationIdFkeyUsingReviewReviewAssignmentIdKeyUpdate: ReviewOnReviewForReviewApplicationIdFkeyUsingReviewReviewAssignmentIdKeyUpdate;
  ReviewOnReviewForReviewReviewAssignmentIdFkeyNodeIdUpdate: ReviewOnReviewForReviewReviewAssignmentIdFkeyNodeIdUpdate;
  ReviewOnReviewForReviewReviewAssignmentIdFkeyUsingReviewPkeyUpdate: ReviewOnReviewForReviewReviewAssignmentIdFkeyUsingReviewPkeyUpdate;
  ReviewOnReviewForReviewReviewAssignmentIdFkeyUsingReviewReviewAssignmentIdKeyUpdate: ReviewOnReviewForReviewReviewAssignmentIdFkeyUsingReviewReviewAssignmentIdKeyUpdate;
  ReviewOnReviewResponseForReviewResponseReviewIdFkeyNodeIdUpdate: ReviewOnReviewResponseForReviewResponseReviewIdFkeyNodeIdUpdate;
  ReviewOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewPkeyUpdate: ReviewOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewPkeyUpdate;
  ReviewOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate: ReviewOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate;
  ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyNodeIdUpdate: ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyNodeIdUpdate;
  ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewPkeyUpdate: ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewPkeyUpdate;
  ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate: ReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewReviewAssignmentIdKeyUpdate;
  ReviewPatch: ReviewPatch;
  ReviewResponse: ReviewResponse;
  ReviewResponseApplicationResponseIdFkeyApplicationResponseCreateInput: ReviewResponseApplicationResponseIdFkeyApplicationResponseCreateInput;
  ReviewResponseApplicationResponseIdFkeyInput: ReviewResponseApplicationResponseIdFkeyInput;
  ReviewResponseApplicationResponseIdFkeyInverseInput: ReviewResponseApplicationResponseIdFkeyInverseInput;
  ReviewResponseApplicationResponseIdFkeyReviewResponseCreateInput: ReviewResponseApplicationResponseIdFkeyReviewResponseCreateInput;
  ReviewResponseCondition: ReviewResponseCondition;
  ReviewResponseDecisionFilter: ReviewResponseDecisionFilter;
  ReviewResponseFilter: ReviewResponseFilter;
  ReviewResponseInput: ReviewResponseInput;
  ReviewResponseNodeIdConnect: ReviewResponseNodeIdConnect;
  ReviewResponseNodeIdDelete: ReviewResponseNodeIdDelete;
  ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate: ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyNodeIdUpdate;
  ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingReviewResponsePkeyUpdate: ReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyUsingReviewResponsePkeyUpdate;
  ReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyNodeIdUpdate: ReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyNodeIdUpdate;
  ReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyUsingReviewResponsePkeyUpdate: ReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyUsingReviewResponsePkeyUpdate;
  ReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyNodeIdUpdate: ReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyNodeIdUpdate;
  ReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewResponsePkeyUpdate: ReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyUsingReviewResponsePkeyUpdate;
  ReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyNodeIdUpdate: ReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyNodeIdUpdate;
  ReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyUsingReviewResponsePkeyUpdate: ReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyUsingReviewResponsePkeyUpdate;
  ReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyNodeIdUpdate: ReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyNodeIdUpdate;
  ReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingReviewResponsePkeyUpdate: ReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingReviewResponsePkeyUpdate;
  ReviewResponseOriginalReviewResponseIdFkeyInput: ReviewResponseOriginalReviewResponseIdFkeyInput;
  ReviewResponseOriginalReviewResponseIdFkeyReviewResponseCreateInput: ReviewResponseOriginalReviewResponseIdFkeyReviewResponseCreateInput;
  ReviewResponsePatch: ReviewResponsePatch;
  ReviewResponseRecommendedApplicantVisibilityFilter: ReviewResponseRecommendedApplicantVisibilityFilter;
  ReviewResponseReviewIdFkeyInput: ReviewResponseReviewIdFkeyInput;
  ReviewResponseReviewIdFkeyInverseInput: ReviewResponseReviewIdFkeyInverseInput;
  ReviewResponseReviewIdFkeyReviewCreateInput: ReviewResponseReviewIdFkeyReviewCreateInput;
  ReviewResponseReviewIdFkeyReviewResponseCreateInput: ReviewResponseReviewIdFkeyReviewResponseCreateInput;
  ReviewResponseReviewResponseLinkIdFkeyInput: ReviewResponseReviewResponseLinkIdFkeyInput;
  ReviewResponseReviewResponseLinkIdFkeyReviewResponseCreateInput: ReviewResponseReviewResponseLinkIdFkeyReviewResponseCreateInput;
  ReviewResponseReviewResponsePkeyConnect: ReviewResponseReviewResponsePkeyConnect;
  ReviewResponseReviewResponsePkeyDelete: ReviewResponseReviewResponsePkeyDelete;
  ReviewResponseStatusFilter: ReviewResponseStatusFilter;
  ReviewResponseTemplateElementIdFkeyInput: ReviewResponseTemplateElementIdFkeyInput;
  ReviewResponseTemplateElementIdFkeyInverseInput: ReviewResponseTemplateElementIdFkeyInverseInput;
  ReviewResponseTemplateElementIdFkeyReviewResponseCreateInput: ReviewResponseTemplateElementIdFkeyReviewResponseCreateInput;
  ReviewResponseTemplateElementIdFkeyTemplateElementCreateInput: ReviewResponseTemplateElementIdFkeyTemplateElementCreateInput;
  ReviewResponseToManyReviewResponseFilter: ReviewResponseToManyReviewResponseFilter;
  ReviewResponsesConnection: ReviewResponsesConnection;
  ReviewResponsesEdge: ReviewResponsesEdge;
  ReviewReviewAssignmentIdFkeyInput: ReviewReviewAssignmentIdFkeyInput;
  ReviewReviewAssignmentIdFkeyInverseInput: ReviewReviewAssignmentIdFkeyInverseInput;
  ReviewReviewAssignmentIdFkeyReviewAssignmentCreateInput: ReviewReviewAssignmentIdFkeyReviewAssignmentCreateInput;
  ReviewReviewAssignmentIdFkeyReviewCreateInput: ReviewReviewAssignmentIdFkeyReviewCreateInput;
  ReviewReviewPkeyConnect: ReviewReviewPkeyConnect;
  ReviewReviewPkeyDelete: ReviewReviewPkeyDelete;
  ReviewReviewReviewAssignmentIdKeyConnect: ReviewReviewReviewAssignmentIdKeyConnect;
  ReviewReviewReviewAssignmentIdKeyDelete: ReviewReviewReviewAssignmentIdKeyDelete;
  ReviewStatusFilter: ReviewStatusFilter;
  ReviewStatusHistoriesConnection: ReviewStatusHistoriesConnection;
  ReviewStatusHistoriesEdge: ReviewStatusHistoriesEdge;
  ReviewStatusHistory: ReviewStatusHistory;
  ReviewStatusHistoryCondition: ReviewStatusHistoryCondition;
  ReviewStatusHistoryFilter: ReviewStatusHistoryFilter;
  ReviewStatusHistoryInput: ReviewStatusHistoryInput;
  ReviewStatusHistoryNodeIdConnect: ReviewStatusHistoryNodeIdConnect;
  ReviewStatusHistoryNodeIdDelete: ReviewStatusHistoryNodeIdDelete;
  ReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyNodeIdUpdate: ReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyNodeIdUpdate;
  ReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewStatusHistoryPkeyUpdate: ReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyUsingReviewStatusHistoryPkeyUpdate;
  ReviewStatusHistoryPatch: ReviewStatusHistoryPatch;
  ReviewStatusHistoryReviewIdFkeyInput: ReviewStatusHistoryReviewIdFkeyInput;
  ReviewStatusHistoryReviewIdFkeyInverseInput: ReviewStatusHistoryReviewIdFkeyInverseInput;
  ReviewStatusHistoryReviewIdFkeyReviewCreateInput: ReviewStatusHistoryReviewIdFkeyReviewCreateInput;
  ReviewStatusHistoryReviewIdFkeyReviewStatusHistoryCreateInput: ReviewStatusHistoryReviewIdFkeyReviewStatusHistoryCreateInput;
  ReviewStatusHistoryReviewStatusHistoryPkeyConnect: ReviewStatusHistoryReviewStatusHistoryPkeyConnect;
  ReviewStatusHistoryReviewStatusHistoryPkeyDelete: ReviewStatusHistoryReviewStatusHistoryPkeyDelete;
  ReviewToManyNotificationFilter: ReviewToManyNotificationFilter;
  ReviewToManyReviewDecisionFilter: ReviewToManyReviewDecisionFilter;
  ReviewToManyReviewResponseFilter: ReviewToManyReviewResponseFilter;
  ReviewToManyReviewStatusHistoryFilter: ReviewToManyReviewStatusHistoryFilter;
  ReviewabilityFilter: ReviewabilityFilter;
  ReviewableQuestionEdge: ReviewableQuestionEdge;
  ReviewableQuestionsConnection: ReviewableQuestionsConnection;
  ReviewableQuestionsRecord: ReviewableQuestionsRecord;
  ReviewableQuestionsRecordFilter: ReviewableQuestionsRecordFilter;
  ReviewerActionFilter: ReviewerActionFilter;
  ReviewsConnection: ReviewsConnection;
  ReviewsEdge: ReviewsEdge;
  SchemaColumn: SchemaColumn;
  SchemaColumnCondition: SchemaColumnCondition;
  SchemaColumnFilter: SchemaColumnFilter;
  SchemaColumnsConnection: SchemaColumnsConnection;
  SchemaColumnsEdge: SchemaColumnsEdge;
  SingleApplicationDetailConnection: SingleApplicationDetailConnection;
  SingleApplicationDetailEdge: SingleApplicationDetailEdge;
  SingleApplicationDetailRecord: SingleApplicationDetailRecord;
  SingleApplicationDetailRecordFilter: SingleApplicationDetailRecordFilter;
  SqlIdentifier: Scalars['SqlIdentifier']['output'];
  SqlIdentifierFilter: SqlIdentifierFilter;
  String: Scalars['String']['output'];
  StringFilter: StringFilter;
  StringListFilter: StringListFilter;
  SystemInfo: SystemInfo;
  SystemInfoCondition: SystemInfoCondition;
  SystemInfoFilter: SystemInfoFilter;
  SystemInfoInput: SystemInfoInput;
  SystemInfoPatch: SystemInfoPatch;
  SystemInfosConnection: SystemInfosConnection;
  SystemInfosEdge: SystemInfosEdge;
  Template: Template;
  TemplateAction: TemplateAction;
  TemplateActionCondition: TemplateActionCondition;
  TemplateActionFilter: TemplateActionFilter;
  TemplateActionInput: TemplateActionInput;
  TemplateActionNodeIdConnect: TemplateActionNodeIdConnect;
  TemplateActionNodeIdDelete: TemplateActionNodeIdDelete;
  TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate: TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate;
  TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplateActionPkeyUpdate: TemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplateActionPkeyUpdate;
  TemplateActionPatch: TemplateActionPatch;
  TemplateActionTemplateActionPkeyConnect: TemplateActionTemplateActionPkeyConnect;
  TemplateActionTemplateActionPkeyDelete: TemplateActionTemplateActionPkeyDelete;
  TemplateActionTemplateIdFkeyInput: TemplateActionTemplateIdFkeyInput;
  TemplateActionTemplateIdFkeyInverseInput: TemplateActionTemplateIdFkeyInverseInput;
  TemplateActionTemplateIdFkeyTemplateActionCreateInput: TemplateActionTemplateIdFkeyTemplateActionCreateInput;
  TemplateActionTemplateIdFkeyTemplateCreateInput: TemplateActionTemplateIdFkeyTemplateCreateInput;
  TemplateActionsConnection: TemplateActionsConnection;
  TemplateActionsEdge: TemplateActionsEdge;
  TemplateCategoriesConnection: TemplateCategoriesConnection;
  TemplateCategoriesEdge: TemplateCategoriesEdge;
  TemplateCategory: TemplateCategory;
  TemplateCategoryCondition: TemplateCategoryCondition;
  TemplateCategoryFilter: TemplateCategoryFilter;
  TemplateCategoryInput: TemplateCategoryInput;
  TemplateCategoryNodeIdConnect: TemplateCategoryNodeIdConnect;
  TemplateCategoryNodeIdDelete: TemplateCategoryNodeIdDelete;
  TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyNodeIdUpdate: TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyNodeIdUpdate;
  TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCategoryCodeKeyUpdate: TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCategoryCodeKeyUpdate;
  TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCategoryPkeyUpdate: TemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCategoryPkeyUpdate;
  TemplateCategoryPatch: TemplateCategoryPatch;
  TemplateCategoryTemplateCategoryCodeKeyConnect: TemplateCategoryTemplateCategoryCodeKeyConnect;
  TemplateCategoryTemplateCategoryCodeKeyDelete: TemplateCategoryTemplateCategoryCodeKeyDelete;
  TemplateCategoryTemplateCategoryPkeyConnect: TemplateCategoryTemplateCategoryPkeyConnect;
  TemplateCategoryTemplateCategoryPkeyDelete: TemplateCategoryTemplateCategoryPkeyDelete;
  TemplateCategoryToManyTemplateFilter: TemplateCategoryToManyTemplateFilter;
  TemplateCondition: TemplateCondition;
  TemplateElement: TemplateElement;
  TemplateElementCategoryFilter: TemplateElementCategoryFilter;
  TemplateElementCondition: TemplateElementCondition;
  TemplateElementFilter: TemplateElementFilter;
  TemplateElementInput: TemplateElementInput;
  TemplateElementNodeIdConnect: TemplateElementNodeIdConnect;
  TemplateElementNodeIdDelete: TemplateElementNodeIdDelete;
  TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyNodeIdUpdate: TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyNodeIdUpdate;
  TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingTemplateElementPkeyUpdate: TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingTemplateElementPkeyUpdate;
  TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate: TemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate;
  TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyNodeIdUpdate: TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyNodeIdUpdate;
  TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingTemplateElementPkeyUpdate: TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingTemplateElementPkeyUpdate;
  TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate: TemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate;
  TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate: TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate;
  TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateElementPkeyUpdate: TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateElementPkeyUpdate;
  TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate: TemplateElementOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateElementTemplateCodeCodeTemplateVersionKeyUpdate;
  TemplateElementPatch: TemplateElementPatch;
  TemplateElementSectionIdFkeyInput: TemplateElementSectionIdFkeyInput;
  TemplateElementSectionIdFkeyInverseInput: TemplateElementSectionIdFkeyInverseInput;
  TemplateElementSectionIdFkeyTemplateElementCreateInput: TemplateElementSectionIdFkeyTemplateElementCreateInput;
  TemplateElementSectionIdFkeyTemplateSectionCreateInput: TemplateElementSectionIdFkeyTemplateSectionCreateInput;
  TemplateElementTemplateElementPkeyConnect: TemplateElementTemplateElementPkeyConnect;
  TemplateElementTemplateElementPkeyDelete: TemplateElementTemplateElementPkeyDelete;
  TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyConnect: TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyConnect;
  TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyDelete: TemplateElementTemplateElementTemplateCodeCodeTemplateVersionKeyDelete;
  TemplateElementToManyApplicationResponseFilter: TemplateElementToManyApplicationResponseFilter;
  TemplateElementToManyReviewResponseFilter: TemplateElementToManyReviewResponseFilter;
  TemplateElementsConnection: TemplateElementsConnection;
  TemplateElementsEdge: TemplateElementsEdge;
  TemplateFilter: TemplateFilter;
  TemplateFilterJoin: TemplateFilterJoin;
  TemplateFilterJoinCondition: TemplateFilterJoinCondition;
  TemplateFilterJoinFilter: TemplateFilterJoinFilter;
  TemplateFilterJoinFilterIdFkeyFilterCreateInput: TemplateFilterJoinFilterIdFkeyFilterCreateInput;
  TemplateFilterJoinFilterIdFkeyInput: TemplateFilterJoinFilterIdFkeyInput;
  TemplateFilterJoinFilterIdFkeyInverseInput: TemplateFilterJoinFilterIdFkeyInverseInput;
  TemplateFilterJoinFilterIdFkeyTemplateFilterJoinCreateInput: TemplateFilterJoinFilterIdFkeyTemplateFilterJoinCreateInput;
  TemplateFilterJoinInput: TemplateFilterJoinInput;
  TemplateFilterJoinNodeIdConnect: TemplateFilterJoinNodeIdConnect;
  TemplateFilterJoinNodeIdDelete: TemplateFilterJoinNodeIdDelete;
  TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyNodeIdUpdate: TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyNodeIdUpdate;
  TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingTemplateFilterJoinPkeyUpdate: TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyUsingTemplateFilterJoinPkeyUpdate;
  TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyNodeIdUpdate: TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyNodeIdUpdate;
  TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplateFilterJoinPkeyUpdate: TemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplateFilterJoinPkeyUpdate;
  TemplateFilterJoinPatch: TemplateFilterJoinPatch;
  TemplateFilterJoinTemplateFilterJoinPkeyConnect: TemplateFilterJoinTemplateFilterJoinPkeyConnect;
  TemplateFilterJoinTemplateFilterJoinPkeyDelete: TemplateFilterJoinTemplateFilterJoinPkeyDelete;
  TemplateFilterJoinTemplateIdFkeyInput: TemplateFilterJoinTemplateIdFkeyInput;
  TemplateFilterJoinTemplateIdFkeyInverseInput: TemplateFilterJoinTemplateIdFkeyInverseInput;
  TemplateFilterJoinTemplateIdFkeyTemplateCreateInput: TemplateFilterJoinTemplateIdFkeyTemplateCreateInput;
  TemplateFilterJoinTemplateIdFkeyTemplateFilterJoinCreateInput: TemplateFilterJoinTemplateIdFkeyTemplateFilterJoinCreateInput;
  TemplateFilterJoinsConnection: TemplateFilterJoinsConnection;
  TemplateFilterJoinsEdge: TemplateFilterJoinsEdge;
  TemplateInput: TemplateInput;
  TemplateNodeIdConnect: TemplateNodeIdConnect;
  TemplateNodeIdDelete: TemplateNodeIdDelete;
  TemplateOnActionQueueForActionQueueTemplateIdFkeyNodeIdUpdate: TemplateOnActionQueueForActionQueueTemplateIdFkeyNodeIdUpdate;
  TemplateOnActionQueueForActionQueueTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnActionQueueForActionQueueTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnActionQueueForActionQueueTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnActionQueueForActionQueueTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate: TemplateOnApplicationForApplicationTemplateIdFkeyNodeIdUpdate;
  TemplateOnApplicationForApplicationTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnApplicationForApplicationTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnApplicationForApplicationTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnApplicationForApplicationTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnFileForFileTemplateIdFkeyNodeIdUpdate: TemplateOnFileForFileTemplateIdFkeyNodeIdUpdate;
  TemplateOnFileForFileTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnFileForFileTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnFileForFileTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnFileForFileTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyNodeIdUpdate: TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyNodeIdUpdate;
  TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate: TemplateOnTemplateActionForTemplateActionTemplateIdFkeyNodeIdUpdate;
  TemplateOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnTemplateActionForTemplateActionTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyNodeIdUpdate: TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyNodeIdUpdate;
  TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnTemplateForTemplateTemplateCategoryIdFkeyNodeIdUpdate: TemplateOnTemplateForTemplateTemplateCategoryIdFkeyNodeIdUpdate;
  TemplateOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplatePkeyUpdate: TemplateOnTemplateForTemplateTemplateCategoryIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate: TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate;
  TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate: TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate;
  TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnTemplateStageForTemplateStageTemplateIdFkeyNodeIdUpdate: TemplateOnTemplateStageForTemplateStageTemplateIdFkeyNodeIdUpdate;
  TemplateOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyNodeIdUpdate: TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyNodeIdUpdate;
  TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate: TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTemplateCodeVersionIdKeyUpdate;
  TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTemplatePkeyUpdate: TemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTemplatePkeyUpdate;
  TemplatePatch: TemplatePatch;
  TemplatePermission: TemplatePermission;
  TemplatePermissionCondition: TemplatePermissionCondition;
  TemplatePermissionFilter: TemplatePermissionFilter;
  TemplatePermissionInput: TemplatePermissionInput;
  TemplatePermissionNodeIdConnect: TemplatePermissionNodeIdConnect;
  TemplatePermissionNodeIdDelete: TemplatePermissionNodeIdDelete;
  TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyNodeIdUpdate: TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyNodeIdUpdate;
  TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingTemplatePermissionPkeyUpdate: TemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyUsingTemplatePermissionPkeyUpdate;
  TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate: TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyNodeIdUpdate;
  TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePermissionPkeyUpdate: TemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyUsingTemplatePermissionPkeyUpdate;
  TemplatePermissionPatch: TemplatePermissionPatch;
  TemplatePermissionPermissionNameIdFkeyInput: TemplatePermissionPermissionNameIdFkeyInput;
  TemplatePermissionPermissionNameIdFkeyInverseInput: TemplatePermissionPermissionNameIdFkeyInverseInput;
  TemplatePermissionPermissionNameIdFkeyPermissionNameCreateInput: TemplatePermissionPermissionNameIdFkeyPermissionNameCreateInput;
  TemplatePermissionPermissionNameIdFkeyTemplatePermissionCreateInput: TemplatePermissionPermissionNameIdFkeyTemplatePermissionCreateInput;
  TemplatePermissionTemplateIdFkeyInput: TemplatePermissionTemplateIdFkeyInput;
  TemplatePermissionTemplateIdFkeyInverseInput: TemplatePermissionTemplateIdFkeyInverseInput;
  TemplatePermissionTemplateIdFkeyTemplateCreateInput: TemplatePermissionTemplateIdFkeyTemplateCreateInput;
  TemplatePermissionTemplateIdFkeyTemplatePermissionCreateInput: TemplatePermissionTemplateIdFkeyTemplatePermissionCreateInput;
  TemplatePermissionTemplatePermissionPkeyConnect: TemplatePermissionTemplatePermissionPkeyConnect;
  TemplatePermissionTemplatePermissionPkeyDelete: TemplatePermissionTemplatePermissionPkeyDelete;
  TemplatePermissionsConnection: TemplatePermissionsConnection;
  TemplatePermissionsEdge: TemplatePermissionsEdge;
  TemplateSection: TemplateSection;
  TemplateSectionCondition: TemplateSectionCondition;
  TemplateSectionFilter: TemplateSectionFilter;
  TemplateSectionInput: TemplateSectionInput;
  TemplateSectionNodeIdConnect: TemplateSectionNodeIdConnect;
  TemplateSectionNodeIdDelete: TemplateSectionNodeIdDelete;
  TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate: TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyNodeIdUpdate;
  TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateSectionPkeyUpdate: TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateSectionPkeyUpdate;
  TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateSectionTemplateIdCodeKeyUpdate: TemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyUsingTemplateSectionTemplateIdCodeKeyUpdate;
  TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate: TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyNodeIdUpdate;
  TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateSectionPkeyUpdate: TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateSectionPkeyUpdate;
  TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateSectionTemplateIdCodeKeyUpdate: TemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyUsingTemplateSectionTemplateIdCodeKeyUpdate;
  TemplateSectionPatch: TemplateSectionPatch;
  TemplateSectionTemplateIdFkeyInput: TemplateSectionTemplateIdFkeyInput;
  TemplateSectionTemplateIdFkeyInverseInput: TemplateSectionTemplateIdFkeyInverseInput;
  TemplateSectionTemplateIdFkeyTemplateCreateInput: TemplateSectionTemplateIdFkeyTemplateCreateInput;
  TemplateSectionTemplateIdFkeyTemplateSectionCreateInput: TemplateSectionTemplateIdFkeyTemplateSectionCreateInput;
  TemplateSectionTemplateSectionPkeyConnect: TemplateSectionTemplateSectionPkeyConnect;
  TemplateSectionTemplateSectionPkeyDelete: TemplateSectionTemplateSectionPkeyDelete;
  TemplateSectionTemplateSectionTemplateIdCodeKeyConnect: TemplateSectionTemplateSectionTemplateIdCodeKeyConnect;
  TemplateSectionTemplateSectionTemplateIdCodeKeyDelete: TemplateSectionTemplateSectionTemplateIdCodeKeyDelete;
  TemplateSectionToManyTemplateElementFilter: TemplateSectionToManyTemplateElementFilter;
  TemplateSectionsConnection: TemplateSectionsConnection;
  TemplateSectionsEdge: TemplateSectionsEdge;
  TemplateStage: TemplateStage;
  TemplateStageCondition: TemplateStageCondition;
  TemplateStageFilter: TemplateStageFilter;
  TemplateStageInput: TemplateStageInput;
  TemplateStageNodeIdConnect: TemplateStageNodeIdConnect;
  TemplateStageNodeIdDelete: TemplateStageNodeIdDelete;
  TemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyNodeIdUpdate: TemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyNodeIdUpdate;
  TemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyUsingTemplateStagePkeyUpdate: TemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyUsingTemplateStagePkeyUpdate;
  TemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyNodeIdUpdate: TemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyNodeIdUpdate;
  TemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyUsingTemplateStagePkeyUpdate: TemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyUsingTemplateStagePkeyUpdate;
  TemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyNodeIdUpdate: TemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyNodeIdUpdate;
  TemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplateStagePkeyUpdate: TemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyUsingTemplateStagePkeyUpdate;
  TemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyNodeIdUpdate: TemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyNodeIdUpdate;
  TemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyUsingTemplateStagePkeyUpdate: TemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyUsingTemplateStagePkeyUpdate;
  TemplateStagePatch: TemplateStagePatch;
  TemplateStageReviewLevel: TemplateStageReviewLevel;
  TemplateStageReviewLevelCondition: TemplateStageReviewLevelCondition;
  TemplateStageReviewLevelFilter: TemplateStageReviewLevelFilter;
  TemplateStageReviewLevelInput: TemplateStageReviewLevelInput;
  TemplateStageReviewLevelNodeIdConnect: TemplateStageReviewLevelNodeIdConnect;
  TemplateStageReviewLevelNodeIdDelete: TemplateStageReviewLevelNodeIdDelete;
  TemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyNodeIdUpdate: TemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyNodeIdUpdate;
  TemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyUsingTemplateStageReviewLevelPkeyUpdate: TemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyUsingTemplateStageReviewLevelPkeyUpdate;
  TemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyNodeIdUpdate: TemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyNodeIdUpdate;
  TemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyUsingTemplateStageReviewLevelPkeyUpdate: TemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyUsingTemplateStageReviewLevelPkeyUpdate;
  TemplateStageReviewLevelPatch: TemplateStageReviewLevelPatch;
  TemplateStageReviewLevelStageIdFkeyInput: TemplateStageReviewLevelStageIdFkeyInput;
  TemplateStageReviewLevelStageIdFkeyInverseInput: TemplateStageReviewLevelStageIdFkeyInverseInput;
  TemplateStageReviewLevelStageIdFkeyTemplateStageCreateInput: TemplateStageReviewLevelStageIdFkeyTemplateStageCreateInput;
  TemplateStageReviewLevelStageIdFkeyTemplateStageReviewLevelCreateInput: TemplateStageReviewLevelStageIdFkeyTemplateStageReviewLevelCreateInput;
  TemplateStageReviewLevelTemplateStageReviewLevelPkeyConnect: TemplateStageReviewLevelTemplateStageReviewLevelPkeyConnect;
  TemplateStageReviewLevelTemplateStageReviewLevelPkeyDelete: TemplateStageReviewLevelTemplateStageReviewLevelPkeyDelete;
  TemplateStageReviewLevelToManyReviewAssignmentFilter: TemplateStageReviewLevelToManyReviewAssignmentFilter;
  TemplateStageReviewLevelsConnection: TemplateStageReviewLevelsConnection;
  TemplateStageReviewLevelsEdge: TemplateStageReviewLevelsEdge;
  TemplateStageTemplateIdFkeyInput: TemplateStageTemplateIdFkeyInput;
  TemplateStageTemplateIdFkeyInverseInput: TemplateStageTemplateIdFkeyInverseInput;
  TemplateStageTemplateIdFkeyTemplateCreateInput: TemplateStageTemplateIdFkeyTemplateCreateInput;
  TemplateStageTemplateIdFkeyTemplateStageCreateInput: TemplateStageTemplateIdFkeyTemplateStageCreateInput;
  TemplateStageTemplateStagePkeyConnect: TemplateStageTemplateStagePkeyConnect;
  TemplateStageTemplateStagePkeyDelete: TemplateStageTemplateStagePkeyDelete;
  TemplateStageToManyApplicationStageHistoryFilter: TemplateStageToManyApplicationStageHistoryFilter;
  TemplateStageToManyReviewAssignmentFilter: TemplateStageToManyReviewAssignmentFilter;
  TemplateStageToManyTemplateStageReviewLevelFilter: TemplateStageToManyTemplateStageReviewLevelFilter;
  TemplateStagesConnection: TemplateStagesConnection;
  TemplateStagesEdge: TemplateStagesEdge;
  TemplateStatusFilter: TemplateStatusFilter;
  TemplateTemplateCategoryIdFkeyInput: TemplateTemplateCategoryIdFkeyInput;
  TemplateTemplateCategoryIdFkeyInverseInput: TemplateTemplateCategoryIdFkeyInverseInput;
  TemplateTemplateCategoryIdFkeyTemplateCategoryCreateInput: TemplateTemplateCategoryIdFkeyTemplateCategoryCreateInput;
  TemplateTemplateCategoryIdFkeyTemplateCreateInput: TemplateTemplateCategoryIdFkeyTemplateCreateInput;
  TemplateTemplateCodeVersionIdKeyConnect: TemplateTemplateCodeVersionIdKeyConnect;
  TemplateTemplateCodeVersionIdKeyDelete: TemplateTemplateCodeVersionIdKeyDelete;
  TemplateTemplatePkeyConnect: TemplateTemplatePkeyConnect;
  TemplateTemplatePkeyDelete: TemplateTemplatePkeyDelete;
  TemplateToManyActionQueueFilter: TemplateToManyActionQueueFilter;
  TemplateToManyApplicationFilter: TemplateToManyApplicationFilter;
  TemplateToManyFileFilter: TemplateToManyFileFilter;
  TemplateToManyReviewAssignmentFilter: TemplateToManyReviewAssignmentFilter;
  TemplateToManyTemplateActionFilter: TemplateToManyTemplateActionFilter;
  TemplateToManyTemplateFilterJoinFilter: TemplateToManyTemplateFilterJoinFilter;
  TemplateToManyTemplatePermissionFilter: TemplateToManyTemplatePermissionFilter;
  TemplateToManyTemplateSectionFilter: TemplateToManyTemplateSectionFilter;
  TemplateToManyTemplateStageFilter: TemplateToManyTemplateStageFilter;
  TemplateToManyTriggerScheduleFilter: TemplateToManyTriggerScheduleFilter;
  TemplatesConnection: TemplatesConnection;
  TemplatesEdge: TemplatesEdge;
  TriggerFilter: TriggerFilter;
  TriggerQueue: TriggerQueue;
  TriggerQueueApplicationIdFkeyApplicationCreateInput: TriggerQueueApplicationIdFkeyApplicationCreateInput;
  TriggerQueueApplicationIdFkeyInput: TriggerQueueApplicationIdFkeyInput;
  TriggerQueueApplicationIdFkeyInverseInput: TriggerQueueApplicationIdFkeyInverseInput;
  TriggerQueueApplicationIdFkeyTriggerQueueCreateInput: TriggerQueueApplicationIdFkeyTriggerQueueCreateInput;
  TriggerQueueCondition: TriggerQueueCondition;
  TriggerQueueFilter: TriggerQueueFilter;
  TriggerQueueInput: TriggerQueueInput;
  TriggerQueueNodeIdConnect: TriggerQueueNodeIdConnect;
  TriggerQueueNodeIdDelete: TriggerQueueNodeIdDelete;
  TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate: TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyNodeIdUpdate;
  TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyUsingTriggerQueuePkeyUpdate: TriggerQueueOnActionQueueForActionQueueTriggerEventFkeyUsingTriggerQueuePkeyUpdate;
  TriggerQueueOnTriggerQueueForTriggerQueueApplicationIdFkeyNodeIdUpdate: TriggerQueueOnTriggerQueueForTriggerQueueApplicationIdFkeyNodeIdUpdate;
  TriggerQueueOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingTriggerQueuePkeyUpdate: TriggerQueueOnTriggerQueueForTriggerQueueApplicationIdFkeyUsingTriggerQueuePkeyUpdate;
  TriggerQueuePatch: TriggerQueuePatch;
  TriggerQueueStatusFilter: TriggerQueueStatusFilter;
  TriggerQueueToManyActionQueueFilter: TriggerQueueToManyActionQueueFilter;
  TriggerQueueTriggerQueuePkeyConnect: TriggerQueueTriggerQueuePkeyConnect;
  TriggerQueueTriggerQueuePkeyDelete: TriggerQueueTriggerQueuePkeyDelete;
  TriggerQueuesConnection: TriggerQueuesConnection;
  TriggerQueuesEdge: TriggerQueuesEdge;
  TriggerSchedule: TriggerSchedule;
  TriggerScheduleApplicationIdFkeyApplicationCreateInput: TriggerScheduleApplicationIdFkeyApplicationCreateInput;
  TriggerScheduleApplicationIdFkeyInput: TriggerScheduleApplicationIdFkeyInput;
  TriggerScheduleApplicationIdFkeyInverseInput: TriggerScheduleApplicationIdFkeyInverseInput;
  TriggerScheduleApplicationIdFkeyTriggerScheduleCreateInput: TriggerScheduleApplicationIdFkeyTriggerScheduleCreateInput;
  TriggerScheduleCondition: TriggerScheduleCondition;
  TriggerScheduleFilter: TriggerScheduleFilter;
  TriggerScheduleInput: TriggerScheduleInput;
  TriggerScheduleNodeIdConnect: TriggerScheduleNodeIdConnect;
  TriggerScheduleNodeIdDelete: TriggerScheduleNodeIdDelete;
  TriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyNodeIdUpdate: TriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyNodeIdUpdate;
  TriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingTriggerSchedulePkeyUpdate: TriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyUsingTriggerSchedulePkeyUpdate;
  TriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyNodeIdUpdate: TriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyNodeIdUpdate;
  TriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTriggerSchedulePkeyUpdate: TriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyUsingTriggerSchedulePkeyUpdate;
  TriggerSchedulePatch: TriggerSchedulePatch;
  TriggerScheduleTemplateIdFkeyInput: TriggerScheduleTemplateIdFkeyInput;
  TriggerScheduleTemplateIdFkeyInverseInput: TriggerScheduleTemplateIdFkeyInverseInput;
  TriggerScheduleTemplateIdFkeyTemplateCreateInput: TriggerScheduleTemplateIdFkeyTemplateCreateInput;
  TriggerScheduleTemplateIdFkeyTriggerScheduleCreateInput: TriggerScheduleTemplateIdFkeyTriggerScheduleCreateInput;
  TriggerScheduleTriggerSchedulePkeyConnect: TriggerScheduleTriggerSchedulePkeyConnect;
  TriggerScheduleTriggerSchedulePkeyDelete: TriggerScheduleTriggerSchedulePkeyDelete;
  TriggerSchedulesConnection: TriggerSchedulesConnection;
  TriggerSchedulesEdge: TriggerSchedulesEdge;
  UiLocationListFilter: UiLocationListFilter;
  UnnestedSection: UnnestedSection;
  UnnestedSectionCondition: UnnestedSectionCondition;
  UnnestedSectionFilter: UnnestedSectionFilter;
  UnnestedSectionsConnection: UnnestedSectionsConnection;
  UnnestedSectionsEdge: UnnestedSectionsEdge;
  UpdateActionPluginByCodeInput: UpdateActionPluginByCodeInput;
  UpdateActionPluginByNodeIdInput: UpdateActionPluginByNodeIdInput;
  UpdateActionPluginInput: UpdateActionPluginInput;
  UpdateActionPluginPayload: Omit<UpdateActionPluginPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateActionQueueByNodeIdInput: UpdateActionQueueByNodeIdInput;
  UpdateActionQueueInput: UpdateActionQueueInput;
  UpdateActionQueuePayload: Omit<UpdateActionQueuePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateActivityLogByNodeIdInput: UpdateActivityLogByNodeIdInput;
  UpdateActivityLogInput: UpdateActivityLogInput;
  UpdateActivityLogPayload: Omit<UpdateActivityLogPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateApplicationByNodeIdInput: UpdateApplicationByNodeIdInput;
  UpdateApplicationByOutcomeRegistrationInput: UpdateApplicationByOutcomeRegistrationInput;
  UpdateApplicationBySerialInput: UpdateApplicationBySerialInput;
  UpdateApplicationInput: UpdateApplicationInput;
  UpdateApplicationNoteByNodeIdInput: UpdateApplicationNoteByNodeIdInput;
  UpdateApplicationNoteInput: UpdateApplicationNoteInput;
  UpdateApplicationNotePayload: Omit<UpdateApplicationNotePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateApplicationPayload: Omit<UpdateApplicationPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateApplicationResponseByNodeIdInput: UpdateApplicationResponseByNodeIdInput;
  UpdateApplicationResponseInput: UpdateApplicationResponseInput;
  UpdateApplicationResponsePayload: Omit<UpdateApplicationResponsePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateApplicationReviewerActionByNodeIdInput: UpdateApplicationReviewerActionByNodeIdInput;
  UpdateApplicationReviewerActionByUserIdAndApplicationIdInput: UpdateApplicationReviewerActionByUserIdAndApplicationIdInput;
  UpdateApplicationReviewerActionInput: UpdateApplicationReviewerActionInput;
  UpdateApplicationReviewerActionPayload: Omit<UpdateApplicationReviewerActionPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateApplicationStageHistoryByNodeIdInput: UpdateApplicationStageHistoryByNodeIdInput;
  UpdateApplicationStageHistoryInput: UpdateApplicationStageHistoryInput;
  UpdateApplicationStageHistoryPayload: Omit<UpdateApplicationStageHistoryPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateApplicationStatusHistoryByNodeIdInput: UpdateApplicationStatusHistoryByNodeIdInput;
  UpdateApplicationStatusHistoryInput: UpdateApplicationStatusHistoryInput;
  UpdateApplicationStatusHistoryPayload: Omit<UpdateApplicationStatusHistoryPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateCounterByNameInput: UpdateCounterByNameInput;
  UpdateCounterByNodeIdInput: UpdateCounterByNodeIdInput;
  UpdateCounterInput: UpdateCounterInput;
  UpdateCounterPayload: Omit<UpdateCounterPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateDataChangelogByNodeIdInput: UpdateDataChangelogByNodeIdInput;
  UpdateDataChangelogInput: UpdateDataChangelogInput;
  UpdateDataChangelogPayload: Omit<UpdateDataChangelogPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateDataTableByNodeIdInput: UpdateDataTableByNodeIdInput;
  UpdateDataTableByTableNameInput: UpdateDataTableByTableNameInput;
  UpdateDataTableInput: UpdateDataTableInput;
  UpdateDataTablePayload: Omit<UpdateDataTablePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateDataViewByIdentifierInput: UpdateDataViewByIdentifierInput;
  UpdateDataViewByNodeIdInput: UpdateDataViewByNodeIdInput;
  UpdateDataViewColumnDefinitionByNodeIdInput: UpdateDataViewColumnDefinitionByNodeIdInput;
  UpdateDataViewColumnDefinitionByTableNameAndColumnNameInput: UpdateDataViewColumnDefinitionByTableNameAndColumnNameInput;
  UpdateDataViewColumnDefinitionInput: UpdateDataViewColumnDefinitionInput;
  UpdateDataViewColumnDefinitionPayload: Omit<UpdateDataViewColumnDefinitionPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateDataViewInput: UpdateDataViewInput;
  UpdateDataViewPayload: Omit<UpdateDataViewPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateElementTypePluginByNodeIdInput: UpdateElementTypePluginByNodeIdInput;
  UpdateElementTypePluginInput: UpdateElementTypePluginInput;
  UpdateElementTypePluginPayload: Omit<UpdateElementTypePluginPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateFileByNodeIdInput: UpdateFileByNodeIdInput;
  UpdateFileByUniqueIdInput: UpdateFileByUniqueIdInput;
  UpdateFileInput: UpdateFileInput;
  UpdateFilePayload: Omit<UpdateFilePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateFilterByCodeInput: UpdateFilterByCodeInput;
  UpdateFilterByNodeIdInput: UpdateFilterByNodeIdInput;
  UpdateFilterInput: UpdateFilterInput;
  UpdateFilterPayload: Omit<UpdateFilterPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateNotificationByNodeIdInput: UpdateNotificationByNodeIdInput;
  UpdateNotificationInput: UpdateNotificationInput;
  UpdateNotificationPayload: Omit<UpdateNotificationPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateOrganisationByNameInput: UpdateOrganisationByNameInput;
  UpdateOrganisationByNodeIdInput: UpdateOrganisationByNodeIdInput;
  UpdateOrganisationByRegistrationInput: UpdateOrganisationByRegistrationInput;
  UpdateOrganisationInput: UpdateOrganisationInput;
  UpdateOrganisationPayload: Omit<UpdateOrganisationPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdatePermissionJoinByNodeIdInput: UpdatePermissionJoinByNodeIdInput;
  UpdatePermissionJoinInput: UpdatePermissionJoinInput;
  UpdatePermissionJoinPayload: Omit<UpdatePermissionJoinPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdatePermissionNameByNameInput: UpdatePermissionNameByNameInput;
  UpdatePermissionNameByNodeIdInput: UpdatePermissionNameByNodeIdInput;
  UpdatePermissionNameInput: UpdatePermissionNameInput;
  UpdatePermissionNamePayload: Omit<UpdatePermissionNamePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdatePermissionPolicyByNameInput: UpdatePermissionPolicyByNameInput;
  UpdatePermissionPolicyByNodeIdInput: UpdatePermissionPolicyByNodeIdInput;
  UpdatePermissionPolicyInput: UpdatePermissionPolicyInput;
  UpdatePermissionPolicyPayload: Omit<UpdatePermissionPolicyPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateReviewAssignmentAssignerJoinByNodeIdInput: UpdateReviewAssignmentAssignerJoinByNodeIdInput;
  UpdateReviewAssignmentAssignerJoinInput: UpdateReviewAssignmentAssignerJoinInput;
  UpdateReviewAssignmentAssignerJoinPayload: Omit<UpdateReviewAssignmentAssignerJoinPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateReviewAssignmentByNodeIdInput: UpdateReviewAssignmentByNodeIdInput;
  UpdateReviewAssignmentInput: UpdateReviewAssignmentInput;
  UpdateReviewAssignmentPayload: Omit<UpdateReviewAssignmentPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateReviewByNodeIdInput: UpdateReviewByNodeIdInput;
  UpdateReviewByReviewAssignmentIdInput: UpdateReviewByReviewAssignmentIdInput;
  UpdateReviewDecisionByNodeIdInput: UpdateReviewDecisionByNodeIdInput;
  UpdateReviewDecisionInput: UpdateReviewDecisionInput;
  UpdateReviewDecisionPayload: Omit<UpdateReviewDecisionPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateReviewInput: UpdateReviewInput;
  UpdateReviewPayload: Omit<UpdateReviewPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateReviewResponseByNodeIdInput: UpdateReviewResponseByNodeIdInput;
  UpdateReviewResponseInput: UpdateReviewResponseInput;
  UpdateReviewResponsePayload: Omit<UpdateReviewResponsePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateReviewStatusHistoryByNodeIdInput: UpdateReviewStatusHistoryByNodeIdInput;
  UpdateReviewStatusHistoryInput: UpdateReviewStatusHistoryInput;
  UpdateReviewStatusHistoryPayload: Omit<UpdateReviewStatusHistoryPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateSystemInfoByNodeIdInput: UpdateSystemInfoByNodeIdInput;
  UpdateSystemInfoInput: UpdateSystemInfoInput;
  UpdateSystemInfoPayload: Omit<UpdateSystemInfoPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateTemplateActionByNodeIdInput: UpdateTemplateActionByNodeIdInput;
  UpdateTemplateActionInput: UpdateTemplateActionInput;
  UpdateTemplateActionPayload: Omit<UpdateTemplateActionPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateTemplateByCodeAndVersionIdInput: UpdateTemplateByCodeAndVersionIdInput;
  UpdateTemplateByNodeIdInput: UpdateTemplateByNodeIdInput;
  UpdateTemplateCategoryByCodeInput: UpdateTemplateCategoryByCodeInput;
  UpdateTemplateCategoryByNodeIdInput: UpdateTemplateCategoryByNodeIdInput;
  UpdateTemplateCategoryInput: UpdateTemplateCategoryInput;
  UpdateTemplateCategoryPayload: Omit<UpdateTemplateCategoryPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateTemplateElementByNodeIdInput: UpdateTemplateElementByNodeIdInput;
  UpdateTemplateElementByTemplateCodeAndCodeAndTemplateVersionInput: UpdateTemplateElementByTemplateCodeAndCodeAndTemplateVersionInput;
  UpdateTemplateElementInput: UpdateTemplateElementInput;
  UpdateTemplateElementPayload: Omit<UpdateTemplateElementPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateTemplateFilterJoinByNodeIdInput: UpdateTemplateFilterJoinByNodeIdInput;
  UpdateTemplateFilterJoinInput: UpdateTemplateFilterJoinInput;
  UpdateTemplateFilterJoinPayload: Omit<UpdateTemplateFilterJoinPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateTemplateInput: UpdateTemplateInput;
  UpdateTemplatePayload: Omit<UpdateTemplatePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateTemplatePermissionByNodeIdInput: UpdateTemplatePermissionByNodeIdInput;
  UpdateTemplatePermissionInput: UpdateTemplatePermissionInput;
  UpdateTemplatePermissionPayload: Omit<UpdateTemplatePermissionPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateTemplateSectionByNodeIdInput: UpdateTemplateSectionByNodeIdInput;
  UpdateTemplateSectionByTemplateIdAndCodeInput: UpdateTemplateSectionByTemplateIdAndCodeInput;
  UpdateTemplateSectionInput: UpdateTemplateSectionInput;
  UpdateTemplateSectionPayload: Omit<UpdateTemplateSectionPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateTemplateStageByNodeIdInput: UpdateTemplateStageByNodeIdInput;
  UpdateTemplateStageInput: UpdateTemplateStageInput;
  UpdateTemplateStagePayload: Omit<UpdateTemplateStagePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateTemplateStageReviewLevelByNodeIdInput: UpdateTemplateStageReviewLevelByNodeIdInput;
  UpdateTemplateStageReviewLevelInput: UpdateTemplateStageReviewLevelInput;
  UpdateTemplateStageReviewLevelPayload: Omit<UpdateTemplateStageReviewLevelPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateTriggerQueueByNodeIdInput: UpdateTriggerQueueByNodeIdInput;
  UpdateTriggerQueueInput: UpdateTriggerQueueInput;
  UpdateTriggerQueuePayload: Omit<UpdateTriggerQueuePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateTriggerScheduleByNodeIdInput: UpdateTriggerScheduleByNodeIdInput;
  UpdateTriggerScheduleInput: UpdateTriggerScheduleInput;
  UpdateTriggerSchedulePayload: Omit<UpdateTriggerSchedulePayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateUserOrganisationByNodeIdInput: UpdateUserOrganisationByNodeIdInput;
  UpdateUserOrganisationByUserIdAndOrganisationIdInput: UpdateUserOrganisationByUserIdAndOrganisationIdInput;
  UpdateUserOrganisationInput: UpdateUserOrganisationInput;
  UpdateUserOrganisationPayload: Omit<UpdateUserOrganisationPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  UpdateVerificationByNodeIdInput: UpdateVerificationByNodeIdInput;
  UpdateVerificationByUniqueIdInput: UpdateVerificationByUniqueIdInput;
  UpdateVerificationInput: UpdateVerificationInput;
  UpdateVerificationPayload: Omit<UpdateVerificationPayload, 'query'> & { query?: Maybe<ResolversParentTypes['Query']> };
  User: User;
  UserCondition: UserCondition;
  UserFilter: UserFilter;
  UserInput: UserInput;
  UserList: UserList;
  UserListCondition: UserListCondition;
  UserListFilter: UserListFilter;
  UserListInput: UserListInput;
  UserListOnApplicationForFakePublicApplicationForeignKey0NodeIdUpdate: UserListOnApplicationForFakePublicApplicationForeignKey0NodeIdUpdate;
  UserListOnApplicationNoteForFakePublicApplicationNoteForeignKey0NodeIdUpdate: UserListOnApplicationNoteForFakePublicApplicationNoteForeignKey0NodeIdUpdate;
  UserListOnPermissionJoinForFakePublicPermissionJoinForeignKey0NodeIdUpdate: UserListOnPermissionJoinForFakePublicPermissionJoinForeignKey0NodeIdUpdate;
  UserListOnReviewAssignmentAssignerJoinForFakePublicReviewAssignmentAssignerJoinForeignKey0NodeIdUpdate: UserListOnReviewAssignmentAssignerJoinForFakePublicReviewAssignmentAssignerJoinForeignKey0NodeIdUpdate;
  UserListOnReviewAssignmentForFakePublicReviewAssignmentForeignKey0NodeIdUpdate: UserListOnReviewAssignmentForFakePublicReviewAssignmentForeignKey0NodeIdUpdate;
  UserListOnReviewAssignmentForFakePublicReviewAssignmentForeignKey1NodeIdUpdate: UserListOnReviewAssignmentForFakePublicReviewAssignmentForeignKey1NodeIdUpdate;
  UserListOnReviewForFakePublicReviewForeignKey0NodeIdUpdate: UserListOnReviewForFakePublicReviewForeignKey0NodeIdUpdate;
  UserListToManyApplicationFilter: UserListToManyApplicationFilter;
  UserListToManyApplicationNoteFilter: UserListToManyApplicationNoteFilter;
  UserListToManyPermissionJoinFilter: UserListToManyPermissionJoinFilter;
  UserListToManyReviewAssignmentAssignerJoinFilter: UserListToManyReviewAssignmentAssignerJoinFilter;
  UserListToManyReviewAssignmentFilter: UserListToManyReviewAssignmentFilter;
  UserListToManyReviewFilter: UserListToManyReviewFilter;
  UserListsConnection: UserListsConnection;
  UserListsEdge: UserListsEdge;
  UserOnUserOrganisationForFakePublicUserOrganisationForeignKey0NodeIdUpdate: UserOnUserOrganisationForFakePublicUserOrganisationForeignKey0NodeIdUpdate;
  UserOrgJoin: UserOrgJoin;
  UserOrgJoinCondition: UserOrgJoinCondition;
  UserOrgJoinFilter: UserOrgJoinFilter;
  UserOrgJoinsConnection: UserOrgJoinsConnection;
  UserOrgJoinsEdge: UserOrgJoinsEdge;
  UserOrganisation: UserOrganisation;
  UserOrganisationCondition: UserOrganisationCondition;
  UserOrganisationFilter: UserOrganisationFilter;
  UserOrganisationInput: UserOrganisationInput;
  UserOrganisationNodeIdConnect: UserOrganisationNodeIdConnect;
  UserOrganisationNodeIdDelete: UserOrganisationNodeIdDelete;
  UserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0UsingUserOrganisationPkeyUpdate: UserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0UsingUserOrganisationPkeyUpdate;
  UserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0UsingUserOrganisationUserIdOrganisationIdKeyUpdate: UserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0UsingUserOrganisationUserIdOrganisationIdKeyUpdate;
  UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyNodeIdUpdate: UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyNodeIdUpdate;
  UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingUserOrganisationPkeyUpdate: UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingUserOrganisationPkeyUpdate;
  UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingUserOrganisationUserIdOrganisationIdKeyUpdate: UserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyUsingUserOrganisationUserIdOrganisationIdKeyUpdate;
  UserOrganisationOrganisationIdFkeyInput: UserOrganisationOrganisationIdFkeyInput;
  UserOrganisationOrganisationIdFkeyInverseInput: UserOrganisationOrganisationIdFkeyInverseInput;
  UserOrganisationOrganisationIdFkeyOrganisationCreateInput: UserOrganisationOrganisationIdFkeyOrganisationCreateInput;
  UserOrganisationOrganisationIdFkeyUserOrganisationCreateInput: UserOrganisationOrganisationIdFkeyUserOrganisationCreateInput;
  UserOrganisationPatch: UserOrganisationPatch;
  UserOrganisationUserOrganisationPkeyConnect: UserOrganisationUserOrganisationPkeyConnect;
  UserOrganisationUserOrganisationPkeyDelete: UserOrganisationUserOrganisationPkeyDelete;
  UserOrganisationUserOrganisationUserIdOrganisationIdKeyConnect: UserOrganisationUserOrganisationUserIdOrganisationIdKeyConnect;
  UserOrganisationUserOrganisationUserIdOrganisationIdKeyDelete: UserOrganisationUserOrganisationUserIdOrganisationIdKeyDelete;
  UserOrganisationsConnection: UserOrganisationsConnection;
  UserOrganisationsEdge: UserOrganisationsEdge;
  UserToManyUserOrganisationFilter: UserToManyUserOrganisationFilter;
  UsersConnection: UsersConnection;
  UsersEdge: UsersEdge;
  Verification: Verification;
  VerificationApplicationIdFkeyApplicationCreateInput: VerificationApplicationIdFkeyApplicationCreateInput;
  VerificationApplicationIdFkeyInput: VerificationApplicationIdFkeyInput;
  VerificationApplicationIdFkeyInverseInput: VerificationApplicationIdFkeyInverseInput;
  VerificationApplicationIdFkeyVerificationCreateInput: VerificationApplicationIdFkeyVerificationCreateInput;
  VerificationCondition: VerificationCondition;
  VerificationFilter: VerificationFilter;
  VerificationInput: VerificationInput;
  VerificationNodeIdConnect: VerificationNodeIdConnect;
  VerificationNodeIdDelete: VerificationNodeIdDelete;
  VerificationOnVerificationForVerificationApplicationIdFkeyNodeIdUpdate: VerificationOnVerificationForVerificationApplicationIdFkeyNodeIdUpdate;
  VerificationOnVerificationForVerificationApplicationIdFkeyUsingVerificationPkeyUpdate: VerificationOnVerificationForVerificationApplicationIdFkeyUsingVerificationPkeyUpdate;
  VerificationOnVerificationForVerificationApplicationIdFkeyUsingVerificationUniqueIdKeyUpdate: VerificationOnVerificationForVerificationApplicationIdFkeyUsingVerificationUniqueIdKeyUpdate;
  VerificationPatch: VerificationPatch;
  VerificationVerificationPkeyConnect: VerificationVerificationPkeyConnect;
  VerificationVerificationPkeyDelete: VerificationVerificationPkeyDelete;
  VerificationVerificationUniqueIdKeyConnect: VerificationVerificationUniqueIdKeyConnect;
  VerificationVerificationUniqueIdKeyDelete: VerificationVerificationUniqueIdKeyDelete;
  VerificationsConnection: VerificationsConnection;
  VerificationsEdge: VerificationsEdge;
  YesOrNo: Scalars['YesOrNo']['output'];
  YesOrNoFilter: YesOrNoFilter;
  updateActionQueueOnActionQueueForActionQueueApplicationIdFkeyPatch: UpdateActionQueueOnActionQueueForActionQueueApplicationIdFkeyPatch;
  updateActionQueueOnActionQueueForActionQueueTemplateIdFkeyPatch: UpdateActionQueueOnActionQueueForActionQueueTemplateIdFkeyPatch;
  updateActionQueueOnActionQueueForActionQueueTriggerEventFkeyPatch: UpdateActionQueueOnActionQueueForActionQueueTriggerEventFkeyPatch;
  updateActivityLogOnActivityLogForActivityLogApplicationIdFkeyPatch: UpdateActivityLogOnActivityLogForActivityLogApplicationIdFkeyPatch;
  updateApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch: UpdateApplicationNoteOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch;
  updateApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyPatch: UpdateApplicationNoteOnApplicationNoteForApplicationNoteOrgIdFkeyPatch;
  updateApplicationNoteOnApplicationNoteForFakePublicApplicationNoteForeignKey0Patch: UpdateApplicationNoteOnApplicationNoteForFakePublicApplicationNoteForeignKey0Patch;
  updateApplicationNoteOnFileForFileApplicationNoteIdFkeyPatch: UpdateApplicationNoteOnFileForFileApplicationNoteIdFkeyPatch;
  updateApplicationOnActionQueueForActionQueueApplicationIdFkeyPatch: UpdateApplicationOnActionQueueForActionQueueApplicationIdFkeyPatch;
  updateApplicationOnActivityLogForActivityLogApplicationIdFkeyPatch: UpdateApplicationOnActivityLogForActivityLogApplicationIdFkeyPatch;
  updateApplicationOnApplicationForApplicationOrgIdFkeyPatch: UpdateApplicationOnApplicationForApplicationOrgIdFkeyPatch;
  updateApplicationOnApplicationForApplicationTemplateIdFkeyPatch: UpdateApplicationOnApplicationForApplicationTemplateIdFkeyPatch;
  updateApplicationOnApplicationForFakePublicApplicationForeignKey0Patch: UpdateApplicationOnApplicationForFakePublicApplicationForeignKey0Patch;
  updateApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch: UpdateApplicationOnApplicationNoteForApplicationNoteApplicationIdFkeyPatch;
  updateApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch: UpdateApplicationOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch;
  updateApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyPatch: UpdateApplicationOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyPatch;
  updateApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch: UpdateApplicationOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch;
  updateApplicationOnDataChangelogForDataChangelogApplicationIdFkeyPatch: UpdateApplicationOnDataChangelogForDataChangelogApplicationIdFkeyPatch;
  updateApplicationOnFileForFileApplicationSerialFkeyPatch: UpdateApplicationOnFileForFileApplicationSerialFkeyPatch;
  updateApplicationOnNotificationForNotificationApplicationIdFkeyPatch: UpdateApplicationOnNotificationForNotificationApplicationIdFkeyPatch;
  updateApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch: UpdateApplicationOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch;
  updateApplicationOnReviewForReviewApplicationIdFkeyPatch: UpdateApplicationOnReviewForReviewApplicationIdFkeyPatch;
  updateApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyPatch: UpdateApplicationOnTriggerQueueForTriggerQueueApplicationIdFkeyPatch;
  updateApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch: UpdateApplicationOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch;
  updateApplicationOnVerificationForVerificationApplicationIdFkeyPatch: UpdateApplicationOnVerificationForVerificationApplicationIdFkeyPatch;
  updateApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch: UpdateApplicationResponseOnApplicationResponseForApplicationResponseApplicationIdFkeyPatch;
  updateApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyPatch: UpdateApplicationResponseOnApplicationResponseForApplicationResponseTemplateElementIdFkeyPatch;
  updateApplicationResponseOnFileForFileApplicationResponseIdFkeyPatch: UpdateApplicationResponseOnFileForFileApplicationResponseIdFkeyPatch;
  updateApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch: UpdateApplicationResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch;
  updateApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyPatch: UpdateApplicationReviewerActionOnApplicationReviewerActionForApplicationReviewerActionApplicationIdFkeyPatch;
  updateApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch: UpdateApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryApplicationIdFkeyPatch;
  updateApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyPatch: UpdateApplicationStageHistoryOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyPatch;
  updateApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch: UpdateApplicationStageHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch;
  updateApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch: UpdateApplicationStatusHistoryOnApplicationStatusHistoryForApplicationStatusHistoryApplicationStageHistoryIdFkeyPatch;
  updateDataChangelogOnDataChangelogForDataChangelogApplicationIdFkeyPatch: UpdateDataChangelogOnDataChangelogForDataChangelogApplicationIdFkeyPatch;
  updateDataChangelogOnDataChangelogForDataChangelogOrgIdFkeyPatch: UpdateDataChangelogOnDataChangelogForDataChangelogOrgIdFkeyPatch;
  updateFileOnFileForFileApplicationNoteIdFkeyPatch: UpdateFileOnFileForFileApplicationNoteIdFkeyPatch;
  updateFileOnFileForFileApplicationResponseIdFkeyPatch: UpdateFileOnFileForFileApplicationResponseIdFkeyPatch;
  updateFileOnFileForFileApplicationSerialFkeyPatch: UpdateFileOnFileForFileApplicationSerialFkeyPatch;
  updateFileOnFileForFileTemplateIdFkeyPatch: UpdateFileOnFileForFileTemplateIdFkeyPatch;
  updateFilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyPatch: UpdateFilterOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyPatch;
  updateNotificationOnNotificationForNotificationApplicationIdFkeyPatch: UpdateNotificationOnNotificationForNotificationApplicationIdFkeyPatch;
  updateNotificationOnNotificationForNotificationReviewIdFkeyPatch: UpdateNotificationOnNotificationForNotificationReviewIdFkeyPatch;
  updateOrganisationOnApplicationForApplicationOrgIdFkeyPatch: UpdateOrganisationOnApplicationForApplicationOrgIdFkeyPatch;
  updateOrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyPatch: UpdateOrganisationOnApplicationNoteForApplicationNoteOrgIdFkeyPatch;
  updateOrganisationOnDataChangelogForDataChangelogOrgIdFkeyPatch: UpdateOrganisationOnDataChangelogForDataChangelogOrgIdFkeyPatch;
  updateOrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch: UpdateOrganisationOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch;
  updateOrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch: UpdateOrganisationOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch;
  updateOrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch: UpdateOrganisationOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch;
  updateOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch: UpdateOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch;
  updatePermissionJoinOnPermissionJoinForFakePublicPermissionJoinForeignKey0Patch: UpdatePermissionJoinOnPermissionJoinForFakePublicPermissionJoinForeignKey0Patch;
  updatePermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch: UpdatePermissionJoinOnPermissionJoinForPermissionJoinOrganisationIdFkeyPatch;
  updatePermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch: UpdatePermissionJoinOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch;
  updatePermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch: UpdatePermissionNameOnPermissionJoinForPermissionJoinPermissionNameIdFkeyPatch;
  updatePermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch: UpdatePermissionNameOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch;
  updatePermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyPatch: UpdatePermissionNameOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyPatch;
  updatePermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch: UpdatePermissionPolicyOnPermissionNameForPermissionNamePermissionPolicyIdFkeyPatch;
  updateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForFakePublicReviewAssignmentAssignerJoinForeignKey0Patch: UpdateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForFakePublicReviewAssignmentAssignerJoinForeignKey0Patch;
  updateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch: UpdateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinOrganisationIdFkeyPatch;
  updateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyPatch: UpdateReviewAssignmentAssignerJoinOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyPatch;
  updateReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyPatch: UpdateReviewAssignmentOnReviewAssignmentAssignerJoinForReviewAssignmentAssignerJoinReviewAssignmentIdFkeyPatch;
  updateReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey0Patch: UpdateReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey0Patch;
  updateReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey1Patch: UpdateReviewAssignmentOnReviewAssignmentForFakePublicReviewAssignmentForeignKey1Patch;
  updateReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentApplicationIdFkeyPatch;
  updateReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyPatch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentLevelIdFkeyPatch;
  updateReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentOrganisationIdFkeyPatch;
  updateReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyPatch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentStageIdFkeyPatch;
  updateReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyPatch: UpdateReviewAssignmentOnReviewAssignmentForReviewAssignmentTemplateIdFkeyPatch;
  updateReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyPatch: UpdateReviewAssignmentOnReviewForReviewReviewAssignmentIdFkeyPatch;
  updateReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyPatch: UpdateReviewDecisionOnReviewDecisionForReviewDecisionReviewIdFkeyPatch;
  updateReviewOnNotificationForNotificationReviewIdFkeyPatch: UpdateReviewOnNotificationForNotificationReviewIdFkeyPatch;
  updateReviewOnReviewDecisionForReviewDecisionReviewIdFkeyPatch: UpdateReviewOnReviewDecisionForReviewDecisionReviewIdFkeyPatch;
  updateReviewOnReviewForFakePublicReviewForeignKey0Patch: UpdateReviewOnReviewForFakePublicReviewForeignKey0Patch;
  updateReviewOnReviewForReviewApplicationIdFkeyPatch: UpdateReviewOnReviewForReviewApplicationIdFkeyPatch;
  updateReviewOnReviewForReviewReviewAssignmentIdFkeyPatch: UpdateReviewOnReviewForReviewReviewAssignmentIdFkeyPatch;
  updateReviewOnReviewResponseForReviewResponseReviewIdFkeyPatch: UpdateReviewOnReviewResponseForReviewResponseReviewIdFkeyPatch;
  updateReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyPatch: UpdateReviewOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyPatch;
  updateReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch: UpdateReviewResponseOnReviewResponseForReviewResponseApplicationResponseIdFkeyPatch;
  updateReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyPatch: UpdateReviewResponseOnReviewResponseForReviewResponseOriginalReviewResponseIdFkeyPatch;
  updateReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyPatch: UpdateReviewResponseOnReviewResponseForReviewResponseReviewIdFkeyPatch;
  updateReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyPatch: UpdateReviewResponseOnReviewResponseForReviewResponseReviewResponseLinkIdFkeyPatch;
  updateReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyPatch: UpdateReviewResponseOnReviewResponseForReviewResponseTemplateElementIdFkeyPatch;
  updateReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyPatch: UpdateReviewStatusHistoryOnReviewStatusHistoryForReviewStatusHistoryReviewIdFkeyPatch;
  updateTemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyPatch: UpdateTemplateActionOnTemplateActionForTemplateActionTemplateIdFkeyPatch;
  updateTemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyPatch: UpdateTemplateCategoryOnTemplateForTemplateTemplateCategoryIdFkeyPatch;
  updateTemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyPatch: UpdateTemplateElementOnApplicationResponseForApplicationResponseTemplateElementIdFkeyPatch;
  updateTemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyPatch: UpdateTemplateElementOnReviewResponseForReviewResponseTemplateElementIdFkeyPatch;
  updateTemplateElementOnTemplateElementForTemplateElementSectionIdFkeyPatch: UpdateTemplateElementOnTemplateElementForTemplateElementSectionIdFkeyPatch;
  updateTemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyPatch: UpdateTemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinFilterIdFkeyPatch;
  updateTemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyPatch: UpdateTemplateFilterJoinOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyPatch;
  updateTemplateOnActionQueueForActionQueueTemplateIdFkeyPatch: UpdateTemplateOnActionQueueForActionQueueTemplateIdFkeyPatch;
  updateTemplateOnApplicationForApplicationTemplateIdFkeyPatch: UpdateTemplateOnApplicationForApplicationTemplateIdFkeyPatch;
  updateTemplateOnFileForFileTemplateIdFkeyPatch: UpdateTemplateOnFileForFileTemplateIdFkeyPatch;
  updateTemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyPatch: UpdateTemplateOnReviewAssignmentForReviewAssignmentTemplateIdFkeyPatch;
  updateTemplateOnTemplateActionForTemplateActionTemplateIdFkeyPatch: UpdateTemplateOnTemplateActionForTemplateActionTemplateIdFkeyPatch;
  updateTemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyPatch: UpdateTemplateOnTemplateFilterJoinForTemplateFilterJoinTemplateIdFkeyPatch;
  updateTemplateOnTemplateForTemplateTemplateCategoryIdFkeyPatch: UpdateTemplateOnTemplateForTemplateTemplateCategoryIdFkeyPatch;
  updateTemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch: UpdateTemplateOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch;
  updateTemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch: UpdateTemplateOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch;
  updateTemplateOnTemplateStageForTemplateStageTemplateIdFkeyPatch: UpdateTemplateOnTemplateStageForTemplateStageTemplateIdFkeyPatch;
  updateTemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyPatch: UpdateTemplateOnTriggerScheduleForTriggerScheduleTemplateIdFkeyPatch;
  updateTemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyPatch: UpdateTemplatePermissionOnTemplatePermissionForTemplatePermissionPermissionNameIdFkeyPatch;
  updateTemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch: UpdateTemplatePermissionOnTemplatePermissionForTemplatePermissionTemplateIdFkeyPatch;
  updateTemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyPatch: UpdateTemplateSectionOnTemplateElementForTemplateElementSectionIdFkeyPatch;
  updateTemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch: UpdateTemplateSectionOnTemplateSectionForTemplateSectionTemplateIdFkeyPatch;
  updateTemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyPatch: UpdateTemplateStageOnApplicationStageHistoryForApplicationStageHistoryStageIdFkeyPatch;
  updateTemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyPatch: UpdateTemplateStageOnReviewAssignmentForReviewAssignmentStageIdFkeyPatch;
  updateTemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyPatch: UpdateTemplateStageOnTemplateStageForTemplateStageTemplateIdFkeyPatch;
  updateTemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyPatch: UpdateTemplateStageOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyPatch;
  updateTemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyPatch: UpdateTemplateStageReviewLevelOnReviewAssignmentForReviewAssignmentLevelIdFkeyPatch;
  updateTemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyPatch: UpdateTemplateStageReviewLevelOnTemplateStageReviewLevelForTemplateStageReviewLevelStageIdFkeyPatch;
  updateTriggerQueueOnActionQueueForActionQueueTriggerEventFkeyPatch: UpdateTriggerQueueOnActionQueueForActionQueueTriggerEventFkeyPatch;
  updateTriggerQueueOnTriggerQueueForTriggerQueueApplicationIdFkeyPatch: UpdateTriggerQueueOnTriggerQueueForTriggerQueueApplicationIdFkeyPatch;
  updateTriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch: UpdateTriggerScheduleOnTriggerScheduleForTriggerScheduleApplicationIdFkeyPatch;
  updateTriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyPatch: UpdateTriggerScheduleOnTriggerScheduleForTriggerScheduleTemplateIdFkeyPatch;
  updateUserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0Patch: UpdateUserOrganisationOnUserOrganisationForFakePublicUserOrganisationForeignKey0Patch;
  updateUserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch: UpdateUserOrganisationOnUserOrganisationForUserOrganisationOrganisationIdFkeyPatch;
  updateVerificationOnVerificationForVerificationApplicationIdFkeyPatch: UpdateVerificationOnVerificationForVerificationApplicationIdFkeyPatch;
};

export type ActionPluginResolvers<ContextType = any, ParentType extends ResolversParentTypes['ActionPlugin'] = ResolversParentTypes['ActionPlugin']> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  optionalParameters?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  outputProperties?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  requiredParameters?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActionPluginsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ActionPluginsConnection'] = ResolversParentTypes['ActionPluginsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ActionPluginsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ActionPlugin']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActionPluginsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ActionPluginsEdge'] = ResolversParentTypes['ActionPluginsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ActionPlugin']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActionQueueResolvers<ContextType = any, ParentType extends ResolversParentTypes['ActionQueue'] = ResolversParentTypes['ActionQueue']> = {
  actionCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  conditionExpression?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  errorLog?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  output?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  parameterQueries?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  parametersEvaluated?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  sequence?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['ActionQueueStatus']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  timeCompleted?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  timeQueued?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  triggerEvent?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  triggerPayload?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  triggerQueueByTriggerEvent?: Resolver<Maybe<ResolversTypes['TriggerQueue']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActionQueuesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ActionQueuesConnection'] = ResolversParentTypes['ActionQueuesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ActionQueuesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ActionQueue']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActionQueuesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ActionQueuesEdge'] = ResolversParentTypes['ActionQueuesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ActionQueue']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActivityLogResolvers<ContextType = any, ParentType extends ResolversParentTypes['ActivityLog'] = ResolversParentTypes['ActivityLog']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  details?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  recordId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  table?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Datetime'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['EventType'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActivityLogsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ActivityLogsConnection'] = ResolversParentTypes['ActivityLogsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ActivityLogsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ActivityLog']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ActivityLogsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ActivityLogsEdge'] = ResolversParentTypes['ActivityLogsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ActivityLog']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AllowedSelfAssignableSectionsShapeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AllowedSelfAssignableSectionsShape'] = ResolversParentTypes['AllowedSelfAssignableSectionsShape']> = {
  allowedSections?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  reviewAssignmentId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AllowedSelfAssignableSectionsShapesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AllowedSelfAssignableSectionsShapesConnection'] = ResolversParentTypes['AllowedSelfAssignableSectionsShapesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['AllowedSelfAssignableSectionsShapesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['AllowedSelfAssignableSectionsShape']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AllowedSelfAssignableSectionsShapesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AllowedSelfAssignableSectionsShapesEdge'] = ResolversParentTypes['AllowedSelfAssignableSectionsShapesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['AllowedSelfAssignableSectionsShape']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Application'] = ResolversParentTypes['Application']> = {
  actionQueues?: Resolver<ResolversTypes['ActionQueuesConnection'], ParentType, ContextType, RequireFields<ApplicationActionQueuesArgs, 'orderBy'>>;
  activityLogs?: Resolver<ResolversTypes['ActivityLogsConnection'], ParentType, ContextType, RequireFields<ApplicationActivityLogsArgs, 'orderBy'>>;
  applicationNotes?: Resolver<ResolversTypes['ApplicationNotesConnection'], ParentType, ContextType, RequireFields<ApplicationApplicationNotesArgs, 'orderBy'>>;
  applicationResponses?: Resolver<ResolversTypes['ApplicationResponsesConnection'], ParentType, ContextType, RequireFields<ApplicationApplicationResponsesArgs, 'orderBy'>>;
  applicationReviewerActions?: Resolver<ResolversTypes['ApplicationReviewerActionsConnection'], ParentType, ContextType, RequireFields<ApplicationApplicationReviewerActionsArgs, 'orderBy'>>;
  applicationStageHistories?: Resolver<ResolversTypes['ApplicationStageHistoriesConnection'], ParentType, ContextType, RequireFields<ApplicationApplicationStageHistoriesArgs, 'orderBy'>>;
  assignerList?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  dataChangelogs?: Resolver<ResolversTypes['DataChangelogsConnection'], ParentType, ContextType, RequireFields<ApplicationDataChangelogsArgs, 'orderBy'>>;
  filesByApplicationSerial?: Resolver<ResolversTypes['FilesConnection'], ParentType, ContextType, RequireFields<ApplicationFilesByApplicationSerialArgs, 'orderBy'>>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isConfig?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  notifications?: Resolver<ResolversTypes['NotificationsConnection'], ParentType, ContextType, RequireFields<ApplicationNotificationsArgs, 'orderBy'>>;
  org?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  orgId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  outcome?: Resolver<Maybe<ResolversTypes['ApplicationOutcome']>, ParentType, ContextType>;
  outcomeRegistration?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reviewAssignments?: Resolver<ResolversTypes['ReviewAssignmentsConnection'], ParentType, ContextType, RequireFields<ApplicationReviewAssignmentsArgs, 'orderBy'>>;
  reviewerList?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  reviews?: Resolver<ResolversTypes['ReviewsConnection'], ParentType, ContextType, RequireFields<ApplicationReviewsArgs, 'orderBy'>>;
  serial?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sessionId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stageNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['ApplicationStatus']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  trigger?: Resolver<Maybe<ResolversTypes['Trigger']>, ParentType, ContextType>;
  triggerQueues?: Resolver<ResolversTypes['TriggerQueuesConnection'], ParentType, ContextType, RequireFields<ApplicationTriggerQueuesArgs, 'orderBy'>>;
  triggerSchedules?: Resolver<ResolversTypes['TriggerSchedulesConnection'], ParentType, ContextType, RequireFields<ApplicationTriggerSchedulesArgs, 'orderBy'>>;
  user?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  userId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  verifications?: Resolver<ResolversTypes['VerificationsConnection'], ParentType, ContextType, RequireFields<ApplicationVerificationsArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationListFilterApplicantConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationListFilterApplicantConnection'] = ResolversParentTypes['ApplicationListFilterApplicantConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ApplicationListFilterApplicantEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationListFilterApplicantEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationListFilterApplicantEdge'] = ResolversParentTypes['ApplicationListFilterApplicantEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationListFilterAssignerConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationListFilterAssignerConnection'] = ResolversParentTypes['ApplicationListFilterAssignerConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ApplicationListFilterAssignerEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationListFilterAssignerEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationListFilterAssignerEdge'] = ResolversParentTypes['ApplicationListFilterAssignerEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationListFilterOrganisationConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationListFilterOrganisationConnection'] = ResolversParentTypes['ApplicationListFilterOrganisationConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ApplicationListFilterOrganisationEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationListFilterOrganisationEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationListFilterOrganisationEdge'] = ResolversParentTypes['ApplicationListFilterOrganisationEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationListFilterReviewerConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationListFilterReviewerConnection'] = ResolversParentTypes['ApplicationListFilterReviewerConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ApplicationListFilterReviewerEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationListFilterReviewerEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationListFilterReviewerEdge'] = ResolversParentTypes['ApplicationListFilterReviewerEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationListFilterStageConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationListFilterStageConnection'] = ResolversParentTypes['ApplicationListFilterStageConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ApplicationListFilterStageEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationListFilterStageEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationListFilterStageEdge'] = ResolversParentTypes['ApplicationListFilterStageEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationListShapeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationListShape'] = ResolversParentTypes['ApplicationListShape']> = {
  applicant?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  applicantDeadline?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  assignerAction?: Resolver<Maybe<ResolversTypes['AssignerAction']>, ParentType, ContextType>;
  assigners?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  lastActiveDate?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  orgName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  outcome?: Resolver<Maybe<ResolversTypes['ApplicationOutcome']>, ParentType, ContextType>;
  reviewerAction?: Resolver<Maybe<ResolversTypes['ReviewerAction']>, ParentType, ContextType>;
  reviewers?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  serial?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stageColour?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['ApplicationStatus']>, ParentType, ContextType>;
  templateCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  templateName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationListShapesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationListShapesConnection'] = ResolversParentTypes['ApplicationListShapesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ApplicationListShapesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ApplicationListShape']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationListShapesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationListShapesEdge'] = ResolversParentTypes['ApplicationListShapesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ApplicationListShape']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationNoteResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationNote'] = ResolversParentTypes['ApplicationNote']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  comment?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  files?: Resolver<ResolversTypes['FilesConnection'], ParentType, ContextType, RequireFields<ApplicationNoteFilesArgs, 'orderBy'>>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  org?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  orgId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  userId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationNotesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationNotesConnection'] = ResolversParentTypes['ApplicationNotesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ApplicationNotesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ApplicationNote']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationNotesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationNotesEdge'] = ResolversParentTypes['ApplicationNotesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ApplicationNote']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationResponse'] = ResolversParentTypes['ApplicationResponse']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  evaluatedParameters?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  files?: Resolver<ResolversTypes['FilesConnection'], ParentType, ContextType, RequireFields<ApplicationResponseFilesArgs, 'orderBy'>>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isValid?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  reviewResponses?: Resolver<ResolversTypes['ReviewResponsesConnection'], ParentType, ContextType, RequireFields<ApplicationResponseReviewResponsesArgs, 'orderBy'>>;
  stageNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['ApplicationResponseStatus']>, ParentType, ContextType>;
  templateElement?: Resolver<Maybe<ResolversTypes['TemplateElement']>, ParentType, ContextType>;
  templateElementId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timeCreated?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  timeSubmitted?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  timeUpdated?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationResponsesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationResponsesConnection'] = ResolversParentTypes['ApplicationResponsesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ApplicationResponsesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ApplicationResponse']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationResponsesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationResponsesEdge'] = ResolversParentTypes['ApplicationResponsesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ApplicationResponse']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationReviewerActionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationReviewerAction'] = ResolversParentTypes['ApplicationReviewerAction']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  assignerAction?: Resolver<Maybe<ResolversTypes['AssignerAction']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  reviewerAction?: Resolver<Maybe<ResolversTypes['ReviewerAction']>, ParentType, ContextType>;
  userId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationReviewerActionsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationReviewerActionsConnection'] = ResolversParentTypes['ApplicationReviewerActionsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ApplicationReviewerActionsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ApplicationReviewerAction']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationReviewerActionsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationReviewerActionsEdge'] = ResolversParentTypes['ApplicationReviewerActionsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ApplicationReviewerAction']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationStageHistoriesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationStageHistoriesConnection'] = ResolversParentTypes['ApplicationStageHistoriesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ApplicationStageHistoriesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ApplicationStageHistory']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationStageHistoriesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationStageHistoriesEdge'] = ResolversParentTypes['ApplicationStageHistoriesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ApplicationStageHistory']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationStageHistoryResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationStageHistory'] = ResolversParentTypes['ApplicationStageHistory']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  applicationStatusHistories?: Resolver<ResolversTypes['ApplicationStatusHistoriesConnection'], ParentType, ContextType, RequireFields<ApplicationStageHistoryApplicationStatusHistoriesArgs, 'orderBy'>>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isCurrent?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stage?: Resolver<Maybe<ResolversTypes['TemplateStage']>, ParentType, ContextType>;
  stageId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timeCreated?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationStageStatusAllResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationStageStatusAll'] = ResolversParentTypes['ApplicationStageStatusAll']> = {
  applicationId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  orgId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  outcome?: Resolver<Maybe<ResolversTypes['ApplicationOutcome']>, ParentType, ContextType>;
  serial?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sessionId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stageColour?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stageHistoryId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  stageHistoryTimeCreated?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  stageId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  stageIsCurrent?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  stageNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['ApplicationStatus']>, ParentType, ContextType>;
  statusHistoryId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  statusHistoryTimeCreated?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  statusIsCurrent?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  templateCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  templateId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  templateName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  userId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationStageStatusAllsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationStageStatusAllsConnection'] = ResolversParentTypes['ApplicationStageStatusAllsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ApplicationStageStatusAllsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ApplicationStageStatusAll']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationStageStatusAllsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationStageStatusAllsEdge'] = ResolversParentTypes['ApplicationStageStatusAllsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ApplicationStageStatusAll']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationStageStatusLatestResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationStageStatusLatest'] = ResolversParentTypes['ApplicationStageStatusLatest']> = {
  applicationId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  orgId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  outcome?: Resolver<Maybe<ResolversTypes['ApplicationOutcome']>, ParentType, ContextType>;
  serial?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sessionId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stageColour?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stageHistoryId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  stageHistoryTimeCreated?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  stageId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  stageIsCurrent?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  stageNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['ApplicationStatus']>, ParentType, ContextType>;
  statusHistoryId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  statusHistoryTimeCreated?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  statusIsCurrent?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  templateCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  templateId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  templateName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  userId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationStageStatusLatestsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationStageStatusLatestsConnection'] = ResolversParentTypes['ApplicationStageStatusLatestsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ApplicationStageStatusLatestsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ApplicationStageStatusLatest']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationStageStatusLatestsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationStageStatusLatestsEdge'] = ResolversParentTypes['ApplicationStageStatusLatestsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ApplicationStageStatusLatest']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationStatusHistoriesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationStatusHistoriesConnection'] = ResolversParentTypes['ApplicationStatusHistoriesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ApplicationStatusHistoriesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ApplicationStatusHistory']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationStatusHistoriesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationStatusHistoriesEdge'] = ResolversParentTypes['ApplicationStatusHistoriesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ApplicationStatusHistory']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationStatusHistoryResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationStatusHistory'] = ResolversParentTypes['ApplicationStatusHistory']> = {
  applicationId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  applicationStageHistory?: Resolver<Maybe<ResolversTypes['ApplicationStageHistory']>, ParentType, ContextType>;
  applicationStageHistoryId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isCurrent?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['ApplicationStatus']>, ParentType, ContextType>;
  timeCreated?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationsConnection'] = ResolversParentTypes['ApplicationsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ApplicationsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['Application']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ApplicationsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ApplicationsEdge'] = ResolversParentTypes['ApplicationsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AssignedQuestionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AssignedQuestionEdge'] = ResolversParentTypes['AssignedQuestionEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['AssignedQuestionsRecord']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AssignedQuestionsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AssignedQuestionsConnection'] = ResolversParentTypes['AssignedQuestionsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['AssignedQuestionEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['AssignedQuestionsRecord']>>, ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AssignedQuestionsRecordResolvers<ContextType = any, ParentType extends ResolversParentTypes['AssignedQuestionsRecord'] = ResolversParentTypes['AssignedQuestionsRecord']> = {
  decision?: Resolver<Maybe<ResolversTypes['ReviewResponseDecision']>, ParentType, ContextType>;
  isLastestReview?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isOptional?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  responseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  reviewAssignmentId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  reviewId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  reviewResponseCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reviewResponseStatus?: Resolver<Maybe<ResolversTypes['ReviewResponseStatus']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AssignedSectionsByStageAndLevelResolvers<ContextType = any, ParentType extends ResolversParentTypes['AssignedSectionsByStageAndLevel'] = ResolversParentTypes['AssignedSectionsByStageAndLevel']> = {
  applicationId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  assignedInProgressSections?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assignedSectionForLevel?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  assignerId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  levelNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  stageId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AssignedSectionsByStageAndLevelsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AssignedSectionsByStageAndLevelsConnection'] = ResolversParentTypes['AssignedSectionsByStageAndLevelsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['AssignedSectionsByStageAndLevelsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['AssignedSectionsByStageAndLevel']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AssignedSectionsByStageAndLevelsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AssignedSectionsByStageAndLevelsEdge'] = ResolversParentTypes['AssignedSectionsByStageAndLevelsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['AssignedSectionsByStageAndLevel']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AssignerListConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AssignerListConnection'] = ResolversParentTypes['AssignerListConnection']> = {
  edges?: Resolver<Array<ResolversTypes['AssignerListEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['AssignerListRecord']>>, ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AssignerListEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AssignerListEdge'] = ResolversParentTypes['AssignerListEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['AssignerListRecord']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AssignerListRecordResolvers<ContextType = any, ParentType extends ResolversParentTypes['AssignerListRecord'] = ResolversParentTypes['AssignerListRecord']> = {
  applicationId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  assignerAction?: Resolver<Maybe<ResolversTypes['AssignerAction']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AssignmentListConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['AssignmentListConnection'] = ResolversParentTypes['AssignmentListConnection']> = {
  edges?: Resolver<Array<ResolversTypes['AssignmentListEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['AssignmentListRecord']>>, ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AssignmentListEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['AssignmentListEdge'] = ResolversParentTypes['AssignmentListEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['AssignmentListRecord']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type AssignmentListRecordResolvers<ContextType = any, ParentType extends ResolversParentTypes['AssignmentListRecord'] = ResolversParentTypes['AssignmentListRecord']> = {
  applicationId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  assigners?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  reviewers?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface BigIntScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['BigInt'], any> {
  name: 'BigInt';
}

export interface CharacterDataScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['CharacterData'], any> {
  name: 'CharacterData';
}

export type ConstraintsInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConstraintsInfo'] = ResolversParentTypes['ConstraintsInfo']> = {
  constraintType?: Resolver<Maybe<ResolversTypes['CharacterData']>, ParentType, ContextType>;
  fromColumnName?: Resolver<Maybe<ResolversTypes['SqlIdentifier']>, ParentType, ContextType>;
  fromTableName?: Resolver<Maybe<ResolversTypes['SqlIdentifier']>, ParentType, ContextType>;
  toColumnName?: Resolver<Maybe<ResolversTypes['SqlIdentifier']>, ParentType, ContextType>;
  toTableName?: Resolver<Maybe<ResolversTypes['SqlIdentifier']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConstraintsInfosConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConstraintsInfosConnection'] = ResolversParentTypes['ConstraintsInfosConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ConstraintsInfosEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ConstraintsInfo']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ConstraintsInfosEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ConstraintsInfosEdge'] = ResolversParentTypes['ConstraintsInfosEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ConstraintsInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CounterResolvers<ContextType = any, ParentType extends ResolversParentTypes['Counter'] = ResolversParentTypes['Counter']> = {
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CountersConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['CountersConnection'] = ResolversParentTypes['CountersConnection']> = {
  edges?: Resolver<Array<ResolversTypes['CountersEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['Counter']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CountersEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['CountersEdge'] = ResolversParentTypes['CountersEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['Counter']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateActionPluginPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateActionPluginPayload'] = ResolversParentTypes['CreateActionPluginPayload']> = {
  actionPlugin?: Resolver<Maybe<ResolversTypes['ActionPlugin']>, ParentType, ContextType>;
  actionPluginEdge?: Resolver<Maybe<ResolversTypes['ActionPluginsEdge']>, ParentType, ContextType, RequireFields<CreateActionPluginPayloadActionPluginEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateActionQueuePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateActionQueuePayload'] = ResolversParentTypes['CreateActionQueuePayload']> = {
  actionQueue?: Resolver<Maybe<ResolversTypes['ActionQueue']>, ParentType, ContextType>;
  actionQueueEdge?: Resolver<Maybe<ResolversTypes['ActionQueuesEdge']>, ParentType, ContextType, RequireFields<CreateActionQueuePayloadActionQueueEdgeArgs, 'orderBy'>>;
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  triggerQueueByTriggerEvent?: Resolver<Maybe<ResolversTypes['TriggerQueue']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateActivityLogPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateActivityLogPayload'] = ResolversParentTypes['CreateActivityLogPayload']> = {
  activityLog?: Resolver<Maybe<ResolversTypes['ActivityLog']>, ParentType, ContextType>;
  activityLogEdge?: Resolver<Maybe<ResolversTypes['ActivityLogsEdge']>, ParentType, ContextType, RequireFields<CreateActivityLogPayloadActivityLogEdgeArgs, 'orderBy'>>;
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateAllowedSelfAssignableSectionsShapePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateAllowedSelfAssignableSectionsShapePayload'] = ResolversParentTypes['CreateAllowedSelfAssignableSectionsShapePayload']> = {
  allowedSelfAssignableSectionsShape?: Resolver<Maybe<ResolversTypes['AllowedSelfAssignableSectionsShape']>, ParentType, ContextType>;
  allowedSelfAssignableSectionsShapeEdge?: Resolver<Maybe<ResolversTypes['AllowedSelfAssignableSectionsShapesEdge']>, ParentType, ContextType, RequireFields<CreateAllowedSelfAssignableSectionsShapePayloadAllowedSelfAssignableSectionsShapeEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateApplicationListShapePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateApplicationListShapePayload'] = ResolversParentTypes['CreateApplicationListShapePayload']> = {
  applicationListShape?: Resolver<Maybe<ResolversTypes['ApplicationListShape']>, ParentType, ContextType>;
  applicationListShapeEdge?: Resolver<Maybe<ResolversTypes['ApplicationListShapesEdge']>, ParentType, ContextType, RequireFields<CreateApplicationListShapePayloadApplicationListShapeEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateApplicationNotePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateApplicationNotePayload'] = ResolversParentTypes['CreateApplicationNotePayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationNote?: Resolver<Maybe<ResolversTypes['ApplicationNote']>, ParentType, ContextType>;
  applicationNoteEdge?: Resolver<Maybe<ResolversTypes['ApplicationNotesEdge']>, ParentType, ContextType, RequireFields<CreateApplicationNotePayloadApplicationNoteEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  org?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateApplicationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateApplicationPayload'] = ResolversParentTypes['CreateApplicationPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationEdge?: Resolver<Maybe<ResolversTypes['ApplicationsEdge']>, ParentType, ContextType, RequireFields<CreateApplicationPayloadApplicationEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  org?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateApplicationResponsePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateApplicationResponsePayload'] = ResolversParentTypes['CreateApplicationResponsePayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationResponse?: Resolver<Maybe<ResolversTypes['ApplicationResponse']>, ParentType, ContextType>;
  applicationResponseEdge?: Resolver<Maybe<ResolversTypes['ApplicationResponsesEdge']>, ParentType, ContextType, RequireFields<CreateApplicationResponsePayloadApplicationResponseEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  templateElement?: Resolver<Maybe<ResolversTypes['TemplateElement']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateApplicationReviewerActionPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateApplicationReviewerActionPayload'] = ResolversParentTypes['CreateApplicationReviewerActionPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationReviewerAction?: Resolver<Maybe<ResolversTypes['ApplicationReviewerAction']>, ParentType, ContextType>;
  applicationReviewerActionEdge?: Resolver<Maybe<ResolversTypes['ApplicationReviewerActionsEdge']>, ParentType, ContextType, RequireFields<CreateApplicationReviewerActionPayloadApplicationReviewerActionEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateApplicationStageHistoryPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateApplicationStageHistoryPayload'] = ResolversParentTypes['CreateApplicationStageHistoryPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationStageHistory?: Resolver<Maybe<ResolversTypes['ApplicationStageHistory']>, ParentType, ContextType>;
  applicationStageHistoryEdge?: Resolver<Maybe<ResolversTypes['ApplicationStageHistoriesEdge']>, ParentType, ContextType, RequireFields<CreateApplicationStageHistoryPayloadApplicationStageHistoryEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  stage?: Resolver<Maybe<ResolversTypes['TemplateStage']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateApplicationStatusHistoryPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateApplicationStatusHistoryPayload'] = ResolversParentTypes['CreateApplicationStatusHistoryPayload']> = {
  applicationStageHistory?: Resolver<Maybe<ResolversTypes['ApplicationStageHistory']>, ParentType, ContextType>;
  applicationStatusHistory?: Resolver<Maybe<ResolversTypes['ApplicationStatusHistory']>, ParentType, ContextType>;
  applicationStatusHistoryEdge?: Resolver<Maybe<ResolversTypes['ApplicationStatusHistoriesEdge']>, ParentType, ContextType, RequireFields<CreateApplicationStatusHistoryPayloadApplicationStatusHistoryEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateCounterPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateCounterPayload'] = ResolversParentTypes['CreateCounterPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  counter?: Resolver<Maybe<ResolversTypes['Counter']>, ParentType, ContextType>;
  counterEdge?: Resolver<Maybe<ResolversTypes['CountersEdge']>, ParentType, ContextType, RequireFields<CreateCounterPayloadCounterEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateDataChangelogPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateDataChangelogPayload'] = ResolversParentTypes['CreateDataChangelogPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dataChangelog?: Resolver<Maybe<ResolversTypes['DataChangelog']>, ParentType, ContextType>;
  dataChangelogEdge?: Resolver<Maybe<ResolversTypes['DataChangelogsEdge']>, ParentType, ContextType, RequireFields<CreateDataChangelogPayloadDataChangelogEdgeArgs, 'orderBy'>>;
  org?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateDataTablePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateDataTablePayload'] = ResolversParentTypes['CreateDataTablePayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dataTable?: Resolver<Maybe<ResolversTypes['DataTable']>, ParentType, ContextType>;
  dataTableEdge?: Resolver<Maybe<ResolversTypes['DataTablesEdge']>, ParentType, ContextType, RequireFields<CreateDataTablePayloadDataTableEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateDataViewColumnDefinitionPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateDataViewColumnDefinitionPayload'] = ResolversParentTypes['CreateDataViewColumnDefinitionPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dataViewColumnDefinition?: Resolver<Maybe<ResolversTypes['DataViewColumnDefinition']>, ParentType, ContextType>;
  dataViewColumnDefinitionEdge?: Resolver<Maybe<ResolversTypes['DataViewColumnDefinitionsEdge']>, ParentType, ContextType, RequireFields<CreateDataViewColumnDefinitionPayloadDataViewColumnDefinitionEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateDataViewPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateDataViewPayload'] = ResolversParentTypes['CreateDataViewPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dataView?: Resolver<Maybe<ResolversTypes['DataView']>, ParentType, ContextType>;
  dataViewEdge?: Resolver<Maybe<ResolversTypes['DataViewsEdge']>, ParentType, ContextType, RequireFields<CreateDataViewPayloadDataViewEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateElementTypePluginPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateElementTypePluginPayload'] = ResolversParentTypes['CreateElementTypePluginPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  elementTypePlugin?: Resolver<Maybe<ResolversTypes['ElementTypePlugin']>, ParentType, ContextType>;
  elementTypePluginEdge?: Resolver<Maybe<ResolversTypes['ElementTypePluginsEdge']>, ParentType, ContextType, RequireFields<CreateElementTypePluginPayloadElementTypePluginEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateFilePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateFilePayload'] = ResolversParentTypes['CreateFilePayload']> = {
  applicationByApplicationSerial?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationNote?: Resolver<Maybe<ResolversTypes['ApplicationNote']>, ParentType, ContextType>;
  applicationResponse?: Resolver<Maybe<ResolversTypes['ApplicationResponse']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  file?: Resolver<Maybe<ResolversTypes['File']>, ParentType, ContextType>;
  fileEdge?: Resolver<Maybe<ResolversTypes['FilesEdge']>, ParentType, ContextType, RequireFields<CreateFilePayloadFileEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateFilterPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateFilterPayload'] = ResolversParentTypes['CreateFilterPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  filter?: Resolver<Maybe<ResolversTypes['Filter']>, ParentType, ContextType>;
  filterEdge?: Resolver<Maybe<ResolversTypes['FiltersEdge']>, ParentType, ContextType, RequireFields<CreateFilterPayloadFilterEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateNotificationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateNotificationPayload'] = ResolversParentTypes['CreateNotificationPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  notification?: Resolver<Maybe<ResolversTypes['Notification']>, ParentType, ContextType>;
  notificationEdge?: Resolver<Maybe<ResolversTypes['NotificationsEdge']>, ParentType, ContextType, RequireFields<CreateNotificationPayloadNotificationEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateOrganisationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateOrganisationPayload'] = ResolversParentTypes['CreateOrganisationPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  organisationEdge?: Resolver<Maybe<ResolversTypes['OrganisationsEdge']>, ParentType, ContextType, RequireFields<CreateOrganisationPayloadOrganisationEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreatePermissionJoinPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreatePermissionJoinPayload'] = ResolversParentTypes['CreatePermissionJoinPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  permissionJoin?: Resolver<Maybe<ResolversTypes['PermissionJoin']>, ParentType, ContextType>;
  permissionJoinEdge?: Resolver<Maybe<ResolversTypes['PermissionJoinsEdge']>, ParentType, ContextType, RequireFields<CreatePermissionJoinPayloadPermissionJoinEdgeArgs, 'orderBy'>>;
  permissionName?: Resolver<Maybe<ResolversTypes['PermissionName']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreatePermissionNamePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreatePermissionNamePayload'] = ResolversParentTypes['CreatePermissionNamePayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  permissionName?: Resolver<Maybe<ResolversTypes['PermissionName']>, ParentType, ContextType>;
  permissionNameEdge?: Resolver<Maybe<ResolversTypes['PermissionNamesEdge']>, ParentType, ContextType, RequireFields<CreatePermissionNamePayloadPermissionNameEdgeArgs, 'orderBy'>>;
  permissionPolicy?: Resolver<Maybe<ResolversTypes['PermissionPolicy']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreatePermissionPolicyPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreatePermissionPolicyPayload'] = ResolversParentTypes['CreatePermissionPolicyPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  permissionPolicy?: Resolver<Maybe<ResolversTypes['PermissionPolicy']>, ParentType, ContextType>;
  permissionPolicyEdge?: Resolver<Maybe<ResolversTypes['PermissionPoliciesEdge']>, ParentType, ContextType, RequireFields<CreatePermissionPolicyPayloadPermissionPolicyEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateReviewAssignmentAssignedSectionsShapePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateReviewAssignmentAssignedSectionsShapePayload'] = ResolversParentTypes['CreateReviewAssignmentAssignedSectionsShapePayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  reviewAssignmentAssignedSectionsShape?: Resolver<Maybe<ResolversTypes['ReviewAssignmentAssignedSectionsShape']>, ParentType, ContextType>;
  reviewAssignmentAssignedSectionsShapeEdge?: Resolver<Maybe<ResolversTypes['ReviewAssignmentAssignedSectionsShapesEdge']>, ParentType, ContextType, RequireFields<CreateReviewAssignmentAssignedSectionsShapePayloadReviewAssignmentAssignedSectionsShapeEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateReviewAssignmentAssignerJoinPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateReviewAssignmentAssignerJoinPayload'] = ResolversParentTypes['CreateReviewAssignmentAssignerJoinPayload']> = {
  assigner?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  reviewAssignment?: Resolver<Maybe<ResolversTypes['ReviewAssignment']>, ParentType, ContextType>;
  reviewAssignmentAssignerJoin?: Resolver<Maybe<ResolversTypes['ReviewAssignmentAssignerJoin']>, ParentType, ContextType>;
  reviewAssignmentAssignerJoinEdge?: Resolver<Maybe<ResolversTypes['ReviewAssignmentAssignerJoinsEdge']>, ParentType, ContextType, RequireFields<CreateReviewAssignmentAssignerJoinPayloadReviewAssignmentAssignerJoinEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateReviewAssignmentPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateReviewAssignmentPayload'] = ResolversParentTypes['CreateReviewAssignmentPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  assigner?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  level?: Resolver<Maybe<ResolversTypes['TemplateStageReviewLevel']>, ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  reviewAssignment?: Resolver<Maybe<ResolversTypes['ReviewAssignment']>, ParentType, ContextType>;
  reviewAssignmentEdge?: Resolver<Maybe<ResolversTypes['ReviewAssignmentsEdge']>, ParentType, ContextType, RequireFields<CreateReviewAssignmentPayloadReviewAssignmentEdgeArgs, 'orderBy'>>;
  reviewer?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  stage?: Resolver<Maybe<ResolversTypes['TemplateStage']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateReviewDecisionPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateReviewDecisionPayload'] = ResolversParentTypes['CreateReviewDecisionPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  reviewDecision?: Resolver<Maybe<ResolversTypes['ReviewDecision']>, ParentType, ContextType>;
  reviewDecisionEdge?: Resolver<Maybe<ResolversTypes['ReviewDecisionsEdge']>, ParentType, ContextType, RequireFields<CreateReviewDecisionPayloadReviewDecisionEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateReviewPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateReviewPayload'] = ResolversParentTypes['CreateReviewPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  reviewAssignment?: Resolver<Maybe<ResolversTypes['ReviewAssignment']>, ParentType, ContextType>;
  reviewEdge?: Resolver<Maybe<ResolversTypes['ReviewsEdge']>, ParentType, ContextType, RequireFields<CreateReviewPayloadReviewEdgeArgs, 'orderBy'>>;
  reviewer?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateReviewResponsePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateReviewResponsePayload'] = ResolversParentTypes['CreateReviewResponsePayload']> = {
  applicationResponse?: Resolver<Maybe<ResolversTypes['ApplicationResponse']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  originalReviewResponse?: Resolver<Maybe<ResolversTypes['ReviewResponse']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  reviewResponse?: Resolver<Maybe<ResolversTypes['ReviewResponse']>, ParentType, ContextType>;
  reviewResponseEdge?: Resolver<Maybe<ResolversTypes['ReviewResponsesEdge']>, ParentType, ContextType, RequireFields<CreateReviewResponsePayloadReviewResponseEdgeArgs, 'orderBy'>>;
  reviewResponseLink?: Resolver<Maybe<ResolversTypes['ReviewResponse']>, ParentType, ContextType>;
  templateElement?: Resolver<Maybe<ResolversTypes['TemplateElement']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateReviewStatusHistoryPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateReviewStatusHistoryPayload'] = ResolversParentTypes['CreateReviewStatusHistoryPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  reviewStatusHistory?: Resolver<Maybe<ResolversTypes['ReviewStatusHistory']>, ParentType, ContextType>;
  reviewStatusHistoryEdge?: Resolver<Maybe<ResolversTypes['ReviewStatusHistoriesEdge']>, ParentType, ContextType, RequireFields<CreateReviewStatusHistoryPayloadReviewStatusHistoryEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateSystemInfoPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateSystemInfoPayload'] = ResolversParentTypes['CreateSystemInfoPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  systemInfo?: Resolver<Maybe<ResolversTypes['SystemInfo']>, ParentType, ContextType>;
  systemInfoEdge?: Resolver<Maybe<ResolversTypes['SystemInfosEdge']>, ParentType, ContextType, RequireFields<CreateSystemInfoPayloadSystemInfoEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateTemplateActionPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateTemplateActionPayload'] = ResolversParentTypes['CreateTemplateActionPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateAction?: Resolver<Maybe<ResolversTypes['TemplateAction']>, ParentType, ContextType>;
  templateActionEdge?: Resolver<Maybe<ResolversTypes['TemplateActionsEdge']>, ParentType, ContextType, RequireFields<CreateTemplateActionPayloadTemplateActionEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateTemplateCategoryPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateTemplateCategoryPayload'] = ResolversParentTypes['CreateTemplateCategoryPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  templateCategory?: Resolver<Maybe<ResolversTypes['TemplateCategory']>, ParentType, ContextType>;
  templateCategoryEdge?: Resolver<Maybe<ResolversTypes['TemplateCategoriesEdge']>, ParentType, ContextType, RequireFields<CreateTemplateCategoryPayloadTemplateCategoryEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateTemplateElementPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateTemplateElementPayload'] = ResolversParentTypes['CreateTemplateElementPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  section?: Resolver<Maybe<ResolversTypes['TemplateSection']>, ParentType, ContextType>;
  templateElement?: Resolver<Maybe<ResolversTypes['TemplateElement']>, ParentType, ContextType>;
  templateElementEdge?: Resolver<Maybe<ResolversTypes['TemplateElementsEdge']>, ParentType, ContextType, RequireFields<CreateTemplateElementPayloadTemplateElementEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateTemplateFilterJoinPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateTemplateFilterJoinPayload'] = ResolversParentTypes['CreateTemplateFilterJoinPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  filter?: Resolver<Maybe<ResolversTypes['Filter']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateFilterJoin?: Resolver<Maybe<ResolversTypes['TemplateFilterJoin']>, ParentType, ContextType>;
  templateFilterJoinEdge?: Resolver<Maybe<ResolversTypes['TemplateFilterJoinsEdge']>, ParentType, ContextType, RequireFields<CreateTemplateFilterJoinPayloadTemplateFilterJoinEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateTemplatePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateTemplatePayload'] = ResolversParentTypes['CreateTemplatePayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateCategory?: Resolver<Maybe<ResolversTypes['TemplateCategory']>, ParentType, ContextType>;
  templateEdge?: Resolver<Maybe<ResolversTypes['TemplatesEdge']>, ParentType, ContextType, RequireFields<CreateTemplatePayloadTemplateEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateTemplatePermissionPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateTemplatePermissionPayload'] = ResolversParentTypes['CreateTemplatePermissionPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  permissionName?: Resolver<Maybe<ResolversTypes['PermissionName']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templatePermission?: Resolver<Maybe<ResolversTypes['TemplatePermission']>, ParentType, ContextType>;
  templatePermissionEdge?: Resolver<Maybe<ResolversTypes['TemplatePermissionsEdge']>, ParentType, ContextType, RequireFields<CreateTemplatePermissionPayloadTemplatePermissionEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateTemplateSectionPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateTemplateSectionPayload'] = ResolversParentTypes['CreateTemplateSectionPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateSection?: Resolver<Maybe<ResolversTypes['TemplateSection']>, ParentType, ContextType>;
  templateSectionEdge?: Resolver<Maybe<ResolversTypes['TemplateSectionsEdge']>, ParentType, ContextType, RequireFields<CreateTemplateSectionPayloadTemplateSectionEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateTemplateStagePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateTemplateStagePayload'] = ResolversParentTypes['CreateTemplateStagePayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateStage?: Resolver<Maybe<ResolversTypes['TemplateStage']>, ParentType, ContextType>;
  templateStageEdge?: Resolver<Maybe<ResolversTypes['TemplateStagesEdge']>, ParentType, ContextType, RequireFields<CreateTemplateStagePayloadTemplateStageEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateTemplateStageReviewLevelPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateTemplateStageReviewLevelPayload'] = ResolversParentTypes['CreateTemplateStageReviewLevelPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  stage?: Resolver<Maybe<ResolversTypes['TemplateStage']>, ParentType, ContextType>;
  templateStageReviewLevel?: Resolver<Maybe<ResolversTypes['TemplateStageReviewLevel']>, ParentType, ContextType>;
  templateStageReviewLevelEdge?: Resolver<Maybe<ResolversTypes['TemplateStageReviewLevelsEdge']>, ParentType, ContextType, RequireFields<CreateTemplateStageReviewLevelPayloadTemplateStageReviewLevelEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateTriggerQueuePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateTriggerQueuePayload'] = ResolversParentTypes['CreateTriggerQueuePayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  triggerQueue?: Resolver<Maybe<ResolversTypes['TriggerQueue']>, ParentType, ContextType>;
  triggerQueueEdge?: Resolver<Maybe<ResolversTypes['TriggerQueuesEdge']>, ParentType, ContextType, RequireFields<CreateTriggerQueuePayloadTriggerQueueEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateTriggerSchedulePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateTriggerSchedulePayload'] = ResolversParentTypes['CreateTriggerSchedulePayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  triggerSchedule?: Resolver<Maybe<ResolversTypes['TriggerSchedule']>, ParentType, ContextType>;
  triggerScheduleEdge?: Resolver<Maybe<ResolversTypes['TriggerSchedulesEdge']>, ParentType, ContextType, RequireFields<CreateTriggerSchedulePayloadTriggerScheduleEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateUserListPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateUserListPayload'] = ResolversParentTypes['CreateUserListPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  userList?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  userListEdge?: Resolver<Maybe<ResolversTypes['UserListsEdge']>, ParentType, ContextType, RequireFields<CreateUserListPayloadUserListEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateUserOrganisationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateUserOrganisationPayload'] = ResolversParentTypes['CreateUserOrganisationPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  userOrganisation?: Resolver<Maybe<ResolversTypes['UserOrganisation']>, ParentType, ContextType>;
  userOrganisationEdge?: Resolver<Maybe<ResolversTypes['UserOrganisationsEdge']>, ParentType, ContextType, RequireFields<CreateUserOrganisationPayloadUserOrganisationEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateUserPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateUserPayload'] = ResolversParentTypes['CreateUserPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  userEdge?: Resolver<Maybe<ResolversTypes['UsersEdge']>, ParentType, ContextType, RequireFields<CreateUserPayloadUserEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type CreateVerificationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['CreateVerificationPayload'] = ResolversParentTypes['CreateVerificationPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  verification?: Resolver<Maybe<ResolversTypes['Verification']>, ParentType, ContextType>;
  verificationEdge?: Resolver<Maybe<ResolversTypes['VerificationsEdge']>, ParentType, ContextType, RequireFields<CreateVerificationPayloadVerificationEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface CursorScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Cursor'], any> {
  name: 'Cursor';
}

export type DataChangelogResolvers<ContextType = any, ParentType extends ResolversParentTypes['DataChangelog'] = ResolversParentTypes['DataChangelog']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  comment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dataTable?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  newData?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  oldData?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  org?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  orgId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  recordId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  updateType?: Resolver<ResolversTypes['ChangelogType'], ParentType, ContextType>;
  userId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DataChangelogsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['DataChangelogsConnection'] = ResolversParentTypes['DataChangelogsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['DataChangelogsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['DataChangelog']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DataChangelogsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DataChangelogsEdge'] = ResolversParentTypes['DataChangelogsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['DataChangelog']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DataTableResolvers<ContextType = any, ParentType extends ResolversParentTypes['DataTable'] = ResolversParentTypes['DataTable']> = {
  dataViewCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  displayName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fieldMap?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isLookupTable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  tableName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DataTablesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['DataTablesConnection'] = ResolversParentTypes['DataTablesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['DataTablesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['DataTable']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DataTablesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DataTablesEdge'] = ResolversParentTypes['DataTablesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['DataTable']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DataViewResolvers<ContextType = any, ParentType extends ResolversParentTypes['DataView'] = ResolversParentTypes['DataView']> = {
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  defaultFilterString?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  defaultSortColumn?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  detailViewExcludeColumns?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  detailViewHeaderColumn?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  detailViewIncludeColumns?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  enabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  filterExcludeColumns?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  filterIncludeColumns?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  identifier?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  menuName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  permissionNames?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  priority?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  rawDataExcludeColumns?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  rawDataIncludeColumns?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  rowRestrictions?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  showLinkedApplications?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  submenu?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tableName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  tableSearchColumns?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  tableViewExcludeColumns?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  tableViewIncludeColumns?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DataViewColumnDefinitionResolvers<ContextType = any, ParentType extends ResolversParentTypes['DataViewColumnDefinition'] = ResolversParentTypes['DataViewColumnDefinition']> = {
  additionalFormatting?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  columnName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  elementParameters?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  elementTypePluginCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  filterDataType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  filterExpression?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  filterParameters?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  hideIfNull?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  sortColumn?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tableName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  valueExpression?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DataViewColumnDefinitionsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['DataViewColumnDefinitionsConnection'] = ResolversParentTypes['DataViewColumnDefinitionsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['DataViewColumnDefinitionsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['DataViewColumnDefinition']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DataViewColumnDefinitionsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DataViewColumnDefinitionsEdge'] = ResolversParentTypes['DataViewColumnDefinitionsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['DataViewColumnDefinition']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DataViewsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['DataViewsConnection'] = ResolversParentTypes['DataViewsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['DataViewsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['DataView']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DataViewsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['DataViewsEdge'] = ResolversParentTypes['DataViewsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['DataView']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface DateScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Date'], any> {
  name: 'Date';
}

export interface DatetimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Datetime'], any> {
  name: 'Datetime';
}

export type DeleteActionPluginPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteActionPluginPayload'] = ResolversParentTypes['DeleteActionPluginPayload']> = {
  actionPlugin?: Resolver<Maybe<ResolversTypes['ActionPlugin']>, ParentType, ContextType>;
  actionPluginEdge?: Resolver<Maybe<ResolversTypes['ActionPluginsEdge']>, ParentType, ContextType, RequireFields<DeleteActionPluginPayloadActionPluginEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedActionPluginNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteActionQueuePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteActionQueuePayload'] = ResolversParentTypes['DeleteActionQueuePayload']> = {
  actionQueue?: Resolver<Maybe<ResolversTypes['ActionQueue']>, ParentType, ContextType>;
  actionQueueEdge?: Resolver<Maybe<ResolversTypes['ActionQueuesEdge']>, ParentType, ContextType, RequireFields<DeleteActionQueuePayloadActionQueueEdgeArgs, 'orderBy'>>;
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedActionQueueNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  triggerQueueByTriggerEvent?: Resolver<Maybe<ResolversTypes['TriggerQueue']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteActivityLogPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteActivityLogPayload'] = ResolversParentTypes['DeleteActivityLogPayload']> = {
  activityLog?: Resolver<Maybe<ResolversTypes['ActivityLog']>, ParentType, ContextType>;
  activityLogEdge?: Resolver<Maybe<ResolversTypes['ActivityLogsEdge']>, ParentType, ContextType, RequireFields<DeleteActivityLogPayloadActivityLogEdgeArgs, 'orderBy'>>;
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedActivityLogNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteApplicationNotePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteApplicationNotePayload'] = ResolversParentTypes['DeleteApplicationNotePayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationNote?: Resolver<Maybe<ResolversTypes['ApplicationNote']>, ParentType, ContextType>;
  applicationNoteEdge?: Resolver<Maybe<ResolversTypes['ApplicationNotesEdge']>, ParentType, ContextType, RequireFields<DeleteApplicationNotePayloadApplicationNoteEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedApplicationNoteNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  org?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteApplicationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteApplicationPayload'] = ResolversParentTypes['DeleteApplicationPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationEdge?: Resolver<Maybe<ResolversTypes['ApplicationsEdge']>, ParentType, ContextType, RequireFields<DeleteApplicationPayloadApplicationEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedApplicationNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  org?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteApplicationResponsePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteApplicationResponsePayload'] = ResolversParentTypes['DeleteApplicationResponsePayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationResponse?: Resolver<Maybe<ResolversTypes['ApplicationResponse']>, ParentType, ContextType>;
  applicationResponseEdge?: Resolver<Maybe<ResolversTypes['ApplicationResponsesEdge']>, ParentType, ContextType, RequireFields<DeleteApplicationResponsePayloadApplicationResponseEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedApplicationResponseNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  templateElement?: Resolver<Maybe<ResolversTypes['TemplateElement']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteApplicationReviewerActionPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteApplicationReviewerActionPayload'] = ResolversParentTypes['DeleteApplicationReviewerActionPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationReviewerAction?: Resolver<Maybe<ResolversTypes['ApplicationReviewerAction']>, ParentType, ContextType>;
  applicationReviewerActionEdge?: Resolver<Maybe<ResolversTypes['ApplicationReviewerActionsEdge']>, ParentType, ContextType, RequireFields<DeleteApplicationReviewerActionPayloadApplicationReviewerActionEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedApplicationReviewerActionNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteApplicationStageHistoryPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteApplicationStageHistoryPayload'] = ResolversParentTypes['DeleteApplicationStageHistoryPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationStageHistory?: Resolver<Maybe<ResolversTypes['ApplicationStageHistory']>, ParentType, ContextType>;
  applicationStageHistoryEdge?: Resolver<Maybe<ResolversTypes['ApplicationStageHistoriesEdge']>, ParentType, ContextType, RequireFields<DeleteApplicationStageHistoryPayloadApplicationStageHistoryEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedApplicationStageHistoryNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  stage?: Resolver<Maybe<ResolversTypes['TemplateStage']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteApplicationStatusHistoryPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteApplicationStatusHistoryPayload'] = ResolversParentTypes['DeleteApplicationStatusHistoryPayload']> = {
  applicationStageHistory?: Resolver<Maybe<ResolversTypes['ApplicationStageHistory']>, ParentType, ContextType>;
  applicationStatusHistory?: Resolver<Maybe<ResolversTypes['ApplicationStatusHistory']>, ParentType, ContextType>;
  applicationStatusHistoryEdge?: Resolver<Maybe<ResolversTypes['ApplicationStatusHistoriesEdge']>, ParentType, ContextType, RequireFields<DeleteApplicationStatusHistoryPayloadApplicationStatusHistoryEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedApplicationStatusHistoryNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteCounterPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteCounterPayload'] = ResolversParentTypes['DeleteCounterPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  counter?: Resolver<Maybe<ResolversTypes['Counter']>, ParentType, ContextType>;
  counterEdge?: Resolver<Maybe<ResolversTypes['CountersEdge']>, ParentType, ContextType, RequireFields<DeleteCounterPayloadCounterEdgeArgs, 'orderBy'>>;
  deletedCounterNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteDataChangelogPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteDataChangelogPayload'] = ResolversParentTypes['DeleteDataChangelogPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dataChangelog?: Resolver<Maybe<ResolversTypes['DataChangelog']>, ParentType, ContextType>;
  dataChangelogEdge?: Resolver<Maybe<ResolversTypes['DataChangelogsEdge']>, ParentType, ContextType, RequireFields<DeleteDataChangelogPayloadDataChangelogEdgeArgs, 'orderBy'>>;
  deletedDataChangelogNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  org?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteDataTablePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteDataTablePayload'] = ResolversParentTypes['DeleteDataTablePayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dataTable?: Resolver<Maybe<ResolversTypes['DataTable']>, ParentType, ContextType>;
  dataTableEdge?: Resolver<Maybe<ResolversTypes['DataTablesEdge']>, ParentType, ContextType, RequireFields<DeleteDataTablePayloadDataTableEdgeArgs, 'orderBy'>>;
  deletedDataTableNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteDataViewColumnDefinitionPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteDataViewColumnDefinitionPayload'] = ResolversParentTypes['DeleteDataViewColumnDefinitionPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dataViewColumnDefinition?: Resolver<Maybe<ResolversTypes['DataViewColumnDefinition']>, ParentType, ContextType>;
  dataViewColumnDefinitionEdge?: Resolver<Maybe<ResolversTypes['DataViewColumnDefinitionsEdge']>, ParentType, ContextType, RequireFields<DeleteDataViewColumnDefinitionPayloadDataViewColumnDefinitionEdgeArgs, 'orderBy'>>;
  deletedDataViewColumnDefinitionNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteDataViewPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteDataViewPayload'] = ResolversParentTypes['DeleteDataViewPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dataView?: Resolver<Maybe<ResolversTypes['DataView']>, ParentType, ContextType>;
  dataViewEdge?: Resolver<Maybe<ResolversTypes['DataViewsEdge']>, ParentType, ContextType, RequireFields<DeleteDataViewPayloadDataViewEdgeArgs, 'orderBy'>>;
  deletedDataViewNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteElementTypePluginPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteElementTypePluginPayload'] = ResolversParentTypes['DeleteElementTypePluginPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedElementTypePluginNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  elementTypePlugin?: Resolver<Maybe<ResolversTypes['ElementTypePlugin']>, ParentType, ContextType>;
  elementTypePluginEdge?: Resolver<Maybe<ResolversTypes['ElementTypePluginsEdge']>, ParentType, ContextType, RequireFields<DeleteElementTypePluginPayloadElementTypePluginEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteFilePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteFilePayload'] = ResolversParentTypes['DeleteFilePayload']> = {
  applicationByApplicationSerial?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationNote?: Resolver<Maybe<ResolversTypes['ApplicationNote']>, ParentType, ContextType>;
  applicationResponse?: Resolver<Maybe<ResolversTypes['ApplicationResponse']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedFileNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  file?: Resolver<Maybe<ResolversTypes['File']>, ParentType, ContextType>;
  fileEdge?: Resolver<Maybe<ResolversTypes['FilesEdge']>, ParentType, ContextType, RequireFields<DeleteFilePayloadFileEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteFilterPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteFilterPayload'] = ResolversParentTypes['DeleteFilterPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedFilterNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  filter?: Resolver<Maybe<ResolversTypes['Filter']>, ParentType, ContextType>;
  filterEdge?: Resolver<Maybe<ResolversTypes['FiltersEdge']>, ParentType, ContextType, RequireFields<DeleteFilterPayloadFilterEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteNotificationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteNotificationPayload'] = ResolversParentTypes['DeleteNotificationPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedNotificationNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  notification?: Resolver<Maybe<ResolversTypes['Notification']>, ParentType, ContextType>;
  notificationEdge?: Resolver<Maybe<ResolversTypes['NotificationsEdge']>, ParentType, ContextType, RequireFields<DeleteNotificationPayloadNotificationEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteOrganisationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteOrganisationPayload'] = ResolversParentTypes['DeleteOrganisationPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedOrganisationNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  organisationEdge?: Resolver<Maybe<ResolversTypes['OrganisationsEdge']>, ParentType, ContextType, RequireFields<DeleteOrganisationPayloadOrganisationEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeletePermissionJoinPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeletePermissionJoinPayload'] = ResolversParentTypes['DeletePermissionJoinPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedPermissionJoinNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  permissionJoin?: Resolver<Maybe<ResolversTypes['PermissionJoin']>, ParentType, ContextType>;
  permissionJoinEdge?: Resolver<Maybe<ResolversTypes['PermissionJoinsEdge']>, ParentType, ContextType, RequireFields<DeletePermissionJoinPayloadPermissionJoinEdgeArgs, 'orderBy'>>;
  permissionName?: Resolver<Maybe<ResolversTypes['PermissionName']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeletePermissionNamePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeletePermissionNamePayload'] = ResolversParentTypes['DeletePermissionNamePayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedPermissionNameNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  permissionName?: Resolver<Maybe<ResolversTypes['PermissionName']>, ParentType, ContextType>;
  permissionNameEdge?: Resolver<Maybe<ResolversTypes['PermissionNamesEdge']>, ParentType, ContextType, RequireFields<DeletePermissionNamePayloadPermissionNameEdgeArgs, 'orderBy'>>;
  permissionPolicy?: Resolver<Maybe<ResolversTypes['PermissionPolicy']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeletePermissionPolicyPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeletePermissionPolicyPayload'] = ResolversParentTypes['DeletePermissionPolicyPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedPermissionPolicyNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  permissionPolicy?: Resolver<Maybe<ResolversTypes['PermissionPolicy']>, ParentType, ContextType>;
  permissionPolicyEdge?: Resolver<Maybe<ResolversTypes['PermissionPoliciesEdge']>, ParentType, ContextType, RequireFields<DeletePermissionPolicyPayloadPermissionPolicyEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteReviewAssignmentAssignerJoinPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteReviewAssignmentAssignerJoinPayload'] = ResolversParentTypes['DeleteReviewAssignmentAssignerJoinPayload']> = {
  assigner?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedReviewAssignmentAssignerJoinNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  reviewAssignment?: Resolver<Maybe<ResolversTypes['ReviewAssignment']>, ParentType, ContextType>;
  reviewAssignmentAssignerJoin?: Resolver<Maybe<ResolversTypes['ReviewAssignmentAssignerJoin']>, ParentType, ContextType>;
  reviewAssignmentAssignerJoinEdge?: Resolver<Maybe<ResolversTypes['ReviewAssignmentAssignerJoinsEdge']>, ParentType, ContextType, RequireFields<DeleteReviewAssignmentAssignerJoinPayloadReviewAssignmentAssignerJoinEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteReviewAssignmentPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteReviewAssignmentPayload'] = ResolversParentTypes['DeleteReviewAssignmentPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  assigner?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedReviewAssignmentNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  level?: Resolver<Maybe<ResolversTypes['TemplateStageReviewLevel']>, ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  reviewAssignment?: Resolver<Maybe<ResolversTypes['ReviewAssignment']>, ParentType, ContextType>;
  reviewAssignmentEdge?: Resolver<Maybe<ResolversTypes['ReviewAssignmentsEdge']>, ParentType, ContextType, RequireFields<DeleteReviewAssignmentPayloadReviewAssignmentEdgeArgs, 'orderBy'>>;
  reviewer?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  stage?: Resolver<Maybe<ResolversTypes['TemplateStage']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteReviewDecisionPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteReviewDecisionPayload'] = ResolversParentTypes['DeleteReviewDecisionPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedReviewDecisionNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  reviewDecision?: Resolver<Maybe<ResolversTypes['ReviewDecision']>, ParentType, ContextType>;
  reviewDecisionEdge?: Resolver<Maybe<ResolversTypes['ReviewDecisionsEdge']>, ParentType, ContextType, RequireFields<DeleteReviewDecisionPayloadReviewDecisionEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteReviewPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteReviewPayload'] = ResolversParentTypes['DeleteReviewPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedReviewNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  reviewAssignment?: Resolver<Maybe<ResolversTypes['ReviewAssignment']>, ParentType, ContextType>;
  reviewEdge?: Resolver<Maybe<ResolversTypes['ReviewsEdge']>, ParentType, ContextType, RequireFields<DeleteReviewPayloadReviewEdgeArgs, 'orderBy'>>;
  reviewer?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteReviewResponsePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteReviewResponsePayload'] = ResolversParentTypes['DeleteReviewResponsePayload']> = {
  applicationResponse?: Resolver<Maybe<ResolversTypes['ApplicationResponse']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedReviewResponseNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  originalReviewResponse?: Resolver<Maybe<ResolversTypes['ReviewResponse']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  reviewResponse?: Resolver<Maybe<ResolversTypes['ReviewResponse']>, ParentType, ContextType>;
  reviewResponseEdge?: Resolver<Maybe<ResolversTypes['ReviewResponsesEdge']>, ParentType, ContextType, RequireFields<DeleteReviewResponsePayloadReviewResponseEdgeArgs, 'orderBy'>>;
  reviewResponseLink?: Resolver<Maybe<ResolversTypes['ReviewResponse']>, ParentType, ContextType>;
  templateElement?: Resolver<Maybe<ResolversTypes['TemplateElement']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteReviewStatusHistoryPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteReviewStatusHistoryPayload'] = ResolversParentTypes['DeleteReviewStatusHistoryPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedReviewStatusHistoryNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  reviewStatusHistory?: Resolver<Maybe<ResolversTypes['ReviewStatusHistory']>, ParentType, ContextType>;
  reviewStatusHistoryEdge?: Resolver<Maybe<ResolversTypes['ReviewStatusHistoriesEdge']>, ParentType, ContextType, RequireFields<DeleteReviewStatusHistoryPayloadReviewStatusHistoryEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteSystemInfoPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteSystemInfoPayload'] = ResolversParentTypes['DeleteSystemInfoPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedSystemInfoNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  systemInfo?: Resolver<Maybe<ResolversTypes['SystemInfo']>, ParentType, ContextType>;
  systemInfoEdge?: Resolver<Maybe<ResolversTypes['SystemInfosEdge']>, ParentType, ContextType, RequireFields<DeleteSystemInfoPayloadSystemInfoEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteTemplateActionPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTemplateActionPayload'] = ResolversParentTypes['DeleteTemplateActionPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedTemplateActionNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateAction?: Resolver<Maybe<ResolversTypes['TemplateAction']>, ParentType, ContextType>;
  templateActionEdge?: Resolver<Maybe<ResolversTypes['TemplateActionsEdge']>, ParentType, ContextType, RequireFields<DeleteTemplateActionPayloadTemplateActionEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteTemplateCategoryPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTemplateCategoryPayload'] = ResolversParentTypes['DeleteTemplateCategoryPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedTemplateCategoryNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  templateCategory?: Resolver<Maybe<ResolversTypes['TemplateCategory']>, ParentType, ContextType>;
  templateCategoryEdge?: Resolver<Maybe<ResolversTypes['TemplateCategoriesEdge']>, ParentType, ContextType, RequireFields<DeleteTemplateCategoryPayloadTemplateCategoryEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteTemplateElementPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTemplateElementPayload'] = ResolversParentTypes['DeleteTemplateElementPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedTemplateElementNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  section?: Resolver<Maybe<ResolversTypes['TemplateSection']>, ParentType, ContextType>;
  templateElement?: Resolver<Maybe<ResolversTypes['TemplateElement']>, ParentType, ContextType>;
  templateElementEdge?: Resolver<Maybe<ResolversTypes['TemplateElementsEdge']>, ParentType, ContextType, RequireFields<DeleteTemplateElementPayloadTemplateElementEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteTemplateFilterJoinPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTemplateFilterJoinPayload'] = ResolversParentTypes['DeleteTemplateFilterJoinPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedTemplateFilterJoinNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  filter?: Resolver<Maybe<ResolversTypes['Filter']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateFilterJoin?: Resolver<Maybe<ResolversTypes['TemplateFilterJoin']>, ParentType, ContextType>;
  templateFilterJoinEdge?: Resolver<Maybe<ResolversTypes['TemplateFilterJoinsEdge']>, ParentType, ContextType, RequireFields<DeleteTemplateFilterJoinPayloadTemplateFilterJoinEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteTemplatePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTemplatePayload'] = ResolversParentTypes['DeleteTemplatePayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedTemplateNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateCategory?: Resolver<Maybe<ResolversTypes['TemplateCategory']>, ParentType, ContextType>;
  templateEdge?: Resolver<Maybe<ResolversTypes['TemplatesEdge']>, ParentType, ContextType, RequireFields<DeleteTemplatePayloadTemplateEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteTemplatePermissionPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTemplatePermissionPayload'] = ResolversParentTypes['DeleteTemplatePermissionPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedTemplatePermissionNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  permissionName?: Resolver<Maybe<ResolversTypes['PermissionName']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templatePermission?: Resolver<Maybe<ResolversTypes['TemplatePermission']>, ParentType, ContextType>;
  templatePermissionEdge?: Resolver<Maybe<ResolversTypes['TemplatePermissionsEdge']>, ParentType, ContextType, RequireFields<DeleteTemplatePermissionPayloadTemplatePermissionEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteTemplateSectionPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTemplateSectionPayload'] = ResolversParentTypes['DeleteTemplateSectionPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedTemplateSectionNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateSection?: Resolver<Maybe<ResolversTypes['TemplateSection']>, ParentType, ContextType>;
  templateSectionEdge?: Resolver<Maybe<ResolversTypes['TemplateSectionsEdge']>, ParentType, ContextType, RequireFields<DeleteTemplateSectionPayloadTemplateSectionEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteTemplateStagePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTemplateStagePayload'] = ResolversParentTypes['DeleteTemplateStagePayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedTemplateStageNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateStage?: Resolver<Maybe<ResolversTypes['TemplateStage']>, ParentType, ContextType>;
  templateStageEdge?: Resolver<Maybe<ResolversTypes['TemplateStagesEdge']>, ParentType, ContextType, RequireFields<DeleteTemplateStagePayloadTemplateStageEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteTemplateStageReviewLevelPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTemplateStageReviewLevelPayload'] = ResolversParentTypes['DeleteTemplateStageReviewLevelPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedTemplateStageReviewLevelNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  stage?: Resolver<Maybe<ResolversTypes['TemplateStage']>, ParentType, ContextType>;
  templateStageReviewLevel?: Resolver<Maybe<ResolversTypes['TemplateStageReviewLevel']>, ParentType, ContextType>;
  templateStageReviewLevelEdge?: Resolver<Maybe<ResolversTypes['TemplateStageReviewLevelsEdge']>, ParentType, ContextType, RequireFields<DeleteTemplateStageReviewLevelPayloadTemplateStageReviewLevelEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteTriggerQueuePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTriggerQueuePayload'] = ResolversParentTypes['DeleteTriggerQueuePayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedTriggerQueueNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  triggerQueue?: Resolver<Maybe<ResolversTypes['TriggerQueue']>, ParentType, ContextType>;
  triggerQueueEdge?: Resolver<Maybe<ResolversTypes['TriggerQueuesEdge']>, ParentType, ContextType, RequireFields<DeleteTriggerQueuePayloadTriggerQueueEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteTriggerSchedulePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteTriggerSchedulePayload'] = ResolversParentTypes['DeleteTriggerSchedulePayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedTriggerScheduleNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  triggerSchedule?: Resolver<Maybe<ResolversTypes['TriggerSchedule']>, ParentType, ContextType>;
  triggerScheduleEdge?: Resolver<Maybe<ResolversTypes['TriggerSchedulesEdge']>, ParentType, ContextType, RequireFields<DeleteTriggerSchedulePayloadTriggerScheduleEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteUserOrganisationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteUserOrganisationPayload'] = ResolversParentTypes['DeleteUserOrganisationPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedUserOrganisationNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  userOrganisation?: Resolver<Maybe<ResolversTypes['UserOrganisation']>, ParentType, ContextType>;
  userOrganisationEdge?: Resolver<Maybe<ResolversTypes['UserOrganisationsEdge']>, ParentType, ContextType, RequireFields<DeleteUserOrganisationPayloadUserOrganisationEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteVerificationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteVerificationPayload'] = ResolversParentTypes['DeleteVerificationPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  deletedVerificationNodeId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  verification?: Resolver<Maybe<ResolversTypes['Verification']>, ParentType, ContextType>;
  verificationEdge?: Resolver<Maybe<ResolversTypes['VerificationsEdge']>, ParentType, ContextType, RequireFields<DeleteVerificationPayloadVerificationEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type DeleteWholeApplicationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['DeleteWholeApplicationPayload'] = ResolversParentTypes['DeleteWholeApplicationPayload']> = {
  boolean?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ElementTypePluginResolvers<ContextType = any, ParentType extends ResolversParentTypes['ElementTypePlugin'] = ResolversParentTypes['ElementTypePlugin']> = {
  category?: Resolver<Maybe<ResolversTypes['TemplateElementCategory']>, ParentType, ContextType>;
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  configComponentName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  displayComponentName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  requiredParameters?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ElementTypePluginsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ElementTypePluginsConnection'] = ResolversParentTypes['ElementTypePluginsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ElementTypePluginsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ElementTypePlugin']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ElementTypePluginsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ElementTypePluginsEdge'] = ResolversParentTypes['ElementTypePluginsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ElementTypePlugin']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FileResolvers<ContextType = any, ParentType extends ResolversParentTypes['File'] = ResolversParentTypes['File']> = {
  applicationByApplicationSerial?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationNote?: Resolver<Maybe<ResolversTypes['ApplicationNote']>, ParentType, ContextType>;
  applicationNoteId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  applicationResponse?: Resolver<Maybe<ResolversTypes['ApplicationResponse']>, ParentType, ContextType>;
  applicationResponseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  applicationSerial?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  archivePath?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  filePath?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fileSize?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isExternalReferenceDoc?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isInternalReferenceDoc?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isOutputDoc?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  mimetype?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  originalFilename?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  submitted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  thumbnailPath?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Datetime'], ParentType, ContextType>;
  toBeDeleted?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  uniqueId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  userId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FilesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FilesConnection'] = ResolversParentTypes['FilesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['FilesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['File']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FilesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FilesEdge'] = ResolversParentTypes['FilesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['File']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FilterResolvers<ContextType = any, ParentType extends ResolversParentTypes['Filter'] = ResolversParentTypes['Filter']> = {
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  templateFilterJoins?: Resolver<ResolversTypes['TemplateFilterJoinsConnection'], ParentType, ContextType, RequireFields<FilterTemplateFilterJoinsArgs, 'orderBy'>>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  userRole?: Resolver<Maybe<ResolversTypes['PermissionPolicyType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FiltersConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['FiltersConnection'] = ResolversParentTypes['FiltersConnection']> = {
  edges?: Resolver<Array<ResolversTypes['FiltersEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['Filter']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type FiltersEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['FiltersEdge'] = ResolversParentTypes['FiltersEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['Filter']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface JsonScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['JSON'], any> {
  name: 'JSON';
}

export type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
  createActionPlugin?: Resolver<Maybe<ResolversTypes['CreateActionPluginPayload']>, ParentType, ContextType, RequireFields<MutationCreateActionPluginArgs, 'input'>>;
  createActionQueue?: Resolver<Maybe<ResolversTypes['CreateActionQueuePayload']>, ParentType, ContextType, RequireFields<MutationCreateActionQueueArgs, 'input'>>;
  createActivityLog?: Resolver<Maybe<ResolversTypes['CreateActivityLogPayload']>, ParentType, ContextType, RequireFields<MutationCreateActivityLogArgs, 'input'>>;
  createAllowedSelfAssignableSectionsShape?: Resolver<Maybe<ResolversTypes['CreateAllowedSelfAssignableSectionsShapePayload']>, ParentType, ContextType, RequireFields<MutationCreateAllowedSelfAssignableSectionsShapeArgs, 'input'>>;
  createApplication?: Resolver<Maybe<ResolversTypes['CreateApplicationPayload']>, ParentType, ContextType, RequireFields<MutationCreateApplicationArgs, 'input'>>;
  createApplicationListShape?: Resolver<Maybe<ResolversTypes['CreateApplicationListShapePayload']>, ParentType, ContextType, RequireFields<MutationCreateApplicationListShapeArgs, 'input'>>;
  createApplicationNote?: Resolver<Maybe<ResolversTypes['CreateApplicationNotePayload']>, ParentType, ContextType, RequireFields<MutationCreateApplicationNoteArgs, 'input'>>;
  createApplicationResponse?: Resolver<Maybe<ResolversTypes['CreateApplicationResponsePayload']>, ParentType, ContextType, RequireFields<MutationCreateApplicationResponseArgs, 'input'>>;
  createApplicationReviewerAction?: Resolver<Maybe<ResolversTypes['CreateApplicationReviewerActionPayload']>, ParentType, ContextType, RequireFields<MutationCreateApplicationReviewerActionArgs, 'input'>>;
  createApplicationStageHistory?: Resolver<Maybe<ResolversTypes['CreateApplicationStageHistoryPayload']>, ParentType, ContextType, RequireFields<MutationCreateApplicationStageHistoryArgs, 'input'>>;
  createApplicationStatusHistory?: Resolver<Maybe<ResolversTypes['CreateApplicationStatusHistoryPayload']>, ParentType, ContextType, RequireFields<MutationCreateApplicationStatusHistoryArgs, 'input'>>;
  createCounter?: Resolver<Maybe<ResolversTypes['CreateCounterPayload']>, ParentType, ContextType, RequireFields<MutationCreateCounterArgs, 'input'>>;
  createDataChangelog?: Resolver<Maybe<ResolversTypes['CreateDataChangelogPayload']>, ParentType, ContextType, RequireFields<MutationCreateDataChangelogArgs, 'input'>>;
  createDataTable?: Resolver<Maybe<ResolversTypes['CreateDataTablePayload']>, ParentType, ContextType, RequireFields<MutationCreateDataTableArgs, 'input'>>;
  createDataView?: Resolver<Maybe<ResolversTypes['CreateDataViewPayload']>, ParentType, ContextType, RequireFields<MutationCreateDataViewArgs, 'input'>>;
  createDataViewColumnDefinition?: Resolver<Maybe<ResolversTypes['CreateDataViewColumnDefinitionPayload']>, ParentType, ContextType, RequireFields<MutationCreateDataViewColumnDefinitionArgs, 'input'>>;
  createElementTypePlugin?: Resolver<Maybe<ResolversTypes['CreateElementTypePluginPayload']>, ParentType, ContextType, RequireFields<MutationCreateElementTypePluginArgs, 'input'>>;
  createFile?: Resolver<Maybe<ResolversTypes['CreateFilePayload']>, ParentType, ContextType, RequireFields<MutationCreateFileArgs, 'input'>>;
  createFilter?: Resolver<Maybe<ResolversTypes['CreateFilterPayload']>, ParentType, ContextType, RequireFields<MutationCreateFilterArgs, 'input'>>;
  createNotification?: Resolver<Maybe<ResolversTypes['CreateNotificationPayload']>, ParentType, ContextType, RequireFields<MutationCreateNotificationArgs, 'input'>>;
  createOrganisation?: Resolver<Maybe<ResolversTypes['CreateOrganisationPayload']>, ParentType, ContextType, RequireFields<MutationCreateOrganisationArgs, 'input'>>;
  createPermissionJoin?: Resolver<Maybe<ResolversTypes['CreatePermissionJoinPayload']>, ParentType, ContextType, RequireFields<MutationCreatePermissionJoinArgs, 'input'>>;
  createPermissionName?: Resolver<Maybe<ResolversTypes['CreatePermissionNamePayload']>, ParentType, ContextType, RequireFields<MutationCreatePermissionNameArgs, 'input'>>;
  createPermissionPolicy?: Resolver<Maybe<ResolversTypes['CreatePermissionPolicyPayload']>, ParentType, ContextType, RequireFields<MutationCreatePermissionPolicyArgs, 'input'>>;
  createReview?: Resolver<Maybe<ResolversTypes['CreateReviewPayload']>, ParentType, ContextType, RequireFields<MutationCreateReviewArgs, 'input'>>;
  createReviewAssignment?: Resolver<Maybe<ResolversTypes['CreateReviewAssignmentPayload']>, ParentType, ContextType, RequireFields<MutationCreateReviewAssignmentArgs, 'input'>>;
  createReviewAssignmentAssignedSectionsShape?: Resolver<Maybe<ResolversTypes['CreateReviewAssignmentAssignedSectionsShapePayload']>, ParentType, ContextType, RequireFields<MutationCreateReviewAssignmentAssignedSectionsShapeArgs, 'input'>>;
  createReviewAssignmentAssignerJoin?: Resolver<Maybe<ResolversTypes['CreateReviewAssignmentAssignerJoinPayload']>, ParentType, ContextType, RequireFields<MutationCreateReviewAssignmentAssignerJoinArgs, 'input'>>;
  createReviewDecision?: Resolver<Maybe<ResolversTypes['CreateReviewDecisionPayload']>, ParentType, ContextType, RequireFields<MutationCreateReviewDecisionArgs, 'input'>>;
  createReviewResponse?: Resolver<Maybe<ResolversTypes['CreateReviewResponsePayload']>, ParentType, ContextType, RequireFields<MutationCreateReviewResponseArgs, 'input'>>;
  createReviewStatusHistory?: Resolver<Maybe<ResolversTypes['CreateReviewStatusHistoryPayload']>, ParentType, ContextType, RequireFields<MutationCreateReviewStatusHistoryArgs, 'input'>>;
  createSystemInfo?: Resolver<Maybe<ResolversTypes['CreateSystemInfoPayload']>, ParentType, ContextType, RequireFields<MutationCreateSystemInfoArgs, 'input'>>;
  createTemplate?: Resolver<Maybe<ResolversTypes['CreateTemplatePayload']>, ParentType, ContextType, RequireFields<MutationCreateTemplateArgs, 'input'>>;
  createTemplateAction?: Resolver<Maybe<ResolversTypes['CreateTemplateActionPayload']>, ParentType, ContextType, RequireFields<MutationCreateTemplateActionArgs, 'input'>>;
  createTemplateCategory?: Resolver<Maybe<ResolversTypes['CreateTemplateCategoryPayload']>, ParentType, ContextType, RequireFields<MutationCreateTemplateCategoryArgs, 'input'>>;
  createTemplateElement?: Resolver<Maybe<ResolversTypes['CreateTemplateElementPayload']>, ParentType, ContextType, RequireFields<MutationCreateTemplateElementArgs, 'input'>>;
  createTemplateFilterJoin?: Resolver<Maybe<ResolversTypes['CreateTemplateFilterJoinPayload']>, ParentType, ContextType, RequireFields<MutationCreateTemplateFilterJoinArgs, 'input'>>;
  createTemplatePermission?: Resolver<Maybe<ResolversTypes['CreateTemplatePermissionPayload']>, ParentType, ContextType, RequireFields<MutationCreateTemplatePermissionArgs, 'input'>>;
  createTemplateSection?: Resolver<Maybe<ResolversTypes['CreateTemplateSectionPayload']>, ParentType, ContextType, RequireFields<MutationCreateTemplateSectionArgs, 'input'>>;
  createTemplateStage?: Resolver<Maybe<ResolversTypes['CreateTemplateStagePayload']>, ParentType, ContextType, RequireFields<MutationCreateTemplateStageArgs, 'input'>>;
  createTemplateStageReviewLevel?: Resolver<Maybe<ResolversTypes['CreateTemplateStageReviewLevelPayload']>, ParentType, ContextType, RequireFields<MutationCreateTemplateStageReviewLevelArgs, 'input'>>;
  createTriggerQueue?: Resolver<Maybe<ResolversTypes['CreateTriggerQueuePayload']>, ParentType, ContextType, RequireFields<MutationCreateTriggerQueueArgs, 'input'>>;
  createTriggerSchedule?: Resolver<Maybe<ResolversTypes['CreateTriggerSchedulePayload']>, ParentType, ContextType, RequireFields<MutationCreateTriggerScheduleArgs, 'input'>>;
  createUser?: Resolver<Maybe<ResolversTypes['CreateUserPayload']>, ParentType, ContextType, RequireFields<MutationCreateUserArgs, 'input'>>;
  createUserList?: Resolver<Maybe<ResolversTypes['CreateUserListPayload']>, ParentType, ContextType, RequireFields<MutationCreateUserListArgs, 'input'>>;
  createUserOrganisation?: Resolver<Maybe<ResolversTypes['CreateUserOrganisationPayload']>, ParentType, ContextType, RequireFields<MutationCreateUserOrganisationArgs, 'input'>>;
  createVerification?: Resolver<Maybe<ResolversTypes['CreateVerificationPayload']>, ParentType, ContextType, RequireFields<MutationCreateVerificationArgs, 'input'>>;
  deleteActionPlugin?: Resolver<Maybe<ResolversTypes['DeleteActionPluginPayload']>, ParentType, ContextType, RequireFields<MutationDeleteActionPluginArgs, 'input'>>;
  deleteActionPluginByCode?: Resolver<Maybe<ResolversTypes['DeleteActionPluginPayload']>, ParentType, ContextType, RequireFields<MutationDeleteActionPluginByCodeArgs, 'input'>>;
  deleteActionPluginByNodeId?: Resolver<Maybe<ResolversTypes['DeleteActionPluginPayload']>, ParentType, ContextType, RequireFields<MutationDeleteActionPluginByNodeIdArgs, 'input'>>;
  deleteActionQueue?: Resolver<Maybe<ResolversTypes['DeleteActionQueuePayload']>, ParentType, ContextType, RequireFields<MutationDeleteActionQueueArgs, 'input'>>;
  deleteActionQueueByNodeId?: Resolver<Maybe<ResolversTypes['DeleteActionQueuePayload']>, ParentType, ContextType, RequireFields<MutationDeleteActionQueueByNodeIdArgs, 'input'>>;
  deleteActivityLog?: Resolver<Maybe<ResolversTypes['DeleteActivityLogPayload']>, ParentType, ContextType, RequireFields<MutationDeleteActivityLogArgs, 'input'>>;
  deleteActivityLogByNodeId?: Resolver<Maybe<ResolversTypes['DeleteActivityLogPayload']>, ParentType, ContextType, RequireFields<MutationDeleteActivityLogByNodeIdArgs, 'input'>>;
  deleteApplication?: Resolver<Maybe<ResolversTypes['DeleteApplicationPayload']>, ParentType, ContextType, RequireFields<MutationDeleteApplicationArgs, 'input'>>;
  deleteApplicationByNodeId?: Resolver<Maybe<ResolversTypes['DeleteApplicationPayload']>, ParentType, ContextType, RequireFields<MutationDeleteApplicationByNodeIdArgs, 'input'>>;
  deleteApplicationByOutcomeRegistration?: Resolver<Maybe<ResolversTypes['DeleteApplicationPayload']>, ParentType, ContextType, RequireFields<MutationDeleteApplicationByOutcomeRegistrationArgs, 'input'>>;
  deleteApplicationBySerial?: Resolver<Maybe<ResolversTypes['DeleteApplicationPayload']>, ParentType, ContextType, RequireFields<MutationDeleteApplicationBySerialArgs, 'input'>>;
  deleteApplicationNote?: Resolver<Maybe<ResolversTypes['DeleteApplicationNotePayload']>, ParentType, ContextType, RequireFields<MutationDeleteApplicationNoteArgs, 'input'>>;
  deleteApplicationNoteByNodeId?: Resolver<Maybe<ResolversTypes['DeleteApplicationNotePayload']>, ParentType, ContextType, RequireFields<MutationDeleteApplicationNoteByNodeIdArgs, 'input'>>;
  deleteApplicationResponse?: Resolver<Maybe<ResolversTypes['DeleteApplicationResponsePayload']>, ParentType, ContextType, RequireFields<MutationDeleteApplicationResponseArgs, 'input'>>;
  deleteApplicationResponseByNodeId?: Resolver<Maybe<ResolversTypes['DeleteApplicationResponsePayload']>, ParentType, ContextType, RequireFields<MutationDeleteApplicationResponseByNodeIdArgs, 'input'>>;
  deleteApplicationReviewerAction?: Resolver<Maybe<ResolversTypes['DeleteApplicationReviewerActionPayload']>, ParentType, ContextType, RequireFields<MutationDeleteApplicationReviewerActionArgs, 'input'>>;
  deleteApplicationReviewerActionByNodeId?: Resolver<Maybe<ResolversTypes['DeleteApplicationReviewerActionPayload']>, ParentType, ContextType, RequireFields<MutationDeleteApplicationReviewerActionByNodeIdArgs, 'input'>>;
  deleteApplicationReviewerActionByUserIdAndApplicationId?: Resolver<Maybe<ResolversTypes['DeleteApplicationReviewerActionPayload']>, ParentType, ContextType, RequireFields<MutationDeleteApplicationReviewerActionByUserIdAndApplicationIdArgs, 'input'>>;
  deleteApplicationStageHistory?: Resolver<Maybe<ResolversTypes['DeleteApplicationStageHistoryPayload']>, ParentType, ContextType, RequireFields<MutationDeleteApplicationStageHistoryArgs, 'input'>>;
  deleteApplicationStageHistoryByNodeId?: Resolver<Maybe<ResolversTypes['DeleteApplicationStageHistoryPayload']>, ParentType, ContextType, RequireFields<MutationDeleteApplicationStageHistoryByNodeIdArgs, 'input'>>;
  deleteApplicationStatusHistory?: Resolver<Maybe<ResolversTypes['DeleteApplicationStatusHistoryPayload']>, ParentType, ContextType, RequireFields<MutationDeleteApplicationStatusHistoryArgs, 'input'>>;
  deleteApplicationStatusHistoryByNodeId?: Resolver<Maybe<ResolversTypes['DeleteApplicationStatusHistoryPayload']>, ParentType, ContextType, RequireFields<MutationDeleteApplicationStatusHistoryByNodeIdArgs, 'input'>>;
  deleteCounter?: Resolver<Maybe<ResolversTypes['DeleteCounterPayload']>, ParentType, ContextType, RequireFields<MutationDeleteCounterArgs, 'input'>>;
  deleteCounterByName?: Resolver<Maybe<ResolversTypes['DeleteCounterPayload']>, ParentType, ContextType, RequireFields<MutationDeleteCounterByNameArgs, 'input'>>;
  deleteCounterByNodeId?: Resolver<Maybe<ResolversTypes['DeleteCounterPayload']>, ParentType, ContextType, RequireFields<MutationDeleteCounterByNodeIdArgs, 'input'>>;
  deleteDataChangelog?: Resolver<Maybe<ResolversTypes['DeleteDataChangelogPayload']>, ParentType, ContextType, RequireFields<MutationDeleteDataChangelogArgs, 'input'>>;
  deleteDataChangelogByNodeId?: Resolver<Maybe<ResolversTypes['DeleteDataChangelogPayload']>, ParentType, ContextType, RequireFields<MutationDeleteDataChangelogByNodeIdArgs, 'input'>>;
  deleteDataTable?: Resolver<Maybe<ResolversTypes['DeleteDataTablePayload']>, ParentType, ContextType, RequireFields<MutationDeleteDataTableArgs, 'input'>>;
  deleteDataTableByNodeId?: Resolver<Maybe<ResolversTypes['DeleteDataTablePayload']>, ParentType, ContextType, RequireFields<MutationDeleteDataTableByNodeIdArgs, 'input'>>;
  deleteDataTableByTableName?: Resolver<Maybe<ResolversTypes['DeleteDataTablePayload']>, ParentType, ContextType, RequireFields<MutationDeleteDataTableByTableNameArgs, 'input'>>;
  deleteDataView?: Resolver<Maybe<ResolversTypes['DeleteDataViewPayload']>, ParentType, ContextType, RequireFields<MutationDeleteDataViewArgs, 'input'>>;
  deleteDataViewByIdentifier?: Resolver<Maybe<ResolversTypes['DeleteDataViewPayload']>, ParentType, ContextType, RequireFields<MutationDeleteDataViewByIdentifierArgs, 'input'>>;
  deleteDataViewByNodeId?: Resolver<Maybe<ResolversTypes['DeleteDataViewPayload']>, ParentType, ContextType, RequireFields<MutationDeleteDataViewByNodeIdArgs, 'input'>>;
  deleteDataViewColumnDefinition?: Resolver<Maybe<ResolversTypes['DeleteDataViewColumnDefinitionPayload']>, ParentType, ContextType, RequireFields<MutationDeleteDataViewColumnDefinitionArgs, 'input'>>;
  deleteDataViewColumnDefinitionByNodeId?: Resolver<Maybe<ResolversTypes['DeleteDataViewColumnDefinitionPayload']>, ParentType, ContextType, RequireFields<MutationDeleteDataViewColumnDefinitionByNodeIdArgs, 'input'>>;
  deleteDataViewColumnDefinitionByTableNameAndColumnName?: Resolver<Maybe<ResolversTypes['DeleteDataViewColumnDefinitionPayload']>, ParentType, ContextType, RequireFields<MutationDeleteDataViewColumnDefinitionByTableNameAndColumnNameArgs, 'input'>>;
  deleteElementTypePlugin?: Resolver<Maybe<ResolversTypes['DeleteElementTypePluginPayload']>, ParentType, ContextType, RequireFields<MutationDeleteElementTypePluginArgs, 'input'>>;
  deleteElementTypePluginByNodeId?: Resolver<Maybe<ResolversTypes['DeleteElementTypePluginPayload']>, ParentType, ContextType, RequireFields<MutationDeleteElementTypePluginByNodeIdArgs, 'input'>>;
  deleteFile?: Resolver<Maybe<ResolversTypes['DeleteFilePayload']>, ParentType, ContextType, RequireFields<MutationDeleteFileArgs, 'input'>>;
  deleteFileByNodeId?: Resolver<Maybe<ResolversTypes['DeleteFilePayload']>, ParentType, ContextType, RequireFields<MutationDeleteFileByNodeIdArgs, 'input'>>;
  deleteFileByUniqueId?: Resolver<Maybe<ResolversTypes['DeleteFilePayload']>, ParentType, ContextType, RequireFields<MutationDeleteFileByUniqueIdArgs, 'input'>>;
  deleteFilter?: Resolver<Maybe<ResolversTypes['DeleteFilterPayload']>, ParentType, ContextType, RequireFields<MutationDeleteFilterArgs, 'input'>>;
  deleteFilterByCode?: Resolver<Maybe<ResolversTypes['DeleteFilterPayload']>, ParentType, ContextType, RequireFields<MutationDeleteFilterByCodeArgs, 'input'>>;
  deleteFilterByNodeId?: Resolver<Maybe<ResolversTypes['DeleteFilterPayload']>, ParentType, ContextType, RequireFields<MutationDeleteFilterByNodeIdArgs, 'input'>>;
  deleteNotification?: Resolver<Maybe<ResolversTypes['DeleteNotificationPayload']>, ParentType, ContextType, RequireFields<MutationDeleteNotificationArgs, 'input'>>;
  deleteNotificationByNodeId?: Resolver<Maybe<ResolversTypes['DeleteNotificationPayload']>, ParentType, ContextType, RequireFields<MutationDeleteNotificationByNodeIdArgs, 'input'>>;
  deleteOrganisation?: Resolver<Maybe<ResolversTypes['DeleteOrganisationPayload']>, ParentType, ContextType, RequireFields<MutationDeleteOrganisationArgs, 'input'>>;
  deleteOrganisationByName?: Resolver<Maybe<ResolversTypes['DeleteOrganisationPayload']>, ParentType, ContextType, RequireFields<MutationDeleteOrganisationByNameArgs, 'input'>>;
  deleteOrganisationByNodeId?: Resolver<Maybe<ResolversTypes['DeleteOrganisationPayload']>, ParentType, ContextType, RequireFields<MutationDeleteOrganisationByNodeIdArgs, 'input'>>;
  deleteOrganisationByRegistration?: Resolver<Maybe<ResolversTypes['DeleteOrganisationPayload']>, ParentType, ContextType, RequireFields<MutationDeleteOrganisationByRegistrationArgs, 'input'>>;
  deletePermissionJoin?: Resolver<Maybe<ResolversTypes['DeletePermissionJoinPayload']>, ParentType, ContextType, RequireFields<MutationDeletePermissionJoinArgs, 'input'>>;
  deletePermissionJoinByNodeId?: Resolver<Maybe<ResolversTypes['DeletePermissionJoinPayload']>, ParentType, ContextType, RequireFields<MutationDeletePermissionJoinByNodeIdArgs, 'input'>>;
  deletePermissionName?: Resolver<Maybe<ResolversTypes['DeletePermissionNamePayload']>, ParentType, ContextType, RequireFields<MutationDeletePermissionNameArgs, 'input'>>;
  deletePermissionNameByName?: Resolver<Maybe<ResolversTypes['DeletePermissionNamePayload']>, ParentType, ContextType, RequireFields<MutationDeletePermissionNameByNameArgs, 'input'>>;
  deletePermissionNameByNodeId?: Resolver<Maybe<ResolversTypes['DeletePermissionNamePayload']>, ParentType, ContextType, RequireFields<MutationDeletePermissionNameByNodeIdArgs, 'input'>>;
  deletePermissionPolicy?: Resolver<Maybe<ResolversTypes['DeletePermissionPolicyPayload']>, ParentType, ContextType, RequireFields<MutationDeletePermissionPolicyArgs, 'input'>>;
  deletePermissionPolicyByName?: Resolver<Maybe<ResolversTypes['DeletePermissionPolicyPayload']>, ParentType, ContextType, RequireFields<MutationDeletePermissionPolicyByNameArgs, 'input'>>;
  deletePermissionPolicyByNodeId?: Resolver<Maybe<ResolversTypes['DeletePermissionPolicyPayload']>, ParentType, ContextType, RequireFields<MutationDeletePermissionPolicyByNodeIdArgs, 'input'>>;
  deleteReview?: Resolver<Maybe<ResolversTypes['DeleteReviewPayload']>, ParentType, ContextType, RequireFields<MutationDeleteReviewArgs, 'input'>>;
  deleteReviewAssignment?: Resolver<Maybe<ResolversTypes['DeleteReviewAssignmentPayload']>, ParentType, ContextType, RequireFields<MutationDeleteReviewAssignmentArgs, 'input'>>;
  deleteReviewAssignmentAssignerJoin?: Resolver<Maybe<ResolversTypes['DeleteReviewAssignmentAssignerJoinPayload']>, ParentType, ContextType, RequireFields<MutationDeleteReviewAssignmentAssignerJoinArgs, 'input'>>;
  deleteReviewAssignmentAssignerJoinByNodeId?: Resolver<Maybe<ResolversTypes['DeleteReviewAssignmentAssignerJoinPayload']>, ParentType, ContextType, RequireFields<MutationDeleteReviewAssignmentAssignerJoinByNodeIdArgs, 'input'>>;
  deleteReviewAssignmentByNodeId?: Resolver<Maybe<ResolversTypes['DeleteReviewAssignmentPayload']>, ParentType, ContextType, RequireFields<MutationDeleteReviewAssignmentByNodeIdArgs, 'input'>>;
  deleteReviewByNodeId?: Resolver<Maybe<ResolversTypes['DeleteReviewPayload']>, ParentType, ContextType, RequireFields<MutationDeleteReviewByNodeIdArgs, 'input'>>;
  deleteReviewByReviewAssignmentId?: Resolver<Maybe<ResolversTypes['DeleteReviewPayload']>, ParentType, ContextType, RequireFields<MutationDeleteReviewByReviewAssignmentIdArgs, 'input'>>;
  deleteReviewDecision?: Resolver<Maybe<ResolversTypes['DeleteReviewDecisionPayload']>, ParentType, ContextType, RequireFields<MutationDeleteReviewDecisionArgs, 'input'>>;
  deleteReviewDecisionByNodeId?: Resolver<Maybe<ResolversTypes['DeleteReviewDecisionPayload']>, ParentType, ContextType, RequireFields<MutationDeleteReviewDecisionByNodeIdArgs, 'input'>>;
  deleteReviewResponse?: Resolver<Maybe<ResolversTypes['DeleteReviewResponsePayload']>, ParentType, ContextType, RequireFields<MutationDeleteReviewResponseArgs, 'input'>>;
  deleteReviewResponseByNodeId?: Resolver<Maybe<ResolversTypes['DeleteReviewResponsePayload']>, ParentType, ContextType, RequireFields<MutationDeleteReviewResponseByNodeIdArgs, 'input'>>;
  deleteReviewStatusHistory?: Resolver<Maybe<ResolversTypes['DeleteReviewStatusHistoryPayload']>, ParentType, ContextType, RequireFields<MutationDeleteReviewStatusHistoryArgs, 'input'>>;
  deleteReviewStatusHistoryByNodeId?: Resolver<Maybe<ResolversTypes['DeleteReviewStatusHistoryPayload']>, ParentType, ContextType, RequireFields<MutationDeleteReviewStatusHistoryByNodeIdArgs, 'input'>>;
  deleteSystemInfo?: Resolver<Maybe<ResolversTypes['DeleteSystemInfoPayload']>, ParentType, ContextType, RequireFields<MutationDeleteSystemInfoArgs, 'input'>>;
  deleteSystemInfoByNodeId?: Resolver<Maybe<ResolversTypes['DeleteSystemInfoPayload']>, ParentType, ContextType, RequireFields<MutationDeleteSystemInfoByNodeIdArgs, 'input'>>;
  deleteTemplate?: Resolver<Maybe<ResolversTypes['DeleteTemplatePayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateArgs, 'input'>>;
  deleteTemplateAction?: Resolver<Maybe<ResolversTypes['DeleteTemplateActionPayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateActionArgs, 'input'>>;
  deleteTemplateActionByNodeId?: Resolver<Maybe<ResolversTypes['DeleteTemplateActionPayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateActionByNodeIdArgs, 'input'>>;
  deleteTemplateByCodeAndVersionId?: Resolver<Maybe<ResolversTypes['DeleteTemplatePayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateByCodeAndVersionIdArgs, 'input'>>;
  deleteTemplateByNodeId?: Resolver<Maybe<ResolversTypes['DeleteTemplatePayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateByNodeIdArgs, 'input'>>;
  deleteTemplateCategory?: Resolver<Maybe<ResolversTypes['DeleteTemplateCategoryPayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateCategoryArgs, 'input'>>;
  deleteTemplateCategoryByCode?: Resolver<Maybe<ResolversTypes['DeleteTemplateCategoryPayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateCategoryByCodeArgs, 'input'>>;
  deleteTemplateCategoryByNodeId?: Resolver<Maybe<ResolversTypes['DeleteTemplateCategoryPayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateCategoryByNodeIdArgs, 'input'>>;
  deleteTemplateElement?: Resolver<Maybe<ResolversTypes['DeleteTemplateElementPayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateElementArgs, 'input'>>;
  deleteTemplateElementByNodeId?: Resolver<Maybe<ResolversTypes['DeleteTemplateElementPayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateElementByNodeIdArgs, 'input'>>;
  deleteTemplateElementByTemplateCodeAndCodeAndTemplateVersion?: Resolver<Maybe<ResolversTypes['DeleteTemplateElementPayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateElementByTemplateCodeAndCodeAndTemplateVersionArgs, 'input'>>;
  deleteTemplateFilterJoin?: Resolver<Maybe<ResolversTypes['DeleteTemplateFilterJoinPayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateFilterJoinArgs, 'input'>>;
  deleteTemplateFilterJoinByNodeId?: Resolver<Maybe<ResolversTypes['DeleteTemplateFilterJoinPayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateFilterJoinByNodeIdArgs, 'input'>>;
  deleteTemplatePermission?: Resolver<Maybe<ResolversTypes['DeleteTemplatePermissionPayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplatePermissionArgs, 'input'>>;
  deleteTemplatePermissionByNodeId?: Resolver<Maybe<ResolversTypes['DeleteTemplatePermissionPayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplatePermissionByNodeIdArgs, 'input'>>;
  deleteTemplateSection?: Resolver<Maybe<ResolversTypes['DeleteTemplateSectionPayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateSectionArgs, 'input'>>;
  deleteTemplateSectionByNodeId?: Resolver<Maybe<ResolversTypes['DeleteTemplateSectionPayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateSectionByNodeIdArgs, 'input'>>;
  deleteTemplateSectionByTemplateIdAndCode?: Resolver<Maybe<ResolversTypes['DeleteTemplateSectionPayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateSectionByTemplateIdAndCodeArgs, 'input'>>;
  deleteTemplateStage?: Resolver<Maybe<ResolversTypes['DeleteTemplateStagePayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateStageArgs, 'input'>>;
  deleteTemplateStageByNodeId?: Resolver<Maybe<ResolversTypes['DeleteTemplateStagePayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateStageByNodeIdArgs, 'input'>>;
  deleteTemplateStageReviewLevel?: Resolver<Maybe<ResolversTypes['DeleteTemplateStageReviewLevelPayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateStageReviewLevelArgs, 'input'>>;
  deleteTemplateStageReviewLevelByNodeId?: Resolver<Maybe<ResolversTypes['DeleteTemplateStageReviewLevelPayload']>, ParentType, ContextType, RequireFields<MutationDeleteTemplateStageReviewLevelByNodeIdArgs, 'input'>>;
  deleteTriggerQueue?: Resolver<Maybe<ResolversTypes['DeleteTriggerQueuePayload']>, ParentType, ContextType, RequireFields<MutationDeleteTriggerQueueArgs, 'input'>>;
  deleteTriggerQueueByNodeId?: Resolver<Maybe<ResolversTypes['DeleteTriggerQueuePayload']>, ParentType, ContextType, RequireFields<MutationDeleteTriggerQueueByNodeIdArgs, 'input'>>;
  deleteTriggerSchedule?: Resolver<Maybe<ResolversTypes['DeleteTriggerSchedulePayload']>, ParentType, ContextType, RequireFields<MutationDeleteTriggerScheduleArgs, 'input'>>;
  deleteTriggerScheduleByNodeId?: Resolver<Maybe<ResolversTypes['DeleteTriggerSchedulePayload']>, ParentType, ContextType, RequireFields<MutationDeleteTriggerScheduleByNodeIdArgs, 'input'>>;
  deleteUserOrganisation?: Resolver<Maybe<ResolversTypes['DeleteUserOrganisationPayload']>, ParentType, ContextType, RequireFields<MutationDeleteUserOrganisationArgs, 'input'>>;
  deleteUserOrganisationByNodeId?: Resolver<Maybe<ResolversTypes['DeleteUserOrganisationPayload']>, ParentType, ContextType, RequireFields<MutationDeleteUserOrganisationByNodeIdArgs, 'input'>>;
  deleteUserOrganisationByUserIdAndOrganisationId?: Resolver<Maybe<ResolversTypes['DeleteUserOrganisationPayload']>, ParentType, ContextType, RequireFields<MutationDeleteUserOrganisationByUserIdAndOrganisationIdArgs, 'input'>>;
  deleteVerification?: Resolver<Maybe<ResolversTypes['DeleteVerificationPayload']>, ParentType, ContextType, RequireFields<MutationDeleteVerificationArgs, 'input'>>;
  deleteVerificationByNodeId?: Resolver<Maybe<ResolversTypes['DeleteVerificationPayload']>, ParentType, ContextType, RequireFields<MutationDeleteVerificationByNodeIdArgs, 'input'>>;
  deleteVerificationByUniqueId?: Resolver<Maybe<ResolversTypes['DeleteVerificationPayload']>, ParentType, ContextType, RequireFields<MutationDeleteVerificationByUniqueIdArgs, 'input'>>;
  deleteWholeApplication?: Resolver<Maybe<ResolversTypes['DeleteWholeApplicationPayload']>, ParentType, ContextType, RequireFields<MutationDeleteWholeApplicationArgs, 'input'>>;
  updateActionPlugin?: Resolver<Maybe<ResolversTypes['UpdateActionPluginPayload']>, ParentType, ContextType, RequireFields<MutationUpdateActionPluginArgs, 'input'>>;
  updateActionPluginByCode?: Resolver<Maybe<ResolversTypes['UpdateActionPluginPayload']>, ParentType, ContextType, RequireFields<MutationUpdateActionPluginByCodeArgs, 'input'>>;
  updateActionPluginByNodeId?: Resolver<Maybe<ResolversTypes['UpdateActionPluginPayload']>, ParentType, ContextType, RequireFields<MutationUpdateActionPluginByNodeIdArgs, 'input'>>;
  updateActionQueue?: Resolver<Maybe<ResolversTypes['UpdateActionQueuePayload']>, ParentType, ContextType, RequireFields<MutationUpdateActionQueueArgs, 'input'>>;
  updateActionQueueByNodeId?: Resolver<Maybe<ResolversTypes['UpdateActionQueuePayload']>, ParentType, ContextType, RequireFields<MutationUpdateActionQueueByNodeIdArgs, 'input'>>;
  updateActivityLog?: Resolver<Maybe<ResolversTypes['UpdateActivityLogPayload']>, ParentType, ContextType, RequireFields<MutationUpdateActivityLogArgs, 'input'>>;
  updateActivityLogByNodeId?: Resolver<Maybe<ResolversTypes['UpdateActivityLogPayload']>, ParentType, ContextType, RequireFields<MutationUpdateActivityLogByNodeIdArgs, 'input'>>;
  updateApplication?: Resolver<Maybe<ResolversTypes['UpdateApplicationPayload']>, ParentType, ContextType, RequireFields<MutationUpdateApplicationArgs, 'input'>>;
  updateApplicationByNodeId?: Resolver<Maybe<ResolversTypes['UpdateApplicationPayload']>, ParentType, ContextType, RequireFields<MutationUpdateApplicationByNodeIdArgs, 'input'>>;
  updateApplicationByOutcomeRegistration?: Resolver<Maybe<ResolversTypes['UpdateApplicationPayload']>, ParentType, ContextType, RequireFields<MutationUpdateApplicationByOutcomeRegistrationArgs, 'input'>>;
  updateApplicationBySerial?: Resolver<Maybe<ResolversTypes['UpdateApplicationPayload']>, ParentType, ContextType, RequireFields<MutationUpdateApplicationBySerialArgs, 'input'>>;
  updateApplicationNote?: Resolver<Maybe<ResolversTypes['UpdateApplicationNotePayload']>, ParentType, ContextType, RequireFields<MutationUpdateApplicationNoteArgs, 'input'>>;
  updateApplicationNoteByNodeId?: Resolver<Maybe<ResolversTypes['UpdateApplicationNotePayload']>, ParentType, ContextType, RequireFields<MutationUpdateApplicationNoteByNodeIdArgs, 'input'>>;
  updateApplicationResponse?: Resolver<Maybe<ResolversTypes['UpdateApplicationResponsePayload']>, ParentType, ContextType, RequireFields<MutationUpdateApplicationResponseArgs, 'input'>>;
  updateApplicationResponseByNodeId?: Resolver<Maybe<ResolversTypes['UpdateApplicationResponsePayload']>, ParentType, ContextType, RequireFields<MutationUpdateApplicationResponseByNodeIdArgs, 'input'>>;
  updateApplicationReviewerAction?: Resolver<Maybe<ResolversTypes['UpdateApplicationReviewerActionPayload']>, ParentType, ContextType, RequireFields<MutationUpdateApplicationReviewerActionArgs, 'input'>>;
  updateApplicationReviewerActionByNodeId?: Resolver<Maybe<ResolversTypes['UpdateApplicationReviewerActionPayload']>, ParentType, ContextType, RequireFields<MutationUpdateApplicationReviewerActionByNodeIdArgs, 'input'>>;
  updateApplicationReviewerActionByUserIdAndApplicationId?: Resolver<Maybe<ResolversTypes['UpdateApplicationReviewerActionPayload']>, ParentType, ContextType, RequireFields<MutationUpdateApplicationReviewerActionByUserIdAndApplicationIdArgs, 'input'>>;
  updateApplicationStageHistory?: Resolver<Maybe<ResolversTypes['UpdateApplicationStageHistoryPayload']>, ParentType, ContextType, RequireFields<MutationUpdateApplicationStageHistoryArgs, 'input'>>;
  updateApplicationStageHistoryByNodeId?: Resolver<Maybe<ResolversTypes['UpdateApplicationStageHistoryPayload']>, ParentType, ContextType, RequireFields<MutationUpdateApplicationStageHistoryByNodeIdArgs, 'input'>>;
  updateApplicationStatusHistory?: Resolver<Maybe<ResolversTypes['UpdateApplicationStatusHistoryPayload']>, ParentType, ContextType, RequireFields<MutationUpdateApplicationStatusHistoryArgs, 'input'>>;
  updateApplicationStatusHistoryByNodeId?: Resolver<Maybe<ResolversTypes['UpdateApplicationStatusHistoryPayload']>, ParentType, ContextType, RequireFields<MutationUpdateApplicationStatusHistoryByNodeIdArgs, 'input'>>;
  updateCounter?: Resolver<Maybe<ResolversTypes['UpdateCounterPayload']>, ParentType, ContextType, RequireFields<MutationUpdateCounterArgs, 'input'>>;
  updateCounterByName?: Resolver<Maybe<ResolversTypes['UpdateCounterPayload']>, ParentType, ContextType, RequireFields<MutationUpdateCounterByNameArgs, 'input'>>;
  updateCounterByNodeId?: Resolver<Maybe<ResolversTypes['UpdateCounterPayload']>, ParentType, ContextType, RequireFields<MutationUpdateCounterByNodeIdArgs, 'input'>>;
  updateDataChangelog?: Resolver<Maybe<ResolversTypes['UpdateDataChangelogPayload']>, ParentType, ContextType, RequireFields<MutationUpdateDataChangelogArgs, 'input'>>;
  updateDataChangelogByNodeId?: Resolver<Maybe<ResolversTypes['UpdateDataChangelogPayload']>, ParentType, ContextType, RequireFields<MutationUpdateDataChangelogByNodeIdArgs, 'input'>>;
  updateDataTable?: Resolver<Maybe<ResolversTypes['UpdateDataTablePayload']>, ParentType, ContextType, RequireFields<MutationUpdateDataTableArgs, 'input'>>;
  updateDataTableByNodeId?: Resolver<Maybe<ResolversTypes['UpdateDataTablePayload']>, ParentType, ContextType, RequireFields<MutationUpdateDataTableByNodeIdArgs, 'input'>>;
  updateDataTableByTableName?: Resolver<Maybe<ResolversTypes['UpdateDataTablePayload']>, ParentType, ContextType, RequireFields<MutationUpdateDataTableByTableNameArgs, 'input'>>;
  updateDataView?: Resolver<Maybe<ResolversTypes['UpdateDataViewPayload']>, ParentType, ContextType, RequireFields<MutationUpdateDataViewArgs, 'input'>>;
  updateDataViewByIdentifier?: Resolver<Maybe<ResolversTypes['UpdateDataViewPayload']>, ParentType, ContextType, RequireFields<MutationUpdateDataViewByIdentifierArgs, 'input'>>;
  updateDataViewByNodeId?: Resolver<Maybe<ResolversTypes['UpdateDataViewPayload']>, ParentType, ContextType, RequireFields<MutationUpdateDataViewByNodeIdArgs, 'input'>>;
  updateDataViewColumnDefinition?: Resolver<Maybe<ResolversTypes['UpdateDataViewColumnDefinitionPayload']>, ParentType, ContextType, RequireFields<MutationUpdateDataViewColumnDefinitionArgs, 'input'>>;
  updateDataViewColumnDefinitionByNodeId?: Resolver<Maybe<ResolversTypes['UpdateDataViewColumnDefinitionPayload']>, ParentType, ContextType, RequireFields<MutationUpdateDataViewColumnDefinitionByNodeIdArgs, 'input'>>;
  updateDataViewColumnDefinitionByTableNameAndColumnName?: Resolver<Maybe<ResolversTypes['UpdateDataViewColumnDefinitionPayload']>, ParentType, ContextType, RequireFields<MutationUpdateDataViewColumnDefinitionByTableNameAndColumnNameArgs, 'input'>>;
  updateElementTypePlugin?: Resolver<Maybe<ResolversTypes['UpdateElementTypePluginPayload']>, ParentType, ContextType, RequireFields<MutationUpdateElementTypePluginArgs, 'input'>>;
  updateElementTypePluginByNodeId?: Resolver<Maybe<ResolversTypes['UpdateElementTypePluginPayload']>, ParentType, ContextType, RequireFields<MutationUpdateElementTypePluginByNodeIdArgs, 'input'>>;
  updateFile?: Resolver<Maybe<ResolversTypes['UpdateFilePayload']>, ParentType, ContextType, RequireFields<MutationUpdateFileArgs, 'input'>>;
  updateFileByNodeId?: Resolver<Maybe<ResolversTypes['UpdateFilePayload']>, ParentType, ContextType, RequireFields<MutationUpdateFileByNodeIdArgs, 'input'>>;
  updateFileByUniqueId?: Resolver<Maybe<ResolversTypes['UpdateFilePayload']>, ParentType, ContextType, RequireFields<MutationUpdateFileByUniqueIdArgs, 'input'>>;
  updateFilter?: Resolver<Maybe<ResolversTypes['UpdateFilterPayload']>, ParentType, ContextType, RequireFields<MutationUpdateFilterArgs, 'input'>>;
  updateFilterByCode?: Resolver<Maybe<ResolversTypes['UpdateFilterPayload']>, ParentType, ContextType, RequireFields<MutationUpdateFilterByCodeArgs, 'input'>>;
  updateFilterByNodeId?: Resolver<Maybe<ResolversTypes['UpdateFilterPayload']>, ParentType, ContextType, RequireFields<MutationUpdateFilterByNodeIdArgs, 'input'>>;
  updateNotification?: Resolver<Maybe<ResolversTypes['UpdateNotificationPayload']>, ParentType, ContextType, RequireFields<MutationUpdateNotificationArgs, 'input'>>;
  updateNotificationByNodeId?: Resolver<Maybe<ResolversTypes['UpdateNotificationPayload']>, ParentType, ContextType, RequireFields<MutationUpdateNotificationByNodeIdArgs, 'input'>>;
  updateOrganisation?: Resolver<Maybe<ResolversTypes['UpdateOrganisationPayload']>, ParentType, ContextType, RequireFields<MutationUpdateOrganisationArgs, 'input'>>;
  updateOrganisationByName?: Resolver<Maybe<ResolversTypes['UpdateOrganisationPayload']>, ParentType, ContextType, RequireFields<MutationUpdateOrganisationByNameArgs, 'input'>>;
  updateOrganisationByNodeId?: Resolver<Maybe<ResolversTypes['UpdateOrganisationPayload']>, ParentType, ContextType, RequireFields<MutationUpdateOrganisationByNodeIdArgs, 'input'>>;
  updateOrganisationByRegistration?: Resolver<Maybe<ResolversTypes['UpdateOrganisationPayload']>, ParentType, ContextType, RequireFields<MutationUpdateOrganisationByRegistrationArgs, 'input'>>;
  updatePermissionJoin?: Resolver<Maybe<ResolversTypes['UpdatePermissionJoinPayload']>, ParentType, ContextType, RequireFields<MutationUpdatePermissionJoinArgs, 'input'>>;
  updatePermissionJoinByNodeId?: Resolver<Maybe<ResolversTypes['UpdatePermissionJoinPayload']>, ParentType, ContextType, RequireFields<MutationUpdatePermissionJoinByNodeIdArgs, 'input'>>;
  updatePermissionName?: Resolver<Maybe<ResolversTypes['UpdatePermissionNamePayload']>, ParentType, ContextType, RequireFields<MutationUpdatePermissionNameArgs, 'input'>>;
  updatePermissionNameByName?: Resolver<Maybe<ResolversTypes['UpdatePermissionNamePayload']>, ParentType, ContextType, RequireFields<MutationUpdatePermissionNameByNameArgs, 'input'>>;
  updatePermissionNameByNodeId?: Resolver<Maybe<ResolversTypes['UpdatePermissionNamePayload']>, ParentType, ContextType, RequireFields<MutationUpdatePermissionNameByNodeIdArgs, 'input'>>;
  updatePermissionPolicy?: Resolver<Maybe<ResolversTypes['UpdatePermissionPolicyPayload']>, ParentType, ContextType, RequireFields<MutationUpdatePermissionPolicyArgs, 'input'>>;
  updatePermissionPolicyByName?: Resolver<Maybe<ResolversTypes['UpdatePermissionPolicyPayload']>, ParentType, ContextType, RequireFields<MutationUpdatePermissionPolicyByNameArgs, 'input'>>;
  updatePermissionPolicyByNodeId?: Resolver<Maybe<ResolversTypes['UpdatePermissionPolicyPayload']>, ParentType, ContextType, RequireFields<MutationUpdatePermissionPolicyByNodeIdArgs, 'input'>>;
  updateReview?: Resolver<Maybe<ResolversTypes['UpdateReviewPayload']>, ParentType, ContextType, RequireFields<MutationUpdateReviewArgs, 'input'>>;
  updateReviewAssignment?: Resolver<Maybe<ResolversTypes['UpdateReviewAssignmentPayload']>, ParentType, ContextType, RequireFields<MutationUpdateReviewAssignmentArgs, 'input'>>;
  updateReviewAssignmentAssignerJoin?: Resolver<Maybe<ResolversTypes['UpdateReviewAssignmentAssignerJoinPayload']>, ParentType, ContextType, RequireFields<MutationUpdateReviewAssignmentAssignerJoinArgs, 'input'>>;
  updateReviewAssignmentAssignerJoinByNodeId?: Resolver<Maybe<ResolversTypes['UpdateReviewAssignmentAssignerJoinPayload']>, ParentType, ContextType, RequireFields<MutationUpdateReviewAssignmentAssignerJoinByNodeIdArgs, 'input'>>;
  updateReviewAssignmentByNodeId?: Resolver<Maybe<ResolversTypes['UpdateReviewAssignmentPayload']>, ParentType, ContextType, RequireFields<MutationUpdateReviewAssignmentByNodeIdArgs, 'input'>>;
  updateReviewByNodeId?: Resolver<Maybe<ResolversTypes['UpdateReviewPayload']>, ParentType, ContextType, RequireFields<MutationUpdateReviewByNodeIdArgs, 'input'>>;
  updateReviewByReviewAssignmentId?: Resolver<Maybe<ResolversTypes['UpdateReviewPayload']>, ParentType, ContextType, RequireFields<MutationUpdateReviewByReviewAssignmentIdArgs, 'input'>>;
  updateReviewDecision?: Resolver<Maybe<ResolversTypes['UpdateReviewDecisionPayload']>, ParentType, ContextType, RequireFields<MutationUpdateReviewDecisionArgs, 'input'>>;
  updateReviewDecisionByNodeId?: Resolver<Maybe<ResolversTypes['UpdateReviewDecisionPayload']>, ParentType, ContextType, RequireFields<MutationUpdateReviewDecisionByNodeIdArgs, 'input'>>;
  updateReviewResponse?: Resolver<Maybe<ResolversTypes['UpdateReviewResponsePayload']>, ParentType, ContextType, RequireFields<MutationUpdateReviewResponseArgs, 'input'>>;
  updateReviewResponseByNodeId?: Resolver<Maybe<ResolversTypes['UpdateReviewResponsePayload']>, ParentType, ContextType, RequireFields<MutationUpdateReviewResponseByNodeIdArgs, 'input'>>;
  updateReviewStatusHistory?: Resolver<Maybe<ResolversTypes['UpdateReviewStatusHistoryPayload']>, ParentType, ContextType, RequireFields<MutationUpdateReviewStatusHistoryArgs, 'input'>>;
  updateReviewStatusHistoryByNodeId?: Resolver<Maybe<ResolversTypes['UpdateReviewStatusHistoryPayload']>, ParentType, ContextType, RequireFields<MutationUpdateReviewStatusHistoryByNodeIdArgs, 'input'>>;
  updateSystemInfo?: Resolver<Maybe<ResolversTypes['UpdateSystemInfoPayload']>, ParentType, ContextType, RequireFields<MutationUpdateSystemInfoArgs, 'input'>>;
  updateSystemInfoByNodeId?: Resolver<Maybe<ResolversTypes['UpdateSystemInfoPayload']>, ParentType, ContextType, RequireFields<MutationUpdateSystemInfoByNodeIdArgs, 'input'>>;
  updateTemplate?: Resolver<Maybe<ResolversTypes['UpdateTemplatePayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateArgs, 'input'>>;
  updateTemplateAction?: Resolver<Maybe<ResolversTypes['UpdateTemplateActionPayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateActionArgs, 'input'>>;
  updateTemplateActionByNodeId?: Resolver<Maybe<ResolversTypes['UpdateTemplateActionPayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateActionByNodeIdArgs, 'input'>>;
  updateTemplateByCodeAndVersionId?: Resolver<Maybe<ResolversTypes['UpdateTemplatePayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateByCodeAndVersionIdArgs, 'input'>>;
  updateTemplateByNodeId?: Resolver<Maybe<ResolversTypes['UpdateTemplatePayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateByNodeIdArgs, 'input'>>;
  updateTemplateCategory?: Resolver<Maybe<ResolversTypes['UpdateTemplateCategoryPayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateCategoryArgs, 'input'>>;
  updateTemplateCategoryByCode?: Resolver<Maybe<ResolversTypes['UpdateTemplateCategoryPayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateCategoryByCodeArgs, 'input'>>;
  updateTemplateCategoryByNodeId?: Resolver<Maybe<ResolversTypes['UpdateTemplateCategoryPayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateCategoryByNodeIdArgs, 'input'>>;
  updateTemplateElement?: Resolver<Maybe<ResolversTypes['UpdateTemplateElementPayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateElementArgs, 'input'>>;
  updateTemplateElementByNodeId?: Resolver<Maybe<ResolversTypes['UpdateTemplateElementPayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateElementByNodeIdArgs, 'input'>>;
  updateTemplateElementByTemplateCodeAndCodeAndTemplateVersion?: Resolver<Maybe<ResolversTypes['UpdateTemplateElementPayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateElementByTemplateCodeAndCodeAndTemplateVersionArgs, 'input'>>;
  updateTemplateFilterJoin?: Resolver<Maybe<ResolversTypes['UpdateTemplateFilterJoinPayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateFilterJoinArgs, 'input'>>;
  updateTemplateFilterJoinByNodeId?: Resolver<Maybe<ResolversTypes['UpdateTemplateFilterJoinPayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateFilterJoinByNodeIdArgs, 'input'>>;
  updateTemplatePermission?: Resolver<Maybe<ResolversTypes['UpdateTemplatePermissionPayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplatePermissionArgs, 'input'>>;
  updateTemplatePermissionByNodeId?: Resolver<Maybe<ResolversTypes['UpdateTemplatePermissionPayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplatePermissionByNodeIdArgs, 'input'>>;
  updateTemplateSection?: Resolver<Maybe<ResolversTypes['UpdateTemplateSectionPayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateSectionArgs, 'input'>>;
  updateTemplateSectionByNodeId?: Resolver<Maybe<ResolversTypes['UpdateTemplateSectionPayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateSectionByNodeIdArgs, 'input'>>;
  updateTemplateSectionByTemplateIdAndCode?: Resolver<Maybe<ResolversTypes['UpdateTemplateSectionPayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateSectionByTemplateIdAndCodeArgs, 'input'>>;
  updateTemplateStage?: Resolver<Maybe<ResolversTypes['UpdateTemplateStagePayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateStageArgs, 'input'>>;
  updateTemplateStageByNodeId?: Resolver<Maybe<ResolversTypes['UpdateTemplateStagePayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateStageByNodeIdArgs, 'input'>>;
  updateTemplateStageReviewLevel?: Resolver<Maybe<ResolversTypes['UpdateTemplateStageReviewLevelPayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateStageReviewLevelArgs, 'input'>>;
  updateTemplateStageReviewLevelByNodeId?: Resolver<Maybe<ResolversTypes['UpdateTemplateStageReviewLevelPayload']>, ParentType, ContextType, RequireFields<MutationUpdateTemplateStageReviewLevelByNodeIdArgs, 'input'>>;
  updateTriggerQueue?: Resolver<Maybe<ResolversTypes['UpdateTriggerQueuePayload']>, ParentType, ContextType, RequireFields<MutationUpdateTriggerQueueArgs, 'input'>>;
  updateTriggerQueueByNodeId?: Resolver<Maybe<ResolversTypes['UpdateTriggerQueuePayload']>, ParentType, ContextType, RequireFields<MutationUpdateTriggerQueueByNodeIdArgs, 'input'>>;
  updateTriggerSchedule?: Resolver<Maybe<ResolversTypes['UpdateTriggerSchedulePayload']>, ParentType, ContextType, RequireFields<MutationUpdateTriggerScheduleArgs, 'input'>>;
  updateTriggerScheduleByNodeId?: Resolver<Maybe<ResolversTypes['UpdateTriggerSchedulePayload']>, ParentType, ContextType, RequireFields<MutationUpdateTriggerScheduleByNodeIdArgs, 'input'>>;
  updateUserOrganisation?: Resolver<Maybe<ResolversTypes['UpdateUserOrganisationPayload']>, ParentType, ContextType, RequireFields<MutationUpdateUserOrganisationArgs, 'input'>>;
  updateUserOrganisationByNodeId?: Resolver<Maybe<ResolversTypes['UpdateUserOrganisationPayload']>, ParentType, ContextType, RequireFields<MutationUpdateUserOrganisationByNodeIdArgs, 'input'>>;
  updateUserOrganisationByUserIdAndOrganisationId?: Resolver<Maybe<ResolversTypes['UpdateUserOrganisationPayload']>, ParentType, ContextType, RequireFields<MutationUpdateUserOrganisationByUserIdAndOrganisationIdArgs, 'input'>>;
  updateVerification?: Resolver<Maybe<ResolversTypes['UpdateVerificationPayload']>, ParentType, ContextType, RequireFields<MutationUpdateVerificationArgs, 'input'>>;
  updateVerificationByNodeId?: Resolver<Maybe<ResolversTypes['UpdateVerificationPayload']>, ParentType, ContextType, RequireFields<MutationUpdateVerificationByNodeIdArgs, 'input'>>;
  updateVerificationByUniqueId?: Resolver<Maybe<ResolversTypes['UpdateVerificationPayload']>, ParentType, ContextType, RequireFields<MutationUpdateVerificationByUniqueIdArgs, 'input'>>;
};

export type NodeResolvers<ContextType = any, ParentType extends ResolversParentTypes['Node'] = ResolversParentTypes['Node']> = {
  __resolveType: TypeResolveFn<'ActionPlugin' | 'ActionQueue' | 'ActivityLog' | 'Application' | 'ApplicationNote' | 'ApplicationResponse' | 'ApplicationReviewerAction' | 'ApplicationStageHistory' | 'ApplicationStatusHistory' | 'Counter' | 'DataChangelog' | 'DataTable' | 'DataView' | 'DataViewColumnDefinition' | 'ElementTypePlugin' | 'File' | 'Filter' | 'Notification' | 'Organisation' | 'PermissionJoin' | 'PermissionName' | 'PermissionPolicy' | 'Query' | 'Review' | 'ReviewAssignment' | 'ReviewAssignmentAssignerJoin' | 'ReviewDecision' | 'ReviewResponse' | 'ReviewStatusHistory' | 'SystemInfo' | 'Template' | 'TemplateAction' | 'TemplateCategory' | 'TemplateElement' | 'TemplateFilterJoin' | 'TemplatePermission' | 'TemplateSection' | 'TemplateStage' | 'TemplateStageReviewLevel' | 'TriggerQueue' | 'TriggerSchedule' | 'UserOrganisation' | 'Verification', ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
};

export type NotificationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Notification'] = ResolversParentTypes['Notification']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  attachments?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  emailRecipients?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  emailSent?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  emailServerLog?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isRead?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  reviewId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  subject?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['Datetime'], ParentType, ContextType>;
  userId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type NotificationsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['NotificationsConnection'] = ResolversParentTypes['NotificationsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['NotificationsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['Notification']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type NotificationsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['NotificationsEdge'] = ResolversParentTypes['NotificationsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['Notification']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrganisationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Organisation'] = ResolversParentTypes['Organisation']> = {
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  applicationNotesByOrgId?: Resolver<ResolversTypes['ApplicationNotesConnection'], ParentType, ContextType, RequireFields<OrganisationApplicationNotesByOrgIdArgs, 'orderBy'>>;
  applicationsByOrgId?: Resolver<ResolversTypes['ApplicationsConnection'], ParentType, ContextType, RequireFields<OrganisationApplicationsByOrgIdArgs, 'orderBy'>>;
  dataChangelogsByOrgId?: Resolver<ResolversTypes['DataChangelogsConnection'], ParentType, ContextType, RequireFields<OrganisationDataChangelogsByOrgIdArgs, 'orderBy'>>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isSystemOrg?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  logoUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  permissionJoins?: Resolver<ResolversTypes['PermissionJoinsConnection'], ParentType, ContextType, RequireFields<OrganisationPermissionJoinsArgs, 'orderBy'>>;
  registration?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reviewAssignmentAssignerJoins?: Resolver<ResolversTypes['ReviewAssignmentAssignerJoinsConnection'], ParentType, ContextType, RequireFields<OrganisationReviewAssignmentAssignerJoinsArgs, 'orderBy'>>;
  reviewAssignments?: Resolver<ResolversTypes['ReviewAssignmentsConnection'], ParentType, ContextType, RequireFields<OrganisationReviewAssignmentsArgs, 'orderBy'>>;
  userOrganisations?: Resolver<ResolversTypes['UserOrganisationsConnection'], ParentType, ContextType, RequireFields<OrganisationUserOrganisationsArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrganisationsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['OrganisationsConnection'] = ResolversParentTypes['OrganisationsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['OrganisationsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['Organisation']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type OrganisationsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['OrganisationsEdge'] = ResolversParentTypes['OrganisationsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PageInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['PageInfo'] = ResolversParentTypes['PageInfo']> = {
  endCursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  hasNextPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  hasPreviousPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  startCursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PermissionFlattenedResolvers<ContextType = any, ParentType extends ResolversParentTypes['PermissionFlattened'] = ResolversParentTypes['PermissionFlattened']> = {
  organisationId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  permissionPolicyId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  templateId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  userId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PermissionFlattenedsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['PermissionFlattenedsConnection'] = ResolversParentTypes['PermissionFlattenedsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['PermissionFlattenedsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['PermissionFlattened']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PermissionFlattenedsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PermissionFlattenedsEdge'] = ResolversParentTypes['PermissionFlattenedsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['PermissionFlattened']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PermissionJoinResolvers<ContextType = any, ParentType extends ResolversParentTypes['PermissionJoin'] = ResolversParentTypes['PermissionJoin']> = {
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  organisationId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  permissionName?: Resolver<Maybe<ResolversTypes['PermissionName']>, ParentType, ContextType>;
  permissionNameId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  userId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PermissionJoinsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['PermissionJoinsConnection'] = ResolversParentTypes['PermissionJoinsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['PermissionJoinsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['PermissionJoin']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PermissionJoinsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PermissionJoinsEdge'] = ResolversParentTypes['PermissionJoinsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['PermissionJoin']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PermissionNameResolvers<ContextType = any, ParentType extends ResolversParentTypes['PermissionName'] = ResolversParentTypes['PermissionName']> = {
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isSystemOrgPermission?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  permissionJoins?: Resolver<ResolversTypes['PermissionJoinsConnection'], ParentType, ContextType, RequireFields<PermissionNamePermissionJoinsArgs, 'orderBy'>>;
  permissionPolicy?: Resolver<Maybe<ResolversTypes['PermissionPolicy']>, ParentType, ContextType>;
  permissionPolicyId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  templatePermissions?: Resolver<ResolversTypes['TemplatePermissionsConnection'], ParentType, ContextType, RequireFields<PermissionNameTemplatePermissionsArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PermissionNamesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['PermissionNamesConnection'] = ResolversParentTypes['PermissionNamesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['PermissionNamesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['PermissionName']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PermissionNamesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PermissionNamesEdge'] = ResolversParentTypes['PermissionNamesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['PermissionName']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PermissionPoliciesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['PermissionPoliciesConnection'] = ResolversParentTypes['PermissionPoliciesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['PermissionPoliciesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['PermissionPolicy']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PermissionPoliciesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PermissionPoliciesEdge'] = ResolversParentTypes['PermissionPoliciesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['PermissionPolicy']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PermissionPolicyResolvers<ContextType = any, ParentType extends ResolversParentTypes['PermissionPolicy'] = ResolversParentTypes['PermissionPolicy']> = {
  defaultRestrictions?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isAdmin?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  permissionNames?: Resolver<ResolversTypes['PermissionNamesConnection'], ParentType, ContextType, RequireFields<PermissionPolicyPermissionNamesArgs, 'orderBy'>>;
  rules?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['PermissionPolicyType']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PermissionsAllResolvers<ContextType = any, ParentType extends ResolversParentTypes['PermissionsAll'] = ResolversParentTypes['PermissionsAll']> = {
  allowedSections?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  canMakeFinalDecision?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  canSelfAssign?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isAdmin?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isSystemOrgPermission?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isUserCategory?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  orgId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  orgName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  permissionJoinId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  permissionName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  permissionNameId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  permissionPolicyId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  permissionPolicyRules?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  permissionType?: Resolver<Maybe<ResolversTypes['PermissionPolicyType']>, ParentType, ContextType>;
  policyName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  restrictions?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  reviewLevel?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  stageNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  templateCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  templateId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  templatePermissionId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  userId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PermissionsAllsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['PermissionsAllsConnection'] = ResolversParentTypes['PermissionsAllsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['PermissionsAllsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['PermissionsAll']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PermissionsAllsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PermissionsAllsEdge'] = ResolversParentTypes['PermissionsAllsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['PermissionsAll']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostgresRowLevelResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostgresRowLevel'] = ResolversParentTypes['PostgresRowLevel']> = {
  cmd?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  permissive?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  policyname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  qual?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  roles?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  schemaname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  tablename?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  withCheck?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostgresRowLevelsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostgresRowLevelsConnection'] = ResolversParentTypes['PostgresRowLevelsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['PostgresRowLevelsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['PostgresRowLevel']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type PostgresRowLevelsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['PostgresRowLevelsEdge'] = ResolversParentTypes['PostgresRowLevelsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['PostgresRowLevel']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  actionPlugin?: Resolver<Maybe<ResolversTypes['ActionPlugin']>, ParentType, ContextType, RequireFields<QueryActionPluginArgs, 'id'>>;
  actionPluginByCode?: Resolver<Maybe<ResolversTypes['ActionPlugin']>, ParentType, ContextType, RequireFields<QueryActionPluginByCodeArgs, 'code'>>;
  actionPluginByNodeId?: Resolver<Maybe<ResolversTypes['ActionPlugin']>, ParentType, ContextType, RequireFields<QueryActionPluginByNodeIdArgs, 'nodeId'>>;
  actionPlugins?: Resolver<Maybe<ResolversTypes['ActionPluginsConnection']>, ParentType, ContextType, RequireFields<QueryActionPluginsArgs, 'orderBy'>>;
  actionQueue?: Resolver<Maybe<ResolversTypes['ActionQueue']>, ParentType, ContextType, RequireFields<QueryActionQueueArgs, 'id'>>;
  actionQueueByNodeId?: Resolver<Maybe<ResolversTypes['ActionQueue']>, ParentType, ContextType, RequireFields<QueryActionQueueByNodeIdArgs, 'nodeId'>>;
  actionQueues?: Resolver<Maybe<ResolversTypes['ActionQueuesConnection']>, ParentType, ContextType, RequireFields<QueryActionQueuesArgs, 'orderBy'>>;
  activityLog?: Resolver<Maybe<ResolversTypes['ActivityLog']>, ParentType, ContextType, RequireFields<QueryActivityLogArgs, 'id'>>;
  activityLogByNodeId?: Resolver<Maybe<ResolversTypes['ActivityLog']>, ParentType, ContextType, RequireFields<QueryActivityLogByNodeIdArgs, 'nodeId'>>;
  activityLogs?: Resolver<Maybe<ResolversTypes['ActivityLogsConnection']>, ParentType, ContextType, RequireFields<QueryActivityLogsArgs, 'orderBy'>>;
  allowedSelfAssignableSections?: Resolver<Maybe<ResolversTypes['AllowedSelfAssignableSectionsShapesConnection']>, ParentType, ContextType, Partial<QueryAllowedSelfAssignableSectionsArgs>>;
  allowedSelfAssignableSectionsShapes?: Resolver<Maybe<ResolversTypes['AllowedSelfAssignableSectionsShapesConnection']>, ParentType, ContextType, RequireFields<QueryAllowedSelfAssignableSectionsShapesArgs, 'orderBy'>>;
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType, RequireFields<QueryApplicationArgs, 'id'>>;
  applicationByNodeId?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType, RequireFields<QueryApplicationByNodeIdArgs, 'nodeId'>>;
  applicationByOutcomeRegistration?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType, RequireFields<QueryApplicationByOutcomeRegistrationArgs, 'outcomeRegistration'>>;
  applicationBySerial?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType, RequireFields<QueryApplicationBySerialArgs, 'serial'>>;
  applicationList?: Resolver<Maybe<ResolversTypes['ApplicationListShapesConnection']>, ParentType, ContextType, Partial<QueryApplicationListArgs>>;
  applicationListFilterApplicant?: Resolver<Maybe<ResolversTypes['ApplicationListFilterApplicantConnection']>, ParentType, ContextType, Partial<QueryApplicationListFilterApplicantArgs>>;
  applicationListFilterAssigner?: Resolver<Maybe<ResolversTypes['ApplicationListFilterAssignerConnection']>, ParentType, ContextType, Partial<QueryApplicationListFilterAssignerArgs>>;
  applicationListFilterOrganisation?: Resolver<Maybe<ResolversTypes['ApplicationListFilterOrganisationConnection']>, ParentType, ContextType, Partial<QueryApplicationListFilterOrganisationArgs>>;
  applicationListFilterReviewer?: Resolver<Maybe<ResolversTypes['ApplicationListFilterReviewerConnection']>, ParentType, ContextType, Partial<QueryApplicationListFilterReviewerArgs>>;
  applicationListFilterStage?: Resolver<Maybe<ResolversTypes['ApplicationListFilterStageConnection']>, ParentType, ContextType, Partial<QueryApplicationListFilterStageArgs>>;
  applicationListShapes?: Resolver<Maybe<ResolversTypes['ApplicationListShapesConnection']>, ParentType, ContextType, RequireFields<QueryApplicationListShapesArgs, 'orderBy'>>;
  applicationNote?: Resolver<Maybe<ResolversTypes['ApplicationNote']>, ParentType, ContextType, RequireFields<QueryApplicationNoteArgs, 'id'>>;
  applicationNoteByNodeId?: Resolver<Maybe<ResolversTypes['ApplicationNote']>, ParentType, ContextType, RequireFields<QueryApplicationNoteByNodeIdArgs, 'nodeId'>>;
  applicationNotes?: Resolver<Maybe<ResolversTypes['ApplicationNotesConnection']>, ParentType, ContextType, RequireFields<QueryApplicationNotesArgs, 'orderBy'>>;
  applicationResponse?: Resolver<Maybe<ResolversTypes['ApplicationResponse']>, ParentType, ContextType, RequireFields<QueryApplicationResponseArgs, 'id'>>;
  applicationResponseByNodeId?: Resolver<Maybe<ResolversTypes['ApplicationResponse']>, ParentType, ContextType, RequireFields<QueryApplicationResponseByNodeIdArgs, 'nodeId'>>;
  applicationResponses?: Resolver<Maybe<ResolversTypes['ApplicationResponsesConnection']>, ParentType, ContextType, RequireFields<QueryApplicationResponsesArgs, 'orderBy'>>;
  applicationReviewerAction?: Resolver<Maybe<ResolversTypes['ApplicationReviewerAction']>, ParentType, ContextType, RequireFields<QueryApplicationReviewerActionArgs, 'id'>>;
  applicationReviewerActionByNodeId?: Resolver<Maybe<ResolversTypes['ApplicationReviewerAction']>, ParentType, ContextType, RequireFields<QueryApplicationReviewerActionByNodeIdArgs, 'nodeId'>>;
  applicationReviewerActionByUserIdAndApplicationId?: Resolver<Maybe<ResolversTypes['ApplicationReviewerAction']>, ParentType, ContextType, RequireFields<QueryApplicationReviewerActionByUserIdAndApplicationIdArgs, 'applicationId' | 'userId'>>;
  applicationReviewerActions?: Resolver<Maybe<ResolversTypes['ApplicationReviewerActionsConnection']>, ParentType, ContextType, RequireFields<QueryApplicationReviewerActionsArgs, 'orderBy'>>;
  applicationStageHistories?: Resolver<Maybe<ResolversTypes['ApplicationStageHistoriesConnection']>, ParentType, ContextType, RequireFields<QueryApplicationStageHistoriesArgs, 'orderBy'>>;
  applicationStageHistory?: Resolver<Maybe<ResolversTypes['ApplicationStageHistory']>, ParentType, ContextType, RequireFields<QueryApplicationStageHistoryArgs, 'id'>>;
  applicationStageHistoryByNodeId?: Resolver<Maybe<ResolversTypes['ApplicationStageHistory']>, ParentType, ContextType, RequireFields<QueryApplicationStageHistoryByNodeIdArgs, 'nodeId'>>;
  applicationStageStatusAlls?: Resolver<Maybe<ResolversTypes['ApplicationStageStatusAllsConnection']>, ParentType, ContextType, RequireFields<QueryApplicationStageStatusAllsArgs, 'orderBy'>>;
  applicationStageStatusLatests?: Resolver<Maybe<ResolversTypes['ApplicationStageStatusLatestsConnection']>, ParentType, ContextType, RequireFields<QueryApplicationStageStatusLatestsArgs, 'orderBy'>>;
  applicationStatusHistories?: Resolver<Maybe<ResolversTypes['ApplicationStatusHistoriesConnection']>, ParentType, ContextType, RequireFields<QueryApplicationStatusHistoriesArgs, 'orderBy'>>;
  applicationStatusHistory?: Resolver<Maybe<ResolversTypes['ApplicationStatusHistory']>, ParentType, ContextType, RequireFields<QueryApplicationStatusHistoryArgs, 'id'>>;
  applicationStatusHistoryByNodeId?: Resolver<Maybe<ResolversTypes['ApplicationStatusHistory']>, ParentType, ContextType, RequireFields<QueryApplicationStatusHistoryByNodeIdArgs, 'nodeId'>>;
  applications?: Resolver<Maybe<ResolversTypes['ApplicationsConnection']>, ParentType, ContextType, RequireFields<QueryApplicationsArgs, 'orderBy'>>;
  assignedQuestions?: Resolver<Maybe<ResolversTypes['AssignedQuestionsConnection']>, ParentType, ContextType, Partial<QueryAssignedQuestionsArgs>>;
  assignedQuestionsCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType, Partial<QueryAssignedQuestionsCountArgs>>;
  assignedSectionsByStageAndLevels?: Resolver<Maybe<ResolversTypes['AssignedSectionsByStageAndLevelsConnection']>, ParentType, ContextType, RequireFields<QueryAssignedSectionsByStageAndLevelsArgs, 'orderBy'>>;
  assignerList?: Resolver<Maybe<ResolversTypes['AssignerListConnection']>, ParentType, ContextType, Partial<QueryAssignerListArgs>>;
  assignmentList?: Resolver<Maybe<ResolversTypes['AssignmentListConnection']>, ParentType, ContextType, Partial<QueryAssignmentListArgs>>;
  constraintsInfos?: Resolver<Maybe<ResolversTypes['ConstraintsInfosConnection']>, ParentType, ContextType, RequireFields<QueryConstraintsInfosArgs, 'orderBy'>>;
  counter?: Resolver<Maybe<ResolversTypes['Counter']>, ParentType, ContextType, RequireFields<QueryCounterArgs, 'id'>>;
  counterByName?: Resolver<Maybe<ResolversTypes['Counter']>, ParentType, ContextType, RequireFields<QueryCounterByNameArgs, 'name'>>;
  counterByNodeId?: Resolver<Maybe<ResolversTypes['Counter']>, ParentType, ContextType, RequireFields<QueryCounterByNodeIdArgs, 'nodeId'>>;
  counters?: Resolver<Maybe<ResolversTypes['CountersConnection']>, ParentType, ContextType, RequireFields<QueryCountersArgs, 'orderBy'>>;
  dataChangelog?: Resolver<Maybe<ResolversTypes['DataChangelog']>, ParentType, ContextType, RequireFields<QueryDataChangelogArgs, 'id'>>;
  dataChangelogByNodeId?: Resolver<Maybe<ResolversTypes['DataChangelog']>, ParentType, ContextType, RequireFields<QueryDataChangelogByNodeIdArgs, 'nodeId'>>;
  dataChangelogs?: Resolver<Maybe<ResolversTypes['DataChangelogsConnection']>, ParentType, ContextType, RequireFields<QueryDataChangelogsArgs, 'orderBy'>>;
  dataTable?: Resolver<Maybe<ResolversTypes['DataTable']>, ParentType, ContextType, RequireFields<QueryDataTableArgs, 'id'>>;
  dataTableByNodeId?: Resolver<Maybe<ResolversTypes['DataTable']>, ParentType, ContextType, RequireFields<QueryDataTableByNodeIdArgs, 'nodeId'>>;
  dataTableByTableName?: Resolver<Maybe<ResolversTypes['DataTable']>, ParentType, ContextType, RequireFields<QueryDataTableByTableNameArgs, 'tableName'>>;
  dataTables?: Resolver<Maybe<ResolversTypes['DataTablesConnection']>, ParentType, ContextType, RequireFields<QueryDataTablesArgs, 'orderBy'>>;
  dataView?: Resolver<Maybe<ResolversTypes['DataView']>, ParentType, ContextType, RequireFields<QueryDataViewArgs, 'id'>>;
  dataViewByIdentifier?: Resolver<Maybe<ResolversTypes['DataView']>, ParentType, ContextType, RequireFields<QueryDataViewByIdentifierArgs, 'identifier'>>;
  dataViewByNodeId?: Resolver<Maybe<ResolversTypes['DataView']>, ParentType, ContextType, RequireFields<QueryDataViewByNodeIdArgs, 'nodeId'>>;
  dataViewColumnDefinition?: Resolver<Maybe<ResolversTypes['DataViewColumnDefinition']>, ParentType, ContextType, RequireFields<QueryDataViewColumnDefinitionArgs, 'id'>>;
  dataViewColumnDefinitionByNodeId?: Resolver<Maybe<ResolversTypes['DataViewColumnDefinition']>, ParentType, ContextType, RequireFields<QueryDataViewColumnDefinitionByNodeIdArgs, 'nodeId'>>;
  dataViewColumnDefinitionByTableNameAndColumnName?: Resolver<Maybe<ResolversTypes['DataViewColumnDefinition']>, ParentType, ContextType, RequireFields<QueryDataViewColumnDefinitionByTableNameAndColumnNameArgs, 'columnName' | 'tableName'>>;
  dataViewColumnDefinitions?: Resolver<Maybe<ResolversTypes['DataViewColumnDefinitionsConnection']>, ParentType, ContextType, RequireFields<QueryDataViewColumnDefinitionsArgs, 'orderBy'>>;
  dataViews?: Resolver<Maybe<ResolversTypes['DataViewsConnection']>, ParentType, ContextType, RequireFields<QueryDataViewsArgs, 'orderBy'>>;
  elementTypePlugin?: Resolver<Maybe<ResolversTypes['ElementTypePlugin']>, ParentType, ContextType, RequireFields<QueryElementTypePluginArgs, 'code'>>;
  elementTypePluginByNodeId?: Resolver<Maybe<ResolversTypes['ElementTypePlugin']>, ParentType, ContextType, RequireFields<QueryElementTypePluginByNodeIdArgs, 'nodeId'>>;
  elementTypePlugins?: Resolver<Maybe<ResolversTypes['ElementTypePluginsConnection']>, ParentType, ContextType, RequireFields<QueryElementTypePluginsArgs, 'orderBy'>>;
  file?: Resolver<Maybe<ResolversTypes['File']>, ParentType, ContextType, RequireFields<QueryFileArgs, 'id'>>;
  fileByNodeId?: Resolver<Maybe<ResolversTypes['File']>, ParentType, ContextType, RequireFields<QueryFileByNodeIdArgs, 'nodeId'>>;
  fileByUniqueId?: Resolver<Maybe<ResolversTypes['File']>, ParentType, ContextType, RequireFields<QueryFileByUniqueIdArgs, 'uniqueId'>>;
  files?: Resolver<Maybe<ResolversTypes['FilesConnection']>, ParentType, ContextType, RequireFields<QueryFilesArgs, 'orderBy'>>;
  filter?: Resolver<Maybe<ResolversTypes['Filter']>, ParentType, ContextType, RequireFields<QueryFilterArgs, 'id'>>;
  filterByCode?: Resolver<Maybe<ResolversTypes['Filter']>, ParentType, ContextType, RequireFields<QueryFilterByCodeArgs, 'code'>>;
  filterByNodeId?: Resolver<Maybe<ResolversTypes['Filter']>, ParentType, ContextType, RequireFields<QueryFilterByNodeIdArgs, 'nodeId'>>;
  filters?: Resolver<Maybe<ResolversTypes['FiltersConnection']>, ParentType, ContextType, RequireFields<QueryFiltersArgs, 'orderBy'>>;
  jwtGetBigint?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType, Partial<QueryJwtGetBigintArgs>>;
  jwtGetBoolean?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, Partial<QueryJwtGetBooleanArgs>>;
  jwtGetText?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<QueryJwtGetTextArgs>>;
  node?: Resolver<Maybe<ResolversTypes['Node']>, ParentType, ContextType, RequireFields<QueryNodeArgs, 'nodeId'>>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  notification?: Resolver<Maybe<ResolversTypes['Notification']>, ParentType, ContextType, RequireFields<QueryNotificationArgs, 'id'>>;
  notificationByNodeId?: Resolver<Maybe<ResolversTypes['Notification']>, ParentType, ContextType, RequireFields<QueryNotificationByNodeIdArgs, 'nodeId'>>;
  notifications?: Resolver<Maybe<ResolversTypes['NotificationsConnection']>, ParentType, ContextType, RequireFields<QueryNotificationsArgs, 'orderBy'>>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType, RequireFields<QueryOrganisationArgs, 'id'>>;
  organisationByName?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType, RequireFields<QueryOrganisationByNameArgs, 'name'>>;
  organisationByNodeId?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType, RequireFields<QueryOrganisationByNodeIdArgs, 'nodeId'>>;
  organisationByRegistration?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType, RequireFields<QueryOrganisationByRegistrationArgs, 'registration'>>;
  organisations?: Resolver<Maybe<ResolversTypes['OrganisationsConnection']>, ParentType, ContextType, RequireFields<QueryOrganisationsArgs, 'orderBy'>>;
  permissionFlatteneds?: Resolver<Maybe<ResolversTypes['PermissionFlattenedsConnection']>, ParentType, ContextType, RequireFields<QueryPermissionFlattenedsArgs, 'orderBy'>>;
  permissionJoin?: Resolver<Maybe<ResolversTypes['PermissionJoin']>, ParentType, ContextType, RequireFields<QueryPermissionJoinArgs, 'id'>>;
  permissionJoinByNodeId?: Resolver<Maybe<ResolversTypes['PermissionJoin']>, ParentType, ContextType, RequireFields<QueryPermissionJoinByNodeIdArgs, 'nodeId'>>;
  permissionJoins?: Resolver<Maybe<ResolversTypes['PermissionJoinsConnection']>, ParentType, ContextType, RequireFields<QueryPermissionJoinsArgs, 'orderBy'>>;
  permissionName?: Resolver<Maybe<ResolversTypes['PermissionName']>, ParentType, ContextType, RequireFields<QueryPermissionNameArgs, 'id'>>;
  permissionNameByName?: Resolver<Maybe<ResolversTypes['PermissionName']>, ParentType, ContextType, RequireFields<QueryPermissionNameByNameArgs, 'name'>>;
  permissionNameByNodeId?: Resolver<Maybe<ResolversTypes['PermissionName']>, ParentType, ContextType, RequireFields<QueryPermissionNameByNodeIdArgs, 'nodeId'>>;
  permissionNames?: Resolver<Maybe<ResolversTypes['PermissionNamesConnection']>, ParentType, ContextType, RequireFields<QueryPermissionNamesArgs, 'orderBy'>>;
  permissionPolicies?: Resolver<Maybe<ResolversTypes['PermissionPoliciesConnection']>, ParentType, ContextType, RequireFields<QueryPermissionPoliciesArgs, 'orderBy'>>;
  permissionPolicy?: Resolver<Maybe<ResolversTypes['PermissionPolicy']>, ParentType, ContextType, RequireFields<QueryPermissionPolicyArgs, 'id'>>;
  permissionPolicyByName?: Resolver<Maybe<ResolversTypes['PermissionPolicy']>, ParentType, ContextType, RequireFields<QueryPermissionPolicyByNameArgs, 'name'>>;
  permissionPolicyByNodeId?: Resolver<Maybe<ResolversTypes['PermissionPolicy']>, ParentType, ContextType, RequireFields<QueryPermissionPolicyByNodeIdArgs, 'nodeId'>>;
  permissionsAlls?: Resolver<Maybe<ResolversTypes['PermissionsAllsConnection']>, ParentType, ContextType, RequireFields<QueryPermissionsAllsArgs, 'orderBy'>>;
  postgresRowLevels?: Resolver<Maybe<ResolversTypes['PostgresRowLevelsConnection']>, ParentType, ContextType, RequireFields<QueryPostgresRowLevelsArgs, 'orderBy'>>;
  query?: Resolver<ResolversTypes['Query'], ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType, RequireFields<QueryReviewArgs, 'id'>>;
  reviewAssignment?: Resolver<Maybe<ResolversTypes['ReviewAssignment']>, ParentType, ContextType, RequireFields<QueryReviewAssignmentArgs, 'id'>>;
  reviewAssignmentAssignedSections?: Resolver<Maybe<ResolversTypes['ReviewAssignmentAssignedSectionsShapesConnection']>, ParentType, ContextType, Partial<QueryReviewAssignmentAssignedSectionsArgs>>;
  reviewAssignmentAssignedSectionsShapes?: Resolver<Maybe<ResolversTypes['ReviewAssignmentAssignedSectionsShapesConnection']>, ParentType, ContextType, RequireFields<QueryReviewAssignmentAssignedSectionsShapesArgs, 'orderBy'>>;
  reviewAssignmentAssignerJoin?: Resolver<Maybe<ResolversTypes['ReviewAssignmentAssignerJoin']>, ParentType, ContextType, RequireFields<QueryReviewAssignmentAssignerJoinArgs, 'id'>>;
  reviewAssignmentAssignerJoinByNodeId?: Resolver<Maybe<ResolversTypes['ReviewAssignmentAssignerJoin']>, ParentType, ContextType, RequireFields<QueryReviewAssignmentAssignerJoinByNodeIdArgs, 'nodeId'>>;
  reviewAssignmentAssignerJoins?: Resolver<Maybe<ResolversTypes['ReviewAssignmentAssignerJoinsConnection']>, ParentType, ContextType, RequireFields<QueryReviewAssignmentAssignerJoinsArgs, 'orderBy'>>;
  reviewAssignmentByNodeId?: Resolver<Maybe<ResolversTypes['ReviewAssignment']>, ParentType, ContextType, RequireFields<QueryReviewAssignmentByNodeIdArgs, 'nodeId'>>;
  reviewAssignments?: Resolver<Maybe<ResolversTypes['ReviewAssignmentsConnection']>, ParentType, ContextType, RequireFields<QueryReviewAssignmentsArgs, 'orderBy'>>;
  reviewByNodeId?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType, RequireFields<QueryReviewByNodeIdArgs, 'nodeId'>>;
  reviewByReviewAssignmentId?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType, RequireFields<QueryReviewByReviewAssignmentIdArgs, 'reviewAssignmentId'>>;
  reviewDecision?: Resolver<Maybe<ResolversTypes['ReviewDecision']>, ParentType, ContextType, RequireFields<QueryReviewDecisionArgs, 'id'>>;
  reviewDecisionByNodeId?: Resolver<Maybe<ResolversTypes['ReviewDecision']>, ParentType, ContextType, RequireFields<QueryReviewDecisionByNodeIdArgs, 'nodeId'>>;
  reviewDecisions?: Resolver<Maybe<ResolversTypes['ReviewDecisionsConnection']>, ParentType, ContextType, RequireFields<QueryReviewDecisionsArgs, 'orderBy'>>;
  reviewList?: Resolver<Maybe<ResolversTypes['ReviewListConnection']>, ParentType, ContextType, Partial<QueryReviewListArgs>>;
  reviewResponse?: Resolver<Maybe<ResolversTypes['ReviewResponse']>, ParentType, ContextType, RequireFields<QueryReviewResponseArgs, 'id'>>;
  reviewResponseByNodeId?: Resolver<Maybe<ResolversTypes['ReviewResponse']>, ParentType, ContextType, RequireFields<QueryReviewResponseByNodeIdArgs, 'nodeId'>>;
  reviewResponses?: Resolver<Maybe<ResolversTypes['ReviewResponsesConnection']>, ParentType, ContextType, RequireFields<QueryReviewResponsesArgs, 'orderBy'>>;
  reviewStatusHistories?: Resolver<Maybe<ResolversTypes['ReviewStatusHistoriesConnection']>, ParentType, ContextType, RequireFields<QueryReviewStatusHistoriesArgs, 'orderBy'>>;
  reviewStatusHistory?: Resolver<Maybe<ResolversTypes['ReviewStatusHistory']>, ParentType, ContextType, RequireFields<QueryReviewStatusHistoryArgs, 'id'>>;
  reviewStatusHistoryByNodeId?: Resolver<Maybe<ResolversTypes['ReviewStatusHistory']>, ParentType, ContextType, RequireFields<QueryReviewStatusHistoryByNodeIdArgs, 'nodeId'>>;
  reviewableQuestions?: Resolver<Maybe<ResolversTypes['ReviewableQuestionsConnection']>, ParentType, ContextType, Partial<QueryReviewableQuestionsArgs>>;
  reviewableQuestionsCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType, Partial<QueryReviewableQuestionsCountArgs>>;
  reviews?: Resolver<Maybe<ResolversTypes['ReviewsConnection']>, ParentType, ContextType, RequireFields<QueryReviewsArgs, 'orderBy'>>;
  schemaColumns?: Resolver<Maybe<ResolversTypes['SchemaColumnsConnection']>, ParentType, ContextType, RequireFields<QuerySchemaColumnsArgs, 'orderBy'>>;
  singleApplicationDetail?: Resolver<Maybe<ResolversTypes['SingleApplicationDetailConnection']>, ParentType, ContextType, Partial<QuerySingleApplicationDetailArgs>>;
  submittedAssignedQuestionsCount?: Resolver<Maybe<ResolversTypes['BigInt']>, ParentType, ContextType, Partial<QuerySubmittedAssignedQuestionsCountArgs>>;
  systemInfo?: Resolver<Maybe<ResolversTypes['SystemInfo']>, ParentType, ContextType, RequireFields<QuerySystemInfoArgs, 'id'>>;
  systemInfoByNodeId?: Resolver<Maybe<ResolversTypes['SystemInfo']>, ParentType, ContextType, RequireFields<QuerySystemInfoByNodeIdArgs, 'nodeId'>>;
  systemInfos?: Resolver<Maybe<ResolversTypes['SystemInfosConnection']>, ParentType, ContextType, RequireFields<QuerySystemInfosArgs, 'orderBy'>>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType, RequireFields<QueryTemplateArgs, 'id'>>;
  templateAction?: Resolver<Maybe<ResolversTypes['TemplateAction']>, ParentType, ContextType, RequireFields<QueryTemplateActionArgs, 'id'>>;
  templateActionByNodeId?: Resolver<Maybe<ResolversTypes['TemplateAction']>, ParentType, ContextType, RequireFields<QueryTemplateActionByNodeIdArgs, 'nodeId'>>;
  templateActions?: Resolver<Maybe<ResolversTypes['TemplateActionsConnection']>, ParentType, ContextType, RequireFields<QueryTemplateActionsArgs, 'orderBy'>>;
  templateByCodeAndVersionId?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType, RequireFields<QueryTemplateByCodeAndVersionIdArgs, 'code' | 'versionId'>>;
  templateByNodeId?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType, RequireFields<QueryTemplateByNodeIdArgs, 'nodeId'>>;
  templateCategories?: Resolver<Maybe<ResolversTypes['TemplateCategoriesConnection']>, ParentType, ContextType, RequireFields<QueryTemplateCategoriesArgs, 'orderBy'>>;
  templateCategory?: Resolver<Maybe<ResolversTypes['TemplateCategory']>, ParentType, ContextType, RequireFields<QueryTemplateCategoryArgs, 'id'>>;
  templateCategoryByCode?: Resolver<Maybe<ResolversTypes['TemplateCategory']>, ParentType, ContextType, RequireFields<QueryTemplateCategoryByCodeArgs, 'code'>>;
  templateCategoryByNodeId?: Resolver<Maybe<ResolversTypes['TemplateCategory']>, ParentType, ContextType, RequireFields<QueryTemplateCategoryByNodeIdArgs, 'nodeId'>>;
  templateElement?: Resolver<Maybe<ResolversTypes['TemplateElement']>, ParentType, ContextType, RequireFields<QueryTemplateElementArgs, 'id'>>;
  templateElementByNodeId?: Resolver<Maybe<ResolversTypes['TemplateElement']>, ParentType, ContextType, RequireFields<QueryTemplateElementByNodeIdArgs, 'nodeId'>>;
  templateElementByTemplateCodeAndCodeAndTemplateVersion?: Resolver<Maybe<ResolversTypes['TemplateElement']>, ParentType, ContextType, RequireFields<QueryTemplateElementByTemplateCodeAndCodeAndTemplateVersionArgs, 'code' | 'templateCode' | 'templateVersion'>>;
  templateElements?: Resolver<Maybe<ResolversTypes['TemplateElementsConnection']>, ParentType, ContextType, RequireFields<QueryTemplateElementsArgs, 'orderBy'>>;
  templateFilterJoin?: Resolver<Maybe<ResolversTypes['TemplateFilterJoin']>, ParentType, ContextType, RequireFields<QueryTemplateFilterJoinArgs, 'id'>>;
  templateFilterJoinByNodeId?: Resolver<Maybe<ResolversTypes['TemplateFilterJoin']>, ParentType, ContextType, RequireFields<QueryTemplateFilterJoinByNodeIdArgs, 'nodeId'>>;
  templateFilterJoins?: Resolver<Maybe<ResolversTypes['TemplateFilterJoinsConnection']>, ParentType, ContextType, RequireFields<QueryTemplateFilterJoinsArgs, 'orderBy'>>;
  templatePermission?: Resolver<Maybe<ResolversTypes['TemplatePermission']>, ParentType, ContextType, RequireFields<QueryTemplatePermissionArgs, 'id'>>;
  templatePermissionByNodeId?: Resolver<Maybe<ResolversTypes['TemplatePermission']>, ParentType, ContextType, RequireFields<QueryTemplatePermissionByNodeIdArgs, 'nodeId'>>;
  templatePermissions?: Resolver<Maybe<ResolversTypes['TemplatePermissionsConnection']>, ParentType, ContextType, RequireFields<QueryTemplatePermissionsArgs, 'orderBy'>>;
  templateSection?: Resolver<Maybe<ResolversTypes['TemplateSection']>, ParentType, ContextType, RequireFields<QueryTemplateSectionArgs, 'id'>>;
  templateSectionByNodeId?: Resolver<Maybe<ResolversTypes['TemplateSection']>, ParentType, ContextType, RequireFields<QueryTemplateSectionByNodeIdArgs, 'nodeId'>>;
  templateSectionByTemplateIdAndCode?: Resolver<Maybe<ResolversTypes['TemplateSection']>, ParentType, ContextType, RequireFields<QueryTemplateSectionByTemplateIdAndCodeArgs, 'code' | 'templateId'>>;
  templateSections?: Resolver<Maybe<ResolversTypes['TemplateSectionsConnection']>, ParentType, ContextType, RequireFields<QueryTemplateSectionsArgs, 'orderBy'>>;
  templateStage?: Resolver<Maybe<ResolversTypes['TemplateStage']>, ParentType, ContextType, RequireFields<QueryTemplateStageArgs, 'id'>>;
  templateStageByNodeId?: Resolver<Maybe<ResolversTypes['TemplateStage']>, ParentType, ContextType, RequireFields<QueryTemplateStageByNodeIdArgs, 'nodeId'>>;
  templateStageReviewLevel?: Resolver<Maybe<ResolversTypes['TemplateStageReviewLevel']>, ParentType, ContextType, RequireFields<QueryTemplateStageReviewLevelArgs, 'id'>>;
  templateStageReviewLevelByNodeId?: Resolver<Maybe<ResolversTypes['TemplateStageReviewLevel']>, ParentType, ContextType, RequireFields<QueryTemplateStageReviewLevelByNodeIdArgs, 'nodeId'>>;
  templateStageReviewLevels?: Resolver<Maybe<ResolversTypes['TemplateStageReviewLevelsConnection']>, ParentType, ContextType, RequireFields<QueryTemplateStageReviewLevelsArgs, 'orderBy'>>;
  templateStages?: Resolver<Maybe<ResolversTypes['TemplateStagesConnection']>, ParentType, ContextType, RequireFields<QueryTemplateStagesArgs, 'orderBy'>>;
  templates?: Resolver<Maybe<ResolversTypes['TemplatesConnection']>, ParentType, ContextType, RequireFields<QueryTemplatesArgs, 'orderBy'>>;
  triggerQueue?: Resolver<Maybe<ResolversTypes['TriggerQueue']>, ParentType, ContextType, RequireFields<QueryTriggerQueueArgs, 'id'>>;
  triggerQueueByNodeId?: Resolver<Maybe<ResolversTypes['TriggerQueue']>, ParentType, ContextType, RequireFields<QueryTriggerQueueByNodeIdArgs, 'nodeId'>>;
  triggerQueues?: Resolver<Maybe<ResolversTypes['TriggerQueuesConnection']>, ParentType, ContextType, RequireFields<QueryTriggerQueuesArgs, 'orderBy'>>;
  triggerSchedule?: Resolver<Maybe<ResolversTypes['TriggerSchedule']>, ParentType, ContextType, RequireFields<QueryTriggerScheduleArgs, 'id'>>;
  triggerScheduleByNodeId?: Resolver<Maybe<ResolversTypes['TriggerSchedule']>, ParentType, ContextType, RequireFields<QueryTriggerScheduleByNodeIdArgs, 'nodeId'>>;
  triggerSchedules?: Resolver<Maybe<ResolversTypes['TriggerSchedulesConnection']>, ParentType, ContextType, RequireFields<QueryTriggerSchedulesArgs, 'orderBy'>>;
  unnestedSections?: Resolver<Maybe<ResolversTypes['UnnestedSectionsConnection']>, ParentType, ContextType, RequireFields<QueryUnnestedSectionsArgs, 'orderBy'>>;
  userLists?: Resolver<Maybe<ResolversTypes['UserListsConnection']>, ParentType, ContextType, RequireFields<QueryUserListsArgs, 'orderBy'>>;
  userOrgJoins?: Resolver<Maybe<ResolversTypes['UserOrgJoinsConnection']>, ParentType, ContextType, RequireFields<QueryUserOrgJoinsArgs, 'orderBy'>>;
  userOrganisation?: Resolver<Maybe<ResolversTypes['UserOrganisation']>, ParentType, ContextType, RequireFields<QueryUserOrganisationArgs, 'id'>>;
  userOrganisationByNodeId?: Resolver<Maybe<ResolversTypes['UserOrganisation']>, ParentType, ContextType, RequireFields<QueryUserOrganisationByNodeIdArgs, 'nodeId'>>;
  userOrganisationByUserIdAndOrganisationId?: Resolver<Maybe<ResolversTypes['UserOrganisation']>, ParentType, ContextType, RequireFields<QueryUserOrganisationByUserIdAndOrganisationIdArgs, 'organisationId' | 'userId'>>;
  userOrganisations?: Resolver<Maybe<ResolversTypes['UserOrganisationsConnection']>, ParentType, ContextType, RequireFields<QueryUserOrganisationsArgs, 'orderBy'>>;
  users?: Resolver<Maybe<ResolversTypes['UsersConnection']>, ParentType, ContextType, RequireFields<QueryUsersArgs, 'orderBy'>>;
  verification?: Resolver<Maybe<ResolversTypes['Verification']>, ParentType, ContextType, RequireFields<QueryVerificationArgs, 'id'>>;
  verificationByNodeId?: Resolver<Maybe<ResolversTypes['Verification']>, ParentType, ContextType, RequireFields<QueryVerificationByNodeIdArgs, 'nodeId'>>;
  verificationByUniqueId?: Resolver<Maybe<ResolversTypes['Verification']>, ParentType, ContextType, RequireFields<QueryVerificationByUniqueIdArgs, 'uniqueId'>>;
  verifications?: Resolver<Maybe<ResolversTypes['VerificationsConnection']>, ParentType, ContextType, RequireFields<QueryVerificationsArgs, 'orderBy'>>;
};

export type ReviewResolvers<ContextType = any, ParentType extends ResolversParentTypes['Review'] = ResolversParentTypes['Review']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isFinalDecision?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isLastLevel?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isLastStage?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isLocked?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  latestDecision?: Resolver<Maybe<ResolversTypes['ReviewDecision']>, ParentType, ContextType>;
  levelNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  notifications?: Resolver<ResolversTypes['NotificationsConnection'], ParentType, ContextType, RequireFields<ReviewNotificationsArgs, 'orderBy'>>;
  reviewAssignment?: Resolver<Maybe<ResolversTypes['ReviewAssignment']>, ParentType, ContextType>;
  reviewAssignmentId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  reviewDecisions?: Resolver<ResolversTypes['ReviewDecisionsConnection'], ParentType, ContextType, RequireFields<ReviewReviewDecisionsArgs, 'orderBy'>>;
  reviewResponses?: Resolver<ResolversTypes['ReviewResponsesConnection'], ParentType, ContextType, RequireFields<ReviewReviewResponsesArgs, 'orderBy'>>;
  reviewStatusHistories?: Resolver<ResolversTypes['ReviewStatusHistoriesConnection'], ParentType, ContextType, RequireFields<ReviewReviewStatusHistoriesArgs, 'orderBy'>>;
  reviewer?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  reviewerId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  stageNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['ReviewStatus']>, ParentType, ContextType>;
  timeStageCreated?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  timeStatusCreated?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  trigger?: Resolver<Maybe<ResolversTypes['Trigger']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewAssignmentResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewAssignment'] = ResolversParentTypes['ReviewAssignment']> = {
  allowedSections?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  assignedSections?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  assigner?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  assignerId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  availableSections?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isFinalDecision?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isLastLevel?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isLastStage?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isSelfAssignable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  level?: Resolver<Maybe<ResolversTypes['TemplateStageReviewLevel']>, ParentType, ContextType>;
  levelId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  levelNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  organisationId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  reviewAssignmentAssignerJoins?: Resolver<ResolversTypes['ReviewAssignmentAssignerJoinsConnection'], ParentType, ContextType, RequireFields<ReviewAssignmentReviewAssignmentAssignerJoinsArgs, 'orderBy'>>;
  reviewer?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  reviewerId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  reviews?: Resolver<ResolversTypes['ReviewsConnection'], ParentType, ContextType, RequireFields<ReviewAssignmentReviewsArgs, 'orderBy'>>;
  stage?: Resolver<Maybe<ResolversTypes['TemplateStage']>, ParentType, ContextType>;
  stageId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  stageNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['ReviewAssignmentStatus'], ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timeStageCreated?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  timeUpdated?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  trigger?: Resolver<Maybe<ResolversTypes['Trigger']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewAssignmentAssignedSectionsShapeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewAssignmentAssignedSectionsShape'] = ResolversParentTypes['ReviewAssignmentAssignedSectionsShape']> = {
  assignedSections?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  reviewAssignmentId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewAssignmentAssignedSectionsShapesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewAssignmentAssignedSectionsShapesConnection'] = ResolversParentTypes['ReviewAssignmentAssignedSectionsShapesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ReviewAssignmentAssignedSectionsShapesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ReviewAssignmentAssignedSectionsShape']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewAssignmentAssignedSectionsShapesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewAssignmentAssignedSectionsShapesEdge'] = ResolversParentTypes['ReviewAssignmentAssignedSectionsShapesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ReviewAssignmentAssignedSectionsShape']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewAssignmentAssignerJoinResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewAssignmentAssignerJoin'] = ResolversParentTypes['ReviewAssignmentAssignerJoin']> = {
  assigner?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  assignerId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  organisationId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  reviewAssignment?: Resolver<Maybe<ResolversTypes['ReviewAssignment']>, ParentType, ContextType>;
  reviewAssignmentId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewAssignmentAssignerJoinsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewAssignmentAssignerJoinsConnection'] = ResolversParentTypes['ReviewAssignmentAssignerJoinsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ReviewAssignmentAssignerJoinsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ReviewAssignmentAssignerJoin']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewAssignmentAssignerJoinsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewAssignmentAssignerJoinsEdge'] = ResolversParentTypes['ReviewAssignmentAssignerJoinsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ReviewAssignmentAssignerJoin']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewAssignmentsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewAssignmentsConnection'] = ResolversParentTypes['ReviewAssignmentsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ReviewAssignmentsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ReviewAssignment']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewAssignmentsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewAssignmentsEdge'] = ResolversParentTypes['ReviewAssignmentsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ReviewAssignment']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewDecisionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewDecision'] = ResolversParentTypes['ReviewDecision']> = {
  comment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  decision?: Resolver<Maybe<ResolversTypes['Decision']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  reviewId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  timeUpdated?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewDecisionsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewDecisionsConnection'] = ResolversParentTypes['ReviewDecisionsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ReviewDecisionsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ReviewDecision']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewDecisionsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewDecisionsEdge'] = ResolversParentTypes['ReviewDecisionsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ReviewDecision']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewListConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewListConnection'] = ResolversParentTypes['ReviewListConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ReviewListEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ReviewListRecord']>>, ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewListEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewListEdge'] = ResolversParentTypes['ReviewListEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ReviewListRecord']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewListRecordResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewListRecord'] = ResolversParentTypes['ReviewListRecord']> = {
  applicationId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  reviewerAction?: Resolver<Maybe<ResolversTypes['ReviewerAction']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewResponseResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewResponse'] = ResolversParentTypes['ReviewResponse']> = {
  applicationResponse?: Resolver<Maybe<ResolversTypes['ApplicationResponse']>, ParentType, ContextType>;
  applicationResponseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  comment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  decision?: Resolver<Maybe<ResolversTypes['ReviewResponseDecision']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isLatestReview?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  isVisibleToApplicant?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  originalReviewResponse?: Resolver<Maybe<ResolversTypes['ReviewResponse']>, ParentType, ContextType>;
  originalReviewResponseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  recommendedApplicantVisibility?: Resolver<Maybe<ResolversTypes['ReviewResponseRecommendedApplicantVisibility']>, ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  reviewId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  reviewResponseLink?: Resolver<Maybe<ResolversTypes['ReviewResponse']>, ParentType, ContextType>;
  reviewResponseLinkId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  reviewResponsesByOriginalReviewResponseId?: Resolver<ResolversTypes['ReviewResponsesConnection'], ParentType, ContextType, RequireFields<ReviewResponseReviewResponsesByOriginalReviewResponseIdArgs, 'orderBy'>>;
  reviewResponsesByReviewResponseLinkId?: Resolver<ResolversTypes['ReviewResponsesConnection'], ParentType, ContextType, RequireFields<ReviewResponseReviewResponsesByReviewResponseLinkIdArgs, 'orderBy'>>;
  stageNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['ReviewResponseStatus']>, ParentType, ContextType>;
  templateElement?: Resolver<Maybe<ResolversTypes['TemplateElement']>, ParentType, ContextType>;
  templateElementId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  timeCreated?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  timeSubmitted?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  timeUpdated?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewResponsesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewResponsesConnection'] = ResolversParentTypes['ReviewResponsesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ReviewResponsesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ReviewResponse']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewResponsesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewResponsesEdge'] = ResolversParentTypes['ReviewResponsesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ReviewResponse']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewStatusHistoriesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewStatusHistoriesConnection'] = ResolversParentTypes['ReviewStatusHistoriesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ReviewStatusHistoriesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ReviewStatusHistory']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewStatusHistoriesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewStatusHistoriesEdge'] = ResolversParentTypes['ReviewStatusHistoriesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ReviewStatusHistory']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewStatusHistoryResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewStatusHistory'] = ResolversParentTypes['ReviewStatusHistory']> = {
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isCurrent?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  reviewId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['ReviewStatus']>, ParentType, ContextType>;
  timeCreated?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewableQuestionEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewableQuestionEdge'] = ResolversParentTypes['ReviewableQuestionEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['ReviewableQuestionsRecord']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewableQuestionsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewableQuestionsConnection'] = ResolversParentTypes['ReviewableQuestionsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ReviewableQuestionEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['ReviewableQuestionsRecord']>>, ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewableQuestionsRecordResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewableQuestionsRecord'] = ResolversParentTypes['ReviewableQuestionsRecord']> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isOptional?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  responseId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  responseValue?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  reviewability?: Resolver<Maybe<ResolversTypes['Reviewability']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewsConnection'] = ResolversParentTypes['ReviewsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['ReviewsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['Review']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type ReviewsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['ReviewsEdge'] = ResolversParentTypes['ReviewsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SchemaColumnResolvers<ContextType = any, ParentType extends ResolversParentTypes['SchemaColumn'] = ResolversParentTypes['SchemaColumn']> = {
  columnName?: Resolver<Maybe<ResolversTypes['SqlIdentifier']>, ParentType, ContextType>;
  constraintType?: Resolver<Maybe<ResolversTypes['CharacterData']>, ParentType, ContextType>;
  dataType?: Resolver<Maybe<ResolversTypes['CharacterData']>, ParentType, ContextType>;
  fkToColumnName?: Resolver<Maybe<ResolversTypes['SqlIdentifier']>, ParentType, ContextType>;
  fkToTableName?: Resolver<Maybe<ResolversTypes['SqlIdentifier']>, ParentType, ContextType>;
  isGenerated?: Resolver<Maybe<ResolversTypes['CharacterData']>, ParentType, ContextType>;
  isNullable?: Resolver<Maybe<ResolversTypes['YesOrNo']>, ParentType, ContextType>;
  subDataType?: Resolver<Maybe<ResolversTypes['CharacterData']>, ParentType, ContextType>;
  tableName?: Resolver<Maybe<ResolversTypes['SqlIdentifier']>, ParentType, ContextType>;
  tableType?: Resolver<Maybe<ResolversTypes['CharacterData']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SchemaColumnsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SchemaColumnsConnection'] = ResolversParentTypes['SchemaColumnsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['SchemaColumnsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['SchemaColumn']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SchemaColumnsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SchemaColumnsEdge'] = ResolversParentTypes['SchemaColumnsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['SchemaColumn']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SingleApplicationDetailConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SingleApplicationDetailConnection'] = ResolversParentTypes['SingleApplicationDetailConnection']> = {
  edges?: Resolver<Array<ResolversTypes['SingleApplicationDetailEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['SingleApplicationDetailRecord']>>, ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SingleApplicationDetailEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SingleApplicationDetailEdge'] = ResolversParentTypes['SingleApplicationDetailEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['SingleApplicationDetailRecord']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SingleApplicationDetailRecordResolvers<ContextType = any, ParentType extends ResolversParentTypes['SingleApplicationDetailRecord'] = ResolversParentTypes['SingleApplicationDetailRecord']> = {
  assignerAction?: Resolver<Maybe<ResolversTypes['AssignerAction']>, ParentType, ContextType>;
  assigners?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  reviewerAction?: Resolver<Maybe<ResolversTypes['ReviewerAction']>, ParentType, ContextType>;
  reviewers?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface SqlIdentifierScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['SqlIdentifier'], any> {
  name: 'SqlIdentifier';
}

export type SystemInfoResolvers<ContextType = any, ParentType extends ResolversParentTypes['SystemInfo'] = ResolversParentTypes['SystemInfo']> = {
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SystemInfosConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['SystemInfosConnection'] = ResolversParentTypes['SystemInfosConnection']> = {
  edges?: Resolver<Array<ResolversTypes['SystemInfosEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['SystemInfo']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type SystemInfosEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['SystemInfosEdge'] = ResolversParentTypes['SystemInfosEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['SystemInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateResolvers<ContextType = any, ParentType extends ResolversParentTypes['Template'] = ResolversParentTypes['Template']> = {
  actionQueues?: Resolver<ResolversTypes['ActionQueuesConnection'], ParentType, ContextType, RequireFields<TemplateActionQueuesArgs, 'orderBy'>>;
  applications?: Resolver<ResolversTypes['ApplicationsConnection'], ParentType, ContextType, RequireFields<TemplateApplicationsArgs, 'orderBy'>>;
  canApplicantMakeChanges?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  dashboardRestrictions?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  files?: Resolver<ResolversTypes['FilesConnection'], ParentType, ContextType, RequireFields<TemplateFilesArgs, 'orderBy'>>;
  icon?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isLinear?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  namePlural?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  parentVersionId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  priority?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  reviewAssignments?: Resolver<ResolversTypes['ReviewAssignmentsConnection'], ParentType, ContextType, RequireFields<TemplateReviewAssignmentsArgs, 'orderBy'>>;
  serialPattern?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  startMessage?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['TemplateStatus']>, ParentType, ContextType>;
  submissionMessage?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  templateActions?: Resolver<ResolversTypes['TemplateActionsConnection'], ParentType, ContextType, RequireFields<TemplateTemplateActionsArgs, 'orderBy'>>;
  templateCategory?: Resolver<Maybe<ResolversTypes['TemplateCategory']>, ParentType, ContextType>;
  templateCategoryId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  templateFilterJoins?: Resolver<ResolversTypes['TemplateFilterJoinsConnection'], ParentType, ContextType, RequireFields<TemplateTemplateFilterJoinsArgs, 'orderBy'>>;
  templatePermissions?: Resolver<ResolversTypes['TemplatePermissionsConnection'], ParentType, ContextType, RequireFields<TemplateTemplatePermissionsArgs, 'orderBy'>>;
  templateSections?: Resolver<ResolversTypes['TemplateSectionsConnection'], ParentType, ContextType, RequireFields<TemplateTemplateSectionsArgs, 'orderBy'>>;
  templateStages?: Resolver<ResolversTypes['TemplateStagesConnection'], ParentType, ContextType, RequireFields<TemplateTemplateStagesArgs, 'orderBy'>>;
  triggerSchedules?: Resolver<ResolversTypes['TriggerSchedulesConnection'], ParentType, ContextType, RequireFields<TemplateTriggerSchedulesArgs, 'orderBy'>>;
  versionComment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  versionHistory?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  versionId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  versionTimestamp?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateActionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateAction'] = ResolversParentTypes['TemplateAction']> = {
  actionCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  condition?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  eventCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  parameterQueries?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  parametersQueriesString?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sequence?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  trigger?: Resolver<Maybe<ResolversTypes['Trigger']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateActionsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateActionsConnection'] = ResolversParentTypes['TemplateActionsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['TemplateActionsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['TemplateAction']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateActionsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateActionsEdge'] = ResolversParentTypes['TemplateActionsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['TemplateAction']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateCategoriesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateCategoriesConnection'] = ResolversParentTypes['TemplateCategoriesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['TemplateCategoriesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['TemplateCategory']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateCategoriesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateCategoriesEdge'] = ResolversParentTypes['TemplateCategoriesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['TemplateCategory']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateCategoryResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateCategory'] = ResolversParentTypes['TemplateCategory']> = {
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  icon?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isSubmenu?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  priority?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  templates?: Resolver<ResolversTypes['TemplatesConnection'], ParentType, ContextType, RequireFields<TemplateCategoryTemplatesArgs, 'orderBy'>>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uiLocation?: Resolver<Maybe<Array<Maybe<ResolversTypes['UiLocation']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateElementResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateElement'] = ResolversParentTypes['TemplateElement']> = {
  applicationResponses?: Resolver<ResolversTypes['ApplicationResponsesConnection'], ParentType, ContextType, RequireFields<TemplateElementApplicationResponsesArgs, 'orderBy'>>;
  category?: Resolver<Maybe<ResolversTypes['TemplateElementCategory']>, ParentType, ContextType>;
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  elementTypePluginCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  helpText?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  index?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  initialValue?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  isEditable?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  isRequired?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  parameters?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  parametersString?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reviewResponses?: Resolver<ResolversTypes['ReviewResponsesConnection'], ParentType, ContextType, RequireFields<TemplateElementReviewResponsesArgs, 'orderBy'>>;
  reviewability?: Resolver<ResolversTypes['Reviewability'], ParentType, ContextType>;
  section?: Resolver<Maybe<ResolversTypes['TemplateSection']>, ParentType, ContextType>;
  sectionId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  templateCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  templateVersion?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  validation?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  validationMessage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  visibilityCondition?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateElementsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateElementsConnection'] = ResolversParentTypes['TemplateElementsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['TemplateElementsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['TemplateElement']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateElementsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateElementsEdge'] = ResolversParentTypes['TemplateElementsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['TemplateElement']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateFilterJoinResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateFilterJoin'] = ResolversParentTypes['TemplateFilterJoin']> = {
  filter?: Resolver<Maybe<ResolversTypes['Filter']>, ParentType, ContextType>;
  filterId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateFilterJoinsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateFilterJoinsConnection'] = ResolversParentTypes['TemplateFilterJoinsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['TemplateFilterJoinsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['TemplateFilterJoin']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateFilterJoinsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateFilterJoinsEdge'] = ResolversParentTypes['TemplateFilterJoinsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['TemplateFilterJoin']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplatePermissionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplatePermission'] = ResolversParentTypes['TemplatePermission']> = {
  allowedSections?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  canMakeFinalDecision?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  canSelfAssign?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  levelNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  permissionName?: Resolver<Maybe<ResolversTypes['PermissionName']>, ParentType, ContextType>;
  permissionNameId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  restrictions?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  stageNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplatePermissionsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplatePermissionsConnection'] = ResolversParentTypes['TemplatePermissionsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['TemplatePermissionsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['TemplatePermission']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplatePermissionsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplatePermissionsEdge'] = ResolversParentTypes['TemplatePermissionsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['TemplatePermission']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateSectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateSection'] = ResolversParentTypes['TemplateSection']> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  index?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateElementsBySectionId?: Resolver<ResolversTypes['TemplateElementsConnection'], ParentType, ContextType, RequireFields<TemplateSectionTemplateElementsBySectionIdArgs, 'orderBy'>>;
  templateId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateSectionsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateSectionsConnection'] = ResolversParentTypes['TemplateSectionsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['TemplateSectionsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['TemplateSection']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateSectionsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateSectionsEdge'] = ResolversParentTypes['TemplateSectionsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['TemplateSection']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateStageResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateStage'] = ResolversParentTypes['TemplateStage']> = {
  applicationStageHistoriesByStageId?: Resolver<ResolversTypes['ApplicationStageHistoriesConnection'], ParentType, ContextType, RequireFields<TemplateStageApplicationStageHistoriesByStageIdArgs, 'orderBy'>>;
  colour?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  number?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  reviewAssignmentsByStageId?: Resolver<ResolversTypes['ReviewAssignmentsConnection'], ParentType, ContextType, RequireFields<TemplateStageReviewAssignmentsByStageIdArgs, 'orderBy'>>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  templateStageReviewLevelsByStageId?: Resolver<ResolversTypes['TemplateStageReviewLevelsConnection'], ParentType, ContextType, RequireFields<TemplateStageTemplateStageReviewLevelsByStageIdArgs, 'orderBy'>>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateStageReviewLevelResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateStageReviewLevel'] = ResolversParentTypes['TemplateStageReviewLevel']> = {
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  reviewAssignmentsByLevelId?: Resolver<ResolversTypes['ReviewAssignmentsConnection'], ParentType, ContextType, RequireFields<TemplateStageReviewLevelReviewAssignmentsByLevelIdArgs, 'orderBy'>>;
  singleReviewerAllSections?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  stage?: Resolver<Maybe<ResolversTypes['TemplateStage']>, ParentType, ContextType>;
  stageId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateStageReviewLevelsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateStageReviewLevelsConnection'] = ResolversParentTypes['TemplateStageReviewLevelsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['TemplateStageReviewLevelsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['TemplateStageReviewLevel']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateStageReviewLevelsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateStageReviewLevelsEdge'] = ResolversParentTypes['TemplateStageReviewLevelsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['TemplateStageReviewLevel']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateStagesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateStagesConnection'] = ResolversParentTypes['TemplateStagesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['TemplateStagesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['TemplateStage']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplateStagesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplateStagesEdge'] = ResolversParentTypes['TemplateStagesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['TemplateStage']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplatesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplatesConnection'] = ResolversParentTypes['TemplatesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['TemplatesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['Template']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TemplatesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TemplatesEdge'] = ResolversParentTypes['TemplatesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TriggerQueueResolvers<ContextType = any, ParentType extends ResolversParentTypes['TriggerQueue'] = ResolversParentTypes['TriggerQueue']> = {
  actionQueuesByTriggerEvent?: Resolver<ResolversTypes['ActionQueuesConnection'], ParentType, ContextType, RequireFields<TriggerQueueActionQueuesByTriggerEventArgs, 'orderBy'>>;
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  data?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  eventCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  log?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  recordId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['TriggerQueueStatus']>, ParentType, ContextType>;
  table?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  timestamp?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  triggerType?: Resolver<Maybe<ResolversTypes['Trigger']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TriggerQueuesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TriggerQueuesConnection'] = ResolversParentTypes['TriggerQueuesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['TriggerQueuesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['TriggerQueue']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TriggerQueuesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TriggerQueuesEdge'] = ResolversParentTypes['TriggerQueuesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['TriggerQueue']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TriggerScheduleResolvers<ContextType = any, ParentType extends ResolversParentTypes['TriggerSchedule'] = ResolversParentTypes['TriggerSchedule']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  data?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  editorUserId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  eventCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isActive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  timeScheduled?: Resolver<ResolversTypes['Datetime'], ParentType, ContextType>;
  trigger?: Resolver<Maybe<ResolversTypes['Trigger']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TriggerSchedulesConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['TriggerSchedulesConnection'] = ResolversParentTypes['TriggerSchedulesConnection']> = {
  edges?: Resolver<Array<ResolversTypes['TriggerSchedulesEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['TriggerSchedule']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type TriggerSchedulesEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['TriggerSchedulesEdge'] = ResolversParentTypes['TriggerSchedulesEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['TriggerSchedule']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UnnestedSectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['UnnestedSection'] = ResolversParentTypes['UnnestedSection']> = {
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  section?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UnnestedSectionsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['UnnestedSectionsConnection'] = ResolversParentTypes['UnnestedSectionsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['UnnestedSectionsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['UnnestedSection']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UnnestedSectionsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['UnnestedSectionsEdge'] = ResolversParentTypes['UnnestedSectionsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['UnnestedSection']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateActionPluginPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateActionPluginPayload'] = ResolversParentTypes['UpdateActionPluginPayload']> = {
  actionPlugin?: Resolver<Maybe<ResolversTypes['ActionPlugin']>, ParentType, ContextType>;
  actionPluginEdge?: Resolver<Maybe<ResolversTypes['ActionPluginsEdge']>, ParentType, ContextType, RequireFields<UpdateActionPluginPayloadActionPluginEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateActionQueuePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateActionQueuePayload'] = ResolversParentTypes['UpdateActionQueuePayload']> = {
  actionQueue?: Resolver<Maybe<ResolversTypes['ActionQueue']>, ParentType, ContextType>;
  actionQueueEdge?: Resolver<Maybe<ResolversTypes['ActionQueuesEdge']>, ParentType, ContextType, RequireFields<UpdateActionQueuePayloadActionQueueEdgeArgs, 'orderBy'>>;
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  triggerQueueByTriggerEvent?: Resolver<Maybe<ResolversTypes['TriggerQueue']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateActivityLogPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateActivityLogPayload'] = ResolversParentTypes['UpdateActivityLogPayload']> = {
  activityLog?: Resolver<Maybe<ResolversTypes['ActivityLog']>, ParentType, ContextType>;
  activityLogEdge?: Resolver<Maybe<ResolversTypes['ActivityLogsEdge']>, ParentType, ContextType, RequireFields<UpdateActivityLogPayloadActivityLogEdgeArgs, 'orderBy'>>;
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateApplicationNotePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateApplicationNotePayload'] = ResolversParentTypes['UpdateApplicationNotePayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationNote?: Resolver<Maybe<ResolversTypes['ApplicationNote']>, ParentType, ContextType>;
  applicationNoteEdge?: Resolver<Maybe<ResolversTypes['ApplicationNotesEdge']>, ParentType, ContextType, RequireFields<UpdateApplicationNotePayloadApplicationNoteEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  org?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateApplicationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateApplicationPayload'] = ResolversParentTypes['UpdateApplicationPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationEdge?: Resolver<Maybe<ResolversTypes['ApplicationsEdge']>, ParentType, ContextType, RequireFields<UpdateApplicationPayloadApplicationEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  org?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateApplicationResponsePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateApplicationResponsePayload'] = ResolversParentTypes['UpdateApplicationResponsePayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationResponse?: Resolver<Maybe<ResolversTypes['ApplicationResponse']>, ParentType, ContextType>;
  applicationResponseEdge?: Resolver<Maybe<ResolversTypes['ApplicationResponsesEdge']>, ParentType, ContextType, RequireFields<UpdateApplicationResponsePayloadApplicationResponseEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  templateElement?: Resolver<Maybe<ResolversTypes['TemplateElement']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateApplicationReviewerActionPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateApplicationReviewerActionPayload'] = ResolversParentTypes['UpdateApplicationReviewerActionPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationReviewerAction?: Resolver<Maybe<ResolversTypes['ApplicationReviewerAction']>, ParentType, ContextType>;
  applicationReviewerActionEdge?: Resolver<Maybe<ResolversTypes['ApplicationReviewerActionsEdge']>, ParentType, ContextType, RequireFields<UpdateApplicationReviewerActionPayloadApplicationReviewerActionEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateApplicationStageHistoryPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateApplicationStageHistoryPayload'] = ResolversParentTypes['UpdateApplicationStageHistoryPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationStageHistory?: Resolver<Maybe<ResolversTypes['ApplicationStageHistory']>, ParentType, ContextType>;
  applicationStageHistoryEdge?: Resolver<Maybe<ResolversTypes['ApplicationStageHistoriesEdge']>, ParentType, ContextType, RequireFields<UpdateApplicationStageHistoryPayloadApplicationStageHistoryEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  stage?: Resolver<Maybe<ResolversTypes['TemplateStage']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateApplicationStatusHistoryPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateApplicationStatusHistoryPayload'] = ResolversParentTypes['UpdateApplicationStatusHistoryPayload']> = {
  applicationStageHistory?: Resolver<Maybe<ResolversTypes['ApplicationStageHistory']>, ParentType, ContextType>;
  applicationStatusHistory?: Resolver<Maybe<ResolversTypes['ApplicationStatusHistory']>, ParentType, ContextType>;
  applicationStatusHistoryEdge?: Resolver<Maybe<ResolversTypes['ApplicationStatusHistoriesEdge']>, ParentType, ContextType, RequireFields<UpdateApplicationStatusHistoryPayloadApplicationStatusHistoryEdgeArgs, 'orderBy'>>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateCounterPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateCounterPayload'] = ResolversParentTypes['UpdateCounterPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  counter?: Resolver<Maybe<ResolversTypes['Counter']>, ParentType, ContextType>;
  counterEdge?: Resolver<Maybe<ResolversTypes['CountersEdge']>, ParentType, ContextType, RequireFields<UpdateCounterPayloadCounterEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateDataChangelogPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateDataChangelogPayload'] = ResolversParentTypes['UpdateDataChangelogPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dataChangelog?: Resolver<Maybe<ResolversTypes['DataChangelog']>, ParentType, ContextType>;
  dataChangelogEdge?: Resolver<Maybe<ResolversTypes['DataChangelogsEdge']>, ParentType, ContextType, RequireFields<UpdateDataChangelogPayloadDataChangelogEdgeArgs, 'orderBy'>>;
  org?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateDataTablePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateDataTablePayload'] = ResolversParentTypes['UpdateDataTablePayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dataTable?: Resolver<Maybe<ResolversTypes['DataTable']>, ParentType, ContextType>;
  dataTableEdge?: Resolver<Maybe<ResolversTypes['DataTablesEdge']>, ParentType, ContextType, RequireFields<UpdateDataTablePayloadDataTableEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateDataViewColumnDefinitionPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateDataViewColumnDefinitionPayload'] = ResolversParentTypes['UpdateDataViewColumnDefinitionPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dataViewColumnDefinition?: Resolver<Maybe<ResolversTypes['DataViewColumnDefinition']>, ParentType, ContextType>;
  dataViewColumnDefinitionEdge?: Resolver<Maybe<ResolversTypes['DataViewColumnDefinitionsEdge']>, ParentType, ContextType, RequireFields<UpdateDataViewColumnDefinitionPayloadDataViewColumnDefinitionEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateDataViewPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateDataViewPayload'] = ResolversParentTypes['UpdateDataViewPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dataView?: Resolver<Maybe<ResolversTypes['DataView']>, ParentType, ContextType>;
  dataViewEdge?: Resolver<Maybe<ResolversTypes['DataViewsEdge']>, ParentType, ContextType, RequireFields<UpdateDataViewPayloadDataViewEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateElementTypePluginPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateElementTypePluginPayload'] = ResolversParentTypes['UpdateElementTypePluginPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  elementTypePlugin?: Resolver<Maybe<ResolversTypes['ElementTypePlugin']>, ParentType, ContextType>;
  elementTypePluginEdge?: Resolver<Maybe<ResolversTypes['ElementTypePluginsEdge']>, ParentType, ContextType, RequireFields<UpdateElementTypePluginPayloadElementTypePluginEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateFilePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateFilePayload'] = ResolversParentTypes['UpdateFilePayload']> = {
  applicationByApplicationSerial?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationNote?: Resolver<Maybe<ResolversTypes['ApplicationNote']>, ParentType, ContextType>;
  applicationResponse?: Resolver<Maybe<ResolversTypes['ApplicationResponse']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  file?: Resolver<Maybe<ResolversTypes['File']>, ParentType, ContextType>;
  fileEdge?: Resolver<Maybe<ResolversTypes['FilesEdge']>, ParentType, ContextType, RequireFields<UpdateFilePayloadFileEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateFilterPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateFilterPayload'] = ResolversParentTypes['UpdateFilterPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  filter?: Resolver<Maybe<ResolversTypes['Filter']>, ParentType, ContextType>;
  filterEdge?: Resolver<Maybe<ResolversTypes['FiltersEdge']>, ParentType, ContextType, RequireFields<UpdateFilterPayloadFilterEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateNotificationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateNotificationPayload'] = ResolversParentTypes['UpdateNotificationPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  notification?: Resolver<Maybe<ResolversTypes['Notification']>, ParentType, ContextType>;
  notificationEdge?: Resolver<Maybe<ResolversTypes['NotificationsEdge']>, ParentType, ContextType, RequireFields<UpdateNotificationPayloadNotificationEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateOrganisationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateOrganisationPayload'] = ResolversParentTypes['UpdateOrganisationPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  organisationEdge?: Resolver<Maybe<ResolversTypes['OrganisationsEdge']>, ParentType, ContextType, RequireFields<UpdateOrganisationPayloadOrganisationEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdatePermissionJoinPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdatePermissionJoinPayload'] = ResolversParentTypes['UpdatePermissionJoinPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  permissionJoin?: Resolver<Maybe<ResolversTypes['PermissionJoin']>, ParentType, ContextType>;
  permissionJoinEdge?: Resolver<Maybe<ResolversTypes['PermissionJoinsEdge']>, ParentType, ContextType, RequireFields<UpdatePermissionJoinPayloadPermissionJoinEdgeArgs, 'orderBy'>>;
  permissionName?: Resolver<Maybe<ResolversTypes['PermissionName']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdatePermissionNamePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdatePermissionNamePayload'] = ResolversParentTypes['UpdatePermissionNamePayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  permissionName?: Resolver<Maybe<ResolversTypes['PermissionName']>, ParentType, ContextType>;
  permissionNameEdge?: Resolver<Maybe<ResolversTypes['PermissionNamesEdge']>, ParentType, ContextType, RequireFields<UpdatePermissionNamePayloadPermissionNameEdgeArgs, 'orderBy'>>;
  permissionPolicy?: Resolver<Maybe<ResolversTypes['PermissionPolicy']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdatePermissionPolicyPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdatePermissionPolicyPayload'] = ResolversParentTypes['UpdatePermissionPolicyPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  permissionPolicy?: Resolver<Maybe<ResolversTypes['PermissionPolicy']>, ParentType, ContextType>;
  permissionPolicyEdge?: Resolver<Maybe<ResolversTypes['PermissionPoliciesEdge']>, ParentType, ContextType, RequireFields<UpdatePermissionPolicyPayloadPermissionPolicyEdgeArgs, 'orderBy'>>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateReviewAssignmentAssignerJoinPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateReviewAssignmentAssignerJoinPayload'] = ResolversParentTypes['UpdateReviewAssignmentAssignerJoinPayload']> = {
  assigner?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  reviewAssignment?: Resolver<Maybe<ResolversTypes['ReviewAssignment']>, ParentType, ContextType>;
  reviewAssignmentAssignerJoin?: Resolver<Maybe<ResolversTypes['ReviewAssignmentAssignerJoin']>, ParentType, ContextType>;
  reviewAssignmentAssignerJoinEdge?: Resolver<Maybe<ResolversTypes['ReviewAssignmentAssignerJoinsEdge']>, ParentType, ContextType, RequireFields<UpdateReviewAssignmentAssignerJoinPayloadReviewAssignmentAssignerJoinEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateReviewAssignmentPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateReviewAssignmentPayload'] = ResolversParentTypes['UpdateReviewAssignmentPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  assigner?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  level?: Resolver<Maybe<ResolversTypes['TemplateStageReviewLevel']>, ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  reviewAssignment?: Resolver<Maybe<ResolversTypes['ReviewAssignment']>, ParentType, ContextType>;
  reviewAssignmentEdge?: Resolver<Maybe<ResolversTypes['ReviewAssignmentsEdge']>, ParentType, ContextType, RequireFields<UpdateReviewAssignmentPayloadReviewAssignmentEdgeArgs, 'orderBy'>>;
  reviewer?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  stage?: Resolver<Maybe<ResolversTypes['TemplateStage']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateReviewDecisionPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateReviewDecisionPayload'] = ResolversParentTypes['UpdateReviewDecisionPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  reviewDecision?: Resolver<Maybe<ResolversTypes['ReviewDecision']>, ParentType, ContextType>;
  reviewDecisionEdge?: Resolver<Maybe<ResolversTypes['ReviewDecisionsEdge']>, ParentType, ContextType, RequireFields<UpdateReviewDecisionPayloadReviewDecisionEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateReviewPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateReviewPayload'] = ResolversParentTypes['UpdateReviewPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  reviewAssignment?: Resolver<Maybe<ResolversTypes['ReviewAssignment']>, ParentType, ContextType>;
  reviewEdge?: Resolver<Maybe<ResolversTypes['ReviewsEdge']>, ParentType, ContextType, RequireFields<UpdateReviewPayloadReviewEdgeArgs, 'orderBy'>>;
  reviewer?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateReviewResponsePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateReviewResponsePayload'] = ResolversParentTypes['UpdateReviewResponsePayload']> = {
  applicationResponse?: Resolver<Maybe<ResolversTypes['ApplicationResponse']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  originalReviewResponse?: Resolver<Maybe<ResolversTypes['ReviewResponse']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  reviewResponse?: Resolver<Maybe<ResolversTypes['ReviewResponse']>, ParentType, ContextType>;
  reviewResponseEdge?: Resolver<Maybe<ResolversTypes['ReviewResponsesEdge']>, ParentType, ContextType, RequireFields<UpdateReviewResponsePayloadReviewResponseEdgeArgs, 'orderBy'>>;
  reviewResponseLink?: Resolver<Maybe<ResolversTypes['ReviewResponse']>, ParentType, ContextType>;
  templateElement?: Resolver<Maybe<ResolversTypes['TemplateElement']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateReviewStatusHistoryPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateReviewStatusHistoryPayload'] = ResolversParentTypes['UpdateReviewStatusHistoryPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  review?: Resolver<Maybe<ResolversTypes['Review']>, ParentType, ContextType>;
  reviewStatusHistory?: Resolver<Maybe<ResolversTypes['ReviewStatusHistory']>, ParentType, ContextType>;
  reviewStatusHistoryEdge?: Resolver<Maybe<ResolversTypes['ReviewStatusHistoriesEdge']>, ParentType, ContextType, RequireFields<UpdateReviewStatusHistoryPayloadReviewStatusHistoryEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateSystemInfoPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateSystemInfoPayload'] = ResolversParentTypes['UpdateSystemInfoPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  systemInfo?: Resolver<Maybe<ResolversTypes['SystemInfo']>, ParentType, ContextType>;
  systemInfoEdge?: Resolver<Maybe<ResolversTypes['SystemInfosEdge']>, ParentType, ContextType, RequireFields<UpdateSystemInfoPayloadSystemInfoEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateTemplateActionPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateTemplateActionPayload'] = ResolversParentTypes['UpdateTemplateActionPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateAction?: Resolver<Maybe<ResolversTypes['TemplateAction']>, ParentType, ContextType>;
  templateActionEdge?: Resolver<Maybe<ResolversTypes['TemplateActionsEdge']>, ParentType, ContextType, RequireFields<UpdateTemplateActionPayloadTemplateActionEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateTemplateCategoryPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateTemplateCategoryPayload'] = ResolversParentTypes['UpdateTemplateCategoryPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  templateCategory?: Resolver<Maybe<ResolversTypes['TemplateCategory']>, ParentType, ContextType>;
  templateCategoryEdge?: Resolver<Maybe<ResolversTypes['TemplateCategoriesEdge']>, ParentType, ContextType, RequireFields<UpdateTemplateCategoryPayloadTemplateCategoryEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateTemplateElementPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateTemplateElementPayload'] = ResolversParentTypes['UpdateTemplateElementPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  section?: Resolver<Maybe<ResolversTypes['TemplateSection']>, ParentType, ContextType>;
  templateElement?: Resolver<Maybe<ResolversTypes['TemplateElement']>, ParentType, ContextType>;
  templateElementEdge?: Resolver<Maybe<ResolversTypes['TemplateElementsEdge']>, ParentType, ContextType, RequireFields<UpdateTemplateElementPayloadTemplateElementEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateTemplateFilterJoinPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateTemplateFilterJoinPayload'] = ResolversParentTypes['UpdateTemplateFilterJoinPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  filter?: Resolver<Maybe<ResolversTypes['Filter']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateFilterJoin?: Resolver<Maybe<ResolversTypes['TemplateFilterJoin']>, ParentType, ContextType>;
  templateFilterJoinEdge?: Resolver<Maybe<ResolversTypes['TemplateFilterJoinsEdge']>, ParentType, ContextType, RequireFields<UpdateTemplateFilterJoinPayloadTemplateFilterJoinEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateTemplatePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateTemplatePayload'] = ResolversParentTypes['UpdateTemplatePayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateCategory?: Resolver<Maybe<ResolversTypes['TemplateCategory']>, ParentType, ContextType>;
  templateEdge?: Resolver<Maybe<ResolversTypes['TemplatesEdge']>, ParentType, ContextType, RequireFields<UpdateTemplatePayloadTemplateEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateTemplatePermissionPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateTemplatePermissionPayload'] = ResolversParentTypes['UpdateTemplatePermissionPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  permissionName?: Resolver<Maybe<ResolversTypes['PermissionName']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templatePermission?: Resolver<Maybe<ResolversTypes['TemplatePermission']>, ParentType, ContextType>;
  templatePermissionEdge?: Resolver<Maybe<ResolversTypes['TemplatePermissionsEdge']>, ParentType, ContextType, RequireFields<UpdateTemplatePermissionPayloadTemplatePermissionEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateTemplateSectionPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateTemplateSectionPayload'] = ResolversParentTypes['UpdateTemplateSectionPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateSection?: Resolver<Maybe<ResolversTypes['TemplateSection']>, ParentType, ContextType>;
  templateSectionEdge?: Resolver<Maybe<ResolversTypes['TemplateSectionsEdge']>, ParentType, ContextType, RequireFields<UpdateTemplateSectionPayloadTemplateSectionEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateTemplateStagePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateTemplateStagePayload'] = ResolversParentTypes['UpdateTemplateStagePayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  templateStage?: Resolver<Maybe<ResolversTypes['TemplateStage']>, ParentType, ContextType>;
  templateStageEdge?: Resolver<Maybe<ResolversTypes['TemplateStagesEdge']>, ParentType, ContextType, RequireFields<UpdateTemplateStagePayloadTemplateStageEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateTemplateStageReviewLevelPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateTemplateStageReviewLevelPayload'] = ResolversParentTypes['UpdateTemplateStageReviewLevelPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  stage?: Resolver<Maybe<ResolversTypes['TemplateStage']>, ParentType, ContextType>;
  templateStageReviewLevel?: Resolver<Maybe<ResolversTypes['TemplateStageReviewLevel']>, ParentType, ContextType>;
  templateStageReviewLevelEdge?: Resolver<Maybe<ResolversTypes['TemplateStageReviewLevelsEdge']>, ParentType, ContextType, RequireFields<UpdateTemplateStageReviewLevelPayloadTemplateStageReviewLevelEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateTriggerQueuePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateTriggerQueuePayload'] = ResolversParentTypes['UpdateTriggerQueuePayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  triggerQueue?: Resolver<Maybe<ResolversTypes['TriggerQueue']>, ParentType, ContextType>;
  triggerQueueEdge?: Resolver<Maybe<ResolversTypes['TriggerQueuesEdge']>, ParentType, ContextType, RequireFields<UpdateTriggerQueuePayloadTriggerQueueEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateTriggerSchedulePayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateTriggerSchedulePayload'] = ResolversParentTypes['UpdateTriggerSchedulePayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  template?: Resolver<Maybe<ResolversTypes['Template']>, ParentType, ContextType>;
  triggerSchedule?: Resolver<Maybe<ResolversTypes['TriggerSchedule']>, ParentType, ContextType>;
  triggerScheduleEdge?: Resolver<Maybe<ResolversTypes['TriggerSchedulesEdge']>, ParentType, ContextType, RequireFields<UpdateTriggerSchedulePayloadTriggerScheduleEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateUserOrganisationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateUserOrganisationPayload'] = ResolversParentTypes['UpdateUserOrganisationPayload']> = {
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  userOrganisation?: Resolver<Maybe<ResolversTypes['UserOrganisation']>, ParentType, ContextType>;
  userOrganisationEdge?: Resolver<Maybe<ResolversTypes['UserOrganisationsEdge']>, ParentType, ContextType, RequireFields<UpdateUserOrganisationPayloadUserOrganisationEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UpdateVerificationPayloadResolvers<ContextType = any, ParentType extends ResolversParentTypes['UpdateVerificationPayload'] = ResolversParentTypes['UpdateVerificationPayload']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  clientMutationId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  query?: Resolver<Maybe<ResolversTypes['Query']>, ParentType, ContextType>;
  verification?: Resolver<Maybe<ResolversTypes['Verification']>, ParentType, ContextType>;
  verificationEdge?: Resolver<Maybe<ResolversTypes['VerificationsEdge']>, ParentType, ContextType, RequireFields<UpdateVerificationPayloadVerificationEdgeArgs, 'orderBy'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserResolvers<ContextType = any, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = {
  dateOfBirth?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fullName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  passwordHash?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  userOrganisations?: Resolver<ResolversTypes['UserOrganisationsConnection'], ParentType, ContextType, RequireFields<UserUserOrganisationsArgs, 'orderBy'>>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserListResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserList'] = ResolversParentTypes['UserList']> = {
  applicationNotesByUserId?: Resolver<ResolversTypes['ApplicationNotesConnection'], ParentType, ContextType, RequireFields<UserListApplicationNotesByUserIdArgs, 'orderBy'>>;
  applicationsByUserId?: Resolver<ResolversTypes['ApplicationsConnection'], ParentType, ContextType, RequireFields<UserListApplicationsByUserIdArgs, 'orderBy'>>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fullName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  permissionJoinsByUserId?: Resolver<ResolversTypes['PermissionJoinsConnection'], ParentType, ContextType, RequireFields<UserListPermissionJoinsByUserIdArgs, 'orderBy'>>;
  reviewAssignmentAssignerJoinsByAssignerId?: Resolver<ResolversTypes['ReviewAssignmentAssignerJoinsConnection'], ParentType, ContextType, RequireFields<UserListReviewAssignmentAssignerJoinsByAssignerIdArgs, 'orderBy'>>;
  reviewAssignmentsByAssignerId?: Resolver<ResolversTypes['ReviewAssignmentsConnection'], ParentType, ContextType, RequireFields<UserListReviewAssignmentsByAssignerIdArgs, 'orderBy'>>;
  reviewedReviewAssignments?: Resolver<ResolversTypes['ReviewAssignmentsConnection'], ParentType, ContextType, RequireFields<UserListReviewedReviewAssignmentsArgs, 'orderBy'>>;
  reviewedReviews?: Resolver<ResolversTypes['ReviewsConnection'], ParentType, ContextType, RequireFields<UserListReviewedReviewsArgs, 'orderBy'>>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserListsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserListsConnection'] = ResolversParentTypes['UserListsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['UserListsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['UserList']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserListsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserListsEdge'] = ResolversParentTypes['UserListsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['UserList']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserOrgJoinResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserOrgJoin'] = ResolversParentTypes['UserOrgJoin']> = {
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dateOfBirth?: Resolver<Maybe<ResolversTypes['Date']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isSystemOrg?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  logoUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  orgId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  orgName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  passwordHash?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  registration?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  userId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  userRole?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  username?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserOrgJoinsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserOrgJoinsConnection'] = ResolversParentTypes['UserOrgJoinsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['UserOrgJoinsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['UserOrgJoin']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserOrgJoinsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserOrgJoinsEdge'] = ResolversParentTypes['UserOrgJoinsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['UserOrgJoin']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserOrganisationResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserOrganisation'] = ResolversParentTypes['UserOrganisation']> = {
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  organisation?: Resolver<Maybe<ResolversTypes['Organisation']>, ParentType, ContextType>;
  organisationId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  userId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  userRole?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserOrganisationsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserOrganisationsConnection'] = ResolversParentTypes['UserOrganisationsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['UserOrganisationsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['UserOrganisation']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UserOrganisationsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['UserOrganisationsEdge'] = ResolversParentTypes['UserOrganisationsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['UserOrganisation']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UsersConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['UsersConnection'] = ResolversParentTypes['UsersConnection']> = {
  edges?: Resolver<Array<ResolversTypes['UsersEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['User']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type UsersEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['UsersEdge'] = ResolversParentTypes['UsersEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VerificationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Verification'] = ResolversParentTypes['Verification']> = {
  application?: Resolver<Maybe<ResolversTypes['Application']>, ParentType, ContextType>;
  applicationId?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  data?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>;
  eventCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  isVerified?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  nodeId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  timeCreated?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  timeExpired?: Resolver<Maybe<ResolversTypes['Datetime']>, ParentType, ContextType>;
  trigger?: Resolver<Maybe<ResolversTypes['Trigger']>, ParentType, ContextType>;
  uniqueId?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VerificationsConnectionResolvers<ContextType = any, ParentType extends ResolversParentTypes['VerificationsConnection'] = ResolversParentTypes['VerificationsConnection']> = {
  edges?: Resolver<Array<ResolversTypes['VerificationsEdge']>, ParentType, ContextType>;
  nodes?: Resolver<Array<Maybe<ResolversTypes['Verification']>>, ParentType, ContextType>;
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type VerificationsEdgeResolvers<ContextType = any, ParentType extends ResolversParentTypes['VerificationsEdge'] = ResolversParentTypes['VerificationsEdge']> = {
  cursor?: Resolver<Maybe<ResolversTypes['Cursor']>, ParentType, ContextType>;
  node?: Resolver<Maybe<ResolversTypes['Verification']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export interface YesOrNoScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['YesOrNo'], any> {
  name: 'YesOrNo';
}

export type Resolvers<ContextType = any> = {
  ActionPlugin?: ActionPluginResolvers<ContextType>;
  ActionPluginsConnection?: ActionPluginsConnectionResolvers<ContextType>;
  ActionPluginsEdge?: ActionPluginsEdgeResolvers<ContextType>;
  ActionQueue?: ActionQueueResolvers<ContextType>;
  ActionQueuesConnection?: ActionQueuesConnectionResolvers<ContextType>;
  ActionQueuesEdge?: ActionQueuesEdgeResolvers<ContextType>;
  ActivityLog?: ActivityLogResolvers<ContextType>;
  ActivityLogsConnection?: ActivityLogsConnectionResolvers<ContextType>;
  ActivityLogsEdge?: ActivityLogsEdgeResolvers<ContextType>;
  AllowedSelfAssignableSectionsShape?: AllowedSelfAssignableSectionsShapeResolvers<ContextType>;
  AllowedSelfAssignableSectionsShapesConnection?: AllowedSelfAssignableSectionsShapesConnectionResolvers<ContextType>;
  AllowedSelfAssignableSectionsShapesEdge?: AllowedSelfAssignableSectionsShapesEdgeResolvers<ContextType>;
  Application?: ApplicationResolvers<ContextType>;
  ApplicationListFilterApplicantConnection?: ApplicationListFilterApplicantConnectionResolvers<ContextType>;
  ApplicationListFilterApplicantEdge?: ApplicationListFilterApplicantEdgeResolvers<ContextType>;
  ApplicationListFilterAssignerConnection?: ApplicationListFilterAssignerConnectionResolvers<ContextType>;
  ApplicationListFilterAssignerEdge?: ApplicationListFilterAssignerEdgeResolvers<ContextType>;
  ApplicationListFilterOrganisationConnection?: ApplicationListFilterOrganisationConnectionResolvers<ContextType>;
  ApplicationListFilterOrganisationEdge?: ApplicationListFilterOrganisationEdgeResolvers<ContextType>;
  ApplicationListFilterReviewerConnection?: ApplicationListFilterReviewerConnectionResolvers<ContextType>;
  ApplicationListFilterReviewerEdge?: ApplicationListFilterReviewerEdgeResolvers<ContextType>;
  ApplicationListFilterStageConnection?: ApplicationListFilterStageConnectionResolvers<ContextType>;
  ApplicationListFilterStageEdge?: ApplicationListFilterStageEdgeResolvers<ContextType>;
  ApplicationListShape?: ApplicationListShapeResolvers<ContextType>;
  ApplicationListShapesConnection?: ApplicationListShapesConnectionResolvers<ContextType>;
  ApplicationListShapesEdge?: ApplicationListShapesEdgeResolvers<ContextType>;
  ApplicationNote?: ApplicationNoteResolvers<ContextType>;
  ApplicationNotesConnection?: ApplicationNotesConnectionResolvers<ContextType>;
  ApplicationNotesEdge?: ApplicationNotesEdgeResolvers<ContextType>;
  ApplicationResponse?: ApplicationResponseResolvers<ContextType>;
  ApplicationResponsesConnection?: ApplicationResponsesConnectionResolvers<ContextType>;
  ApplicationResponsesEdge?: ApplicationResponsesEdgeResolvers<ContextType>;
  ApplicationReviewerAction?: ApplicationReviewerActionResolvers<ContextType>;
  ApplicationReviewerActionsConnection?: ApplicationReviewerActionsConnectionResolvers<ContextType>;
  ApplicationReviewerActionsEdge?: ApplicationReviewerActionsEdgeResolvers<ContextType>;
  ApplicationStageHistoriesConnection?: ApplicationStageHistoriesConnectionResolvers<ContextType>;
  ApplicationStageHistoriesEdge?: ApplicationStageHistoriesEdgeResolvers<ContextType>;
  ApplicationStageHistory?: ApplicationStageHistoryResolvers<ContextType>;
  ApplicationStageStatusAll?: ApplicationStageStatusAllResolvers<ContextType>;
  ApplicationStageStatusAllsConnection?: ApplicationStageStatusAllsConnectionResolvers<ContextType>;
  ApplicationStageStatusAllsEdge?: ApplicationStageStatusAllsEdgeResolvers<ContextType>;
  ApplicationStageStatusLatest?: ApplicationStageStatusLatestResolvers<ContextType>;
  ApplicationStageStatusLatestsConnection?: ApplicationStageStatusLatestsConnectionResolvers<ContextType>;
  ApplicationStageStatusLatestsEdge?: ApplicationStageStatusLatestsEdgeResolvers<ContextType>;
  ApplicationStatusHistoriesConnection?: ApplicationStatusHistoriesConnectionResolvers<ContextType>;
  ApplicationStatusHistoriesEdge?: ApplicationStatusHistoriesEdgeResolvers<ContextType>;
  ApplicationStatusHistory?: ApplicationStatusHistoryResolvers<ContextType>;
  ApplicationsConnection?: ApplicationsConnectionResolvers<ContextType>;
  ApplicationsEdge?: ApplicationsEdgeResolvers<ContextType>;
  AssignedQuestionEdge?: AssignedQuestionEdgeResolvers<ContextType>;
  AssignedQuestionsConnection?: AssignedQuestionsConnectionResolvers<ContextType>;
  AssignedQuestionsRecord?: AssignedQuestionsRecordResolvers<ContextType>;
  AssignedSectionsByStageAndLevel?: AssignedSectionsByStageAndLevelResolvers<ContextType>;
  AssignedSectionsByStageAndLevelsConnection?: AssignedSectionsByStageAndLevelsConnectionResolvers<ContextType>;
  AssignedSectionsByStageAndLevelsEdge?: AssignedSectionsByStageAndLevelsEdgeResolvers<ContextType>;
  AssignerListConnection?: AssignerListConnectionResolvers<ContextType>;
  AssignerListEdge?: AssignerListEdgeResolvers<ContextType>;
  AssignerListRecord?: AssignerListRecordResolvers<ContextType>;
  AssignmentListConnection?: AssignmentListConnectionResolvers<ContextType>;
  AssignmentListEdge?: AssignmentListEdgeResolvers<ContextType>;
  AssignmentListRecord?: AssignmentListRecordResolvers<ContextType>;
  BigInt?: GraphQLScalarType;
  CharacterData?: GraphQLScalarType;
  ConstraintsInfo?: ConstraintsInfoResolvers<ContextType>;
  ConstraintsInfosConnection?: ConstraintsInfosConnectionResolvers<ContextType>;
  ConstraintsInfosEdge?: ConstraintsInfosEdgeResolvers<ContextType>;
  Counter?: CounterResolvers<ContextType>;
  CountersConnection?: CountersConnectionResolvers<ContextType>;
  CountersEdge?: CountersEdgeResolvers<ContextType>;
  CreateActionPluginPayload?: CreateActionPluginPayloadResolvers<ContextType>;
  CreateActionQueuePayload?: CreateActionQueuePayloadResolvers<ContextType>;
  CreateActivityLogPayload?: CreateActivityLogPayloadResolvers<ContextType>;
  CreateAllowedSelfAssignableSectionsShapePayload?: CreateAllowedSelfAssignableSectionsShapePayloadResolvers<ContextType>;
  CreateApplicationListShapePayload?: CreateApplicationListShapePayloadResolvers<ContextType>;
  CreateApplicationNotePayload?: CreateApplicationNotePayloadResolvers<ContextType>;
  CreateApplicationPayload?: CreateApplicationPayloadResolvers<ContextType>;
  CreateApplicationResponsePayload?: CreateApplicationResponsePayloadResolvers<ContextType>;
  CreateApplicationReviewerActionPayload?: CreateApplicationReviewerActionPayloadResolvers<ContextType>;
  CreateApplicationStageHistoryPayload?: CreateApplicationStageHistoryPayloadResolvers<ContextType>;
  CreateApplicationStatusHistoryPayload?: CreateApplicationStatusHistoryPayloadResolvers<ContextType>;
  CreateCounterPayload?: CreateCounterPayloadResolvers<ContextType>;
  CreateDataChangelogPayload?: CreateDataChangelogPayloadResolvers<ContextType>;
  CreateDataTablePayload?: CreateDataTablePayloadResolvers<ContextType>;
  CreateDataViewColumnDefinitionPayload?: CreateDataViewColumnDefinitionPayloadResolvers<ContextType>;
  CreateDataViewPayload?: CreateDataViewPayloadResolvers<ContextType>;
  CreateElementTypePluginPayload?: CreateElementTypePluginPayloadResolvers<ContextType>;
  CreateFilePayload?: CreateFilePayloadResolvers<ContextType>;
  CreateFilterPayload?: CreateFilterPayloadResolvers<ContextType>;
  CreateNotificationPayload?: CreateNotificationPayloadResolvers<ContextType>;
  CreateOrganisationPayload?: CreateOrganisationPayloadResolvers<ContextType>;
  CreatePermissionJoinPayload?: CreatePermissionJoinPayloadResolvers<ContextType>;
  CreatePermissionNamePayload?: CreatePermissionNamePayloadResolvers<ContextType>;
  CreatePermissionPolicyPayload?: CreatePermissionPolicyPayloadResolvers<ContextType>;
  CreateReviewAssignmentAssignedSectionsShapePayload?: CreateReviewAssignmentAssignedSectionsShapePayloadResolvers<ContextType>;
  CreateReviewAssignmentAssignerJoinPayload?: CreateReviewAssignmentAssignerJoinPayloadResolvers<ContextType>;
  CreateReviewAssignmentPayload?: CreateReviewAssignmentPayloadResolvers<ContextType>;
  CreateReviewDecisionPayload?: CreateReviewDecisionPayloadResolvers<ContextType>;
  CreateReviewPayload?: CreateReviewPayloadResolvers<ContextType>;
  CreateReviewResponsePayload?: CreateReviewResponsePayloadResolvers<ContextType>;
  CreateReviewStatusHistoryPayload?: CreateReviewStatusHistoryPayloadResolvers<ContextType>;
  CreateSystemInfoPayload?: CreateSystemInfoPayloadResolvers<ContextType>;
  CreateTemplateActionPayload?: CreateTemplateActionPayloadResolvers<ContextType>;
  CreateTemplateCategoryPayload?: CreateTemplateCategoryPayloadResolvers<ContextType>;
  CreateTemplateElementPayload?: CreateTemplateElementPayloadResolvers<ContextType>;
  CreateTemplateFilterJoinPayload?: CreateTemplateFilterJoinPayloadResolvers<ContextType>;
  CreateTemplatePayload?: CreateTemplatePayloadResolvers<ContextType>;
  CreateTemplatePermissionPayload?: CreateTemplatePermissionPayloadResolvers<ContextType>;
  CreateTemplateSectionPayload?: CreateTemplateSectionPayloadResolvers<ContextType>;
  CreateTemplateStagePayload?: CreateTemplateStagePayloadResolvers<ContextType>;
  CreateTemplateStageReviewLevelPayload?: CreateTemplateStageReviewLevelPayloadResolvers<ContextType>;
  CreateTriggerQueuePayload?: CreateTriggerQueuePayloadResolvers<ContextType>;
  CreateTriggerSchedulePayload?: CreateTriggerSchedulePayloadResolvers<ContextType>;
  CreateUserListPayload?: CreateUserListPayloadResolvers<ContextType>;
  CreateUserOrganisationPayload?: CreateUserOrganisationPayloadResolvers<ContextType>;
  CreateUserPayload?: CreateUserPayloadResolvers<ContextType>;
  CreateVerificationPayload?: CreateVerificationPayloadResolvers<ContextType>;
  Cursor?: GraphQLScalarType;
  DataChangelog?: DataChangelogResolvers<ContextType>;
  DataChangelogsConnection?: DataChangelogsConnectionResolvers<ContextType>;
  DataChangelogsEdge?: DataChangelogsEdgeResolvers<ContextType>;
  DataTable?: DataTableResolvers<ContextType>;
  DataTablesConnection?: DataTablesConnectionResolvers<ContextType>;
  DataTablesEdge?: DataTablesEdgeResolvers<ContextType>;
  DataView?: DataViewResolvers<ContextType>;
  DataViewColumnDefinition?: DataViewColumnDefinitionResolvers<ContextType>;
  DataViewColumnDefinitionsConnection?: DataViewColumnDefinitionsConnectionResolvers<ContextType>;
  DataViewColumnDefinitionsEdge?: DataViewColumnDefinitionsEdgeResolvers<ContextType>;
  DataViewsConnection?: DataViewsConnectionResolvers<ContextType>;
  DataViewsEdge?: DataViewsEdgeResolvers<ContextType>;
  Date?: GraphQLScalarType;
  Datetime?: GraphQLScalarType;
  DeleteActionPluginPayload?: DeleteActionPluginPayloadResolvers<ContextType>;
  DeleteActionQueuePayload?: DeleteActionQueuePayloadResolvers<ContextType>;
  DeleteActivityLogPayload?: DeleteActivityLogPayloadResolvers<ContextType>;
  DeleteApplicationNotePayload?: DeleteApplicationNotePayloadResolvers<ContextType>;
  DeleteApplicationPayload?: DeleteApplicationPayloadResolvers<ContextType>;
  DeleteApplicationResponsePayload?: DeleteApplicationResponsePayloadResolvers<ContextType>;
  DeleteApplicationReviewerActionPayload?: DeleteApplicationReviewerActionPayloadResolvers<ContextType>;
  DeleteApplicationStageHistoryPayload?: DeleteApplicationStageHistoryPayloadResolvers<ContextType>;
  DeleteApplicationStatusHistoryPayload?: DeleteApplicationStatusHistoryPayloadResolvers<ContextType>;
  DeleteCounterPayload?: DeleteCounterPayloadResolvers<ContextType>;
  DeleteDataChangelogPayload?: DeleteDataChangelogPayloadResolvers<ContextType>;
  DeleteDataTablePayload?: DeleteDataTablePayloadResolvers<ContextType>;
  DeleteDataViewColumnDefinitionPayload?: DeleteDataViewColumnDefinitionPayloadResolvers<ContextType>;
  DeleteDataViewPayload?: DeleteDataViewPayloadResolvers<ContextType>;
  DeleteElementTypePluginPayload?: DeleteElementTypePluginPayloadResolvers<ContextType>;
  DeleteFilePayload?: DeleteFilePayloadResolvers<ContextType>;
  DeleteFilterPayload?: DeleteFilterPayloadResolvers<ContextType>;
  DeleteNotificationPayload?: DeleteNotificationPayloadResolvers<ContextType>;
  DeleteOrganisationPayload?: DeleteOrganisationPayloadResolvers<ContextType>;
  DeletePermissionJoinPayload?: DeletePermissionJoinPayloadResolvers<ContextType>;
  DeletePermissionNamePayload?: DeletePermissionNamePayloadResolvers<ContextType>;
  DeletePermissionPolicyPayload?: DeletePermissionPolicyPayloadResolvers<ContextType>;
  DeleteReviewAssignmentAssignerJoinPayload?: DeleteReviewAssignmentAssignerJoinPayloadResolvers<ContextType>;
  DeleteReviewAssignmentPayload?: DeleteReviewAssignmentPayloadResolvers<ContextType>;
  DeleteReviewDecisionPayload?: DeleteReviewDecisionPayloadResolvers<ContextType>;
  DeleteReviewPayload?: DeleteReviewPayloadResolvers<ContextType>;
  DeleteReviewResponsePayload?: DeleteReviewResponsePayloadResolvers<ContextType>;
  DeleteReviewStatusHistoryPayload?: DeleteReviewStatusHistoryPayloadResolvers<ContextType>;
  DeleteSystemInfoPayload?: DeleteSystemInfoPayloadResolvers<ContextType>;
  DeleteTemplateActionPayload?: DeleteTemplateActionPayloadResolvers<ContextType>;
  DeleteTemplateCategoryPayload?: DeleteTemplateCategoryPayloadResolvers<ContextType>;
  DeleteTemplateElementPayload?: DeleteTemplateElementPayloadResolvers<ContextType>;
  DeleteTemplateFilterJoinPayload?: DeleteTemplateFilterJoinPayloadResolvers<ContextType>;
  DeleteTemplatePayload?: DeleteTemplatePayloadResolvers<ContextType>;
  DeleteTemplatePermissionPayload?: DeleteTemplatePermissionPayloadResolvers<ContextType>;
  DeleteTemplateSectionPayload?: DeleteTemplateSectionPayloadResolvers<ContextType>;
  DeleteTemplateStagePayload?: DeleteTemplateStagePayloadResolvers<ContextType>;
  DeleteTemplateStageReviewLevelPayload?: DeleteTemplateStageReviewLevelPayloadResolvers<ContextType>;
  DeleteTriggerQueuePayload?: DeleteTriggerQueuePayloadResolvers<ContextType>;
  DeleteTriggerSchedulePayload?: DeleteTriggerSchedulePayloadResolvers<ContextType>;
  DeleteUserOrganisationPayload?: DeleteUserOrganisationPayloadResolvers<ContextType>;
  DeleteVerificationPayload?: DeleteVerificationPayloadResolvers<ContextType>;
  DeleteWholeApplicationPayload?: DeleteWholeApplicationPayloadResolvers<ContextType>;
  ElementTypePlugin?: ElementTypePluginResolvers<ContextType>;
  ElementTypePluginsConnection?: ElementTypePluginsConnectionResolvers<ContextType>;
  ElementTypePluginsEdge?: ElementTypePluginsEdgeResolvers<ContextType>;
  File?: FileResolvers<ContextType>;
  FilesConnection?: FilesConnectionResolvers<ContextType>;
  FilesEdge?: FilesEdgeResolvers<ContextType>;
  Filter?: FilterResolvers<ContextType>;
  FiltersConnection?: FiltersConnectionResolvers<ContextType>;
  FiltersEdge?: FiltersEdgeResolvers<ContextType>;
  JSON?: GraphQLScalarType;
  Mutation?: MutationResolvers<ContextType>;
  Node?: NodeResolvers<ContextType>;
  Notification?: NotificationResolvers<ContextType>;
  NotificationsConnection?: NotificationsConnectionResolvers<ContextType>;
  NotificationsEdge?: NotificationsEdgeResolvers<ContextType>;
  Organisation?: OrganisationResolvers<ContextType>;
  OrganisationsConnection?: OrganisationsConnectionResolvers<ContextType>;
  OrganisationsEdge?: OrganisationsEdgeResolvers<ContextType>;
  PageInfo?: PageInfoResolvers<ContextType>;
  PermissionFlattened?: PermissionFlattenedResolvers<ContextType>;
  PermissionFlattenedsConnection?: PermissionFlattenedsConnectionResolvers<ContextType>;
  PermissionFlattenedsEdge?: PermissionFlattenedsEdgeResolvers<ContextType>;
  PermissionJoin?: PermissionJoinResolvers<ContextType>;
  PermissionJoinsConnection?: PermissionJoinsConnectionResolvers<ContextType>;
  PermissionJoinsEdge?: PermissionJoinsEdgeResolvers<ContextType>;
  PermissionName?: PermissionNameResolvers<ContextType>;
  PermissionNamesConnection?: PermissionNamesConnectionResolvers<ContextType>;
  PermissionNamesEdge?: PermissionNamesEdgeResolvers<ContextType>;
  PermissionPoliciesConnection?: PermissionPoliciesConnectionResolvers<ContextType>;
  PermissionPoliciesEdge?: PermissionPoliciesEdgeResolvers<ContextType>;
  PermissionPolicy?: PermissionPolicyResolvers<ContextType>;
  PermissionsAll?: PermissionsAllResolvers<ContextType>;
  PermissionsAllsConnection?: PermissionsAllsConnectionResolvers<ContextType>;
  PermissionsAllsEdge?: PermissionsAllsEdgeResolvers<ContextType>;
  PostgresRowLevel?: PostgresRowLevelResolvers<ContextType>;
  PostgresRowLevelsConnection?: PostgresRowLevelsConnectionResolvers<ContextType>;
  PostgresRowLevelsEdge?: PostgresRowLevelsEdgeResolvers<ContextType>;
  Query?: QueryResolvers<ContextType>;
  Review?: ReviewResolvers<ContextType>;
  ReviewAssignment?: ReviewAssignmentResolvers<ContextType>;
  ReviewAssignmentAssignedSectionsShape?: ReviewAssignmentAssignedSectionsShapeResolvers<ContextType>;
  ReviewAssignmentAssignedSectionsShapesConnection?: ReviewAssignmentAssignedSectionsShapesConnectionResolvers<ContextType>;
  ReviewAssignmentAssignedSectionsShapesEdge?: ReviewAssignmentAssignedSectionsShapesEdgeResolvers<ContextType>;
  ReviewAssignmentAssignerJoin?: ReviewAssignmentAssignerJoinResolvers<ContextType>;
  ReviewAssignmentAssignerJoinsConnection?: ReviewAssignmentAssignerJoinsConnectionResolvers<ContextType>;
  ReviewAssignmentAssignerJoinsEdge?: ReviewAssignmentAssignerJoinsEdgeResolvers<ContextType>;
  ReviewAssignmentsConnection?: ReviewAssignmentsConnectionResolvers<ContextType>;
  ReviewAssignmentsEdge?: ReviewAssignmentsEdgeResolvers<ContextType>;
  ReviewDecision?: ReviewDecisionResolvers<ContextType>;
  ReviewDecisionsConnection?: ReviewDecisionsConnectionResolvers<ContextType>;
  ReviewDecisionsEdge?: ReviewDecisionsEdgeResolvers<ContextType>;
  ReviewListConnection?: ReviewListConnectionResolvers<ContextType>;
  ReviewListEdge?: ReviewListEdgeResolvers<ContextType>;
  ReviewListRecord?: ReviewListRecordResolvers<ContextType>;
  ReviewResponse?: ReviewResponseResolvers<ContextType>;
  ReviewResponsesConnection?: ReviewResponsesConnectionResolvers<ContextType>;
  ReviewResponsesEdge?: ReviewResponsesEdgeResolvers<ContextType>;
  ReviewStatusHistoriesConnection?: ReviewStatusHistoriesConnectionResolvers<ContextType>;
  ReviewStatusHistoriesEdge?: ReviewStatusHistoriesEdgeResolvers<ContextType>;
  ReviewStatusHistory?: ReviewStatusHistoryResolvers<ContextType>;
  ReviewableQuestionEdge?: ReviewableQuestionEdgeResolvers<ContextType>;
  ReviewableQuestionsConnection?: ReviewableQuestionsConnectionResolvers<ContextType>;
  ReviewableQuestionsRecord?: ReviewableQuestionsRecordResolvers<ContextType>;
  ReviewsConnection?: ReviewsConnectionResolvers<ContextType>;
  ReviewsEdge?: ReviewsEdgeResolvers<ContextType>;
  SchemaColumn?: SchemaColumnResolvers<ContextType>;
  SchemaColumnsConnection?: SchemaColumnsConnectionResolvers<ContextType>;
  SchemaColumnsEdge?: SchemaColumnsEdgeResolvers<ContextType>;
  SingleApplicationDetailConnection?: SingleApplicationDetailConnectionResolvers<ContextType>;
  SingleApplicationDetailEdge?: SingleApplicationDetailEdgeResolvers<ContextType>;
  SingleApplicationDetailRecord?: SingleApplicationDetailRecordResolvers<ContextType>;
  SqlIdentifier?: GraphQLScalarType;
  SystemInfo?: SystemInfoResolvers<ContextType>;
  SystemInfosConnection?: SystemInfosConnectionResolvers<ContextType>;
  SystemInfosEdge?: SystemInfosEdgeResolvers<ContextType>;
  Template?: TemplateResolvers<ContextType>;
  TemplateAction?: TemplateActionResolvers<ContextType>;
  TemplateActionsConnection?: TemplateActionsConnectionResolvers<ContextType>;
  TemplateActionsEdge?: TemplateActionsEdgeResolvers<ContextType>;
  TemplateCategoriesConnection?: TemplateCategoriesConnectionResolvers<ContextType>;
  TemplateCategoriesEdge?: TemplateCategoriesEdgeResolvers<ContextType>;
  TemplateCategory?: TemplateCategoryResolvers<ContextType>;
  TemplateElement?: TemplateElementResolvers<ContextType>;
  TemplateElementsConnection?: TemplateElementsConnectionResolvers<ContextType>;
  TemplateElementsEdge?: TemplateElementsEdgeResolvers<ContextType>;
  TemplateFilterJoin?: TemplateFilterJoinResolvers<ContextType>;
  TemplateFilterJoinsConnection?: TemplateFilterJoinsConnectionResolvers<ContextType>;
  TemplateFilterJoinsEdge?: TemplateFilterJoinsEdgeResolvers<ContextType>;
  TemplatePermission?: TemplatePermissionResolvers<ContextType>;
  TemplatePermissionsConnection?: TemplatePermissionsConnectionResolvers<ContextType>;
  TemplatePermissionsEdge?: TemplatePermissionsEdgeResolvers<ContextType>;
  TemplateSection?: TemplateSectionResolvers<ContextType>;
  TemplateSectionsConnection?: TemplateSectionsConnectionResolvers<ContextType>;
  TemplateSectionsEdge?: TemplateSectionsEdgeResolvers<ContextType>;
  TemplateStage?: TemplateStageResolvers<ContextType>;
  TemplateStageReviewLevel?: TemplateStageReviewLevelResolvers<ContextType>;
  TemplateStageReviewLevelsConnection?: TemplateStageReviewLevelsConnectionResolvers<ContextType>;
  TemplateStageReviewLevelsEdge?: TemplateStageReviewLevelsEdgeResolvers<ContextType>;
  TemplateStagesConnection?: TemplateStagesConnectionResolvers<ContextType>;
  TemplateStagesEdge?: TemplateStagesEdgeResolvers<ContextType>;
  TemplatesConnection?: TemplatesConnectionResolvers<ContextType>;
  TemplatesEdge?: TemplatesEdgeResolvers<ContextType>;
  TriggerQueue?: TriggerQueueResolvers<ContextType>;
  TriggerQueuesConnection?: TriggerQueuesConnectionResolvers<ContextType>;
  TriggerQueuesEdge?: TriggerQueuesEdgeResolvers<ContextType>;
  TriggerSchedule?: TriggerScheduleResolvers<ContextType>;
  TriggerSchedulesConnection?: TriggerSchedulesConnectionResolvers<ContextType>;
  TriggerSchedulesEdge?: TriggerSchedulesEdgeResolvers<ContextType>;
  UnnestedSection?: UnnestedSectionResolvers<ContextType>;
  UnnestedSectionsConnection?: UnnestedSectionsConnectionResolvers<ContextType>;
  UnnestedSectionsEdge?: UnnestedSectionsEdgeResolvers<ContextType>;
  UpdateActionPluginPayload?: UpdateActionPluginPayloadResolvers<ContextType>;
  UpdateActionQueuePayload?: UpdateActionQueuePayloadResolvers<ContextType>;
  UpdateActivityLogPayload?: UpdateActivityLogPayloadResolvers<ContextType>;
  UpdateApplicationNotePayload?: UpdateApplicationNotePayloadResolvers<ContextType>;
  UpdateApplicationPayload?: UpdateApplicationPayloadResolvers<ContextType>;
  UpdateApplicationResponsePayload?: UpdateApplicationResponsePayloadResolvers<ContextType>;
  UpdateApplicationReviewerActionPayload?: UpdateApplicationReviewerActionPayloadResolvers<ContextType>;
  UpdateApplicationStageHistoryPayload?: UpdateApplicationStageHistoryPayloadResolvers<ContextType>;
  UpdateApplicationStatusHistoryPayload?: UpdateApplicationStatusHistoryPayloadResolvers<ContextType>;
  UpdateCounterPayload?: UpdateCounterPayloadResolvers<ContextType>;
  UpdateDataChangelogPayload?: UpdateDataChangelogPayloadResolvers<ContextType>;
  UpdateDataTablePayload?: UpdateDataTablePayloadResolvers<ContextType>;
  UpdateDataViewColumnDefinitionPayload?: UpdateDataViewColumnDefinitionPayloadResolvers<ContextType>;
  UpdateDataViewPayload?: UpdateDataViewPayloadResolvers<ContextType>;
  UpdateElementTypePluginPayload?: UpdateElementTypePluginPayloadResolvers<ContextType>;
  UpdateFilePayload?: UpdateFilePayloadResolvers<ContextType>;
  UpdateFilterPayload?: UpdateFilterPayloadResolvers<ContextType>;
  UpdateNotificationPayload?: UpdateNotificationPayloadResolvers<ContextType>;
  UpdateOrganisationPayload?: UpdateOrganisationPayloadResolvers<ContextType>;
  UpdatePermissionJoinPayload?: UpdatePermissionJoinPayloadResolvers<ContextType>;
  UpdatePermissionNamePayload?: UpdatePermissionNamePayloadResolvers<ContextType>;
  UpdatePermissionPolicyPayload?: UpdatePermissionPolicyPayloadResolvers<ContextType>;
  UpdateReviewAssignmentAssignerJoinPayload?: UpdateReviewAssignmentAssignerJoinPayloadResolvers<ContextType>;
  UpdateReviewAssignmentPayload?: UpdateReviewAssignmentPayloadResolvers<ContextType>;
  UpdateReviewDecisionPayload?: UpdateReviewDecisionPayloadResolvers<ContextType>;
  UpdateReviewPayload?: UpdateReviewPayloadResolvers<ContextType>;
  UpdateReviewResponsePayload?: UpdateReviewResponsePayloadResolvers<ContextType>;
  UpdateReviewStatusHistoryPayload?: UpdateReviewStatusHistoryPayloadResolvers<ContextType>;
  UpdateSystemInfoPayload?: UpdateSystemInfoPayloadResolvers<ContextType>;
  UpdateTemplateActionPayload?: UpdateTemplateActionPayloadResolvers<ContextType>;
  UpdateTemplateCategoryPayload?: UpdateTemplateCategoryPayloadResolvers<ContextType>;
  UpdateTemplateElementPayload?: UpdateTemplateElementPayloadResolvers<ContextType>;
  UpdateTemplateFilterJoinPayload?: UpdateTemplateFilterJoinPayloadResolvers<ContextType>;
  UpdateTemplatePayload?: UpdateTemplatePayloadResolvers<ContextType>;
  UpdateTemplatePermissionPayload?: UpdateTemplatePermissionPayloadResolvers<ContextType>;
  UpdateTemplateSectionPayload?: UpdateTemplateSectionPayloadResolvers<ContextType>;
  UpdateTemplateStagePayload?: UpdateTemplateStagePayloadResolvers<ContextType>;
  UpdateTemplateStageReviewLevelPayload?: UpdateTemplateStageReviewLevelPayloadResolvers<ContextType>;
  UpdateTriggerQueuePayload?: UpdateTriggerQueuePayloadResolvers<ContextType>;
  UpdateTriggerSchedulePayload?: UpdateTriggerSchedulePayloadResolvers<ContextType>;
  UpdateUserOrganisationPayload?: UpdateUserOrganisationPayloadResolvers<ContextType>;
  UpdateVerificationPayload?: UpdateVerificationPayloadResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
  UserList?: UserListResolvers<ContextType>;
  UserListsConnection?: UserListsConnectionResolvers<ContextType>;
  UserListsEdge?: UserListsEdgeResolvers<ContextType>;
  UserOrgJoin?: UserOrgJoinResolvers<ContextType>;
  UserOrgJoinsConnection?: UserOrgJoinsConnectionResolvers<ContextType>;
  UserOrgJoinsEdge?: UserOrgJoinsEdgeResolvers<ContextType>;
  UserOrganisation?: UserOrganisationResolvers<ContextType>;
  UserOrganisationsConnection?: UserOrganisationsConnectionResolvers<ContextType>;
  UserOrganisationsEdge?: UserOrganisationsEdgeResolvers<ContextType>;
  UsersConnection?: UsersConnectionResolvers<ContextType>;
  UsersEdge?: UsersEdgeResolvers<ContextType>;
  Verification?: VerificationResolvers<ContextType>;
  VerificationsConnection?: VerificationsConnectionResolvers<ContextType>;
  VerificationsEdge?: VerificationsEdgeResolvers<ContextType>;
  YesOrNo?: GraphQLScalarType;
};

