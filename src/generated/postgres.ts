/* tslint:disable */
/* eslint-disable */


/**
 * AUTO-GENERATED FILE - DO NOT EDIT!
 *
 * This file was automatically generated by pg-to-ts v.4.1.1
 * $ pg-to-ts generate -c postgresql://username:password@localhost:5432/tmf_app_manager -t action_plugin -t action_queue -t activity_log -t allowed_self_assignable_sections_shape -t application -t application_list_shape -t application_note -t application_response -t application_reviewer_action -t application_stage_history -t application_stage_status_all -t application_stage_status_latest -t application_status_history -t assigned_sections_by_stage_and_level -t constraints_info -t counter -t data_changelog -t data_table -t data_table_active_ingredient -t data_table_administration_route -t data_table_adverse_drug_reaction -t data_table_adverse_drug_reaction_application_join -t data_table_atc_code -t data_table_country -t data_table_dosage_form -t data_table_ethnicity -t data_table_license -t data_table_license_application_join -t data_table_manufacturer -t data_table_permit_medical -t data_table_permit_medical_application_join -t data_table_pre_registered_products_provisional -t data_table_primary_container -t data_table_product -t data_table_product_application_join -t data_table_provisional_product -t data_table_provisional_product_application_join -t data_table_scheduled_chemical -t data_table_storage_conditions_simplified -t data_table_units_of_proportion -t data_table_world_health_organisation_pq_list_of_fpp -t data_view -t data_view_column_definition -t element_type_plugin -t file -t filter -t notification -t organisation -t organisation_application_join -t permission_flattened -t permission_join -t permission_name -t permission_policy -t permissions_all -t postgres_row_level -t review -t review_assignment -t review_assignment_assigned_sections_shape -t review_assignment_assigner_join -t review_decision -t review_response -t review_status_history -t schema_columns -t system_info -t template -t template_action -t template_category -t template_data_view_join -t template_element -t template_filter_join -t template_permission -t template_section -t template_stage -t template_stage_review_level -t trigger_queue -t trigger_schedule -t unnested_sections -t user -t user_application_join -t user_list -t user_list_admin -t user_org_join -t user_organisation -t verification -s public
 *
 */


export type Json = unknown;
export type action_queue_status = 'CONDITION_NOT_MET' | 'FAIL' | 'PROCESSING' | 'QUEUED' | 'SUCCESS';
export type application_outcome = 'APPROVED' | 'EXPIRED' | 'PENDING' | 'REJECTED' | 'WITHDRAWN';
export type application_response_status = 'DRAFT' | 'SUBMITTED';
export type application_status = 'CHANGES_REQUIRED' | 'COMPLETED' | 'DRAFT' | 'RE_SUBMITTED' | 'SUBMITTED';
export type assigner_action = 'ASSIGN' | 'RE_ASSIGN';
export type changelog_type = 'CREATE' | 'DELETE' | 'UPDATE';
export type decision = 'CHANGES_REQUESTED' | 'CONFORM' | 'LIST_OF_QUESTIONS' | 'NON_CONFORM' | 'NO_DECISION';
export type event_type = 'ASSIGNMENT' | 'EXTENSION' | 'OUTCOME' | 'PERMISSION' | 'REVIEW' | 'REVIEW_DECISION' | 'STAGE' | 'STATUS';
export type permission_policy_type = 'APPLY' | 'ASSIGN' | 'REVIEW' | 'VIEW';
export type review_assignment_status = 'ASSIGNED' | 'AVAILABLE';
export type review_response_decision = 'AGREE' | 'APPROVE' | 'DECLINE' | 'DISAGREE';
export type review_response_recommended_applicant_visibility = 'ORIGINAL_RESPONSE_NOT_VISIBLE_TO_APPLICANT' | 'ORIGINAL_RESPONSE_VISIBLE_TO_APPLICANT';
export type review_response_status = 'DRAFT' | 'SUBMITTED';
export type review_status = 'CHANGES_REQUESTED' | 'DISCONTINUED' | 'DRAFT' | 'PENDING' | 'SUBMITTED';
export type reviewability = 'ALWAYS' | 'NEVER' | 'ONLY_IF_APPLICANT_ANSWER' | 'OPTIONAL_IF_NO_RESPONSE';
export type reviewer_action = 'AWAITING_RESPONSE' | 'CONTINUE_REVIEW' | 'MAKE_DECISION' | 'RESTART_REVIEW' | 'SELF_ASSIGN' | 'START_REVIEW' | 'UPDATE_REVIEW' | 'VIEW_REVIEW';
export type template_element_category = 'INFORMATION' | 'QUESTION';
export type template_status = 'AVAILABLE' | 'DISABLED' | 'DRAFT';
export type trigger = 'DEV_TEST' | 'ERROR' | 'ON_APPLICATION_CREATE' | 'ON_APPLICATION_RESTART' | 'ON_APPLICATION_SAVE' | 'ON_APPLICATION_SUBMIT' | 'ON_APPLICATION_WITHDRAW' | 'ON_APPROVAL_SUBMIT' | 'ON_EXTEND' | 'ON_PREVIEW' | 'ON_REVIEW_ASSIGN' | 'ON_REVIEW_CREATE' | 'ON_REVIEW_RESTART' | 'ON_REVIEW_SUBMIT' | 'ON_REVIEW_UNASSIGN' | 'ON_SCHEDULE' | 'ON_VERIFICATION' | 'PROCESSING';
export type trigger_queue_status = 'ACTIONS_DISPATCHED' | 'COMPLETED' | 'ERROR' | 'TRIGGERED';
export type ui_location = 'ADMIN' | 'DASHBOARD' | 'LIST' | 'MANAGEMENT' | 'USER';

// Table action_plugin
export interface ActionPlugin {
  id: number;
  code: string | null;
  name: string | null;
  description: string | null;
  path: string | null;
  required_parameters: string[] | null;
  optional_parameters: string[] | null;
  output_properties: string[] | null;
}
export interface ActionPluginInput {
  id?: number;
  code?: string | null;
  name?: string | null;
  description?: string | null;
  path?: string | null;
  required_parameters?: string[] | null;
  optional_parameters?: string[] | null;
  output_properties?: string[] | null;
}
const action_plugin = {
  tableName: 'action_plugin',
  columns: ['id', 'code', 'name', 'description', 'path', 'required_parameters', 'optional_parameters', 'output_properties'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as ActionPlugin,
  $input: null as unknown as ActionPluginInput
} as const;

// Table action_queue
export interface ActionQueue {
  id: number;
  trigger_event: number | null;
  trigger_payload: Json | null;
  template_id: number | null;
  sequence: number | null;
  action_code: string | null;
  condition_expression: Json | null;
  parameter_queries: Json | null;
  parameters_evaluated: Json | null;
  status: action_queue_status | null;
  output: Json | null;
  time_queued: Date | null;
  time_completed: Date | null;
  error_log: string | null;
  application_id: number | null;
}
export interface ActionQueueInput {
  id?: number;
  trigger_event?: number | null;
  trigger_payload?: Json | null;
  template_id?: number | null;
  sequence?: number | null;
  action_code?: string | null;
  condition_expression?: Json | null;
  parameter_queries?: Json | null;
  parameters_evaluated?: Json | null;
  status?: action_queue_status | null;
  output?: Json | null;
  time_queued?: Date | null;
  time_completed?: Date | null;
  error_log?: string | null;
  application_id?: number | null;
}
const action_queue = {
  tableName: 'action_queue',
  columns: ['id', 'trigger_event', 'trigger_payload', 'template_id', 'sequence', 'action_code', 'condition_expression', 'parameter_queries', 'parameters_evaluated', 'status', 'output', 'time_queued', 'time_completed', 'error_log', 'application_id'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {
    trigger_event: { table: 'trigger_queue', column: 'id', $type: null as unknown as TriggerQueue },
    template_id: { table: 'template', column: 'id', $type: null as unknown as Template },
    application_id: { table: 'application', column: 'id', $type: null as unknown as Application },
  },
  $type: null as unknown as ActionQueue,
  $input: null as unknown as ActionQueueInput
} as const;

// Table activity_log
export interface ActivityLog {
  id: number;
  type: event_type;
  value: string;
  timestamp: Date;
  application_id: number | null;
  table: string;
  record_id: number | null;
  details: Json;
}
export interface ActivityLogInput {
  id?: number;
  type: event_type;
  value: string;
  timestamp?: Date;
  application_id?: number | null;
  table: string;
  record_id?: number | null;
  details?: Json;
}
const activity_log = {
  tableName: 'activity_log',
  columns: ['id', 'type', 'value', 'timestamp', 'application_id', 'table', 'record_id', 'details'],
  requiredForInsert: ['type', 'value', 'table'],
  primaryKey: 'id',
  foreignKeys: { application_id: { table: 'application', column: 'id', $type: null as unknown as Application }, },
  $type: null as unknown as ActivityLog,
  $input: null as unknown as ActivityLogInput
} as const;

// Table allowed_self_assignable_sections_shape
export interface AllowedSelfAssignableSectionsShape {
  review_assignment_id: number | null;
  allowed_sections: string[] | null;
}
export interface AllowedSelfAssignableSectionsShapeInput {
  review_assignment_id?: number | null;
  allowed_sections?: string[] | null;
}
const allowed_self_assignable_sections_shape = {
  tableName: 'allowed_self_assignable_sections_shape',
  columns: ['review_assignment_id', 'allowed_sections'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: {},
  $type: null as unknown as AllowedSelfAssignableSectionsShape,
  $input: null as unknown as AllowedSelfAssignableSectionsShapeInput
} as const;

// Table application
export interface Application {
  id: number;
  template_id: number;
  user_id: number | null;
  org_id: number | null;
  session_id: string | null;
  serial: string | null;
  name: string | null;
  outcome: application_outcome | null;
  is_active: boolean | null;
  is_config: boolean | null;
  trigger: trigger | null;
  outcome_registration: string | null;
  reviewer_list: string[] | null;
  assigner_list: string[] | null;
}
export interface ApplicationInput {
  id?: number;
  template_id: number;
  user_id?: number | null;
  org_id?: number | null;
  session_id?: string | null;
  serial?: string | null;
  name?: string | null;
  outcome?: application_outcome | null;
  is_active?: boolean | null;
  is_config?: boolean | null;
  trigger?: trigger | null;
  outcome_registration?: string | null;
  reviewer_list?: string[] | null;
  assigner_list?: string[] | null;
}
const application = {
  tableName: 'application',
  columns: ['id', 'template_id', 'user_id', 'org_id', 'session_id', 'serial', 'name', 'outcome', 'is_active', 'is_config', 'trigger', 'outcome_registration', 'reviewer_list', 'assigner_list'],
  requiredForInsert: ['template_id'],
  primaryKey: 'id',
  foreignKeys: {
    template_id: { table: 'template', column: 'id', $type: null as unknown as Template },
    user_id: { table: 'user', column: 'id', $type: null as unknown as User },
    org_id: { table: 'organisation', column: 'id', $type: null as unknown as Organisation },
  },
  $type: null as unknown as Application,
  $input: null as unknown as ApplicationInput
} as const;

// Table application_list_shape
export interface ApplicationListShape {
  id: number | null;
  serial: string | null;
  name: string | null;
  template_code: string | null;
  template_name: string | null;
  applicant: string | null;
  org_name: string | null;
  stage: string | null;
  stage_colour: string | null;
  status: application_status | null;
  outcome: application_outcome | null;
  last_active_date: Date | null;
  applicant_deadline: Date | null;
  reviewers: string[] | null;
  assigners: string[] | null;
  reviewer_action: reviewer_action | null;
  assigner_action: assigner_action | null;
}
export interface ApplicationListShapeInput {
  id?: number | null;
  serial?: string | null;
  name?: string | null;
  template_code?: string | null;
  template_name?: string | null;
  applicant?: string | null;
  org_name?: string | null;
  stage?: string | null;
  stage_colour?: string | null;
  status?: application_status | null;
  outcome?: application_outcome | null;
  last_active_date?: Date | null;
  applicant_deadline?: Date | null;
  reviewers?: string[] | null;
  assigners?: string[] | null;
  reviewer_action?: reviewer_action | null;
  assigner_action?: assigner_action | null;
}
const application_list_shape = {
  tableName: 'application_list_shape',
  columns: ['id', 'serial', 'name', 'template_code', 'template_name', 'applicant', 'org_name', 'stage', 'stage_colour', 'status', 'outcome', 'last_active_date', 'applicant_deadline', 'reviewers', 'assigners', 'reviewer_action', 'assigner_action'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: {},
  $type: null as unknown as ApplicationListShape,
  $input: null as unknown as ApplicationListShapeInput
} as const;

// Table application_note
export interface ApplicationNote {
  id: number;
  application_id: number;
  user_id: number;
  org_id: number;
  timestamp: Date | null;
  comment: string;
}
export interface ApplicationNoteInput {
  id?: number;
  application_id: number;
  user_id: number;
  org_id: number;
  timestamp?: Date | null;
  comment: string;
}
const application_note = {
  tableName: 'application_note',
  columns: ['id', 'application_id', 'user_id', 'org_id', 'timestamp', 'comment'],
  requiredForInsert: ['application_id', 'user_id', 'org_id', 'comment'],
  primaryKey: 'id',
  foreignKeys: {
    application_id: { table: 'application', column: 'id', $type: null as unknown as Application },
    user_id: { table: 'user', column: 'id', $type: null as unknown as User },
    org_id: { table: 'organisation', column: 'id', $type: null as unknown as Organisation },
  },
  $type: null as unknown as ApplicationNote,
  $input: null as unknown as ApplicationNoteInput
} as const;

// Table application_response
export interface ApplicationResponse {
  id: number;
  template_element_id: number;
  application_id: number;
  stage_number: number | null;
  status: application_response_status | null;
  value: Json | null;
  is_valid: boolean | null;
  time_created: Date | null;
  time_updated: Date | null;
  time_submitted: Date | null;
  evaluated_parameters: Json | null;
}
export interface ApplicationResponseInput {
  id?: number;
  template_element_id: number;
  application_id: number;
  stage_number?: number | null;
  status?: application_response_status | null;
  value?: Json | null;
  is_valid?: boolean | null;
  time_created?: Date | null;
  time_updated?: Date | null;
  time_submitted?: Date | null;
  evaluated_parameters?: Json | null;
}
const application_response = {
  tableName: 'application_response',
  columns: ['id', 'template_element_id', 'application_id', 'stage_number', 'status', 'value', 'is_valid', 'time_created', 'time_updated', 'time_submitted', 'evaluated_parameters'],
  requiredForInsert: ['template_element_id', 'application_id'],
  primaryKey: 'id',
  foreignKeys: {
    template_element_id: { table: 'template_element', column: 'id', $type: null as unknown as TemplateElement },
    application_id: { table: 'application', column: 'id', $type: null as unknown as Application },
  },
  $type: null as unknown as ApplicationResponse,
  $input: null as unknown as ApplicationResponseInput
} as const;

// Table application_reviewer_action
export interface ApplicationReviewerAction {
  id: number;
  user_id: number;
  application_id: number;
  reviewer_action: reviewer_action | null;
  assigner_action: assigner_action | null;
}
export interface ApplicationReviewerActionInput {
  id?: number;
  user_id: number;
  application_id: number;
  reviewer_action?: reviewer_action | null;
  assigner_action?: assigner_action | null;
}
const application_reviewer_action = {
  tableName: 'application_reviewer_action',
  columns: ['id', 'user_id', 'application_id', 'reviewer_action', 'assigner_action'],
  requiredForInsert: ['user_id', 'application_id'],
  primaryKey: 'id',
  foreignKeys: {
    user_id: { table: 'user', column: 'id', $type: null as unknown as User },
    application_id: { table: 'application', column: 'id', $type: null as unknown as Application },
  },
  $type: null as unknown as ApplicationReviewerAction,
  $input: null as unknown as ApplicationReviewerActionInput
} as const;

// Table application_stage_history
export interface ApplicationStageHistory {
  id: number;
  application_id: number;
  stage_id: number;
  time_created: Date | null;
  is_current: boolean | null;
}
export interface ApplicationStageHistoryInput {
  id?: number;
  application_id: number;
  stage_id: number;
  time_created?: Date | null;
  is_current?: boolean | null;
}
const application_stage_history = {
  tableName: 'application_stage_history',
  columns: ['id', 'application_id', 'stage_id', 'time_created', 'is_current'],
  requiredForInsert: ['application_id', 'stage_id'],
  primaryKey: 'id',
  foreignKeys: {
    application_id: { table: 'application', column: 'id', $type: null as unknown as Application },
    stage_id: { table: 'template_stage', column: 'id', $type: null as unknown as TemplateStage },
  },
  $type: null as unknown as ApplicationStageHistory,
  $input: null as unknown as ApplicationStageHistoryInput
} as const;

// Table application_stage_status_all
export interface ApplicationStageStatusAll {
  application_id: number | null;
  template_id: number | null;
  template_name: string | null;
  template_code: string | null;
  serial: string | null;
  name: string | null;
  session_id: string | null;
  user_id: number | null;
  org_id: number | null;
  stage_id: number | null;
  stage_number: number | null;
  stage: string | null;
  stage_colour: string | null;
  stage_history_id: number | null;
  stage_history_time_created: Date | null;
  stage_is_current: boolean | null;
  status_history_id: number | null;
  status: application_status | null;
  status_history_time_created: Date | null;
  status_is_current: boolean | null;
  outcome: application_outcome | null;
}
export interface ApplicationStageStatusAllInput {
  application_id?: number | null;
  template_id?: number | null;
  template_name?: string | null;
  template_code?: string | null;
  serial?: string | null;
  name?: string | null;
  session_id?: string | null;
  user_id?: number | null;
  org_id?: number | null;
  stage_id?: number | null;
  stage_number?: number | null;
  stage?: string | null;
  stage_colour?: string | null;
  stage_history_id?: number | null;
  stage_history_time_created?: Date | null;
  stage_is_current?: boolean | null;
  status_history_id?: number | null;
  status?: application_status | null;
  status_history_time_created?: Date | null;
  status_is_current?: boolean | null;
  outcome?: application_outcome | null;
}
const application_stage_status_all = {
  tableName: 'application_stage_status_all',
  columns: ['application_id', 'template_id', 'template_name', 'template_code', 'serial', 'name', 'session_id', 'user_id', 'org_id', 'stage_id', 'stage_number', 'stage', 'stage_colour', 'stage_history_id', 'stage_history_time_created', 'stage_is_current', 'status_history_id', 'status', 'status_history_time_created', 'status_is_current', 'outcome'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: {},
  $type: null as unknown as ApplicationStageStatusAll,
  $input: null as unknown as ApplicationStageStatusAllInput
} as const;

// Table application_stage_status_latest
export interface ApplicationStageStatusLatest {
  application_id: number | null;
  template_id: number | null;
  template_name: string | null;
  template_code: string | null;
  serial: string | null;
  name: string | null;
  session_id: string | null;
  user_id: number | null;
  org_id: number | null;
  stage_id: number | null;
  stage_number: number | null;
  stage: string | null;
  stage_colour: string | null;
  stage_history_id: number | null;
  stage_history_time_created: Date | null;
  stage_is_current: boolean | null;
  status_history_id: number | null;
  status: application_status | null;
  status_history_time_created: Date | null;
  status_is_current: boolean | null;
  outcome: application_outcome | null;
}
export interface ApplicationStageStatusLatestInput {
  application_id?: number | null;
  template_id?: number | null;
  template_name?: string | null;
  template_code?: string | null;
  serial?: string | null;
  name?: string | null;
  session_id?: string | null;
  user_id?: number | null;
  org_id?: number | null;
  stage_id?: number | null;
  stage_number?: number | null;
  stage?: string | null;
  stage_colour?: string | null;
  stage_history_id?: number | null;
  stage_history_time_created?: Date | null;
  stage_is_current?: boolean | null;
  status_history_id?: number | null;
  status?: application_status | null;
  status_history_time_created?: Date | null;
  status_is_current?: boolean | null;
  outcome?: application_outcome | null;
}
const application_stage_status_latest = {
  tableName: 'application_stage_status_latest',
  columns: ['application_id', 'template_id', 'template_name', 'template_code', 'serial', 'name', 'session_id', 'user_id', 'org_id', 'stage_id', 'stage_number', 'stage', 'stage_colour', 'stage_history_id', 'stage_history_time_created', 'stage_is_current', 'status_history_id', 'status', 'status_history_time_created', 'status_is_current', 'outcome'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: {},
  $type: null as unknown as ApplicationStageStatusLatest,
  $input: null as unknown as ApplicationStageStatusLatestInput
} as const;

// Table application_status_history
export interface ApplicationStatusHistory {
  id: number;
  application_stage_history_id: number;
  status: application_status | null;
  time_created: Date | null;
  is_current: boolean | null;
  application_id: number;
}
export interface ApplicationStatusHistoryInput {
  id?: number;
  application_stage_history_id: number;
  status?: application_status | null;
  time_created?: Date | null;
  is_current?: boolean | null;
  application_id: number;
}
const application_status_history = {
  tableName: 'application_status_history',
  columns: ['id', 'application_stage_history_id', 'status', 'time_created', 'is_current', 'application_id'],
  requiredForInsert: ['application_stage_history_id', 'application_id'],
  primaryKey: 'id',
  foreignKeys: { application_stage_history_id: { table: 'application_stage_history', column: 'id', $type: null as unknown as ApplicationStageHistory }, },
  $type: null as unknown as ApplicationStatusHistory,
  $input: null as unknown as ApplicationStatusHistoryInput
} as const;

// Table assigned_sections_by_stage_and_level
export interface AssignedSectionsByStageAndLevel {
  application_id: number | null;
  stage_id: number | null;
  level_number: number | null;
  assigner_id: number | null;
  assigned_section_for_level: number | null;
  assigned_in_progress_sections: number | null;
}
export interface AssignedSectionsByStageAndLevelInput {
  application_id?: number | null;
  stage_id?: number | null;
  level_number?: number | null;
  assigner_id?: number | null;
  assigned_section_for_level?: number | null;
  assigned_in_progress_sections?: number | null;
}
const assigned_sections_by_stage_and_level = {
  tableName: 'assigned_sections_by_stage_and_level',
  columns: ['application_id', 'stage_id', 'level_number', 'assigner_id', 'assigned_section_for_level', 'assigned_in_progress_sections'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: {},
  $type: null as unknown as AssignedSectionsByStageAndLevel,
  $input: null as unknown as AssignedSectionsByStageAndLevelInput
} as const;

// Table constraints_info
export interface ConstraintsInfo {
  constraint_type: string | null;
  from_table_name: string | null;
  from_column_name: string | null;
  to_table_name: string | null;
  to_column_name: string | null;
}
export interface ConstraintsInfoInput {
  constraint_type?: string | null;
  from_table_name?: string | null;
  from_column_name?: string | null;
  to_table_name?: string | null;
  to_column_name?: string | null;
}
const constraints_info = {
  tableName: 'constraints_info',
  columns: ['constraint_type', 'from_table_name', 'from_column_name', 'to_table_name', 'to_column_name'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: {},
  $type: null as unknown as ConstraintsInfo,
  $input: null as unknown as ConstraintsInfoInput
} as const;

// Table counter
export interface Counter {
  id: number;
  name: string;
  value: number | null;
}
export interface CounterInput {
  id?: number;
  name: string;
  value?: number | null;
}
const counter = {
  tableName: 'counter',
  columns: ['id', 'name', 'value'],
  requiredForInsert: ['name'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as Counter,
  $input: null as unknown as CounterInput
} as const;

// Table data_changelog
export interface DataChangelog {
  id: number;
  data_table: string;
  record_id: number;
  update_type: changelog_type;
  timestamp: Date | null;
  old_data: Json | null;
  new_data: Json | null;
  user_id: number | null;
  org_id: number | null;
  username: string | null;
  application_id: number | null;
  comment: string | null;
}
export interface DataChangelogInput {
  id?: number;
  data_table: string;
  record_id: number;
  update_type: changelog_type;
  timestamp?: Date | null;
  old_data?: Json | null;
  new_data?: Json | null;
  user_id?: number | null;
  org_id?: number | null;
  username?: string | null;
  application_id?: number | null;
  comment?: string | null;
}
const data_changelog = {
  tableName: 'data_changelog',
  columns: ['id', 'data_table', 'record_id', 'update_type', 'timestamp', 'old_data', 'new_data', 'user_id', 'org_id', 'username', 'application_id', 'comment'],
  requiredForInsert: ['data_table', 'record_id', 'update_type'],
  primaryKey: 'id',
  foreignKeys: {
    user_id: { table: 'user', column: 'id', $type: null as unknown as User },
    org_id: { table: 'organisation', column: 'id', $type: null as unknown as Organisation },
    username: { table: 'user', column: 'username', $type: null as unknown as User },
    application_id: { table: 'application', column: 'id', $type: null as unknown as Application },
  },
  $type: null as unknown as DataChangelog,
  $input: null as unknown as DataChangelogInput
} as const;

// Table data_table
export interface DataTable {
  id: number;
  table_name: string;
  display_name: string | null;
  field_map: Json | null;
  is_lookup_table: boolean | null;
  data_view_code: string | null;
  checksum: string | null;
  last_modified: Date | null;
}
export interface DataTableInput {
  id?: number;
  table_name: string;
  display_name?: string | null;
  field_map?: Json | null;
  is_lookup_table?: boolean | null;
  data_view_code?: string | null;
  checksum?: string | null;
  last_modified?: Date | null;
}
const data_table = {
  tableName: 'data_table',
  columns: ['id', 'table_name', 'display_name', 'field_map', 'is_lookup_table', 'data_view_code', 'checksum', 'last_modified'],
  requiredForInsert: ['table_name'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTable,
  $input: null as unknown as DataTableInput
} as const;

// Table data_table_active_ingredient
export interface DataTableActiveIngredient {
  id: number;
  name: string | null;
  latina: string | null;
}
export interface DataTableActiveIngredientInput {
  id?: number;
  name?: string | null;
  latina?: string | null;
}
const data_table_active_ingredient = {
  tableName: 'data_table_active_ingredient',
  columns: ['id', 'name', 'latina'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTableActiveIngredient,
  $input: null as unknown as DataTableActiveIngredientInput
} as const;

// Table data_table_administration_route
export interface DataTableAdministrationRoute {
  id: number;
  code: string | null;
  long_description: string | null;
  short_description: string | null;
}
export interface DataTableAdministrationRouteInput {
  id?: number;
  code?: string | null;
  long_description?: string | null;
  short_description?: string | null;
}
const data_table_administration_route = {
  tableName: 'data_table_administration_route',
  columns: ['id', 'code', 'long_description', 'short_description'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTableAdministrationRoute,
  $input: null as unknown as DataTableAdministrationRouteInput
} as const;

// Table data_table_adverse_drug_reaction
export interface DataTableAdverseDrugReaction {
  id: number;
  report_id: string | null;
  report_date: Date | null;
  product_name: string | null;
  applicant_id: number | null;
  medicine_details: Json | null;
}
export interface DataTableAdverseDrugReactionInput {
  id?: number;
  report_id?: string | null;
  report_date?: Date | null;
  product_name?: string | null;
  applicant_id?: number | null;
  medicine_details?: Json | null;
}
const data_table_adverse_drug_reaction = {
  tableName: 'data_table_adverse_drug_reaction',
  columns: ['id', 'report_id', 'report_date', 'product_name', 'applicant_id', 'medicine_details'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTableAdverseDrugReaction,
  $input: null as unknown as DataTableAdverseDrugReactionInput
} as const;

// Table data_table_adverse_drug_reaction_application_join
export interface DataTableAdverseDrugReactionApplicationJoin {
  id: number;
  application_id: number;
  data_table_adverse_drug_reaction_id: number;
}
export interface DataTableAdverseDrugReactionApplicationJoinInput {
  id?: number;
  application_id: number;
  data_table_adverse_drug_reaction_id: number;
}
const data_table_adverse_drug_reaction_application_join = {
  tableName: 'data_table_adverse_drug_reaction_application_join',
  columns: ['id', 'application_id', 'data_table_adverse_drug_reaction_id'],
  requiredForInsert: ['application_id', 'data_table_adverse_drug_reaction_id'],
  primaryKey: 'id',
  foreignKeys: {
    application_id: { table: 'application', column: 'id', $type: null as unknown as Application },
    data_table_adverse_drug_reaction_id: { table: 'data_table_adverse_drug_reaction', column: 'id', $type: null as unknown as DataTableAdverseDrugReaction },
  },
  $type: null as unknown as DataTableAdverseDrugReactionApplicationJoin,
  $input: null as unknown as DataTableAdverseDrugReactionApplicationJoinInput
} as const;

// Table data_table_atc_code
export interface DataTableAtcCode {
  id: number;
  who_atc_id: number | null;
  atc_code: string | null;
  name: string | null;
  category: string | null;
}
export interface DataTableAtcCodeInput {
  id?: number;
  who_atc_id?: number | null;
  atc_code?: string | null;
  name?: string | null;
  category?: string | null;
}
const data_table_atc_code = {
  tableName: 'data_table_atc_code',
  columns: ['id', 'who_atc_id', 'atc_code', 'name', 'category'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTableAtcCode,
  $input: null as unknown as DataTableAtcCodeInput
} as const;

// Table data_table_country
export interface DataTableCountry {
  id: number;
  name_common: string | null;
  name_official: string | null;
  flag: string | null;
  who_sra_pics: boolean | null;
  intl_phone_prefix: number | null;
}
export interface DataTableCountryInput {
  id?: number;
  name_common?: string | null;
  name_official?: string | null;
  flag?: string | null;
  who_sra_pics?: boolean | null;
  intl_phone_prefix?: number | null;
}
const data_table_country = {
  tableName: 'data_table_country',
  columns: ['id', 'name_common', 'name_official', 'flag', 'who_sra_pics', 'intl_phone_prefix'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTableCountry,
  $input: null as unknown as DataTableCountryInput
} as const;

// Table data_table_dosage_form
export interface DataTableDosageForm {
  id: number;
  code: string | null;
  long_description: string | null;
  short_description: string | null;
}
export interface DataTableDosageFormInput {
  id?: number;
  code?: string | null;
  long_description?: string | null;
  short_description?: string | null;
}
const data_table_dosage_form = {
  tableName: 'data_table_dosage_form',
  columns: ['id', 'code', 'long_description', 'short_description'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTableDosageForm,
  $input: null as unknown as DataTableDosageFormInput
} as const;

// Table data_table_ethnicity
export interface DataTableEthnicity {
  id: number;
  code: number | null;
  ethnicity: string | null;
}
export interface DataTableEthnicityInput {
  id?: number;
  code?: number | null;
  ethnicity?: string | null;
}
const data_table_ethnicity = {
  tableName: 'data_table_ethnicity',
  columns: ['id', 'code', 'ethnicity'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTableEthnicity,
  $input: null as unknown as DataTableEthnicityInput
} as const;

// Table data_table_license
export interface DataTableLicense {
  id: number;
  is_active: boolean | null;
  expiry_date: Date | null;
  license_number: string | null;
  type: string | null;
  org_id: number | null;
  org_name: string | null;
  profile_doc: Json | null;
  inspection_report: Json | null;
  registration_date: Date | null;
  renewal_date: Date | null;
}
export interface DataTableLicenseInput {
  id?: number;
  is_active?: boolean | null;
  expiry_date?: Date | null;
  license_number?: string | null;
  type?: string | null;
  org_id?: number | null;
  org_name?: string | null;
  profile_doc?: Json | null;
  inspection_report?: Json | null;
  registration_date?: Date | null;
  renewal_date?: Date | null;
}
const data_table_license = {
  tableName: 'data_table_license',
  columns: ['id', 'is_active', 'expiry_date', 'license_number', 'type', 'org_id', 'org_name', 'profile_doc', 'inspection_report', 'registration_date', 'renewal_date'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTableLicense,
  $input: null as unknown as DataTableLicenseInput
} as const;

// Table data_table_license_application_join
export interface DataTableLicenseApplicationJoin {
  id: number;
  application_id: number;
  data_table_license_id: number;
}
export interface DataTableLicenseApplicationJoinInput {
  id?: number;
  application_id: number;
  data_table_license_id: number;
}
const data_table_license_application_join = {
  tableName: 'data_table_license_application_join',
  columns: ['id', 'application_id', 'data_table_license_id'],
  requiredForInsert: ['application_id', 'data_table_license_id'],
  primaryKey: 'id',
  foreignKeys: {
    application_id: { table: 'application', column: 'id', $type: null as unknown as Application },
    data_table_license_id: { table: 'data_table_license', column: 'id', $type: null as unknown as DataTableLicense },
  },
  $type: null as unknown as DataTableLicenseApplicationJoin,
  $input: null as unknown as DataTableLicenseApplicationJoinInput
} as const;

// Table data_table_manufacturer
export interface DataTableManufacturer {
  id: number;
  manufacturer: string | null;
  country: string | null;
  address: string | null;
}
export interface DataTableManufacturerInput {
  id?: number;
  manufacturer?: string | null;
  country?: string | null;
  address?: string | null;
}
const data_table_manufacturer = {
  tableName: 'data_table_manufacturer',
  columns: ['id', 'manufacturer', 'country', 'address'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTableManufacturer,
  $input: null as unknown as DataTableManufacturerInput
} as const;

// Table data_table_permit_medical
export interface DataTablePermitMedical {
  id: number;
  permit_no: string | null;
  registration_date: Date | null;
  company_id: number | null;
  port_of_entry: string | null;
  company_name: string | null;
  bill_lading_number: string | null;
  provisional_products: Json | null;
  product_filter_data: string | null;
  non_registered_reason: string | null;
  non_registered_products: Json | null;
}
export interface DataTablePermitMedicalInput {
  id?: number;
  permit_no?: string | null;
  registration_date?: Date | null;
  company_id?: number | null;
  port_of_entry?: string | null;
  company_name?: string | null;
  bill_lading_number?: string | null;
  provisional_products?: Json | null;
  product_filter_data?: string | null;
  non_registered_reason?: string | null;
  non_registered_products?: Json | null;
}
const data_table_permit_medical = {
  tableName: 'data_table_permit_medical',
  columns: ['id', 'permit_no', 'registration_date', 'company_id', 'port_of_entry', 'company_name', 'bill_lading_number', 'provisional_products', 'product_filter_data', 'non_registered_reason', 'non_registered_products'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTablePermitMedical,
  $input: null as unknown as DataTablePermitMedicalInput
} as const;

// Table data_table_permit_medical_application_join
export interface DataTablePermitMedicalApplicationJoin {
  id: number;
  application_id: number;
  data_table_permit_medical_id: number;
}
export interface DataTablePermitMedicalApplicationJoinInput {
  id?: number;
  application_id: number;
  data_table_permit_medical_id: number;
}
const data_table_permit_medical_application_join = {
  tableName: 'data_table_permit_medical_application_join',
  columns: ['id', 'application_id', 'data_table_permit_medical_id'],
  requiredForInsert: ['application_id', 'data_table_permit_medical_id'],
  primaryKey: 'id',
  foreignKeys: {
    application_id: { table: 'application', column: 'id', $type: null as unknown as Application },
    data_table_permit_medical_id: { table: 'data_table_permit_medical', column: 'id', $type: null as unknown as DataTablePermitMedical },
  },
  $type: null as unknown as DataTablePermitMedicalApplicationJoin,
  $input: null as unknown as DataTablePermitMedicalApplicationJoinInput
} as const;

// Table data_table_pre_registered_products_provisional
export interface DataTablePreRegisteredProductsProvisional {
  id: number;
  product_id_original: string | null;
  product_id_unique: string | null;
  authority: string | null;
  trade_name: string | null;
  full_name: string | null;
  sponsor_name: string | null;
  active_ingredients: Json | null;
  active_ingredients_response: Json | null;
  multiple_formulations: boolean | null;
  components_original: Json | null;
  pack_sizes: Json | null;
  pack_sizes_response: Json | null;
  shelf_life: string | null;
  storage_conditions: string | null;
  dosage_form: string | null;
  route_of_administration: string | null;
  indications: string | null;
  product_type: string | null;
  container_type: string | null;
  effective_date: Date | null;
  manufacturers: Json | null;
  manufacturers_response: Json | null;
}
export interface DataTablePreRegisteredProductsProvisionalInput {
  id?: number;
  product_id_original?: string | null;
  product_id_unique?: string | null;
  authority?: string | null;
  trade_name?: string | null;
  full_name?: string | null;
  sponsor_name?: string | null;
  active_ingredients?: Json | null;
  active_ingredients_response?: Json | null;
  multiple_formulations?: boolean | null;
  components_original?: Json | null;
  pack_sizes?: Json | null;
  pack_sizes_response?: Json | null;
  shelf_life?: string | null;
  storage_conditions?: string | null;
  dosage_form?: string | null;
  route_of_administration?: string | null;
  indications?: string | null;
  product_type?: string | null;
  container_type?: string | null;
  effective_date?: Date | null;
  manufacturers?: Json | null;
  manufacturers_response?: Json | null;
}
const data_table_pre_registered_products_provisional = {
  tableName: 'data_table_pre_registered_products_provisional',
  columns: ['id', 'product_id_original', 'product_id_unique', 'authority', 'trade_name', 'full_name', 'sponsor_name', 'active_ingredients', 'active_ingredients_response', 'multiple_formulations', 'components_original', 'pack_sizes', 'pack_sizes_response', 'shelf_life', 'storage_conditions', 'dosage_form', 'route_of_administration', 'indications', 'product_type', 'container_type', 'effective_date', 'manufacturers', 'manufacturers_response'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTablePreRegisteredProductsProvisional,
  $input: null as unknown as DataTablePreRegisteredProductsProvisionalInput
} as const;

// Table data_table_primary_container
export interface DataTablePrimaryContainer {
  id: number;
  code: string | null;
  name: string | null;
}
export interface DataTablePrimaryContainerInput {
  id?: number;
  code?: string | null;
  name?: string | null;
}
const data_table_primary_container = {
  tableName: 'data_table_primary_container',
  columns: ['id', 'code', 'name'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTablePrimaryContainer,
  $input: null as unknown as DataTablePrimaryContainerInput
} as const;

// Table data_table_product
export interface DataTableProduct {
  id: number;
  origin: string | null;
  is_active: boolean | null;
  product_id: string | null;
  shelf_life: string | null;
  expiry_date: Date | null;
  atc_code: Json | null;
  company_id: number | null;
  trade_name: string | null;
  dosage_form: string | null;
  gmp_details: Json | null;
  applicant_id: number | null;
  company_name: string | null;
  generic_name: string | null;
  application_level: string | null;
  primary_container: string | null;
  administration_unit: string | null;
  proposed_indications: string | null;
  packaging_description: string | null;
  dosage_form_description: string | null;
  route_of_administration: string | null;
  manufacturers_additional: Json | null;
  product_registration_cert: Json | null;
  manufacturers_finished_product: Json | null;
  medical_product_classification: string | null;
  manufacturers_active_ingredients: Json | null;
  registration_date: Date | null;
  formulations: Json | null;
  packaging_sizes: Json | null;
}
export interface DataTableProductInput {
  id?: number;
  origin?: string | null;
  is_active?: boolean | null;
  product_id?: string | null;
  shelf_life?: string | null;
  expiry_date?: Date | null;
  atc_code?: Json | null;
  company_id?: number | null;
  trade_name?: string | null;
  dosage_form?: string | null;
  gmp_details?: Json | null;
  applicant_id?: number | null;
  company_name?: string | null;
  generic_name?: string | null;
  application_level?: string | null;
  primary_container?: string | null;
  administration_unit?: string | null;
  proposed_indications?: string | null;
  packaging_description?: string | null;
  dosage_form_description?: string | null;
  route_of_administration?: string | null;
  manufacturers_additional?: Json | null;
  product_registration_cert?: Json | null;
  manufacturers_finished_product?: Json | null;
  medical_product_classification?: string | null;
  manufacturers_active_ingredients?: Json | null;
  registration_date?: Date | null;
  formulations?: Json | null;
  packaging_sizes?: Json | null;
}
const data_table_product = {
  tableName: 'data_table_product',
  columns: ['id', 'origin', 'is_active', 'product_id', 'shelf_life', 'expiry_date', 'atc_code', 'company_id', 'trade_name', 'dosage_form', 'gmp_details', 'applicant_id', 'company_name', 'generic_name', 'application_level', 'primary_container', 'administration_unit', 'proposed_indications', 'packaging_description', 'dosage_form_description', 'route_of_administration', 'manufacturers_additional', 'product_registration_cert', 'manufacturers_finished_product', 'medical_product_classification', 'manufacturers_active_ingredients', 'registration_date', 'formulations', 'packaging_sizes'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTableProduct,
  $input: null as unknown as DataTableProductInput
} as const;

// Table data_table_product_application_join
export interface DataTableProductApplicationJoin {
  id: number;
  application_id: number;
  data_table_product_id: number;
}
export interface DataTableProductApplicationJoinInput {
  id?: number;
  application_id: number;
  data_table_product_id: number;
}
const data_table_product_application_join = {
  tableName: 'data_table_product_application_join',
  columns: ['id', 'application_id', 'data_table_product_id'],
  requiredForInsert: ['application_id', 'data_table_product_id'],
  primaryKey: 'id',
  foreignKeys: {
    application_id: { table: 'application', column: 'id', $type: null as unknown as Application },
    data_table_product_id: { table: 'data_table_product', column: 'id', $type: null as unknown as DataTableProduct },
  },
  $type: null as unknown as DataTableProductApplicationJoin,
  $input: null as unknown as DataTableProductApplicationJoinInput
} as const;

// Table data_table_provisional_product
export interface DataTableProvisionalProduct {
  id: number;
  full_name: string | null;
  is_active: boolean | null;
  product_id: string | null;
  shelf_life: string | null;
  dosage_form: string | null;
  expiry_date: Date | null;
  registered_in: string | null;
  manufacturers: Json | null;
  registration_date: Date | null;
  route_of_administration: string | null;
  atc_code: Json | null;
  company_id: number | null;
  trade_name: string | null;
  applicant_id: number | null;
  company_name: string | null;
  pharmacopeia: string | null;
  gmp_certificate: Json | null;
  packaging_sizes: Json | null;
  active_ingredients: Json | null;
  prod_reg_certificate: Json | null;
  medical_product_classification: string | null;
  packaging_sizes_filter_data: string | null;
  manufacturers_filter_data: string | null;
  active_ingredients_filter_data: string | null;
  original_id: string | null;
  sponsor_name: string | null;
}
export interface DataTableProvisionalProductInput {
  id?: number;
  full_name?: string | null;
  is_active?: boolean | null;
  product_id?: string | null;
  shelf_life?: string | null;
  dosage_form?: string | null;
  expiry_date?: Date | null;
  registered_in?: string | null;
  manufacturers?: Json | null;
  registration_date?: Date | null;
  route_of_administration?: string | null;
  atc_code?: Json | null;
  company_id?: number | null;
  trade_name?: string | null;
  applicant_id?: number | null;
  company_name?: string | null;
  pharmacopeia?: string | null;
  gmp_certificate?: Json | null;
  packaging_sizes?: Json | null;
  active_ingredients?: Json | null;
  prod_reg_certificate?: Json | null;
  medical_product_classification?: string | null;
  packaging_sizes_filter_data?: string | null;
  manufacturers_filter_data?: string | null;
  active_ingredients_filter_data?: string | null;
  original_id?: string | null;
  sponsor_name?: string | null;
}
const data_table_provisional_product = {
  tableName: 'data_table_provisional_product',
  columns: ['id', 'full_name', 'is_active', 'product_id', 'shelf_life', 'dosage_form', 'expiry_date', 'registered_in', 'manufacturers', 'registration_date', 'route_of_administration', 'atc_code', 'company_id', 'trade_name', 'applicant_id', 'company_name', 'pharmacopeia', 'gmp_certificate', 'packaging_sizes', 'active_ingredients', 'prod_reg_certificate', 'medical_product_classification', 'packaging_sizes_filter_data', 'manufacturers_filter_data', 'active_ingredients_filter_data', 'original_id', 'sponsor_name'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTableProvisionalProduct,
  $input: null as unknown as DataTableProvisionalProductInput
} as const;

// Table data_table_provisional_product_application_join
export interface DataTableProvisionalProductApplicationJoin {
  id: number;
  application_id: number;
  data_table_provisional_product_id: number;
}
export interface DataTableProvisionalProductApplicationJoinInput {
  id?: number;
  application_id: number;
  data_table_provisional_product_id: number;
}
const data_table_provisional_product_application_join = {
  tableName: 'data_table_provisional_product_application_join',
  columns: ['id', 'application_id', 'data_table_provisional_product_id'],
  requiredForInsert: ['application_id', 'data_table_provisional_product_id'],
  primaryKey: 'id',
  foreignKeys: {
    application_id: { table: 'application', column: 'id', $type: null as unknown as Application },
    data_table_provisional_product_id: { table: 'data_table_provisional_product', column: 'id', $type: null as unknown as DataTableProvisionalProduct },
  },
  $type: null as unknown as DataTableProvisionalProductApplicationJoin,
  $input: null as unknown as DataTableProvisionalProductApplicationJoinInput
} as const;

// Table data_table_scheduled_chemical
export interface DataTableScheduledChemical {
  id: number;
  chemical: string | null;
  schedule: string | null;
}
export interface DataTableScheduledChemicalInput {
  id?: number;
  chemical?: string | null;
  schedule?: string | null;
}
const data_table_scheduled_chemical = {
  tableName: 'data_table_scheduled_chemical',
  columns: ['id', 'chemical', 'schedule'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTableScheduledChemical,
  $input: null as unknown as DataTableScheduledChemicalInput
} as const;

// Table data_table_storage_conditions_simplified
export interface DataTableStorageConditionsSimplified {
  id: number;
  name: string | null;
  portuguese_name: string | null;
}
export interface DataTableStorageConditionsSimplifiedInput {
  id?: number;
  name?: string | null;
  portuguese_name?: string | null;
}
const data_table_storage_conditions_simplified = {
  tableName: 'data_table_storage_conditions_simplified',
  columns: ['id', 'name', 'portuguese_name'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTableStorageConditionsSimplified,
  $input: null as unknown as DataTableStorageConditionsSimplifiedInput
} as const;

// Table data_table_units_of_proportion
export interface DataTableUnitsOfProportion {
  id: number;
  code: string | null;
  long_description: string | null;
  short_description: string | null;
}
export interface DataTableUnitsOfProportionInput {
  id?: number;
  code?: string | null;
  long_description?: string | null;
  short_description?: string | null;
}
const data_table_units_of_proportion = {
  tableName: 'data_table_units_of_proportion',
  columns: ['id', 'code', 'long_description', 'short_description'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTableUnitsOfProportion,
  $input: null as unknown as DataTableUnitsOfProportionInput
} as const;

// Table data_table_world_health_organisation_pq_list_of_fpp
export interface DataTableWorldHealthOrganisationPqListOfFpp {
  id: number;
  who_reference_number: string | null;
  inn_dosage_form_and_strength: string | null;
  product_type: string | null;
  therapeutic_area: string | null;
  applicant: string | null;
  dosage_form: string | null;
  basis_of_listing: string | null;
  basis_of_alternative_listing: string | null;
}
export interface DataTableWorldHealthOrganisationPqListOfFppInput {
  id?: number;
  who_reference_number?: string | null;
  inn_dosage_form_and_strength?: string | null;
  product_type?: string | null;
  therapeutic_area?: string | null;
  applicant?: string | null;
  dosage_form?: string | null;
  basis_of_listing?: string | null;
  basis_of_alternative_listing?: string | null;
}
const data_table_world_health_organisation_pq_list_of_fpp = {
  tableName: 'data_table_world_health_organisation_pq_list_of_fpp',
  columns: ['id', 'who_reference_number', 'inn_dosage_form_and_strength', 'product_type', 'therapeutic_area', 'applicant', 'dosage_form', 'basis_of_listing', 'basis_of_alternative_listing'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataTableWorldHealthOrganisationPqListOfFpp,
  $input: null as unknown as DataTableWorldHealthOrganisationPqListOfFppInput
} as const;

// Table data_view
export interface DataView {
  id: number;
  table_name: string;
  title: string | null;
  code: string;
  permission_names: string[] | null;
  row_restrictions: Json | null;
  table_view_include_columns: string[] | null;
  table_view_exclude_columns: string[] | null;
  table_search_columns: string[] | null;
  detail_view_include_columns: string[] | null;
  detail_view_exclude_columns: string[] | null;
  detail_view_header_column: string;
  filter_include_columns: string[] | null;
  filter_exclude_columns: string[] | null;
  show_linked_applications: boolean;
  priority: number | null;
  default_sort_column: string | null;
  default_filter_string: string | null;
  identifier: string;
  submenu: string | null;
  enabled: boolean;
  menu_name: string | null;
  raw_data_include_columns: string[] | null;
  raw_data_exclude_columns: string[] | null;
  checksum: string | null;
  last_modified: Date | null;
}
export interface DataViewInput {
  id?: number;
  table_name: string;
  title?: string | null;
  code: string;
  permission_names?: string[] | null;
  row_restrictions?: Json | null;
  table_view_include_columns?: string[] | null;
  table_view_exclude_columns?: string[] | null;
  table_search_columns?: string[] | null;
  detail_view_include_columns?: string[] | null;
  detail_view_exclude_columns?: string[] | null;
  detail_view_header_column: string;
  filter_include_columns?: string[] | null;
  filter_exclude_columns?: string[] | null;
  show_linked_applications?: boolean;
  priority?: number | null;
  default_sort_column?: string | null;
  default_filter_string?: string | null;
  identifier: string;
  submenu?: string | null;
  enabled?: boolean;
  menu_name?: string | null;
  raw_data_include_columns?: string[] | null;
  raw_data_exclude_columns?: string[] | null;
  checksum?: string | null;
  last_modified?: Date | null;
}
const data_view = {
  tableName: 'data_view',
  columns: ['id', 'table_name', 'title', 'code', 'permission_names', 'row_restrictions', 'table_view_include_columns', 'table_view_exclude_columns', 'table_search_columns', 'detail_view_include_columns', 'detail_view_exclude_columns', 'detail_view_header_column', 'filter_include_columns', 'filter_exclude_columns', 'show_linked_applications', 'priority', 'default_sort_column', 'default_filter_string', 'identifier', 'submenu', 'enabled', 'menu_name', 'raw_data_include_columns', 'raw_data_exclude_columns', 'checksum', 'last_modified'],
  requiredForInsert: ['table_name', 'code', 'detail_view_header_column', 'identifier'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataView,
  $input: null as unknown as DataViewInput
} as const;

// Table data_view_column_definition
export interface DataViewColumnDefinition {
  id: number;
  table_name: string | null;
  column_name: string;
  title: string | null;
  element_type_plugin_code: string | null;
  element_parameters: Json | null;
  additional_formatting: Json | null;
  value_expression: Json | null;
  sort_column: string | null;
  filter_parameters: Json | null;
  filter_expression: Json | null;
  filter_data_type: string | null;
  hide_if_null: boolean | null;
  checksum: string | null;
  last_modified: Date | null;
}
export interface DataViewColumnDefinitionInput {
  id?: number;
  table_name?: string | null;
  column_name: string;
  title?: string | null;
  element_type_plugin_code?: string | null;
  element_parameters?: Json | null;
  additional_formatting?: Json | null;
  value_expression?: Json | null;
  sort_column?: string | null;
  filter_parameters?: Json | null;
  filter_expression?: Json | null;
  filter_data_type?: string | null;
  hide_if_null?: boolean | null;
  checksum?: string | null;
  last_modified?: Date | null;
}
const data_view_column_definition = {
  tableName: 'data_view_column_definition',
  columns: ['id', 'table_name', 'column_name', 'title', 'element_type_plugin_code', 'element_parameters', 'additional_formatting', 'value_expression', 'sort_column', 'filter_parameters', 'filter_expression', 'filter_data_type', 'hide_if_null', 'checksum', 'last_modified'],
  requiredForInsert: ['column_name'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as DataViewColumnDefinition,
  $input: null as unknown as DataViewColumnDefinitionInput
} as const;

// Table element_type_plugin
export interface ElementTypePlugin {
  code: string;
  name: string | null;
  description: string | null;
  category: template_element_category | null;
  path: string | null;
  display_component_name: string | null;
  config_component_name: string | null;
  required_parameters: string[] | null;
}
export interface ElementTypePluginInput {
  code: string;
  name?: string | null;
  description?: string | null;
  category?: template_element_category | null;
  path?: string | null;
  display_component_name?: string | null;
  config_component_name?: string | null;
  required_parameters?: string[] | null;
}
const element_type_plugin = {
  tableName: 'element_type_plugin',
  columns: ['code', 'name', 'description', 'category', 'path', 'display_component_name', 'config_component_name', 'required_parameters'],
  requiredForInsert: ['code'],
  primaryKey: 'code',
  foreignKeys: {},
  $type: null as unknown as ElementTypePlugin,
  $input: null as unknown as ElementTypePluginInput
} as const;

// Table file
export interface File {
  id: number;
  unique_id: string;
  original_filename: string;
  user_id: number | null;
  template_id: number | null;
  application_serial: string | null;
  application_response_id: number | null;
  description: string | null;
  application_note_id: number | null;
  is_output_doc: boolean;
  is_internal_reference_doc: boolean;
  is_external_reference_doc: boolean;
  to_be_deleted: boolean;
  file_path: string;
  thumbnail_path: string | null;
  mimetype: string | null;
  submitted: boolean | null;
  timestamp: Date;
  archive_path: string | null;
  file_size: number | null;
}
export interface FileInput {
  id?: number;
  unique_id: string;
  original_filename: string;
  user_id?: number | null;
  template_id?: number | null;
  application_serial?: string | null;
  application_response_id?: number | null;
  description?: string | null;
  application_note_id?: number | null;
  is_output_doc?: boolean;
  is_internal_reference_doc?: boolean;
  is_external_reference_doc?: boolean;
  to_be_deleted?: boolean;
  file_path: string;
  thumbnail_path?: string | null;
  mimetype?: string | null;
  submitted?: boolean | null;
  timestamp?: Date;
  archive_path?: string | null;
  file_size?: number | null;
}
const file = {
  tableName: 'file',
  columns: ['id', 'unique_id', 'original_filename', 'user_id', 'template_id', 'application_serial', 'application_response_id', 'description', 'application_note_id', 'is_output_doc', 'is_internal_reference_doc', 'is_external_reference_doc', 'to_be_deleted', 'file_path', 'thumbnail_path', 'mimetype', 'submitted', 'timestamp', 'archive_path', 'file_size'],
  requiredForInsert: ['unique_id', 'original_filename', 'file_path'],
  primaryKey: 'id',
  foreignKeys: {
    user_id: { table: 'user', column: 'id', $type: null as unknown as User },
    template_id: { table: 'template', column: 'id', $type: null as unknown as Template },
    application_serial: { table: 'application', column: 'serial', $type: null as unknown as Application },
    application_response_id: { table: 'application_response', column: 'id', $type: null as unknown as ApplicationResponse },
    application_note_id: { table: 'application_note', column: 'id', $type: null as unknown as ApplicationNote },
  },
  $type: null as unknown as File,
  $input: null as unknown as FileInput
} as const;

// Table filter
export interface Filter {
  id: number;
  code: string;
  title: string | null;
  query: Json | null;
  user_role: permission_policy_type | null;
  checksum: string | null;
  last_modified: Date | null;
}
export interface FilterInput {
  id?: number;
  code: string;
  title?: string | null;
  query?: Json | null;
  user_role?: permission_policy_type | null;
  checksum?: string | null;
  last_modified?: Date | null;
}
const filter = {
  tableName: 'filter',
  columns: ['id', 'code', 'title', 'query', 'user_role', 'checksum', 'last_modified'],
  requiredForInsert: ['code'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as Filter,
  $input: null as unknown as FilterInput
} as const;

// Table notification
export interface Notification {
  id: number;
  user_id: number | null;
  application_id: number | null;
  review_id: number | null;
  email_recipients: string | null;
  subject: string | null;
  message: string | null;
  attachments: string[] | null;
  timestamp: Date;
  is_read: boolean | null;
  email_sent: boolean | null;
  email_server_log: string | null;
}
export interface NotificationInput {
  id?: number;
  user_id?: number | null;
  application_id?: number | null;
  review_id?: number | null;
  email_recipients?: string | null;
  subject?: string | null;
  message?: string | null;
  attachments?: string[] | null;
  timestamp?: Date;
  is_read?: boolean | null;
  email_sent?: boolean | null;
  email_server_log?: string | null;
}
const notification = {
  tableName: 'notification',
  columns: ['id', 'user_id', 'application_id', 'review_id', 'email_recipients', 'subject', 'message', 'attachments', 'timestamp', 'is_read', 'email_sent', 'email_server_log'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {
    user_id: { table: 'user', column: 'id', $type: null as unknown as User },
    application_id: { table: 'application', column: 'id', $type: null as unknown as Application },
    review_id: { table: 'review', column: 'id', $type: null as unknown as Review },
  },
  $type: null as unknown as Notification,
  $input: null as unknown as NotificationInput
} as const;

// Table organisation
export interface Organisation {
  id: number;
  name: string | null;
  registration: string | null;
  address: string | null;
  logo_url: string | null;
  is_system_org: boolean | null;
  registration_documentation: Json | null;
  country: string | null;
  contact_email: string | null;
  contact_phone: string | null;
  postal_address: string | null;
  local_agent_name: string | null;
  local_agent_email: string | null;
  local_agent_phone_number: string | null;
  business_certificate: Json | null;
  sub_type: string | null;
}
export interface OrganisationInput {
  id?: number;
  name?: string | null;
  registration?: string | null;
  address?: string | null;
  logo_url?: string | null;
  is_system_org?: boolean | null;
  registration_documentation?: Json | null;
  country?: string | null;
  contact_email?: string | null;
  contact_phone?: string | null;
  postal_address?: string | null;
  local_agent_name?: string | null;
  local_agent_email?: string | null;
  local_agent_phone_number?: string | null;
  business_certificate?: Json | null;
  sub_type?: string | null;
}
const organisation = {
  tableName: 'organisation',
  columns: ['id', 'name', 'registration', 'address', 'logo_url', 'is_system_org', 'registration_documentation', 'country', 'contact_email', 'contact_phone', 'postal_address', 'local_agent_name', 'local_agent_email', 'local_agent_phone_number', 'business_certificate', 'sub_type'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as Organisation,
  $input: null as unknown as OrganisationInput
} as const;

// Table organisation_application_join
export interface OrganisationApplicationJoin {
  id: number;
  application_id: number;
  organisation_id: number;
}
export interface OrganisationApplicationJoinInput {
  id?: number;
  application_id: number;
  organisation_id: number;
}
const organisation_application_join = {
  tableName: 'organisation_application_join',
  columns: ['id', 'application_id', 'organisation_id'],
  requiredForInsert: ['application_id', 'organisation_id'],
  primaryKey: 'id',
  foreignKeys: {
    application_id: { table: 'application', column: 'id', $type: null as unknown as Application },
    organisation_id: { table: 'organisation', column: 'id', $type: null as unknown as Organisation },
  },
  $type: null as unknown as OrganisationApplicationJoin,
  $input: null as unknown as OrganisationApplicationJoinInput
} as const;

// Table permission_flattened
export interface PermissionFlattened {
  user_id: number | null;
  organisation_id: number | null;
  permission_policy_id: number | null;
  template_id: number | null;
}
export interface PermissionFlattenedInput {
  user_id?: number | null;
  organisation_id?: number | null;
  permission_policy_id?: number | null;
  template_id?: number | null;
}
const permission_flattened = {
  tableName: 'permission_flattened',
  columns: ['user_id', 'organisation_id', 'permission_policy_id', 'template_id'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: {},
  $type: null as unknown as PermissionFlattened,
  $input: null as unknown as PermissionFlattenedInput
} as const;

// Table permission_join
export interface PermissionJoin {
  id: number;
  user_id: number | null;
  organisation_id: number | null;
  permission_name_id: number;
  is_active: boolean | null;
}
export interface PermissionJoinInput {
  id?: number;
  user_id?: number | null;
  organisation_id?: number | null;
  permission_name_id: number;
  is_active?: boolean | null;
}
const permission_join = {
  tableName: 'permission_join',
  columns: ['id', 'user_id', 'organisation_id', 'permission_name_id', 'is_active'],
  requiredForInsert: ['permission_name_id'],
  primaryKey: 'id',
  foreignKeys: {
    user_id: { table: 'user', column: 'id', $type: null as unknown as User },
    organisation_id: { table: 'organisation', column: 'id', $type: null as unknown as Organisation },
    permission_name_id: { table: 'permission_name', column: 'id', $type: null as unknown as PermissionName },
  },
  $type: null as unknown as PermissionJoin,
  $input: null as unknown as PermissionJoinInput
} as const;

// Table permission_name
export interface PermissionName {
  id: number;
  name: string | null;
  description: string | null;
  permission_policy_id: number | null;
  is_system_org_permission: boolean | null;
  checksum: string | null;
  last_modified: Date | null;
}
export interface PermissionNameInput {
  id?: number;
  name?: string | null;
  description?: string | null;
  permission_policy_id?: number | null;
  is_system_org_permission?: boolean | null;
  checksum?: string | null;
  last_modified?: Date | null;
}
const permission_name = {
  tableName: 'permission_name',
  columns: ['id', 'name', 'description', 'permission_policy_id', 'is_system_org_permission', 'checksum', 'last_modified'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: { permission_policy_id: { table: 'permission_policy', column: 'id', $type: null as unknown as PermissionPolicy }, },
  $type: null as unknown as PermissionName,
  $input: null as unknown as PermissionNameInput
} as const;

// Table permission_policy
export interface PermissionPolicy {
  id: number;
  name: string | null;
  description: string | null;
  rules: Json | null;
  type: permission_policy_type | null;
  is_admin: boolean | null;
  default_restrictions: Json | null;
}
export interface PermissionPolicyInput {
  id?: number;
  name?: string | null;
  description?: string | null;
  rules?: Json | null;
  type?: permission_policy_type | null;
  is_admin?: boolean | null;
  default_restrictions?: Json | null;
}
const permission_policy = {
  tableName: 'permission_policy',
  columns: ['id', 'name', 'description', 'rules', 'type', 'is_admin', 'default_restrictions'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as PermissionPolicy,
  $input: null as unknown as PermissionPolicyInput
} as const;

// Table permissions_all
export interface PermissionsAll {
  username: string | null;
  orgName: string | null;
  templateCode: string | null;
  permissionName: string | null;
  description: string | null;
  stageNumber: number | null;
  reviewLevel: number | null;
  allowedSections: string[] | null;
  canSelfAssign: boolean | null;
  canMakeFinalDecision: boolean | null;
  restrictions: Json | null;
  policyName: string | null;
  permissionType: permission_policy_type | null;
  isAdmin: boolean | null;
  permissionPolicyId: number | null;
  permissionPolicyRules: Json | null;
  permissionNameId: number | null;
  templatePermissionId: number | null;
  templateId: number | null;
  userId: number | null;
  permissionJoinId: number | null;
  orgId: number | null;
  isUserCategory: boolean | null;
  isSystemOrgPermission: boolean | null;
  isActive: boolean | null;
}
export interface PermissionsAllInput {
  username?: string | null;
  orgName?: string | null;
  templateCode?: string | null;
  permissionName?: string | null;
  description?: string | null;
  stageNumber?: number | null;
  reviewLevel?: number | null;
  allowedSections?: string[] | null;
  canSelfAssign?: boolean | null;
  canMakeFinalDecision?: boolean | null;
  restrictions?: Json | null;
  policyName?: string | null;
  permissionType?: permission_policy_type | null;
  isAdmin?: boolean | null;
  permissionPolicyId?: number | null;
  permissionPolicyRules?: Json | null;
  permissionNameId?: number | null;
  templatePermissionId?: number | null;
  templateId?: number | null;
  userId?: number | null;
  permissionJoinId?: number | null;
  orgId?: number | null;
  isUserCategory?: boolean | null;
  isSystemOrgPermission?: boolean | null;
  isActive?: boolean | null;
}
const permissions_all = {
  tableName: 'permissions_all',
  columns: ['username', 'orgName', 'templateCode', 'permissionName', 'description', 'stageNumber', 'reviewLevel', 'allowedSections', 'canSelfAssign', 'canMakeFinalDecision', 'restrictions', 'policyName', 'permissionType', 'isAdmin', 'permissionPolicyId', 'permissionPolicyRules', 'permissionNameId', 'templatePermissionId', 'templateId', 'userId', 'permissionJoinId', 'orgId', 'isUserCategory', 'isSystemOrgPermission', 'isActive'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: {},
  $type: null as unknown as PermissionsAll,
  $input: null as unknown as PermissionsAllInput
} as const;

// Table postgres_row_level
export interface PostgresRowLevel {
  schemaname: string | null;
  tablename: string | null;
  policyname: string | null;
  permissive: string | null;
  roles: any | null;
  cmd: string | null;
  qual: string | null;
  with_check: string | null;
}
export interface PostgresRowLevelInput {
  schemaname?: string | null;
  tablename?: string | null;
  policyname?: string | null;
  permissive?: string | null;
  roles?: any | null;
  cmd?: string | null;
  qual?: string | null;
  with_check?: string | null;
}
const postgres_row_level = {
  tableName: 'postgres_row_level',
  columns: ['schemaname', 'tablename', 'policyname', 'permissive', 'roles', 'cmd', 'qual', 'with_check'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: {},
  $type: null as unknown as PostgresRowLevel,
  $input: null as unknown as PostgresRowLevelInput
} as const;

// Table review
export interface Review {
  id: number;
  review_assignment_id: number | null;
  trigger: trigger | null;
  application_id: number | null;
  reviewer_id: number | null;
  level_number: number | null;
  stage_number: number | null;
  time_stage_created: Date | null;
  is_last_level: boolean | null;
  is_last_stage: boolean | null;
  is_final_decision: boolean | null;
}
export interface ReviewInput {
  id?: number;
  review_assignment_id?: number | null;
  trigger?: trigger | null;
  application_id?: number | null;
  reviewer_id?: number | null;
  level_number?: number | null;
  stage_number?: number | null;
  time_stage_created?: Date | null;
  is_last_level?: boolean | null;
  is_last_stage?: boolean | null;
  is_final_decision?: boolean | null;
}
const review = {
  tableName: 'review',
  columns: ['id', 'review_assignment_id', 'trigger', 'application_id', 'reviewer_id', 'level_number', 'stage_number', 'time_stage_created', 'is_last_level', 'is_last_stage', 'is_final_decision'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {
    review_assignment_id: { table: 'review_assignment', column: 'id', $type: null as unknown as ReviewAssignment },
    application_id: { table: 'application', column: 'id', $type: null as unknown as Application },
    reviewer_id: { table: 'user', column: 'id', $type: null as unknown as User },
  },
  $type: null as unknown as Review,
  $input: null as unknown as ReviewInput
} as const;

// Table review_assignment
export interface ReviewAssignment {
  id: number;
  assigner_id: number | null;
  reviewer_id: number;
  organisation_id: number | null;
  stage_id: number;
  stage_number: number | null;
  time_stage_created: Date | null;
  status: review_assignment_status;
  application_id: number;
  allowed_sections: string[] | null;
  assigned_sections: string[];
  trigger: trigger | null;
  time_updated: Date | null;
  level_number: number | null;
  level_id: number | null;
  is_last_level: boolean | null;
  is_last_stage: boolean | null;
  is_final_decision: boolean | null;
  is_self_assignable: boolean | null;
  template_id: number;
}
export interface ReviewAssignmentInput {
  id?: number;
  assigner_id?: number | null;
  reviewer_id: number;
  organisation_id?: number | null;
  stage_id: number;
  stage_number?: number | null;
  time_stage_created?: Date | null;
  status: review_assignment_status;
  application_id: number;
  allowed_sections?: string[] | null;
  assigned_sections?: string[];
  trigger?: trigger | null;
  time_updated?: Date | null;
  level_number?: number | null;
  level_id?: number | null;
  is_last_level?: boolean | null;
  is_last_stage?: boolean | null;
  is_final_decision?: boolean | null;
  is_self_assignable?: boolean | null;
  template_id: number;
}
const review_assignment = {
  tableName: 'review_assignment',
  columns: ['id', 'assigner_id', 'reviewer_id', 'organisation_id', 'stage_id', 'stage_number', 'time_stage_created', 'status', 'application_id', 'allowed_sections', 'assigned_sections', 'trigger', 'time_updated', 'level_number', 'level_id', 'is_last_level', 'is_last_stage', 'is_final_decision', 'is_self_assignable', 'template_id'],
  requiredForInsert: ['reviewer_id', 'stage_id', 'status', 'application_id', 'template_id'],
  primaryKey: 'id',
  foreignKeys: {
    assigner_id: { table: 'user', column: 'id', $type: null as unknown as User },
    reviewer_id: { table: 'user', column: 'id', $type: null as unknown as User },
    organisation_id: { table: 'organisation', column: 'id', $type: null as unknown as Organisation },
    stage_id: { table: 'template_stage', column: 'id', $type: null as unknown as TemplateStage },
    application_id: { table: 'application', column: 'id', $type: null as unknown as Application },
    level_id: { table: 'template_stage_review_level', column: 'id', $type: null as unknown as TemplateStageReviewLevel },
    template_id: { table: 'template', column: 'id', $type: null as unknown as Template },
  },
  $type: null as unknown as ReviewAssignment,
  $input: null as unknown as ReviewAssignmentInput
} as const;

// Table review_assignment_assigned_sections_shape
export interface ReviewAssignmentAssignedSectionsShape {
  review_assignment_id: number | null;
  assigned_sections: string[] | null;
}
export interface ReviewAssignmentAssignedSectionsShapeInput {
  review_assignment_id?: number | null;
  assigned_sections?: string[] | null;
}
const review_assignment_assigned_sections_shape = {
  tableName: 'review_assignment_assigned_sections_shape',
  columns: ['review_assignment_id', 'assigned_sections'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: {},
  $type: null as unknown as ReviewAssignmentAssignedSectionsShape,
  $input: null as unknown as ReviewAssignmentAssignedSectionsShapeInput
} as const;

// Table review_assignment_assigner_join
export interface ReviewAssignmentAssignerJoin {
  id: number;
  assigner_id: number | null;
  organisation_id: number | null;
  review_assignment_id: number;
}
export interface ReviewAssignmentAssignerJoinInput {
  id?: number;
  assigner_id?: number | null;
  organisation_id?: number | null;
  review_assignment_id: number;
}
const review_assignment_assigner_join = {
  tableName: 'review_assignment_assigner_join',
  columns: ['id', 'assigner_id', 'organisation_id', 'review_assignment_id'],
  requiredForInsert: ['review_assignment_id'],
  primaryKey: 'id',
  foreignKeys: {
    assigner_id: { table: 'user', column: 'id', $type: null as unknown as User },
    organisation_id: { table: 'organisation', column: 'id', $type: null as unknown as Organisation },
    review_assignment_id: { table: 'review_assignment', column: 'id', $type: null as unknown as ReviewAssignment },
  },
  $type: null as unknown as ReviewAssignmentAssignerJoin,
  $input: null as unknown as ReviewAssignmentAssignerJoinInput
} as const;

// Table review_decision
export interface ReviewDecision {
  id: number;
  review_id: number;
  decision: decision | null;
  comment: string | null;
  time_updated: Date | null;
}
export interface ReviewDecisionInput {
  id?: number;
  review_id: number;
  decision?: decision | null;
  comment?: string | null;
  time_updated?: Date | null;
}
const review_decision = {
  tableName: 'review_decision',
  columns: ['id', 'review_id', 'decision', 'comment', 'time_updated'],
  requiredForInsert: ['review_id'],
  primaryKey: 'id',
  foreignKeys: { review_id: { table: 'review', column: 'id', $type: null as unknown as Review }, },
  $type: null as unknown as ReviewDecision,
  $input: null as unknown as ReviewDecisionInput
} as const;

// Table review_response
export interface ReviewResponse {
  id: number;
  comment: string | null;
  decision: review_response_decision | null;
  application_response_id: number | null;
  review_response_link_id: number | null;
  original_review_response_id: number | null;
  review_id: number | null;
  time_created: Date | null;
  time_updated: Date | null;
  time_submitted: Date | null;
  is_visible_to_applicant: boolean | null;
  is_latest_review: boolean | null;
  template_element_id: number | null;
  recommended_applicant_visibility: review_response_recommended_applicant_visibility | null;
  status: review_response_status | null;
  is_latest_review_submission: boolean | null;
  stage_number: number | null;
}
export interface ReviewResponseInput {
  id?: number;
  comment?: string | null;
  decision?: review_response_decision | null;
  application_response_id?: number | null;
  review_response_link_id?: number | null;
  original_review_response_id?: number | null;
  review_id?: number | null;
  time_created?: Date | null;
  time_updated?: Date | null;
  time_submitted?: Date | null;
  is_visible_to_applicant?: boolean | null;
  is_latest_review?: boolean | null;
  template_element_id?: number | null;
  recommended_applicant_visibility?: review_response_recommended_applicant_visibility | null;
  status?: review_response_status | null;
  is_latest_review_submission?: boolean | null;
  stage_number?: number | null;
}
const review_response = {
  tableName: 'review_response',
  columns: ['id', 'comment', 'decision', 'application_response_id', 'review_response_link_id', 'original_review_response_id', 'review_id', 'time_created', 'time_updated', 'time_submitted', 'is_visible_to_applicant', 'is_latest_review', 'template_element_id', 'recommended_applicant_visibility', 'status', 'is_latest_review_submission', 'stage_number'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {
    application_response_id: { table: 'application_response', column: 'id', $type: null as unknown as ApplicationResponse },
    review_response_link_id: { table: 'review_response', column: 'id', $type: null as unknown as ReviewResponse },
    original_review_response_id: { table: 'review_response', column: 'id', $type: null as unknown as ReviewResponse },
    review_id: { table: 'review', column: 'id', $type: null as unknown as Review },
    template_element_id: { table: 'template_element', column: 'id', $type: null as unknown as TemplateElement },
  },
  $type: null as unknown as ReviewResponse,
  $input: null as unknown as ReviewResponseInput
} as const;

// Table review_status_history
export interface ReviewStatusHistory {
  id: number;
  review_id: number;
  status: review_status | null;
  time_created: Date | null;
  is_current: boolean | null;
}
export interface ReviewStatusHistoryInput {
  id?: number;
  review_id: number;
  status?: review_status | null;
  time_created?: Date | null;
  is_current?: boolean | null;
}
const review_status_history = {
  tableName: 'review_status_history',
  columns: ['id', 'review_id', 'status', 'time_created', 'is_current'],
  requiredForInsert: ['review_id'],
  primaryKey: 'id',
  foreignKeys: { review_id: { table: 'review', column: 'id', $type: null as unknown as Review }, },
  $type: null as unknown as ReviewStatusHistory,
  $input: null as unknown as ReviewStatusHistoryInput
} as const;

// Table schema_columns
export interface SchemaColumns {
  table_name: string | null;
  table_type: string | null;
  column_name: string | null;
  is_nullable: string | null;
  is_generated: string | null;
  data_type: string | null;
  sub_data_type: string | null;
  constraint_type: string | null;
  fk_to_table_name: string | null;
  fk_to_column_name: string | null;
}
export interface SchemaColumnsInput {
  table_name?: string | null;
  table_type?: string | null;
  column_name?: string | null;
  is_nullable?: string | null;
  is_generated?: string | null;
  data_type?: string | null;
  sub_data_type?: string | null;
  constraint_type?: string | null;
  fk_to_table_name?: string | null;
  fk_to_column_name?: string | null;
}
const schema_columns = {
  tableName: 'schema_columns',
  columns: ['table_name', 'table_type', 'column_name', 'is_nullable', 'is_generated', 'data_type', 'sub_data_type', 'constraint_type', 'fk_to_table_name', 'fk_to_column_name'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: {},
  $type: null as unknown as SchemaColumns,
  $input: null as unknown as SchemaColumnsInput
} as const;

// Table system_info
export interface SystemInfo {
  id: number;
  name: string;
  value: Json | null;
  timestamp: Date | null;
}
export interface SystemInfoInput {
  id?: number;
  name: string;
  value?: Json | null;
  timestamp?: Date | null;
}
const system_info = {
  tableName: 'system_info',
  columns: ['id', 'name', 'value', 'timestamp'],
  requiredForInsert: ['name'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as SystemInfo,
  $input: null as unknown as SystemInfoInput
} as const;

// Table template
export interface Template {
  id: number;
  name: string | null;
  name_plural: string | null;
  code: string;
  is_linear: boolean | null;
  can_applicant_make_changes: boolean | null;
  start_message: Json | null;
  status: template_status | null;
  submission_message: Json | null;
  icon: string | null;
  template_category_id: number | null;
  version_timestamp: Date | null;
  serial_pattern: string | null;
  dashboard_restrictions: string[] | null;
  version_id: string;
  parent_version_id: string | null;
  version_comment: string | null;
  version_history: Json | null;
  priority: number | null;
  linked_entity_metadata: Json | null;
}
export interface TemplateInput {
  id?: number;
  name?: string | null;
  name_plural?: string | null;
  code: string;
  is_linear?: boolean | null;
  can_applicant_make_changes?: boolean | null;
  start_message?: Json | null;
  status?: template_status | null;
  submission_message?: Json | null;
  icon?: string | null;
  template_category_id?: number | null;
  version_timestamp?: Date | null;
  serial_pattern?: string | null;
  dashboard_restrictions?: string[] | null;
  version_id: string;
  parent_version_id?: string | null;
  version_comment?: string | null;
  version_history?: Json | null;
  priority?: number | null;
  linked_entity_metadata?: Json | null;
}
const template = {
  tableName: 'template',
  columns: ['id', 'name', 'name_plural', 'code', 'is_linear', 'can_applicant_make_changes', 'start_message', 'status', 'submission_message', 'icon', 'template_category_id', 'version_timestamp', 'serial_pattern', 'dashboard_restrictions', 'version_id', 'parent_version_id', 'version_comment', 'version_history', 'priority', 'linked_entity_metadata'],
  requiredForInsert: ['code', 'version_id'],
  primaryKey: 'id',
  foreignKeys: { template_category_id: { table: 'template_category', column: 'id', $type: null as unknown as TemplateCategory }, },
  $type: null as unknown as Template,
  $input: null as unknown as TemplateInput
} as const;

// Table template_action
export interface TemplateAction {
  id: number;
  template_id: number;
  code: string | null;
  action_code: string | null;
  event_code: string | null;
  trigger: trigger | null;
  condition: Json | null;
  parameter_queries: Json | null;
  description: string | null;
  sequence: number | null;
}
export interface TemplateActionInput {
  id?: number;
  template_id: number;
  code?: string | null;
  action_code?: string | null;
  event_code?: string | null;
  trigger?: trigger | null;
  condition?: Json | null;
  parameter_queries?: Json | null;
  description?: string | null;
  sequence?: number | null;
}
const template_action = {
  tableName: 'template_action',
  columns: ['id', 'template_id', 'code', 'action_code', 'event_code', 'trigger', 'condition', 'parameter_queries', 'description', 'sequence'],
  requiredForInsert: ['template_id'],
  primaryKey: 'id',
  foreignKeys: { template_id: { table: 'template', column: 'id', $type: null as unknown as Template }, },
  $type: null as unknown as TemplateAction,
  $input: null as unknown as TemplateActionInput
} as const;

// Table template_category
export interface TemplateCategory {
  id: number;
  code: string;
  title: string | null;
  icon: string | null;
  ui_location: ui_location[] | null;
  is_submenu: boolean | null;
  priority: number | null;
  checksum: string | null;
  last_modified: Date | null;
}
export interface TemplateCategoryInput {
  id?: number;
  code: string;
  title?: string | null;
  icon?: string | null;
  ui_location?: ui_location[] | null;
  is_submenu?: boolean | null;
  priority?: number | null;
  checksum?: string | null;
  last_modified?: Date | null;
}
const template_category = {
  tableName: 'template_category',
  columns: ['id', 'code', 'title', 'icon', 'ui_location', 'is_submenu', 'priority', 'checksum', 'last_modified'],
  requiredForInsert: ['code'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as TemplateCategory,
  $input: null as unknown as TemplateCategoryInput
} as const;

// Table template_data_view_join
export interface TemplateDataViewJoin {
  id: number;
  template_id: number;
  data_view_id: number;
}
export interface TemplateDataViewJoinInput {
  id?: number;
  template_id: number;
  data_view_id: number;
}
const template_data_view_join = {
  tableName: 'template_data_view_join',
  columns: ['id', 'template_id', 'data_view_id'],
  requiredForInsert: ['template_id', 'data_view_id'],
  primaryKey: 'id',
  foreignKeys: {
    template_id: { table: 'template', column: 'id', $type: null as unknown as Template },
    data_view_id: { table: 'data_view', column: 'id', $type: null as unknown as DataView },
  },
  $type: null as unknown as TemplateDataViewJoin,
  $input: null as unknown as TemplateDataViewJoinInput
} as const;

// Table template_element
export interface TemplateElement {
  id: number;
  section_id: number;
  code: string;
  index: number | null;
  title: string | null;
  category: template_element_category | null;
  element_type_plugin_code: string | null;
  visibility_condition: Json | null;
  is_required: Json | null;
  is_editable: Json | null;
  validation: Json | null;
  initial_value: Json | null;
  validation_message: string | null;
  help_text: string | null;
  parameters: Json | null;
  reviewability: reviewability;
  template_code: string;
  template_version: string;
}
export interface TemplateElementInput {
  id?: number;
  section_id: number;
  code: string;
  index?: number | null;
  title?: string | null;
  category?: template_element_category | null;
  element_type_plugin_code?: string | null;
  visibility_condition?: Json | null;
  is_required?: Json | null;
  is_editable?: Json | null;
  validation?: Json | null;
  initial_value?: Json | null;
  validation_message?: string | null;
  help_text?: string | null;
  parameters?: Json | null;
  reviewability?: reviewability;
  template_code: string;
  template_version: string;
}
const template_element = {
  tableName: 'template_element',
  columns: ['id', 'section_id', 'code', 'index', 'title', 'category', 'element_type_plugin_code', 'visibility_condition', 'is_required', 'is_editable', 'validation', 'initial_value', 'validation_message', 'help_text', 'parameters', 'reviewability', 'template_code', 'template_version'],
  requiredForInsert: ['section_id', 'code', 'template_code', 'template_version'],
  primaryKey: 'id',
  foreignKeys: { section_id: { table: 'template_section', column: 'id', $type: null as unknown as TemplateSection }, },
  $type: null as unknown as TemplateElement,
  $input: null as unknown as TemplateElementInput
} as const;

// Table template_filter_join
export interface TemplateFilterJoin {
  id: number;
  template_id: number;
  filter_id: number;
}
export interface TemplateFilterJoinInput {
  id?: number;
  template_id: number;
  filter_id: number;
}
const template_filter_join = {
  tableName: 'template_filter_join',
  columns: ['id', 'template_id', 'filter_id'],
  requiredForInsert: ['template_id', 'filter_id'],
  primaryKey: 'id',
  foreignKeys: {
    template_id: { table: 'template', column: 'id', $type: null as unknown as Template },
    filter_id: { table: 'filter', column: 'id', $type: null as unknown as Filter },
  },
  $type: null as unknown as TemplateFilterJoin,
  $input: null as unknown as TemplateFilterJoinInput
} as const;

// Table template_permission
export interface TemplatePermission {
  id: number;
  permission_name_id: number | null;
  template_id: number;
  allowed_sections: string[] | null;
  can_self_assign: boolean;
  can_make_final_decision: boolean;
  stage_number: number | null;
  level_number: number | null;
  restrictions: Json | null;
}
export interface TemplatePermissionInput {
  id?: number;
  permission_name_id?: number | null;
  template_id: number;
  allowed_sections?: string[] | null;
  can_self_assign?: boolean;
  can_make_final_decision?: boolean;
  stage_number?: number | null;
  level_number?: number | null;
  restrictions?: Json | null;
}
const template_permission = {
  tableName: 'template_permission',
  columns: ['id', 'permission_name_id', 'template_id', 'allowed_sections', 'can_self_assign', 'can_make_final_decision', 'stage_number', 'level_number', 'restrictions'],
  requiredForInsert: ['template_id'],
  primaryKey: 'id',
  foreignKeys: {
    permission_name_id: { table: 'permission_name', column: 'id', $type: null as unknown as PermissionName },
    template_id: { table: 'template', column: 'id', $type: null as unknown as Template },
  },
  $type: null as unknown as TemplatePermission,
  $input: null as unknown as TemplatePermissionInput
} as const;

// Table template_section
export interface TemplateSection {
  id: number;
  template_id: number;
  title: string | null;
  code: string | null;
  index: number | null;
}
export interface TemplateSectionInput {
  id?: number;
  template_id: number;
  title?: string | null;
  code?: string | null;
  index?: number | null;
}
const template_section = {
  tableName: 'template_section',
  columns: ['id', 'template_id', 'title', 'code', 'index'],
  requiredForInsert: ['template_id'],
  primaryKey: 'id',
  foreignKeys: { template_id: { table: 'template', column: 'id', $type: null as unknown as Template }, },
  $type: null as unknown as TemplateSection,
  $input: null as unknown as TemplateSectionInput
} as const;

// Table template_stage
export interface TemplateStage {
  id: number;
  number: number | null;
  title: string | null;
  description: string | null;
  colour: string | null;
  template_id: number;
}
export interface TemplateStageInput {
  id?: number;
  number?: number | null;
  title?: string | null;
  description?: string | null;
  colour?: string | null;
  template_id: number;
}
const template_stage = {
  tableName: 'template_stage',
  columns: ['id', 'number', 'title', 'description', 'colour', 'template_id'],
  requiredForInsert: ['template_id'],
  primaryKey: 'id',
  foreignKeys: { template_id: { table: 'template', column: 'id', $type: null as unknown as Template }, },
  $type: null as unknown as TemplateStage,
  $input: null as unknown as TemplateStageInput
} as const;

// Table template_stage_review_level
export interface TemplateStageReviewLevel {
  id: number;
  stage_id: number;
  number: number;
  name: string;
  description: string | null;
  single_reviewer_all_sections: boolean;
}
export interface TemplateStageReviewLevelInput {
  id?: number;
  stage_id: number;
  number: number;
  name: string;
  description?: string | null;
  single_reviewer_all_sections?: boolean;
}
const template_stage_review_level = {
  tableName: 'template_stage_review_level',
  columns: ['id', 'stage_id', 'number', 'name', 'description', 'single_reviewer_all_sections'],
  requiredForInsert: ['stage_id', 'number', 'name'],
  primaryKey: 'id',
  foreignKeys: { stage_id: { table: 'template_stage', column: 'id', $type: null as unknown as TemplateStage }, },
  $type: null as unknown as TemplateStageReviewLevel,
  $input: null as unknown as TemplateStageReviewLevelInput
} as const;

// Table trigger_queue
export interface TriggerQueue {
  id: number;
  trigger_type: trigger | null;
  table: string | null;
  record_id: number | null;
  event_code: string | null;
  data: Json | null;
  timestamp: Date | null;
  status: trigger_queue_status | null;
  log: Json | null;
  application_id: number | null;
}
export interface TriggerQueueInput {
  id?: number;
  trigger_type?: trigger | null;
  table?: string | null;
  record_id?: number | null;
  event_code?: string | null;
  data?: Json | null;
  timestamp?: Date | null;
  status?: trigger_queue_status | null;
  log?: Json | null;
  application_id?: number | null;
}
const trigger_queue = {
  tableName: 'trigger_queue',
  columns: ['id', 'trigger_type', 'table', 'record_id', 'event_code', 'data', 'timestamp', 'status', 'log', 'application_id'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: { application_id: { table: 'application', column: 'id', $type: null as unknown as Application }, },
  $type: null as unknown as TriggerQueue,
  $input: null as unknown as TriggerQueueInput
} as const;

// Table trigger_schedule
export interface TriggerSchedule {
  id: number;
  event_code: string | null;
  time_scheduled: Date;
  application_id: number;
  template_id: number | null;
  data: Json | null;
  is_active: boolean | null;
  editor_user_id: number | null;
  trigger: trigger | null;
}
export interface TriggerScheduleInput {
  id?: number;
  event_code?: string | null;
  time_scheduled: Date;
  application_id: number;
  template_id?: number | null;
  data?: Json | null;
  is_active?: boolean | null;
  editor_user_id?: number | null;
  trigger?: trigger | null;
}
const trigger_schedule = {
  tableName: 'trigger_schedule',
  columns: ['id', 'event_code', 'time_scheduled', 'application_id', 'template_id', 'data', 'is_active', 'editor_user_id', 'trigger'],
  requiredForInsert: ['time_scheduled', 'application_id'],
  primaryKey: 'id',
  foreignKeys: {
    application_id: { table: 'application', column: 'id', $type: null as unknown as Application },
    template_id: { table: 'template', column: 'id', $type: null as unknown as Template },
    editor_user_id: { table: 'user', column: 'id', $type: null as unknown as User },
  },
  $type: null as unknown as TriggerSchedule,
  $input: null as unknown as TriggerScheduleInput
} as const;

// Table unnested_sections
export interface UnnestedSections {
  id: number | null;
  section: string | null;
}
export interface UnnestedSectionsInput {
  id?: number | null;
  section?: string | null;
}
const unnested_sections = {
  tableName: 'unnested_sections',
  columns: ['id', 'section'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: {},
  $type: null as unknown as UnnestedSections,
  $input: null as unknown as UnnestedSectionsInput
} as const;

// Table user
export interface User {
  id: number;
  first_name: string | null;
  last_name: string | null;
  username: string | null;
  email: string | null;
  date_of_birth: Date | null;
  password_hash: string | null;
  phone: string | null;
  address: string | null;
  country: string | null;
  full_name: string | null;
}
export interface UserInput {
  id?: number;
  first_name?: string | null;
  last_name?: string | null;
  username?: string | null;
  email?: string | null;
  date_of_birth?: Date | null;
  password_hash?: string | null;
  phone?: string | null;
  address?: string | null;
  country?: string | null;
  full_name?: string | null;
}
const user = {
  tableName: 'user',
  columns: ['id', 'first_name', 'last_name', 'username', 'email', 'date_of_birth', 'password_hash', 'phone', 'address', 'country', 'full_name'],
  requiredForInsert: [],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as User,
  $input: null as unknown as UserInput
} as const;

// Table user_application_join
export interface UserApplicationJoin {
  id: number;
  application_id: number;
  user_id: number;
}
export interface UserApplicationJoinInput {
  id?: number;
  application_id: number;
  user_id: number;
}
const user_application_join = {
  tableName: 'user_application_join',
  columns: ['id', 'application_id', 'user_id'],
  requiredForInsert: ['application_id', 'user_id'],
  primaryKey: 'id',
  foreignKeys: {
    application_id: { table: 'application', column: 'id', $type: null as unknown as Application },
    user_id: { table: 'user', column: 'id', $type: null as unknown as User },
  },
  $type: null as unknown as UserApplicationJoin,
  $input: null as unknown as UserApplicationJoinInput
} as const;

// Table user_list
export interface UserList {
  id: number | null;
  first_name: string | null;
  last_name: string | null;
  full_name: string | null;
  username: string | null;
}
export interface UserListInput {
  id?: number | null;
  first_name?: string | null;
  last_name?: string | null;
  full_name?: string | null;
  username?: string | null;
}
const user_list = {
  tableName: 'user_list',
  columns: ['id', 'first_name', 'last_name', 'full_name', 'username'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: {},
  $type: null as unknown as UserList,
  $input: null as unknown as UserListInput
} as const;

// Table user_list_admin
export interface UserListAdmin {
  id: number | null;
  first_name: string | null;
  last_name: string | null;
  username: string | null;
  email: string | null;
  date_of_birth: Date | null;
  password_hash: string | null;
  phone: string | null;
  address: string | null;
  country: string | null;
  full_name: string | null;
}
export interface UserListAdminInput {
  id?: number | null;
  first_name?: string | null;
  last_name?: string | null;
  username?: string | null;
  email?: string | null;
  date_of_birth?: Date | null;
  password_hash?: string | null;
  phone?: string | null;
  address?: string | null;
  country?: string | null;
  full_name?: string | null;
}
const user_list_admin = {
  tableName: 'user_list_admin',
  columns: ['id', 'first_name', 'last_name', 'username', 'email', 'date_of_birth', 'password_hash', 'phone', 'address', 'country', 'full_name'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: {},
  $type: null as unknown as UserListAdmin,
  $input: null as unknown as UserListAdminInput
} as const;

// Table user_org_join
export interface UserOrgJoin {
  user_id: number | null;
  username: string | null;
  first_name: string | null;
  last_name: string | null;
  email: string | null;
  date_of_birth: Date | null;
  password_hash: string | null;
  org_id: number | null;
  org_name: string | null;
  user_role: string | null;
  registration: string | null;
  address: string | null;
  logo_url: string | null;
  is_system_org: boolean | null;
}
export interface UserOrgJoinInput {
  user_id?: number | null;
  username?: string | null;
  first_name?: string | null;
  last_name?: string | null;
  email?: string | null;
  date_of_birth?: Date | null;
  password_hash?: string | null;
  org_id?: number | null;
  org_name?: string | null;
  user_role?: string | null;
  registration?: string | null;
  address?: string | null;
  logo_url?: string | null;
  is_system_org?: boolean | null;
}
const user_org_join = {
  tableName: 'user_org_join',
  columns: ['user_id', 'username', 'first_name', 'last_name', 'email', 'date_of_birth', 'password_hash', 'org_id', 'org_name', 'user_role', 'registration', 'address', 'logo_url', 'is_system_org'],
  requiredForInsert: [],
  primaryKey: null,
  foreignKeys: {},
  $type: null as unknown as UserOrgJoin,
  $input: null as unknown as UserOrgJoinInput
} as const;

// Table user_organisation
export interface UserOrganisation {
  id: number;
  user_id: number;
  organisation_id: number;
  user_role: string | null;
}
export interface UserOrganisationInput {
  id?: number;
  user_id: number;
  organisation_id: number;
  user_role?: string | null;
}
const user_organisation = {
  tableName: 'user_organisation',
  columns: ['id', 'user_id', 'organisation_id', 'user_role'],
  requiredForInsert: ['user_id', 'organisation_id'],
  primaryKey: 'id',
  foreignKeys: {
    user_id: { table: 'user', column: 'id', $type: null as unknown as User },
    organisation_id: { table: 'organisation', column: 'id', $type: null as unknown as Organisation },
  },
  $type: null as unknown as UserOrganisation,
  $input: null as unknown as UserOrganisationInput
} as const;

// Table verification
export interface Verification {
  id: number;
  unique_id: string;
  application_id: number;
  event_code: string | null;
  message: string | null;
  data: Json | null;
  time_created: Date | null;
  time_expired: Date | null;
  is_verified: boolean | null;
  trigger: trigger | null;
}
export interface VerificationInput {
  id?: number;
  unique_id: string;
  application_id: number;
  event_code?: string | null;
  message?: string | null;
  data?: Json | null;
  time_created?: Date | null;
  time_expired?: Date | null;
  is_verified?: boolean | null;
  trigger?: trigger | null;
}
const verification = {
  tableName: 'verification',
  columns: ['id', 'unique_id', 'application_id', 'event_code', 'message', 'data', 'time_created', 'time_expired', 'is_verified', 'trigger'],
  requiredForInsert: ['unique_id', 'application_id'],
  primaryKey: 'id',
  foreignKeys: { application_id: { table: 'application', column: 'id', $type: null as unknown as Application }, },
  $type: null as unknown as Verification,
  $input: null as unknown as VerificationInput
} as const;


export interface TableTypes {
  action_plugin: {
    select: ActionPlugin;
    input: ActionPluginInput;
  };
  action_queue: {
    select: ActionQueue;
    input: ActionQueueInput;
  };
  activity_log: {
    select: ActivityLog;
    input: ActivityLogInput;
  };
  allowed_self_assignable_sections_shape: {
    select: AllowedSelfAssignableSectionsShape;
    input: AllowedSelfAssignableSectionsShapeInput;
  };
  application: {
    select: Application;
    input: ApplicationInput;
  };
  application_list_shape: {
    select: ApplicationListShape;
    input: ApplicationListShapeInput;
  };
  application_note: {
    select: ApplicationNote;
    input: ApplicationNoteInput;
  };
  application_response: {
    select: ApplicationResponse;
    input: ApplicationResponseInput;
  };
  application_reviewer_action: {
    select: ApplicationReviewerAction;
    input: ApplicationReviewerActionInput;
  };
  application_stage_history: {
    select: ApplicationStageHistory;
    input: ApplicationStageHistoryInput;
  };
  application_stage_status_all: {
    select: ApplicationStageStatusAll;
    input: ApplicationStageStatusAllInput;
  };
  application_stage_status_latest: {
    select: ApplicationStageStatusLatest;
    input: ApplicationStageStatusLatestInput;
  };
  application_status_history: {
    select: ApplicationStatusHistory;
    input: ApplicationStatusHistoryInput;
  };
  assigned_sections_by_stage_and_level: {
    select: AssignedSectionsByStageAndLevel;
    input: AssignedSectionsByStageAndLevelInput;
  };
  constraints_info: {
    select: ConstraintsInfo;
    input: ConstraintsInfoInput;
  };
  counter: {
    select: Counter;
    input: CounterInput;
  };
  data_changelog: {
    select: DataChangelog;
    input: DataChangelogInput;
  };
  data_table: {
    select: DataTable;
    input: DataTableInput;
  };
  data_table_active_ingredient: {
    select: DataTableActiveIngredient;
    input: DataTableActiveIngredientInput;
  };
  data_table_administration_route: {
    select: DataTableAdministrationRoute;
    input: DataTableAdministrationRouteInput;
  };
  data_table_adverse_drug_reaction: {
    select: DataTableAdverseDrugReaction;
    input: DataTableAdverseDrugReactionInput;
  };
  data_table_adverse_drug_reaction_application_join: {
    select: DataTableAdverseDrugReactionApplicationJoin;
    input: DataTableAdverseDrugReactionApplicationJoinInput;
  };
  data_table_atc_code: {
    select: DataTableAtcCode;
    input: DataTableAtcCodeInput;
  };
  data_table_country: {
    select: DataTableCountry;
    input: DataTableCountryInput;
  };
  data_table_dosage_form: {
    select: DataTableDosageForm;
    input: DataTableDosageFormInput;
  };
  data_table_ethnicity: {
    select: DataTableEthnicity;
    input: DataTableEthnicityInput;
  };
  data_table_license: {
    select: DataTableLicense;
    input: DataTableLicenseInput;
  };
  data_table_license_application_join: {
    select: DataTableLicenseApplicationJoin;
    input: DataTableLicenseApplicationJoinInput;
  };
  data_table_manufacturer: {
    select: DataTableManufacturer;
    input: DataTableManufacturerInput;
  };
  data_table_permit_medical: {
    select: DataTablePermitMedical;
    input: DataTablePermitMedicalInput;
  };
  data_table_permit_medical_application_join: {
    select: DataTablePermitMedicalApplicationJoin;
    input: DataTablePermitMedicalApplicationJoinInput;
  };
  data_table_pre_registered_products_provisional: {
    select: DataTablePreRegisteredProductsProvisional;
    input: DataTablePreRegisteredProductsProvisionalInput;
  };
  data_table_primary_container: {
    select: DataTablePrimaryContainer;
    input: DataTablePrimaryContainerInput;
  };
  data_table_product: {
    select: DataTableProduct;
    input: DataTableProductInput;
  };
  data_table_product_application_join: {
    select: DataTableProductApplicationJoin;
    input: DataTableProductApplicationJoinInput;
  };
  data_table_provisional_product: {
    select: DataTableProvisionalProduct;
    input: DataTableProvisionalProductInput;
  };
  data_table_provisional_product_application_join: {
    select: DataTableProvisionalProductApplicationJoin;
    input: DataTableProvisionalProductApplicationJoinInput;
  };
  data_table_scheduled_chemical: {
    select: DataTableScheduledChemical;
    input: DataTableScheduledChemicalInput;
  };
  data_table_storage_conditions_simplified: {
    select: DataTableStorageConditionsSimplified;
    input: DataTableStorageConditionsSimplifiedInput;
  };
  data_table_units_of_proportion: {
    select: DataTableUnitsOfProportion;
    input: DataTableUnitsOfProportionInput;
  };
  data_table_world_health_organisation_pq_list_of_fpp: {
    select: DataTableWorldHealthOrganisationPqListOfFpp;
    input: DataTableWorldHealthOrganisationPqListOfFppInput;
  };
  data_view: {
    select: DataView;
    input: DataViewInput;
  };
  data_view_column_definition: {
    select: DataViewColumnDefinition;
    input: DataViewColumnDefinitionInput;
  };
  element_type_plugin: {
    select: ElementTypePlugin;
    input: ElementTypePluginInput;
  };
  file: {
    select: File;
    input: FileInput;
  };
  filter: {
    select: Filter;
    input: FilterInput;
  };
  notification: {
    select: Notification;
    input: NotificationInput;
  };
  organisation: {
    select: Organisation;
    input: OrganisationInput;
  };
  organisation_application_join: {
    select: OrganisationApplicationJoin;
    input: OrganisationApplicationJoinInput;
  };
  permission_flattened: {
    select: PermissionFlattened;
    input: PermissionFlattenedInput;
  };
  permission_join: {
    select: PermissionJoin;
    input: PermissionJoinInput;
  };
  permission_name: {
    select: PermissionName;
    input: PermissionNameInput;
  };
  permission_policy: {
    select: PermissionPolicy;
    input: PermissionPolicyInput;
  };
  permissions_all: {
    select: PermissionsAll;
    input: PermissionsAllInput;
  };
  postgres_row_level: {
    select: PostgresRowLevel;
    input: PostgresRowLevelInput;
  };
  review: {
    select: Review;
    input: ReviewInput;
  };
  review_assignment: {
    select: ReviewAssignment;
    input: ReviewAssignmentInput;
  };
  review_assignment_assigned_sections_shape: {
    select: ReviewAssignmentAssignedSectionsShape;
    input: ReviewAssignmentAssignedSectionsShapeInput;
  };
  review_assignment_assigner_join: {
    select: ReviewAssignmentAssignerJoin;
    input: ReviewAssignmentAssignerJoinInput;
  };
  review_decision: {
    select: ReviewDecision;
    input: ReviewDecisionInput;
  };
  review_response: {
    select: ReviewResponse;
    input: ReviewResponseInput;
  };
  review_status_history: {
    select: ReviewStatusHistory;
    input: ReviewStatusHistoryInput;
  };
  schema_columns: {
    select: SchemaColumns;
    input: SchemaColumnsInput;
  };
  system_info: {
    select: SystemInfo;
    input: SystemInfoInput;
  };
  template: {
    select: Template;
    input: TemplateInput;
  };
  template_action: {
    select: TemplateAction;
    input: TemplateActionInput;
  };
  template_category: {
    select: TemplateCategory;
    input: TemplateCategoryInput;
  };
  template_data_view_join: {
    select: TemplateDataViewJoin;
    input: TemplateDataViewJoinInput;
  };
  template_element: {
    select: TemplateElement;
    input: TemplateElementInput;
  };
  template_filter_join: {
    select: TemplateFilterJoin;
    input: TemplateFilterJoinInput;
  };
  template_permission: {
    select: TemplatePermission;
    input: TemplatePermissionInput;
  };
  template_section: {
    select: TemplateSection;
    input: TemplateSectionInput;
  };
  template_stage: {
    select: TemplateStage;
    input: TemplateStageInput;
  };
  template_stage_review_level: {
    select: TemplateStageReviewLevel;
    input: TemplateStageReviewLevelInput;
  };
  trigger_queue: {
    select: TriggerQueue;
    input: TriggerQueueInput;
  };
  trigger_schedule: {
    select: TriggerSchedule;
    input: TriggerScheduleInput;
  };
  unnested_sections: {
    select: UnnestedSections;
    input: UnnestedSectionsInput;
  };
  user: {
    select: User;
    input: UserInput;
  };
  user_application_join: {
    select: UserApplicationJoin;
    input: UserApplicationJoinInput;
  };
  user_list: {
    select: UserList;
    input: UserListInput;
  };
  user_list_admin: {
    select: UserListAdmin;
    input: UserListAdminInput;
  };
  user_org_join: {
    select: UserOrgJoin;
    input: UserOrgJoinInput;
  };
  user_organisation: {
    select: UserOrganisation;
    input: UserOrganisationInput;
  };
  verification: {
    select: Verification;
    input: VerificationInput;
  };
}

export const tables = {
  action_plugin,
  action_queue,
  activity_log,
  allowed_self_assignable_sections_shape,
  application,
  application_list_shape,
  application_note,
  application_response,
  application_reviewer_action,
  application_stage_history,
  application_stage_status_all,
  application_stage_status_latest,
  application_status_history,
  assigned_sections_by_stage_and_level,
  constraints_info,
  counter,
  data_changelog,
  data_table,
  data_table_active_ingredient,
  data_table_administration_route,
  data_table_adverse_drug_reaction,
  data_table_adverse_drug_reaction_application_join,
  data_table_atc_code,
  data_table_country,
  data_table_dosage_form,
  data_table_ethnicity,
  data_table_license,
  data_table_license_application_join,
  data_table_manufacturer,
  data_table_permit_medical,
  data_table_permit_medical_application_join,
  data_table_pre_registered_products_provisional,
  data_table_primary_container,
  data_table_product,
  data_table_product_application_join,
  data_table_provisional_product,
  data_table_provisional_product_application_join,
  data_table_scheduled_chemical,
  data_table_storage_conditions_simplified,
  data_table_units_of_proportion,
  data_table_world_health_organisation_pq_list_of_fpp,
  data_view,
  data_view_column_definition,
  element_type_plugin,
  file,
  filter,
  notification,
  organisation,
  organisation_application_join,
  permission_flattened,
  permission_join,
  permission_name,
  permission_policy,
  permissions_all,
  postgres_row_level,
  review,
  review_assignment,
  review_assignment_assigned_sections_shape,
  review_assignment_assigner_join,
  review_decision,
  review_response,
  review_status_history,
  schema_columns,
  system_info,
  template,
  template_action,
  template_category,
  template_data_view_join,
  template_element,
  template_filter_join,
  template_permission,
  template_section,
  template_stage,
  template_stage_review_level,
  trigger_queue,
  trigger_schedule,
  unnested_sections,
  user,
  user_application_join,
  user_list,
  user_list_admin,
  user_org_join,
  user_organisation,
  verification,
}
