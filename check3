--
-- PostgreSQL database dump
--

-- Dumped from database version 12.4
-- Dumped by pg_dump version 12.4

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: postgraphile_watch; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA postgraphile_watch;


ALTER SCHEMA postgraphile_watch OWNER TO postgres;

--
-- Name: action_queue_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.action_queue_status AS ENUM (
    'Scheduled',
    'Queued',
    'Processing',
    'Success',
    'Fail'
);


ALTER TYPE public.action_queue_status OWNER TO postgres;

--
-- Name: application_outcome; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.application_outcome AS ENUM (
    'Pending',
    'Approved',
    'Rejected'
);


ALTER TYPE public.application_outcome OWNER TO postgres;

--
-- Name: application_response_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.application_response_status AS ENUM (
    'DRAFT',
    'SUBMITTED'
);


ALTER TYPE public.application_response_status OWNER TO postgres;

--
-- Name: application_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.application_status AS ENUM (
    'Draft',
    'Withdrawn',
    'Submitted',
    'Changes Required',
    'Re-submitted',
    'Completed',
    'Expired'
);


ALTER TYPE public.application_status OWNER TO postgres;

--
-- Name: decision; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.decision AS ENUM (
    'List of questions',
    'Conform',
    'Non-conform',
    'Changes Requested',
    'No Decision'
);


ALTER TYPE public.decision OWNER TO postgres;

--
-- Name: permission_policy_type; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.permission_policy_type AS ENUM (
    'Review',
    'Apply',
    'Assign'
);


ALTER TYPE public.permission_policy_type OWNER TO postgres;

--
-- Name: review_assignment_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.review_assignment_status AS ENUM (
    'Available',
    'Self-assigned by another',
    'Assigned',
    'Available for self-assignment'
);


ALTER TYPE public.review_assignment_status OWNER TO postgres;

--
-- Name: review_response_decision; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.review_response_decision AS ENUM (
    'Approve',
    'Decline',
    'Agree',
    'Disagree'
);


ALTER TYPE public.review_response_decision OWNER TO postgres;

--
-- Name: review_response_recommended_applicant_visibility; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.review_response_recommended_applicant_visibility AS ENUM (
    'Original Response Visible to Applicant',
    'Original Response Not Visible to Applicant'
);


ALTER TYPE public.review_response_recommended_applicant_visibility OWNER TO postgres;

--
-- Name: review_response_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.review_response_status AS ENUM (
    'Draft',
    'Submitted'
);


ALTER TYPE public.review_response_status OWNER TO postgres;

--
-- Name: review_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.review_status AS ENUM (
    'Draft',
    'Submitted',
    'Changes Requested',
    'Pending',
    'Locked'
);


ALTER TYPE public.review_status OWNER TO postgres;

--
-- Name: template_element_category; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.template_element_category AS ENUM (
    'Question',
    'Information'
);


ALTER TYPE public.template_element_category OWNER TO postgres;

--
-- Name: template_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.template_status AS ENUM (
    'Draft',
    'Available',
    'Disabled'
);


ALTER TYPE public.template_status OWNER TO postgres;

--
-- Name: trigger; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.trigger AS ENUM (
    'onApplicationCreate',
    'onApplicationRestart',
    'onApplicationSubmit',
    'onApplicationSave',
    'onApplicationWithdraw',
    'onReviewCreate',
    'onReviewSubmit',
    'onReviewRestart',
    'onReviewStart',
    'onReviewAssign',
    'onReviewSelfAssign',
    'onApprovalSubmit',
    'devTest',
    'onScheduleTime',
    'Processing',
    'Error'
);


ALTER TYPE public.trigger OWNER TO postgres;

--
-- Name: trigger_queue_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.trigger_queue_status AS ENUM (
    'Triggered',
    'Actions Dispatched',
    'Error'
);


ALTER TYPE public.trigger_queue_status OWNER TO postgres;

--
-- Name: notify_watchers_ddl(); Type: FUNCTION; Schema: postgraphile_watch; Owner: postgres
--

CREATE FUNCTION postgraphile_watch.notify_watchers_ddl() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
begin
  perform pg_notify(
    'postgraphile_watch',
    json_build_object(
      'type',
      'ddl',
      'payload',
      (select json_agg(json_build_object('schema', schema_name, 'command', command_tag)) from pg_event_trigger_ddl_commands() as x)
    )::text
  );
end;
$$;


ALTER FUNCTION postgraphile_watch.notify_watchers_ddl() OWNER TO postgres;

--
-- Name: notify_watchers_drop(); Type: FUNCTION; Schema: postgraphile_watch; Owner: postgres
--

CREATE FUNCTION postgraphile_watch.notify_watchers_drop() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
begin
  perform pg_notify(
    'postgraphile_watch',
    json_build_object(
      'type',
      'drop',
      'payload',
      (select json_agg(distinct x.schema_name) from pg_event_trigger_dropped_objects() as x)
    )::text
  );
end;
$$;


ALTER FUNCTION postgraphile_watch.notify_watchers_drop() OWNER TO postgres;

--
-- Name: add_event_to_trigger_queue(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.add_event_to_trigger_queue() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	INSERT INTO trigger_queue (trigger_type, "table", record_id, timestamp, status)
		VALUES (NEW.trigger::public.trigger, TG_TABLE_NAME, NEW.id, current_timestamp, 'Triggered');
	EXECUTE format('UPDATE %s SET trigger = ''Processing'' WHERE id = %s', TG_TABLE_NAME, NEW.id);	
RETURN NULL;
END;
$$;


ALTER FUNCTION public.add_event_to_trigger_queue() OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: application_list_shape; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.application_list_shape (
    id integer,
    serial character varying,
    name character varying,
    template_code character varying,
    template_name character varying,
    applicant_username character varying,
    applicant_first_name character varying,
    applicant_last_name character varying,
    applicant character varying,
    org_name character varying,
    stage character varying,
    status public.application_status,
    outcome public.application_outcome,
    last_active_date timestamp with time zone,
    is_fully_assigned_level_1 boolean,
    review_available_for_self_assignment_count bigint,
    review_assigned_count bigint,
    review_assigned_not_started_count bigint,
    review_draft_count bigint,
    review_submitted_count bigint,
    review_change_request_count bigint,
    review_pending_count bigint
);


ALTER TABLE public.application_list_shape OWNER TO postgres;

--
-- Name: application_list(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.application_list(reviewerid integer) RETURNS SETOF public.application_list_shape
    LANGUAGE sql STABLE
    AS $_$
    SELECT
        app.id,
        app.serial,
        app.name,
        template.code AS template_code,
        template.name AS template_name,
        username AS applicant_username,
        first_name AS applicant_first_name,
        last_name AS applicant_last_name,
        CONCAT(first_name, ' ', last_name) AS applicant,
        org.name AS org_name,
        stage_status.stage,
        stage_status.status,
        outcome,
        status_history_time_created AS last_active_date,
        -- 	template_questions_count(app),
        -- 	assigned_questions_count(app, stage_status.stage_id, 1),
        assigned_questions_count (app, stage_status.stage_id, 1) >= template_questions_count (app) AS is_fully_assigned_level_1,
        review_available_for_self_assignment_count,
        review_assigned_count,
        review_assigned_not_started_count,
        review_draft_count,
        review_submitted_count,
        review_change_request_count,
        review_pending_count
    FROM
        application app
    LEFT JOIN TEMPLATE ON app.template_id = template.id
    LEFT JOIN "user" ON user_id = "user".id
    LEFT JOIN application_stage_status_latest AS stage_status ON app.id = stage_status.application_id
    LEFT JOIN organisation org ON app.org_id = org.id
    LEFT JOIN review_list ($1) ON app.id = review_list.application_id
$_$;


ALTER FUNCTION public.application_list(reviewerid integer) OWNER TO postgres;

--
-- Name: FUNCTION application_list(reviewerid integer); Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON FUNCTION public.application_list(reviewerid integer) IS '@sortable';


--
-- Name: application; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.application (
    id integer NOT NULL,
    template_id integer,
    user_id integer,
    org_id integer,
    serial character varying,
    name character varying,
    outcome public.application_outcome,
    is_active boolean,
    trigger public.trigger
);


ALTER TABLE public.application OWNER TO postgres;

--
-- Name: application_stage(public.application); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.application_stage(app public.application) RETURNS character varying
    LANGUAGE sql STABLE
    AS $$
	SELECT stage FROM
		( SELECT application_id, stage FROM
			public.application_stage_status_latest
		) AS app_stage
	WHERE app_stage.application_id = app.id;
$$;


ALTER FUNCTION public.application_stage(app public.application) OWNER TO postgres;

--
-- Name: application_stage_number(public.application); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.application_stage_number(app public.application) RETURNS integer
    LANGUAGE sql STABLE
    AS $$
	SELECT stage_number FROM
		( SELECT application_id, stage_number FROM
			public.application_stage_status_latest
		) AS app_stage_num
	WHERE app_stage_num.application_id = app.id;
$$;


ALTER FUNCTION public.application_stage_number(app public.application) OWNER TO postgres;

--
-- Name: application_status(public.application); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.application_status(a public.application) RETURNS public.application_status
    LANGUAGE sql STABLE
    AS $$
	SELECT status FROM
		( SELECT application_id, status FROM
			public.application_stage_status_latest
		) AS app_status
	WHERE app_status.application_id = a.id;
$$;


ALTER FUNCTION public.application_status(a public.application) OWNER TO postgres;

--
-- Name: application_status_history_application_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.application_status_history_application_id(application_stage_history_id integer) RETURNS integer
    LANGUAGE sql IMMUTABLE
    AS $_$
select application_id from application_stage_history where id = $1 ;
$_$;


ALTER FUNCTION public.application_status_history_application_id(application_stage_history_id integer) OWNER TO postgres;

--
-- Name: assigned_questions_count(public.application, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.assigned_questions_count(app public.application, stage_id integer, level integer) RETURNS bigint
    LANGUAGE sql STABLE
    AS $$
	SELECT COUNT(DISTINCT(template_element.id)) FROM
	review_question_assignment rqa JOIN review_assignment ra
		ON rqa.review_assignment_id = ra.id JOIN
	template_element ON template_element.id = rqa.template_element_id
	WHERE
		ra.status = 'Assigned'
		AND ra.stage_id = stage_id
		AND ra.level = level -- currently restrict partial assignment to level 1
		AND ra.application_id = app.id
		AND template_element.category = 'Question'
$$;


ALTER FUNCTION public.assigned_questions_count(app public.application, stage_id integer, level integer) OWNER TO postgres;

--
-- Name: jwt_get_bigint(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.jwt_get_bigint(jwt_key text) RETURNS bigint
    LANGUAGE sql STABLE
    AS $_$
  select COALESCE(current_setting('jwt.claims.' || $1, true)::bigint, 0)
$_$;


ALTER FUNCTION public.jwt_get_bigint(jwt_key text) OWNER TO postgres;

--
-- Name: jwt_get_boolean(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.jwt_get_boolean(jwt_key text) RETURNS boolean
    LANGUAGE sql STABLE
    AS $_$
  select COALESCE(current_setting('jwt.claims.' || $1, true)::bool, false)
$_$;


ALTER FUNCTION public.jwt_get_boolean(jwt_key text) OWNER TO postgres;

--
-- Name: jwt_get_text(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.jwt_get_text(jwt_key text) RETURNS text
    LANGUAGE sql STABLE
    AS $_$
  select COALESCE(current_setting('jwt.claims.' || $1, true)::text, '')
$_$;


ALTER FUNCTION public.jwt_get_text(jwt_key text) OWNER TO postgres;

--
-- Name: notify_action_queue(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.notify_action_queue() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
-- IF NEW.status = 'Queued' THEN
PERFORM pg_notify('action_notifications', json_build_object(
	'id', NEW.id,
	'code', NEW.action_code,
	'application_data', NEW.application_data,
	'parameter_queries', NEW.parameter_queries
	)::text
);
-- END IF;
RETURN NULL;
END;
$$;


ALTER FUNCTION public.notify_action_queue() OWNER TO postgres;

--
-- Name: notify_trigger_queue(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.notify_trigger_queue() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
PERFORM pg_notify('trigger_notifications', json_build_object(
	'trigger_id', NEW.id,
	'trigger', NEW.trigger_type,
	'table', NEW.table,
	'record_id', NEW.record_id
	)::text
);	
RETURN NULL;
END;
$$;


ALTER FUNCTION public.notify_trigger_queue() OWNER TO postgres;

--
-- Name: outcome_changed(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.outcome_changed() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	UPDATE public.application SET is_active = false WHERE id = NEW.id;
RETURN NULL;
END;
$$;


ALTER FUNCTION public.outcome_changed() OWNER TO postgres;

--
-- Name: review_application_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.review_application_id(review_assignment_id integer) RETURNS integer
    LANGUAGE sql IMMUTABLE
    AS $_$
select application_id from review_assignment where id = $1 ;
$_$;


ALTER FUNCTION public.review_application_id(review_assignment_id integer) OWNER TO postgres;

--
-- Name: review_is_last_level(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.review_is_last_level(review_assignment_id integer) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$
select is_last_level from review_assignment where id = $1 ;
$_$;


ALTER FUNCTION public.review_is_last_level(review_assignment_id integer) OWNER TO postgres;

--
-- Name: review_level(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.review_level(review_assignment_id integer) RETURNS integer
    LANGUAGE sql IMMUTABLE
    AS $_$
select level from review_assignment where id = $1 ;
$_$;


ALTER FUNCTION public.review_level(review_assignment_id integer) OWNER TO postgres;

--
-- Name: review_reviewer_id(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.review_reviewer_id(review_assignment_id integer) RETURNS integer
    LANGUAGE sql IMMUTABLE
    AS $_$
select reviewer_id from review_assignment where id = $1 ;
$_$;


ALTER FUNCTION public.review_reviewer_id(review_assignment_id integer) OWNER TO postgres;

--
-- Name: review; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.review (
    id integer NOT NULL,
    review_assignment_id integer,
    trigger public.trigger,
    application_id integer GENERATED ALWAYS AS (public.review_application_id(review_assignment_id)) STORED,
    reviewer_id integer GENERATED ALWAYS AS (public.review_reviewer_id(review_assignment_id)) STORED,
    level integer GENERATED ALWAYS AS (public.review_level(review_assignment_id)) STORED,
    is_last_level boolean GENERATED ALWAYS AS (public.review_is_last_level(review_assignment_id)) STORED
);


ALTER TABLE public.review OWNER TO postgres;

--
-- Name: review_decision; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.review_decision (
    id integer NOT NULL,
    review_id integer,
    decision public.decision DEFAULT 'No Decision'::public.decision,
    comment character varying,
    time_updated timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.review_decision OWNER TO postgres;

--
-- Name: review_latest_decision(public.review); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.review_latest_decision(review public.review) RETURNS public.review_decision
    LANGUAGE sql STABLE
    AS $$
	SELECT * FROM public.review_decision
	WHERE review_id = review.id
	ORDER BY time_updated DESC
	LIMIT 1
$$;


ALTER FUNCTION public.review_latest_decision(review public.review) OWNER TO postgres;

--
-- Name: review_list(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.review_list(reviewerid integer) RETURNS TABLE(application_id integer, review_available_for_self_assignment_count bigint, review_assigned_count bigint, review_assigned_not_started_count bigint, review_draft_count bigint, review_submitted_count bigint, review_change_request_count bigint, review_pending_count bigint)
    LANGUAGE sql STABLE
    AS $_$
    SELECT
        review_assignment.application_id AS application_id,
        COUNT(*) FILTER (WHERE review_assignment.status = 'Available for self-assignment') AS review_available_for_self_assignment_count,
        COUNT(*) FILTER (WHERE review_assignment.status = 'Assigned') AS review_assigned_count,
        COUNT(*) FILTER (WHERE review_assignment.status = 'Assigned'
            AND review.id IS NULL) AS review_assigned_not_started_count,
        COUNT(*) FILTER (WHERE review_status_history.status = 'Draft') AS review_draft_count,
        COUNT(*) FILTER (WHERE review_status_history.status = 'Submitted') AS review_submitted_count,
        COUNT(*) FILTER (WHERE review_status_history.status = 'Changes Requested') AS review_change_request_count,
        COUNT(*) FILTER (WHERE review_status_history.status = 'Pending') AS review_pending_count
    FROM
        review_assignment
    LEFT JOIN review ON review.review_assignment_id = review_assignment.id
    LEFT JOIN review_status_history ON (review_status_history.review_id = review.id
            AND is_current = TRUE)
WHERE
    review_assignment.reviewer_id = $1
GROUP BY
    review_assignment.application_id;

$_$;


ALTER FUNCTION public.review_list(reviewerid integer) OWNER TO postgres;

--
-- Name: review_status(public.review); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.review_status(app public.review) RETURNS public.review_status
    LANGUAGE sql STABLE
    AS $$
	SELECT "status" FROM review_status_history 
	WHERE review_id = app.id and is_current = true
$$;


ALTER FUNCTION public.review_status(app public.review) OWNER TO postgres;

--
-- Name: review_status_history_is_current_update(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.review_status_history_is_current_update() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	UPDATE public.review_status_history SET is_current = false
	WHERE review_id = NEW.review_id AND id<>NEW.id;
RETURN NULL;
END;
$$;


ALTER FUNCTION public.review_status_history_is_current_update() OWNER TO postgres;

--
-- Name: review_time_status_created(public.review); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.review_time_status_created(app public.review) RETURNS timestamp with time zone
    LANGUAGE sql STABLE
    AS $$
	SELECT time_created FROM review_status_history 
	WHERE review_id = app.id and is_current = true
$$;


ALTER FUNCTION public.review_time_status_created(app public.review) OWNER TO postgres;

--
-- Name: set_original_response(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.set_original_response() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	IF NEW.review_response_link_id IS NOT NULL THEN
	 	NEW.original_review_response_id = (SELECT original_review_response_id FROM review_response where id = NEW.review_response_link_id);
		NEW.applcation_response_id = (SELECT applcation_response_id FROM review_response where id = NEW.review_response_link_id);
	ELSE
		-- should always be original review_response when review_response_link_id IS NULL
 		NEW.original_review_response_id = NEW.id;
	END IF;
	-- review_question_assignment should always exist
	NEW.template_element_id = (SELECT template_element_id FROM review_question_assignment where id = NEW.review_question_assignment_id);
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.set_original_response() OWNER TO postgres;

--
-- Name: stage_is_current_update(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.stage_is_current_update() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	UPDATE public.application_stage_history SET is_current = false
	WHERE application_id = NEW.application_id AND id<>NEW.id;
RETURN NULL;
END;
$$;


ALTER FUNCTION public.stage_is_current_update() OWNER TO postgres;

--
-- Name: status_is_current_update(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.status_is_current_update() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
	UPDATE public.application_status_history SET is_current = false
	WHERE application_id = NEW.application_id AND id<>NEW.id;
RETURN NULL;
END;
$$;


ALTER FUNCTION public.status_is_current_update() OWNER TO postgres;

--
-- Name: template_questions_count(public.application); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.template_questions_count(app public.application) RETURNS bigint
    LANGUAGE sql STABLE
    AS $$
	SELECT COUNT(*)
		FROM template_section
		JOIN template_element ON template_element.section_id = template_section.id
	WHERE
		template_section.template_id = app.template_id
		AND template_element.category = 'Question'
$$;


ALTER FUNCTION public.template_questions_count(app public.application) OWNER TO postgres;

--
-- Name: action_plugin; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.action_plugin (
    code character varying NOT NULL,
    name character varying,
    description character varying,
    path character varying,
    function_name character varying,
    required_parameters character varying[],
    output_properties character varying[]
);


ALTER TABLE public.action_plugin OWNER TO postgres;

--
-- Name: action_queue; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.action_queue (
    id integer NOT NULL,
    trigger_event integer,
    template_id integer,
    sequence integer,
    action_code character varying,
    application_data jsonb,
    parameter_queries jsonb,
    parameters_evaluated jsonb,
    status public.action_queue_status,
    output jsonb,
    time_queued timestamp with time zone,
    time_completed timestamp with time zone,
    time_scheduled timestamp with time zone,
    error_log character varying
);


ALTER TABLE public.action_queue OWNER TO postgres;

--
-- Name: action_queue_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.action_queue_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.action_queue_id_seq OWNER TO postgres;

--
-- Name: action_queue_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.action_queue_id_seq OWNED BY public.action_queue.id;


--
-- Name: application_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.application_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.application_id_seq OWNER TO postgres;

--
-- Name: application_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.application_id_seq OWNED BY public.application.id;


--
-- Name: application_response; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.application_response (
    id integer NOT NULL,
    template_element_id integer,
    application_id integer,
    status public.application_response_status DEFAULT 'DRAFT'::public.application_response_status,
    value jsonb,
    is_valid boolean,
    time_updated timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.application_response OWNER TO postgres;

--
-- Name: application_response_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.application_response_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.application_response_id_seq OWNER TO postgres;

--
-- Name: application_response_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.application_response_id_seq OWNED BY public.application_response.id;


--
-- Name: application_section; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.application_section (
    id integer NOT NULL,
    application_id integer,
    template_section_id integer
);


ALTER TABLE public.application_section OWNER TO postgres;

--
-- Name: application_section_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.application_section_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.application_section_id_seq OWNER TO postgres;

--
-- Name: application_section_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.application_section_id_seq OWNED BY public.application_section.id;


--
-- Name: application_stage_history; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.application_stage_history (
    id integer NOT NULL,
    application_id integer,
    stage_id integer,
    time_created timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    is_current boolean DEFAULT true
);


ALTER TABLE public.application_stage_history OWNER TO postgres;

--
-- Name: application_stage_history_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.application_stage_history_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.application_stage_history_id_seq OWNER TO postgres;

--
-- Name: application_stage_history_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.application_stage_history_id_seq OWNED BY public.application_stage_history.id;


--
-- Name: application_status_history; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.application_status_history (
    id integer NOT NULL,
    application_stage_history_id integer,
    status public.application_status,
    time_created timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    is_current boolean DEFAULT true,
    application_id integer GENERATED ALWAYS AS (public.application_status_history_application_id(application_stage_history_id)) STORED
);


ALTER TABLE public.application_status_history OWNER TO postgres;

--
-- Name: template_stage; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.template_stage (
    id integer NOT NULL,
    number integer,
    title character varying,
    description character varying,
    template_id integer
);


ALTER TABLE public.template_stage OWNER TO postgres;

--
-- Name: application_stage_status_all; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.application_stage_status_all AS
 SELECT stage.application_id,
    ts.template_id,
    application.serial,
    application.name,
    application.user_id,
    application.org_id,
    stage.stage_id,
    ts.number AS stage_number,
    ts.title AS stage,
    stage.id AS stage_history_id,
    stage.time_created AS stage_history_time_created,
    stage.is_current AS stage_is_current,
    status.id AS status_history_id,
    status.status,
    status.time_created AS status_history_time_created,
    status.is_current AS status_is_current
   FROM (((public.application_stage_history stage
     FULL JOIN public.application_status_history status ON ((stage.id = status.application_stage_history_id)))
     JOIN public.template_stage ts ON ((stage.stage_id = ts.id)))
     JOIN public.application ON ((stage.application_id = application.id)));


ALTER TABLE public.application_stage_status_all OWNER TO postgres;

--
-- Name: application_stage_status_latest; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.application_stage_status_latest AS
 SELECT application_stage_status_all.application_id,
    application_stage_status_all.template_id,
    application_stage_status_all.serial,
    application_stage_status_all.name,
    application_stage_status_all.user_id,
    application_stage_status_all.org_id,
    application_stage_status_all.stage_id,
    application_stage_status_all.stage_number,
    application_stage_status_all.stage,
    application_stage_status_all.stage_history_id,
    application_stage_status_all.stage_history_time_created,
    application_stage_status_all.stage_is_current,
    application_stage_status_all.status_history_id,
    application_stage_status_all.status,
    application_stage_status_all.status_history_time_created,
    application_stage_status_all.status_is_current
   FROM public.application_stage_status_all
  WHERE ((application_stage_status_all.stage_is_current = true) AND (application_stage_status_all.status_is_current = true));


ALTER TABLE public.application_stage_status_latest OWNER TO postgres;

--
-- Name: application_status_history_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.application_status_history_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.application_status_history_id_seq OWNER TO postgres;

--
-- Name: application_status_history_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.application_status_history_id_seq OWNED BY public.application_status_history.id;


--
-- Name: review_assignment; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.review_assignment (
    id integer NOT NULL,
    assigner_id integer,
    reviewer_id integer,
    organisation_id integer,
    stage_id integer,
    stage_number integer,
    status public.review_assignment_status NOT NULL,
    application_id integer,
    template_section_restrictions character varying[],
    trigger public.trigger,
    time_created timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    level integer,
    is_last_level boolean
);


ALTER TABLE public.review_assignment OWNER TO postgres;

--
-- Name: application_trigger_states; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.application_trigger_states AS
 SELECT application.serial,
    application.id AS application_id,
    application.trigger AS application_trigger,
    review_assignment.id AS review_assignment_id,
    review_assignment.trigger AS review_assignment_trigger,
    review.id AS review_id,
    review.trigger AS review_trigger
   FROM ((public.application
     LEFT JOIN public.review_assignment ON ((application.id = review_assignment.application_id)))
     LEFT JOIN public.review ON ((application.id = review.application_id)));


ALTER TABLE public.application_trigger_states OWNER TO postgres;

--
-- Name: element_type_plugin; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.element_type_plugin (
    code character varying NOT NULL,
    name character varying,
    description character varying,
    category public.template_element_category,
    path character varying,
    display_component_name character varying,
    config_component_name character varying,
    required_parameters character varying[]
);


ALTER TABLE public.element_type_plugin OWNER TO postgres;

--
-- Name: file; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.file (
    id integer NOT NULL,
    unique_id character varying NOT NULL,
    original_filename character varying NOT NULL,
    user_id integer,
    application_serial character varying,
    application_response_id integer,
    file_path character varying NOT NULL,
    thumbnail_path character varying,
    mimetype character varying,
    submitted boolean DEFAULT false,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.file OWNER TO postgres;

--
-- Name: file_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.file_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.file_id_seq OWNER TO postgres;

--
-- Name: file_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.file_id_seq OWNED BY public.file.id;


--
-- Name: notification; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.notification (
    id integer NOT NULL,
    user_id integer,
    application_id integer,
    review_id integer,
    subject character varying,
    message character varying,
    document_id integer,
    is_read boolean
);


ALTER TABLE public.notification OWNER TO postgres;

--
-- Name: notification_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.notification_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.notification_id_seq OWNER TO postgres;

--
-- Name: notification_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.notification_id_seq OWNED BY public.notification.id;


--
-- Name: organisation; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.organisation (
    id integer NOT NULL,
    name character varying,
    licence_number character varying,
    address character varying
);


ALTER TABLE public.organisation OWNER TO postgres;

--
-- Name: organisation_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.organisation_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.organisation_id_seq OWNER TO postgres;

--
-- Name: organisation_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.organisation_id_seq OWNED BY public.organisation.id;


--
-- Name: permission_join; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.permission_join (
    id integer NOT NULL,
    user_id integer,
    organisation_id integer,
    permission_name_id integer
);


ALTER TABLE public.permission_join OWNER TO postgres;

--
-- Name: permission_join_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.permission_join_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.permission_join_id_seq OWNER TO postgres;

--
-- Name: permission_join_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.permission_join_id_seq OWNED BY public.permission_join.id;


--
-- Name: permission_name; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.permission_name (
    id integer NOT NULL,
    name character varying,
    permission_policy_id integer
);


ALTER TABLE public.permission_name OWNER TO postgres;

--
-- Name: permission_name_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.permission_name_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.permission_name_id_seq OWNER TO postgres;

--
-- Name: permission_name_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.permission_name_id_seq OWNED BY public.permission_name.id;


--
-- Name: permission_policy; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.permission_policy (
    id integer NOT NULL,
    name character varying,
    description character varying,
    rules jsonb,
    type public.permission_policy_type,
    default_restrictions jsonb
);


ALTER TABLE public.permission_policy OWNER TO postgres;

--
-- Name: permission_policy_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.permission_policy_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.permission_policy_id_seq OWNER TO postgres;

--
-- Name: permission_policy_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.permission_policy_id_seq OWNED BY public.permission_policy.id;


--
-- Name: template; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.template (
    id integer NOT NULL,
    name character varying,
    code character varying NOT NULL,
    is_linear boolean DEFAULT true,
    start_message jsonb,
    status public.template_status,
    submission_message jsonb DEFAULT '{"value": "Thank you! Your application has been submitted."}'::jsonb,
    version_timestamp timestamp with time zone
);


ALTER TABLE public.template OWNER TO postgres;

--
-- Name: template_permission; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.template_permission (
    id integer NOT NULL,
    permission_name_id integer,
    template_id integer,
    stage_number integer,
    level integer,
    restrictions jsonb
);


ALTER TABLE public.template_permission OWNER TO postgres;

--
-- Name: user; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public."user" (
    id integer NOT NULL,
    first_name character varying,
    last_name character varying,
    username character varying,
    email character varying,
    date_of_birth date,
    password_hash character varying
);


ALTER TABLE public."user" OWNER TO postgres;

--
-- Name: permissions_all; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.permissions_all AS
 SELECT permission_policy.type AS "permissionType",
    permission_policy.id AS "permissionPolicyId",
    permission_policy.rules AS "permissionPolicyRules",
    permission_name.id AS "permissionNameId",
    permission_name.name AS "permissionName",
    template_permission.id AS "templatePermissionId",
    template_permission.stage_number AS "stageNumber",
    template_permission.level AS "reviewLevel",
    template_permission.restrictions AS "templatePermissionRestrictions",
    template.id AS "templateId",
    template.code AS "templateCode",
    "user".id AS "userId",
    "user".username,
    permission_join.organisation_id AS "orgId",
    organisation.name AS "orgName"
   FROM ((((((public.permission_name
     JOIN public.permission_join ON ((permission_join.permission_name_id = permission_name.id)))
     JOIN public.permission_policy ON ((permission_policy.id = permission_name.permission_policy_id)))
     LEFT JOIN public."user" ON ((permission_join.user_id = "user".id)))
     LEFT JOIN public.organisation ON ((permission_join.organisation_id = organisation.id)))
     LEFT JOIN public.template_permission ON ((template_permission.permission_name_id = permission_name.id)))
     LEFT JOIN public.template ON ((template.id = template_permission.template_id)));


ALTER TABLE public.permissions_all OWNER TO postgres;

--
-- Name: review_assignment_assigner_join; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.review_assignment_assigner_join (
    id integer NOT NULL,
    assigner_id integer,
    organisation_id integer,
    review_assignment_id integer
);


ALTER TABLE public.review_assignment_assigner_join OWNER TO postgres;

--
-- Name: review_assignment_assigner_join_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.review_assignment_assigner_join_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.review_assignment_assigner_join_id_seq OWNER TO postgres;

--
-- Name: review_assignment_assigner_join_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.review_assignment_assigner_join_id_seq OWNED BY public.review_assignment_assigner_join.id;


--
-- Name: review_assignment_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.review_assignment_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.review_assignment_id_seq OWNER TO postgres;

--
-- Name: review_assignment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.review_assignment_id_seq OWNED BY public.review_assignment.id;


--
-- Name: review_decision_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.review_decision_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.review_decision_id_seq OWNER TO postgres;

--
-- Name: review_decision_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.review_decision_id_seq OWNED BY public.review_decision.id;


--
-- Name: review_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.review_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.review_id_seq OWNER TO postgres;

--
-- Name: review_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.review_id_seq OWNED BY public.review.id;


--
-- Name: review_question_assignment; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.review_question_assignment (
    id integer NOT NULL,
    template_element_id integer,
    review_assignment_id integer
);


ALTER TABLE public.review_question_assignment OWNER TO postgres;

--
-- Name: review_question_assignment_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.review_question_assignment_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.review_question_assignment_id_seq OWNER TO postgres;

--
-- Name: review_question_assignment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.review_question_assignment_id_seq OWNED BY public.review_question_assignment.id;


--
-- Name: review_response; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.review_response (
    id integer NOT NULL,
    comment character varying,
    decision public.review_response_decision,
    review_question_assignment_id integer,
    application_response_id integer,
    review_response_link_id integer,
    original_review_response_id integer,
    review_id integer,
    time_updated timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    is_visible_to_applicant boolean DEFAULT false,
    template_element_id integer,
    recommended_applicant_visibility public.review_response_recommended_applicant_visibility DEFAULT 'Original Response Not Visible to Applicant'::public.review_response_recommended_applicant_visibility,
    status public.review_response_status DEFAULT 'Draft'::public.review_response_status
);


ALTER TABLE public.review_response OWNER TO postgres;

--
-- Name: review_response_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.review_response_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.review_response_id_seq OWNER TO postgres;

--
-- Name: review_response_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.review_response_id_seq OWNED BY public.review_response.id;


--
-- Name: review_status_history; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.review_status_history (
    id integer NOT NULL,
    review_id integer,
    status public.review_status,
    time_created timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    is_current boolean DEFAULT true
);


ALTER TABLE public.review_status_history OWNER TO postgres;

--
-- Name: review_status_history_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.review_status_history_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.review_status_history_id_seq OWNER TO postgres;

--
-- Name: review_status_history_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.review_status_history_id_seq OWNED BY public.review_status_history.id;


--
-- Name: template_action; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.template_action (
    id integer NOT NULL,
    template_id integer,
    action_code character varying,
    trigger public.trigger,
    sequence integer,
    condition jsonb DEFAULT 'true'::jsonb,
    parameter_queries jsonb
);


ALTER TABLE public.template_action OWNER TO postgres;

--
-- Name: template_action_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.template_action_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.template_action_id_seq OWNER TO postgres;

--
-- Name: template_action_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.template_action_id_seq OWNED BY public.template_action.id;


--
-- Name: template_element; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.template_element (
    id integer NOT NULL,
    section_id integer,
    code character varying NOT NULL,
    index integer,
    title character varying,
    category public.template_element_category,
    element_type_plugin_code character varying,
    visibility_condition jsonb DEFAULT '{"value": true}'::jsonb,
    is_required jsonb DEFAULT '{"value": true}'::jsonb,
    is_editable jsonb DEFAULT '{"value": true}'::jsonb,
    validation jsonb DEFAULT '{"value": true}'::jsonb,
    validation_message character varying,
    parameters jsonb
);


ALTER TABLE public.template_element OWNER TO postgres;

--
-- Name: template_element_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.template_element_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.template_element_id_seq OWNER TO postgres;

--
-- Name: template_element_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.template_element_id_seq OWNED BY public.template_element.id;


--
-- Name: template_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.template_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.template_id_seq OWNER TO postgres;

--
-- Name: template_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.template_id_seq OWNED BY public.template.id;


--
-- Name: template_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.template_permission_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.template_permission_id_seq OWNER TO postgres;

--
-- Name: template_permission_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.template_permission_id_seq OWNED BY public.template_permission.id;


--
-- Name: template_section; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.template_section (
    id integer NOT NULL,
    template_id integer,
    title character varying,
    code character varying,
    index integer
);


ALTER TABLE public.template_section OWNER TO postgres;

--
-- Name: template_section_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.template_section_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.template_section_id_seq OWNER TO postgres;

--
-- Name: template_section_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.template_section_id_seq OWNED BY public.template_section.id;


--
-- Name: template_stage_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.template_stage_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.template_stage_id_seq OWNER TO postgres;

--
-- Name: template_stage_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.template_stage_id_seq OWNED BY public.template_stage.id;


--
-- Name: trigger_queue; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.trigger_queue (
    id integer NOT NULL,
    trigger_type public.trigger,
    "table" character varying,
    record_id integer,
    "timestamp" timestamp with time zone,
    status public.trigger_queue_status,
    log jsonb
);


ALTER TABLE public.trigger_queue OWNER TO postgres;

--
-- Name: trigger_queue_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.trigger_queue_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.trigger_queue_id_seq OWNER TO postgres;

--
-- Name: trigger_queue_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.trigger_queue_id_seq OWNED BY public.trigger_queue.id;


--
-- Name: user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.user_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_id_seq OWNER TO postgres;

--
-- Name: user_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.user_id_seq OWNED BY public."user".id;


--
-- Name: user_organisation; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_organisation (
    id integer NOT NULL,
    user_id integer,
    organisation_id integer,
    user_role character varying
);


ALTER TABLE public.user_organisation OWNER TO postgres;

--
-- Name: user_org_join; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.user_org_join AS
 SELECT "user".id AS user_id,
    "user".username,
    "user".first_name,
    "user".last_name,
    "user".email,
    "user".date_of_birth,
    "user".password_hash,
    user_organisation.organisation_id AS org_id,
    organisation.name AS org_name,
    user_organisation.user_role,
    organisation.licence_number,
    organisation.address
   FROM ((public."user"
     LEFT JOIN public.user_organisation ON (("user".id = user_organisation.user_id)))
     LEFT JOIN public.organisation ON ((organisation.id = user_organisation.organisation_id)));


ALTER TABLE public.user_org_join OWNER TO postgres;

--
-- Name: user_organisation_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.user_organisation_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_organisation_id_seq OWNER TO postgres;

--
-- Name: user_organisation_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.user_organisation_id_seq OWNED BY public.user_organisation.id;


--
-- Name: action_queue id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.action_queue ALTER COLUMN id SET DEFAULT nextval('public.action_queue_id_seq'::regclass);


--
-- Name: application id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application ALTER COLUMN id SET DEFAULT nextval('public.application_id_seq'::regclass);


--
-- Name: application_response id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application_response ALTER COLUMN id SET DEFAULT nextval('public.application_response_id_seq'::regclass);


--
-- Name: application_section id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application_section ALTER COLUMN id SET DEFAULT nextval('public.application_section_id_seq'::regclass);


--
-- Name: application_stage_history id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application_stage_history ALTER COLUMN id SET DEFAULT nextval('public.application_stage_history_id_seq'::regclass);


--
-- Name: application_status_history id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application_status_history ALTER COLUMN id SET DEFAULT nextval('public.application_status_history_id_seq'::regclass);


--
-- Name: file id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.file ALTER COLUMN id SET DEFAULT nextval('public.file_id_seq'::regclass);


--
-- Name: notification id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification ALTER COLUMN id SET DEFAULT nextval('public.notification_id_seq'::regclass);


--
-- Name: organisation id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organisation ALTER COLUMN id SET DEFAULT nextval('public.organisation_id_seq'::regclass);


--
-- Name: permission_join id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.permission_join ALTER COLUMN id SET DEFAULT nextval('public.permission_join_id_seq'::regclass);


--
-- Name: permission_name id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.permission_name ALTER COLUMN id SET DEFAULT nextval('public.permission_name_id_seq'::regclass);


--
-- Name: permission_policy id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.permission_policy ALTER COLUMN id SET DEFAULT nextval('public.permission_policy_id_seq'::regclass);


--
-- Name: review id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review ALTER COLUMN id SET DEFAULT nextval('public.review_id_seq'::regclass);


--
-- Name: review_assignment id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_assignment ALTER COLUMN id SET DEFAULT nextval('public.review_assignment_id_seq'::regclass);


--
-- Name: review_assignment_assigner_join id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_assignment_assigner_join ALTER COLUMN id SET DEFAULT nextval('public.review_assignment_assigner_join_id_seq'::regclass);


--
-- Name: review_decision id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_decision ALTER COLUMN id SET DEFAULT nextval('public.review_decision_id_seq'::regclass);


--
-- Name: review_question_assignment id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_question_assignment ALTER COLUMN id SET DEFAULT nextval('public.review_question_assignment_id_seq'::regclass);


--
-- Name: review_response id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_response ALTER COLUMN id SET DEFAULT nextval('public.review_response_id_seq'::regclass);


--
-- Name: review_status_history id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_status_history ALTER COLUMN id SET DEFAULT nextval('public.review_status_history_id_seq'::regclass);


--
-- Name: template id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.template ALTER COLUMN id SET DEFAULT nextval('public.template_id_seq'::regclass);


--
-- Name: template_action id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.template_action ALTER COLUMN id SET DEFAULT nextval('public.template_action_id_seq'::regclass);


--
-- Name: template_element id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.template_element ALTER COLUMN id SET DEFAULT nextval('public.template_element_id_seq'::regclass);


--
-- Name: template_permission id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.template_permission ALTER COLUMN id SET DEFAULT nextval('public.template_permission_id_seq'::regclass);


--
-- Name: template_section id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.template_section ALTER COLUMN id SET DEFAULT nextval('public.template_section_id_seq'::regclass);


--
-- Name: template_stage id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.template_stage ALTER COLUMN id SET DEFAULT nextval('public.template_stage_id_seq'::regclass);


--
-- Name: trigger_queue id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.trigger_queue ALTER COLUMN id SET DEFAULT nextval('public.trigger_queue_id_seq'::regclass);


--
-- Name: user id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."user" ALTER COLUMN id SET DEFAULT nextval('public.user_id_seq'::regclass);


--
-- Name: user_organisation id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_organisation ALTER COLUMN id SET DEFAULT nextval('public.user_organisation_id_seq'::regclass);


--
-- Data for Name: action_plugin; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.action_plugin (code, name, description, path, function_name, required_parameters, output_properties) FROM stdin;
changeOutcome	Change Outcome	Changes the outcome field of an application.	action_change_outcome/src/changeOutcome	changeOutcome	{applicationId,newOutcome}	{applicationId,newOutcome}
changeStatus	Change Status	Changes the Status of an application	action_change_status/src/changeStatus	changeStatus	{applicationId,newStatus}	{applicationId,status,statusId,applicationStatusHistoryTimestamp,reviewStatusHistoryTimestamp}
cLog	Console Logger	All it does is print a message to the console. That's it.	action_console_log/src/consoleLog	consoleLog	{message}	\N
createOrg	Create Organisation	Inserts a new organisation in the database	action_create_org/src/createOrg	createOrg	{name,licence_number,address}	{orgId,orgName}
createUser	Create User	Inserts a new user in the database	action_create_user/src/createUser	createUser	{first_name,last_name,username,date_of_birth,password_hash,email}	{userId,username,firstName,lastName,email}
cleanupFiles	Clean up application files	Checks all the uploaded files associated with an application, and deletes any that are not part of an application_response	action_files_cleanup/src/cleanupFiles	cleanupFiles	{applicationSerial}	{deletedFiles}
generateReviewAssignments	Generate Review Assignment Records	Generates review_assignment records for current application	action_generate_review_assignment_records/src/generateReviewAssignments	generateReviewAssignments	{applicationId,reviewId}	{}
grantPermissions	Grant Permissions	Grants permission to user/org, creates permission join from user/org to permission name. If org not provided, the permission will be granted to the user only.	action_grant_permissions/src/grantPermissions	grantPermissions	{username,orgName,permissionNames}	{permissionJoinIds,permissionNames}
incrementStage	Increment Stage	Increments (or creates) the application Stage, if possible.	action_increment_stage/src/incrementStage	incrementStage	{application_id}	{applicationId,stageNumber,stageName,stageId,status,statusId}
joinUserOrg	Add User to Organisation	Links a user to an organisation	action_join_user_org/src/joinUserOrg	joinUserOrg	{user_id,org_id,user_role}	{userOrgId}
updateReviewVisibility	Update Applicant's Review Visibility	Updates review response records to be visible to Applicant based on recommendations of last level review	action_review_visibility/src/updateReviewVisibility	updateReviewVisibility	{reviewId}	{reviewResponsesWithUpdatedVisibility}
trimResponses	Trim duplicate reponses	Trims duplicated application or review responses if nothing has changed	action_trim_responses/src/trimResponses	trimResponses	{applicationId,review_id}	{deletedIds,updatedIds}
updateReviewAssignmentsStatus	Update Review Assignment statuses	Update status of Review Assignment records when one is Assigned	action_update_review_assignments/src/updateReviewAssignmentsStatus	updateReviewAssignmentsStatus	{reviewAssignmentId,trigger}	{}
updateReviews	Update Review Statuses	Updates status of associated reviews when application re-submitted	action_update_review_status/src/updateReviews	updateReviews	{applicationId}	{updatedReviews}
\.


--
-- Data for Name: action_queue; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.action_queue (id, trigger_event, template_id, sequence, action_code, application_data, parameter_queries, parameters_evaluated, status, output, time_queued, time_completed, time_scheduled, error_log) FROM stdin;
\.


--
-- Data for Name: application; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.application (id, template_id, user_id, org_id, serial, name, outcome, is_active, trigger) FROM stdin;
1000	1	\N	\N	100	User Registration: Craig Drown	Pending	t	\N
1001	1	\N	\N	101	User Registration: Carl Smith	Approved	f	\N
2000	2	2	2	102	Company Registration: Company C	Pending	t	\N
4000	4	5	3	12345	Test Review -- Vitamin C	Pending	t	\N
4001	4	4	3	23456	Test Review -- Vitamin B	Pending	t	\N
4002	4	3	3	34567	Test Review -- Amoxicillin	Pending	t	\N
4003	4	4	\N	ABC123	Test Review -- Paracetamol	Pending	t	\N
\.


--
-- Data for Name: application_list_shape; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.application_list_shape (id, serial, name, template_code, template_name, applicant_username, applicant_first_name, applicant_last_name, applicant, org_name, stage, status, outcome, last_active_date, is_fully_assigned_level_1, review_available_for_self_assignment_count, review_assigned_count, review_assigned_not_started_count, review_draft_count, review_submitted_count, review_change_request_count, review_pending_count) FROM stdin;
\.


--
-- Data for Name: application_response; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.application_response (id, template_element_id, application_id, status, value, is_valid, time_updated) FROM stdin;
1000	1001	1000	DRAFT	{"text": "Craig"}	\N	2021-03-29 23:59:59.417597+13
1001	1002	1000	DRAFT	{"text": "Drown"}	\N	2021-03-29 23:59:59.417597+13
1002	1004	1000	DRAFT	{"text": "c_drown"}	\N	2021-03-29 23:59:59.417597+13
1003	1005	1000	DRAFT	{"text": "craig@sussol.net"}	\N	2021-03-29 23:59:59.417597+13
1004	1006	1000	DRAFT	{"text": "123456"}	\N	2021-03-29 23:59:59.417597+13
1005	1007	1000	DRAFT	{"text": "Manufacturer", "optionIndex": 0}	\N	2021-03-29 23:59:59.417597+13
1006	1009	1000	DRAFT	{"text": "Manufacturer B", "optionIndex": 1}	\N	2021-03-29 23:59:59.417597+13
1007	1001	1001	SUBMITTED	{"text": "Carl"}	\N	2021-03-29 23:59:59.43983+13
1008	1002	1001	SUBMITTED	{"text": "Smith"}	\N	2021-03-29 23:59:59.43983+13
1009	1004	1001	SUBMITTED	{"text": "cjsmith"}	\N	2021-03-29 23:59:59.43983+13
1010	1005	1001	SUBMITTED	{"text": "carl@sussol.net"}	\N	2021-03-29 23:59:59.43983+13
1011	1006	1001	SUBMITTED	{"text": "123456"}	\N	2021-03-29 23:59:59.43983+13
1012	1007	1001	SUBMITTED	{"text": "Importer", "optionIndex": 0}	\N	2021-03-29 23:59:59.43983+13
1013	1009	1001	SUBMITTED	{"text": "Importer A", "optionIndex": 1}	\N	2021-03-29 23:59:59.43983+13
2000	2001	2000	DRAFT	{"text": "Company C"}	\N	2021-03-29 23:59:59.457014+13
2001	2002	2000	DRAFT	{"option": 2}	\N	2021-03-29 23:59:59.457014+13
4000	4001	4000	SUBMITTED	{"text": "John"}	t	2021-03-29 23:59:59.468047+13
4001	4002	4000	SUBMITTED	{"text": "Smith"}	t	2021-03-29 23:59:59.468047+13
4002	4003	4000	SUBMITTED	{"text": "js@nowhere.com"}	t	2021-03-29 23:59:59.468047+13
4003	4005	4000	SUBMITTED	{"text": "39"}	t	2021-03-29 23:59:59.468047+13
4004	4006	4000	SUBMITTED	{"text": "New Zealand"}	t	2021-03-29 23:59:59.468047+13
4005	4008	4000	SUBMITTED	{"text": "Vitamin C"}	t	2021-03-29 23:59:59.468047+13
4006	4009	4000	SUBMITTED	{"text": "Natural Product", "optionIndex": 1}	t	2021-03-29 23:59:59.468047+13
4007	4011	4000	SUBMITTED	{"text": "50mg"}	t	2021-03-29 23:59:59.468047+13
4008	4012	4000	SUBMITTED	{"text": "100"}	t	2021-03-29 23:59:59.468047+13
4009	4013	4000	SUBMITTED	{"text": "Turning orange"}	t	2021-03-29 23:59:59.468047+13
4010	4001	4001	SUBMITTED	{"text": "Valerio"}	t	2021-03-29 23:59:59.489389+13
4011	4002	4001	SUBMITTED	{"text": "Red"}	t	2021-03-29 23:59:59.489389+13
4012	4003	4001	SUBMITTED	{"text": "jj@nowhere.com"}	t	2021-03-29 23:59:59.489389+13
4013	4005	4001	SUBMITTED	{"text": "42"}	t	2021-03-29 23:59:59.489389+13
4014	4006	4001	SUBMITTED	{"text": "Tonga"}	t	2021-03-29 23:59:59.489389+13
4015	4008	4001	SUBMITTED	{"text": "Vitamin B"}	t	2021-03-29 23:59:59.489389+13
4016	4009	4001	SUBMITTED	{"text": "Natural Product", "optionIndex": 1}	t	2021-03-29 23:59:59.489389+13
4017	4011	4001	SUBMITTED	{"text": "100mg"}	t	2021-03-29 23:59:59.489389+13
4018	4012	4001	SUBMITTED	{"text": "200"}	t	2021-03-29 23:59:59.489389+13
4019	4013	4001	SUBMITTED	{"text": "No side effects"}	t	2021-03-29 23:59:59.489389+13
4020	4001	4002	SUBMITTED	{"text": "Andrei"}	t	2021-03-29 23:59:59.508996+13
4021	4002	4002	SUBMITTED	{"text": "Blue"}	t	2021-03-29 23:59:59.508996+13
4022	4003	4002	SUBMITTED	{"text": "jw@nowhere.com"}	t	2021-03-29 23:59:59.508996+13
4023	4005	4002	SUBMITTED	{"text": "22"}	t	2021-03-29 23:59:59.508996+13
4024	4006	4002	SUBMITTED	{"text": "China"}	t	2021-03-29 23:59:59.508996+13
4025	4008	4002	SUBMITTED	{"text": "Amoxicillin"}	t	2021-03-29 23:59:59.508996+13
4026	4009	4002	SUBMITTED	{"text": "Natural Product", "optionIndex": 1}	t	2021-03-29 23:59:59.508996+13
4027	4011	4002	SUBMITTED	{"text": "250mg"}	t	2021-03-29 23:59:59.508996+13
4028	4012	4002	SUBMITTED	{"text": "1000"}	t	2021-03-29 23:59:59.508996+13
4029	4013	4002	SUBMITTED	{"text": "nausea\\nvomiting\\ndiarrhea\\nstomach pain\\nswollen, black, or \\"hairy\\" tongue."}	t	2021-03-29 23:59:59.508996+13
4100	4001	4003	SUBMITTED	{"text": "Valerio"}	t	2021-03-29 23:59:59.531354+13
4101	4002	4003	SUBMITTED	{"text": "Red"}	t	2021-03-29 23:59:59.531354+13
4102	4003	4003	SUBMITTED	{"text": "vw@nowhere.com"}	t	2021-03-29 23:59:59.531354+13
4103	4005	4003	SUBMITTED	{"text": "63"}	t	2021-03-29 23:59:59.531354+13
4104	4006	4003	SUBMITTED	{"text": "Italy"}	t	2021-03-29 23:59:59.531354+13
4105	4008	4003	SUBMITTED	{"text": "Paracetamol"}	t	2021-03-29 23:59:59.531354+13
4106	4009	4003	SUBMITTED	{"text": "Natural Product", "optionIndex": 1}	t	2021-03-29 23:59:59.531354+13
4107	4011	4003	SUBMITTED	{"text": "250mg"}	t	2021-03-29 23:59:59.531354+13
4108	4012	4003	SUBMITTED	{"text": "1000"}	t	2021-03-29 23:59:59.531354+13
4109	4013	4003	SUBMITTED	{"text": "Nothing too serious"}	t	2021-03-29 23:59:59.531354+13
\.


--
-- Data for Name: application_section; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.application_section (id, application_id, template_section_id) FROM stdin;
1	1000	1000
2	1001	1000
3	2000	1001
4	2000	1002
5	2000	1003
6	4000	1005
7	4000	1006
8	4001	1005
9	4001	1006
10	4002	1005
11	4002	1006
12	4003	1005
13	4003	1006
\.


--
-- Data for Name: application_stage_history; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.application_stage_history (id, application_id, stage_id, time_created, is_current) FROM stdin;
1	1000	1	2021-03-29 23:59:59.417597+13	t
2	1001	1	2021-03-29 23:59:59.43983+13	t
4	4000	6	2021-03-29 23:59:59.468047+13	t
3	4000	5	2021-03-29 23:59:59.468047+13	f
5	4001	5	2021-03-29 23:59:59.489389+13	t
7	4002	6	2021-03-29 23:59:59.508996+13	t
6	4002	5	2021-03-29 23:59:59.508996+13	f
8	4003	5	2021-03-29 23:59:59.531354+13	t
\.


--
-- Data for Name: application_status_history; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.application_status_history (id, application_stage_history_id, status, time_created, is_current) FROM stdin;
1	1	Draft	2021-03-29 23:59:59.417597+13	t
2	2	Completed	2021-03-29 23:59:59.43983+13	t
4	4	Submitted	2021-03-29 23:59:59.468047+13	t
3	3	Completed	2021-03-29 23:59:59.468047+13	f
5	5	Submitted	2021-03-29 23:59:59.489389+13	t
7	7	Submitted	2021-03-29 23:59:59.508996+13	t
6	6	Completed	2021-03-29 23:59:59.508996+13	f
8	8	Submitted	2021-03-29 23:59:59.531354+13	t
\.


--
-- Data for Name: element_type_plugin; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.element_type_plugin (code, name, description, category, path, display_component_name, config_component_name, required_parameters) FROM stdin;
\.


--
-- Data for Name: file; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.file (id, unique_id, original_filename, user_id, application_serial, application_response_id, file_path, thumbnail_path, mimetype, submitted, "timestamp") FROM stdin;
\.


--
-- Data for Name: notification; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.notification (id, user_id, application_id, review_id, subject, message, document_id, is_read) FROM stdin;
\.


--
-- Data for Name: organisation; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.organisation (id, name, licence_number, address) FROM stdin;
1	Drugs-R-Us	XYZ1234	123 Nowhere St\nAuckland
2	Medicinal Importers, Ltd.	ABC1982	Queen St\nAuckland
3	Drug Dealers West	XXX8798	West Auckland
4	Lab Facilities Inc.	QRS9999	1 Downtown Drive\nAuckland
\.


--
-- Data for Name: permission_join; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.permission_join (id, user_id, organisation_id, permission_name_id) FROM stdin;
1	10	\N	9000
2	10	\N	10100
3	11	\N	9000
4	12	\N	10000
5	12	\N	10300
6	13	\N	10000
7	13	\N	10300
8	14	\N	10000
9	14	\N	10400
10	15	\N	10000
11	15	\N	10400
12	16	\N	1000
13	1	\N	10100
14	2	\N	10100
15	3	\N	10100
16	4	\N	10100
17	1	\N	2000
18	2	\N	2000
19	3	\N	2000
20	4	\N	2000
21	6	\N	5000
22	7	\N	5000
23	7	\N	5001
24	8	\N	5001
25	6	\N	6000
26	7	\N	6000
27	8	\N	6001
28	9	\N	6001
29	8	\N	7000
30	17	\N	1000
31	17	\N	2000
32	17	\N	4000
\.


--
-- Data for Name: permission_name; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.permission_name (id, name, permission_policy_id) FROM stdin;
1000	applyUserRegistration	1000
2000	applyCompanyRego	2000
3000	applyReviewTest	2000
4000	reviewCompanyRego	3000
5000	reviewReviewTestScreeningSection1	3000
5001	reviewReviewTestScreeningSection2	3000
6000	reviewReviewTestAssessmentLvl1	3000
6001	reviewReviewTestAssessmentLvl2	3000
7000	reviewReviewTestApproval	3000
8000	reviewJoinCompany	3000
9000	assignGeneral	4000
10000	reviewGeneral	3000
10100	applyGeneral	2000
10200	canAssignDrugRego	4000
10300	canScreenDrugRego	3000
10400	canAssessDrugRego	3000
\.


--
-- Data for Name: permission_policy; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.permission_policy (id, name, description, rules, type, default_restrictions) FROM stdin;
1000	oneTimeApply	\N	{"application": {"view": {"template_id": "jwtPermission_bigint_templateId"}}}	Apply	\N
2000	basicApply	\N	{"application": {"view": {"user_id": "jwtUserDetails_bigint_userId", "template_id": "jwtPermission_bigint_templateId"}}}	Apply	\N
3000	basicReview	\N	{"application": {"view": {"template_id": "jwtPermission_bigint_templateId"}}}	Review	\N
4000	basicAssign	\N	{"application": {"view": {"template_id": "jwtPermission_bigint_templateId"}}}	Assign	\N
\.


--
-- Data for Name: review; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.review (id, review_assignment_id, trigger) FROM stdin;
1000	1000	\N
1	1001	\N
2	1002	\N
3	1006	\N
4000	1007	\N
4	1008	\N
5000	1010	\N
\.


--
-- Data for Name: review_assignment; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.review_assignment (id, assigner_id, reviewer_id, organisation_id, stage_id, stage_number, status, application_id, template_section_restrictions, trigger, time_created, level, is_last_level) FROM stdin;
1000	\N	6	\N	5	1	Assigned	4000	{S1,S2}	\N	2021-03-29 23:59:59.552043+13	1	t
1001	\N	6	\N	6	2	Assigned	4000	{S1}	\N	2021-03-29 23:59:59.598919+13	1	f
1002	\N	7	\N	6	2	Assigned	4000	{S2}	\N	2021-03-29 23:59:59.619918+13	1	f
1003	\N	8	\N	6	2	Available for self-assignment	4000	{S1,S2}	\N	2021-03-29 23:59:59.641343+13	2	t
1004	\N	9	\N	6	2	Available for self-assignment	4000	{S1,S2}	\N	2021-03-29 23:59:59.6544+13	2	t
1005	\N	6	\N	5	1	Assigned	4001	{S1,S2}	\N	2021-03-29 23:59:59.666819+13	1	t
1006	\N	6	\N	5	1	Assigned	4002	{S1,S2}	\N	2021-03-29 23:59:59.680418+13	1	t
1007	\N	6	\N	6	2	Assigned	4002	{S1}	\N	2021-03-29 23:59:59.710568+13	1	f
1008	\N	7	\N	6	2	Assigned	4002	{S2}	\N	2021-03-29 23:59:59.733134+13	1	f
1009	\N	8	\N	6	2	Self-assigned by another	4002	{S1,S2}	\N	2021-03-29 23:59:59.752624+13	2	t
1010	\N	9	\N	6	2	Assigned	4002	{S1,S2}	\N	2021-03-29 23:59:59.766246+13	2	t
1020	\N	6	\N	5	1	Assigned	4003	{S1,S2}	\N	2021-03-29 23:59:59.786216+13	1	t
1021	\N	7	\N	5	1	Assigned	4003	{S1,S2}	\N	2021-03-29 23:59:59.794558+13	1	t
\.


--
-- Data for Name: review_assignment_assigner_join; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.review_assignment_assigner_join (id, assigner_id, organisation_id, review_assignment_id) FROM stdin;
\.


--
-- Data for Name: review_decision; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.review_decision (id, review_id, decision, comment, time_updated) FROM stdin;
1	1000	Conform	\N	2021-03-29 23:59:59.552043+13
2	1	Conform	\N	2021-03-29 23:59:59.598919+13
3	2	List of questions	Suggestion by Reviewer 2 to reply to applicant with LOQ	2021-03-29 23:59:59.619918+13
4	3	Conform	\N	2021-03-29 23:59:59.680418+13
5	4000	List of questions	Suggestion by Reviewer 1 to reply to applicant with LOQ	2021-03-29 23:59:59.710568+13
6	5000	Non-conform	Reviewer 1 required to update	2021-03-29 23:59:59.766246+13
\.


--
-- Data for Name: review_question_assignment; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.review_question_assignment (id, template_element_id, review_assignment_id) FROM stdin;
1000	4001	1000
1001	4002	1000
1002	4003	1000
1003	4005	1000
1004	4006	1000
1006	4008	1000
1007	4009	1000
1008	4011	1000
1009	4012	1000
1010	4013	1000
1011	4001	1001
1012	4002	1001
1013	4003	1001
1014	4005	1001
1015	4006	1001
1017	4008	1002
1018	4009	1002
1019	4011	1002
1020	4012	1002
1021	4013	1002
1022	4001	1003
1023	4002	1003
1024	4003	1003
1025	4005	1003
1026	4006	1003
1027	4008	1003
1028	4009	1003
1029	4011	1003
1030	4012	1003
1031	4013	1003
1033	4001	1004
1034	4002	1004
1035	4003	1004
1036	4005	1004
1037	4006	1004
1038	4008	1004
1039	4009	1004
1040	4011	1004
1041	4012	1004
1042	4013	1004
2000	4001	1005
2001	4002	1005
2002	4003	1005
2003	4005	1005
2004	4006	1005
2006	4008	1005
2007	4009	1005
2008	4011	1005
2009	4012	1005
2010	4013	1005
3000	4001	1006
3001	4002	1006
3002	4003	1006
3003	4005	1006
3004	4006	1006
3005	4008	1006
3006	4009	1006
3007	4011	1006
3008	4012	1006
3009	4013	1006
3010	4001	1007
3011	4002	1007
3012	4003	1007
3013	4005	1007
3014	4006	1007
3015	4008	1008
3016	4009	1008
3017	4011	1008
3018	4012	1008
3019	4013	1008
3022	4001	1009
3023	4002	1009
3024	4003	1009
3025	4005	1009
3026	4006	1009
3027	4008	1009
3028	4009	1009
3029	4011	1009
3030	4012	1009
3031	4013	1009
3033	4001	1010
3034	4002	1010
3035	4003	1010
3036	4005	1010
3037	4006	1010
1	4001	1020
2	4002	1020
3	4003	1020
4	4005	1020
5	4006	1020
6	4008	1021
7	4009	1021
8	4011	1021
9	4012	1021
10	4013	1021
\.


--
-- Data for Name: review_response; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.review_response (id, comment, decision, review_question_assignment_id, application_response_id, review_response_link_id, original_review_response_id, review_id, time_updated, is_visible_to_applicant, template_element_id, recommended_applicant_visibility, status) FROM stdin;
1	\N	Approve	1000	4000	\N	1	1000	2021-03-29 23:59:59.552043+13	f	4001	Original Response Not Visible to Applicant	Submitted
2	\N	Approve	1001	4001	\N	2	1000	2021-03-29 23:59:59.552043+13	f	4002	Original Response Not Visible to Applicant	Submitted
3	\N	Approve	1002	4002	\N	3	1000	2021-03-29 23:59:59.552043+13	f	4003	Original Response Not Visible to Applicant	Submitted
4	\N	Approve	1003	4003	\N	4	1000	2021-03-29 23:59:59.552043+13	f	4005	Original Response Not Visible to Applicant	Submitted
5	\N	Approve	1004	4004	\N	5	1000	2021-03-29 23:59:59.552043+13	f	4006	Original Response Not Visible to Applicant	Submitted
6	\N	Approve	1006	4005	\N	6	1000	2021-03-29 23:59:59.552043+13	f	4008	Original Response Not Visible to Applicant	Submitted
7	\N	Approve	1007	4006	\N	7	1000	2021-03-29 23:59:59.552043+13	f	4009	Original Response Not Visible to Applicant	Submitted
8	\N	Approve	1008	4007	\N	8	1000	2021-03-29 23:59:59.552043+13	f	4011	Original Response Not Visible to Applicant	Submitted
9	\N	Approve	1009	4008	\N	9	1000	2021-03-29 23:59:59.552043+13	f	4012	Original Response Not Visible to Applicant	Submitted
10	\N	Approve	1010	4009	\N	10	1000	2021-03-29 23:59:59.552043+13	f	4013	Original Response Not Visible to Applicant	Submitted
11	\N	Approve	1011	4000	\N	11	1	2021-03-29 23:59:59.598919+13	f	4001	Original Response Not Visible to Applicant	Submitted
12	\N	Approve	1012	4001	\N	12	1	2021-03-29 23:59:59.598919+13	f	4002	Original Response Not Visible to Applicant	Submitted
13	\N	Approve	1013	4002	\N	13	1	2021-03-29 23:59:59.598919+13	f	4003	Original Response Not Visible to Applicant	Submitted
14	\N	Approve	1014	4003	\N	14	1	2021-03-29 23:59:59.598919+13	f	4005	Original Response Not Visible to Applicant	Submitted
15	\N	Approve	1015	4004	\N	15	1	2021-03-29 23:59:59.598919+13	f	4006	Original Response Not Visible to Applicant	Submitted
16	\N	Approve	1017	4005	\N	16	2	2021-03-29 23:59:59.619918+13	f	4008	Original Response Not Visible to Applicant	Submitted
17	\N	Approve	1018	4006	\N	17	2	2021-03-29 23:59:59.619918+13	f	4009	Original Response Not Visible to Applicant	Submitted
18	\N	Approve	1019	4007	\N	18	2	2021-03-29 23:59:59.619918+13	f	4011	Original Response Not Visible to Applicant	Submitted
19	\N	Approve	1020	4008	\N	19	2	2021-03-29 23:59:59.619918+13	f	4012	Original Response Not Visible to Applicant	Submitted
20	Not descriptive side effects	Decline	1021	4009	\N	20	2	2021-03-29 23:59:59.619918+13	f	4013	Original Response Not Visible to Applicant	Submitted
21	\N	Approve	3000	4020	\N	21	3	2021-03-29 23:59:59.680418+13	f	4001	Original Response Not Visible to Applicant	Submitted
22	\N	Approve	3001	4021	\N	22	3	2021-03-29 23:59:59.680418+13	f	4002	Original Response Not Visible to Applicant	Submitted
23	\N	Approve	3002	4022	\N	23	3	2021-03-29 23:59:59.680418+13	f	4003	Original Response Not Visible to Applicant	Submitted
24	\N	Approve	3003	4023	\N	24	3	2021-03-29 23:59:59.680418+13	f	4005	Original Response Not Visible to Applicant	Submitted
25	\N	Approve	3004	4024	\N	25	3	2021-03-29 23:59:59.680418+13	f	4006	Original Response Not Visible to Applicant	Submitted
26	\N	Approve	3005	4025	\N	26	3	2021-03-29 23:59:59.680418+13	f	4008	Original Response Not Visible to Applicant	Submitted
27	\N	Approve	3006	4026	\N	27	3	2021-03-29 23:59:59.680418+13	f	4009	Original Response Not Visible to Applicant	Submitted
28	\N	Approve	3007	4027	\N	28	3	2021-03-29 23:59:59.680418+13	f	4011	Original Response Not Visible to Applicant	Submitted
29	\N	Approve	3008	4028	\N	29	3	2021-03-29 23:59:59.680418+13	f	4012	Original Response Not Visible to Applicant	Submitted
30	\N	Approve	3009	4029	\N	30	3	2021-03-29 23:59:59.680418+13	f	4013	Original Response Not Visible to Applicant	Submitted
31	Name not conform with uploaded proof of identity	Decline	3010	4020	\N	31	4000	2021-03-29 23:59:59.710568+13	f	4001	Original Response Not Visible to Applicant	Submitted
32	Surname not conform with uploaded proof of identity	Decline	3011	4021	\N	32	4000	2021-03-29 23:59:59.710568+13	f	4002	Original Response Not Visible to Applicant	Submitted
33	\N	Approve	3012	4022	\N	33	4000	2021-03-29 23:59:59.710568+13	f	4003	Original Response Not Visible to Applicant	Submitted
34	\N	Approve	3013	4023	\N	34	4000	2021-03-29 23:59:59.710568+13	f	4005	Original Response Not Visible to Applicant	Submitted
35	\N	Approve	3014	4024	\N	35	4000	2021-03-29 23:59:59.710568+13	f	4006	Original Response Not Visible to Applicant	Submitted
36	\N	Approve	3015	4025	\N	36	4	2021-03-29 23:59:59.733134+13	f	4008	Original Response Not Visible to Applicant	Draft
37	\N	Approve	3016	4026	\N	37	4	2021-03-29 23:59:59.733134+13	f	4009	Original Response Not Visible to Applicant	Draft
38	\N	Approve	3017	4027	\N	38	4	2021-03-29 23:59:59.733134+13	f	4011	Original Response Not Visible to Applicant	Draft
39	\N	Approve	3018	4028	\N	39	4	2021-03-29 23:59:59.733134+13	f	4012	Original Response Not Visible to Applicant	Draft
40	\N	Approve	3019	4029	\N	40	4	2021-03-29 23:59:59.733134+13	f	4013	Original Response Not Visible to Applicant	Draft
41	Please check again	Decline	3033	4020	\N	41	5000	2021-03-29 23:59:59.766246+13	f	4001	Original Response Not Visible to Applicant	Submitted
42	Please check again	Decline	3034	4021	\N	42	5000	2021-03-29 23:59:59.766246+13	f	4002	Original Response Not Visible to Applicant	Submitted
43	\N	Approve	3035	4022	\N	43	5000	2021-03-29 23:59:59.766246+13	f	4003	Original Response Not Visible to Applicant	Submitted
44	\N	Approve	3036	4023	\N	44	5000	2021-03-29 23:59:59.766246+13	f	4005	Original Response Not Visible to Applicant	Submitted
45	\N	Approve	3037	4024	\N	45	5000	2021-03-29 23:59:59.766246+13	f	4006	Original Response Not Visible to Applicant	Submitted
\.


--
-- Data for Name: review_status_history; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.review_status_history (id, review_id, status, time_created, is_current) FROM stdin;
2	1000	Submitted	2021-02-01 13:00:00+13	t
1	1000	Draft	2021-01-31 13:00:00+13	f
4	1	Submitted	2021-02-02 23:00:00+13	t
3	1	Draft	2021-02-01 13:00:00+13	f
6	2	Submitted	2021-02-02 13:00:00+13	t
5	2	Draft	2021-02-01 13:00:00+13	f
8	3	Submitted	2021-02-03 13:00:00+13	t
7	3	Draft	2021-02-02 13:00:00+13	f
11	4000	Changes Requested	2021-02-04 23:00:00+13	t
9	4000	Draft	2021-02-03 13:00:00+13	f
10	4000	Submitted	2021-02-04 13:00:00+13	f
13	4	Locked	2021-02-04 23:00:00+13	t
12	4	Draft	2021-02-03 13:00:00+13	f
15	5000	Submitted	2021-02-04 23:00:00+13	t
14	5000	Draft	2021-02-04 13:00:00+13	f
\.


--
-- Data for Name: template; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.template (id, name, code, is_linear, start_message, status, submission_message, version_timestamp) FROM stdin;
1	Test -- General Registration	TestRego	f	{"children": ["## This is the general registration for feature showcase\\nHi, %1. You will need to provide:\\n- Proof of identity (Passport, Drivers license)\\n- Proof of your medical certification\\n- Drug ingredient list\\n- Product images\\n- Packging images", {"children": ["currentUser.firstName"], "operator": "objectProperties"}], "operator": "stringSubstitution"}	Available	{"children": ["### Application Submitted!\\nThanks, %1.", {"children": ["currentUser.firstName"], "operator": "objectProperties"}], "operator": "stringSubstitution"}	2021-03-29 23:59:58.885412+13
2	Organisation Registration	OrgRego1	f	"## You will need the following documents ready for upload:\\n- Proof of Company name\\n- Proof of company address\\n- Organisation licence document"	Available	{"value": "Thank you! Your application has been submitted."}	2021-03-29 23:59:59.001125+13
3	User Registration	UserRegistration	t	\N	Available	"Your registration has been completed. Please follow the link sent via email to confirm."	2021-03-29 23:59:59.059101+13
4	Test -- Review Process	ReviewTest	t	"## You will need the following documents ready for upload:\\n- Proof of your identity\\n- Pictures of product\\n- Product licence document"	Available	{"value": "Thank you! Your application has been submitted."}	2021-03-29 23:59:59.083364+13
5	Drug Registration - General Medicines Procedure	DrugRegoGen	f	"## You will need the following documents ready for upload:\\n- Ingredients\\n- Samples\\n- Product images"	Available	{"value": "Thank you! Your application has been submitted."}	2021-03-29 23:59:59.147365+13
\.


--
-- Data for Name: template_action; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.template_action (id, template_id, action_code, trigger, sequence, condition, parameter_queries) FROM stdin;
1	1	incrementStage	onApplicationCreate	\N	true	{"applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
2	1	changeStatus	onApplicationRestart	1	true	{"newStatus": {"value": "Draft"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
3	1	changeStatus	onReviewRestart	1	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "newStatus": {"value": "Draft"}}
4	1	changeStatus	onReviewCreate	\N	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "newStatus": {"value": "Draft"}}
5	1	changeStatus	onApplicationSubmit	1	true	{"newStatus": {"value": "Submitted"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
6	1	trimResponses	onApplicationSubmit	2	true	{"timestamp": {"children": ["output.applicationStatusHistoryTimestamp", null], "operator": "objectProperties"}, "applicationId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}}
7	1	generateReviewAssignments	onApplicationSubmit	3	true	{"applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
8	1	updateReviews	onApplicationSubmit	4	true	{"applicationId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "changedApplicationResponses": {"children": ["output.updatedResponses"], "operator": "objectProperties"}}
9	1	cleanupFiles	onApplicationSubmit	5	true	{}
10	1	changeStatus	onReviewSubmit	1	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "newStatus": {"value": "Submitted"}}
11	1	trimResponses	onReviewSubmit	2	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "timestamp": {"children": ["output.reviewStatusHistoryTimestamp"], "operator": "objectProperties"}}
12	1	incrementStage	onReviewSubmit	4	{"children": [{"children": [{"children": ["applicationData.reviewData.latestDecision.decision"], "operator": "objectProperties"}, "CONFORM"], "operator": "="}, {"children": ["applicationData.reviewData.isLastLevel"], "operator": "objectProperties"}], "operator": "AND"}	{"applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
13	1	generateReviewAssignments	onReviewSubmit	5	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
14	1	updateReviewVisibility	onReviewSubmit	6	{"children": [{"children": [{"children": ["applicationData.reviewData.latestDecision.decision"], "operator": "objectProperties"}, "LIST_OF_QUESTIONS"], "operator": "="}, {"children": ["applicationData.reviewData.isLastLevel"], "operator": "objectProperties"}], "operator": "AND"}	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}}
15	1	changeStatus	onReviewSubmit	7	{"children": [{"children": [{"children": ["applicationData.reviewData.latestDecision.decision"], "operator": "objectProperties"}, "LIST_OF_QUESTIONS"], "operator": "="}, {"children": ["applicationData.reviewData.isLastLevel"], "operator": "objectProperties"}], "operator": "AND"}	{"newStatus": {"value": "Changes Required"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
16	1	updateReviewAssignmentsStatus	onReviewSelfAssign	\N	true	{"trigger": {"children": ["applicationData.trigger"], "operator": "objectProperties"}, "reviewAssignmentId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}}
17	1	cleanupFiles	devTest	\N	true	{}
18	1	cLog	onApplicationSubmit	100	true	{"message": {"value": "Sequential logger -- this message should appear before new user and application approval messages."}}
19	1	createUser	onApplicationSubmit	101	true	{"email": {"children": ["applicationData.responses.Q4.text"], "operator": "objectProperties"}, "username": {"children": ["applicationData.responses.Q3.text"], "operator": "objectProperties"}, "last_name": {"children": ["applicationData.responses.Q2.text"], "operator": "objectProperties"}, "first_name": {"children": ["applicationData.responses.Q1.text"], "operator": "objectProperties"}, "password_hash": {"children": ["applicationData.responses.Q5.hash"], "operator": "objectProperties"}}
20	1	grantPermissions	onApplicationSubmit	102	true	{"username": {"children": ["applicationData.responses.Q3.text"], "operator": "objectProperties"}, "permissionNames": {"value": ["applyCompanyRego"]}}
21	1	changeStatus	onApplicationSubmit	103	true	{"newStatus": {"value": "Completed"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
22	1	changeOutcome	onApplicationSubmit	104	true	{"newOutcome": {"value": "Approved"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
23	1	cLog	onApplicationSubmit	105	true	{"message": {"children": ["Output concatenation: The user %1's registration has been %2", {"children": ["output.username"], "operator": "objectProperties"}, {"children": ["output.newOutcome"], "operator": "objectProperties"}], "operator": "stringSubstitution"}}
24	1	cLog	onApplicationSubmit	\N	{"value": true}	{"message": {"value": "Testing parallel actions -- This message is Asynchronous. \\nEven though it is last in the Actions list, it'll probably appear first."}}
25	2	incrementStage	onApplicationCreate	\N	true	{"applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
26	2	changeStatus	onApplicationRestart	1	true	{"newStatus": {"value": "Draft"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
27	2	changeStatus	onReviewRestart	1	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "newStatus": {"value": "Draft"}}
28	2	changeStatus	onReviewCreate	\N	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "newStatus": {"value": "Draft"}}
29	2	changeStatus	onApplicationSubmit	1	true	{"newStatus": {"value": "Submitted"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
30	2	trimResponses	onApplicationSubmit	2	true	{"timestamp": {"children": ["output.applicationStatusHistoryTimestamp", null], "operator": "objectProperties"}, "applicationId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}}
31	2	generateReviewAssignments	onApplicationSubmit	3	true	{"applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
32	2	updateReviews	onApplicationSubmit	4	true	{"applicationId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "changedApplicationResponses": {"children": ["output.updatedResponses"], "operator": "objectProperties"}}
33	2	cleanupFiles	onApplicationSubmit	5	true	{}
34	2	changeStatus	onReviewSubmit	1	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "newStatus": {"value": "Submitted"}}
35	2	trimResponses	onReviewSubmit	2	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "timestamp": {"children": ["output.reviewStatusHistoryTimestamp"], "operator": "objectProperties"}}
36	2	incrementStage	onReviewSubmit	4	{"children": [{"children": [{"children": ["applicationData.reviewData.latestDecision.decision"], "operator": "objectProperties"}, "CONFORM"], "operator": "="}, {"children": ["applicationData.reviewData.isLastLevel"], "operator": "objectProperties"}], "operator": "AND"}	{"applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
37	2	generateReviewAssignments	onReviewSubmit	5	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
38	2	updateReviewVisibility	onReviewSubmit	6	{"children": [{"children": [{"children": ["applicationData.reviewData.latestDecision.decision"], "operator": "objectProperties"}, "LIST_OF_QUESTIONS"], "operator": "="}, {"children": ["applicationData.reviewData.isLastLevel"], "operator": "objectProperties"}], "operator": "AND"}	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}}
39	2	changeStatus	onReviewSubmit	7	{"children": [{"children": [{"children": ["applicationData.reviewData.latestDecision.decision"], "operator": "objectProperties"}, "LIST_OF_QUESTIONS"], "operator": "="}, {"children": ["applicationData.reviewData.isLastLevel"], "operator": "objectProperties"}], "operator": "AND"}	{"newStatus": {"value": "Changes Required"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
40	2	updateReviewAssignmentsStatus	onReviewSelfAssign	\N	true	{"trigger": {"children": ["applicationData.trigger"], "operator": "objectProperties"}, "reviewAssignmentId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}}
41	2	cleanupFiles	devTest	\N	true	{}
42	2	cLog	onApplicationSubmit	\N	true	{"message": {"value": "Company Registration submission"}}
43	2	changeOutcome	onReviewSubmit	100	true	{"newOutcome": {"value": "Approved"}, "applicationId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}}
44	2	createOrg	onReviewSubmit	101	true	{"name": {"children": ["applicationData.responses.S1Q1.text"], "operator": "objectProperties"}, "address": {"children": ["%1\\n%2", {"children": ["applicationData.responses.S2Q1.text"], "operator": "objectProperties"}, {"children": ["applicationData.responses.S2Q2.text"], "operator": "objectProperties"}], "operator": "stringSubstitution"}, "licence_number": {"children": ["applicationData.responses.S2Q3.text"], "operator": "objectProperties"}}
45	2	joinUserOrg	onReviewSubmit	102	true	{"user_id": {"children": ["applicationData.userId"], "operator": "objectProperties"}, "user_role": "Owner", "organisation_id": {"children": ["output.orgId"], "operator": "objectProperties"}}
46	2	grantPermissions	onReviewSubmit	103	true	{"orgName": {"children": ["output.orgName"], "operator": "objectProperties"}, "username": {"children": ["applicationData.username"], "operator": "objectProperties"}, "permissionNames": ["reviewJoinCompany"]}
47	3	incrementStage	onApplicationCreate	\N	true	{"applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
48	3	createUser	onApplicationSubmit	1	true	{"email": {"children": ["applicationData.responses.Q4.text"], "operator": "objectProperties"}, "username": {"children": ["applicationData.responses.Q3.text"], "operator": "objectProperties"}, "last_name": {"children": ["applicationData.responses.Q2.text"], "operator": "objectProperties"}, "first_name": {"children": ["applicationData.responses.Q1.text"], "operator": "objectProperties"}, "password_hash": {"children": ["applicationData.responses.Q5.hash"], "operator": "objectProperties"}}
49	3	changeStatus	onApplicationSubmit	2	true	{"newStatus": {"value": "Completed"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
50	3	changeOutcome	onApplicationSubmit	3	true	{"newOutcome": {"value": "Approved"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
51	4	incrementStage	onApplicationCreate	\N	true	{"applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
52	4	changeStatus	onApplicationRestart	1	true	{"newStatus": {"value": "Draft"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
53	4	changeStatus	onReviewRestart	1	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "newStatus": {"value": "Draft"}}
54	4	changeStatus	onReviewCreate	\N	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "newStatus": {"value": "Draft"}}
55	4	changeStatus	onApplicationSubmit	1	true	{"newStatus": {"value": "Submitted"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
56	4	trimResponses	onApplicationSubmit	2	true	{"timestamp": {"children": ["output.applicationStatusHistoryTimestamp", null], "operator": "objectProperties"}, "applicationId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}}
57	4	generateReviewAssignments	onApplicationSubmit	3	true	{"applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
58	4	updateReviews	onApplicationSubmit	4	true	{"applicationId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "changedApplicationResponses": {"children": ["output.updatedResponses"], "operator": "objectProperties"}}
59	4	cleanupFiles	onApplicationSubmit	5	true	{}
60	4	changeStatus	onReviewSubmit	1	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "newStatus": {"value": "Submitted"}}
61	4	trimResponses	onReviewSubmit	2	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "timestamp": {"children": ["output.reviewStatusHistoryTimestamp"], "operator": "objectProperties"}}
62	4	incrementStage	onReviewSubmit	4	{"children": [{"children": [{"children": ["applicationData.reviewData.latestDecision.decision"], "operator": "objectProperties"}, "CONFORM"], "operator": "="}, {"children": ["applicationData.reviewData.isLastLevel"], "operator": "objectProperties"}], "operator": "AND"}	{"applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
63	4	generateReviewAssignments	onReviewSubmit	5	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
64	4	updateReviewVisibility	onReviewSubmit	6	{"children": [{"children": [{"children": ["applicationData.reviewData.latestDecision.decision"], "operator": "objectProperties"}, "LIST_OF_QUESTIONS"], "operator": "="}, {"children": ["applicationData.reviewData.isLastLevel"], "operator": "objectProperties"}], "operator": "AND"}	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}}
65	4	changeStatus	onReviewSubmit	7	{"children": [{"children": [{"children": ["applicationData.reviewData.latestDecision.decision"], "operator": "objectProperties"}, "LIST_OF_QUESTIONS"], "operator": "="}, {"children": ["applicationData.reviewData.isLastLevel"], "operator": "objectProperties"}], "operator": "AND"}	{"newStatus": {"value": "Changes Required"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
66	4	updateReviewAssignmentsStatus	onReviewSelfAssign	\N	true	{"trigger": {"children": ["applicationData.trigger"], "operator": "objectProperties"}, "reviewAssignmentId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}}
67	4	cleanupFiles	devTest	\N	true	{}
68	4	cLog	onApplicationSubmit	2	true	{"message": "Application Submitted"}
69	5	incrementStage	onApplicationCreate	\N	true	{"applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
70	5	changeStatus	onApplicationRestart	1	true	{"newStatus": {"value": "Draft"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
71	5	changeStatus	onReviewRestart	1	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "newStatus": {"value": "Draft"}}
72	5	changeStatus	onReviewCreate	\N	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "newStatus": {"value": "Draft"}}
73	5	changeStatus	onApplicationSubmit	1	true	{"newStatus": {"value": "Submitted"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
74	5	trimResponses	onApplicationSubmit	2	true	{"timestamp": {"children": ["output.applicationStatusHistoryTimestamp", null], "operator": "objectProperties"}, "applicationId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}}
75	5	generateReviewAssignments	onApplicationSubmit	3	true	{"applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
76	5	updateReviews	onApplicationSubmit	4	true	{"applicationId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "changedApplicationResponses": {"children": ["output.updatedResponses"], "operator": "objectProperties"}}
77	5	cleanupFiles	onApplicationSubmit	5	true	{}
78	5	changeStatus	onReviewSubmit	1	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "newStatus": {"value": "Submitted"}}
79	5	trimResponses	onReviewSubmit	2	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "timestamp": {"children": ["output.reviewStatusHistoryTimestamp"], "operator": "objectProperties"}}
80	5	incrementStage	onReviewSubmit	4	{"children": [{"children": [{"children": ["applicationData.reviewData.latestDecision.decision"], "operator": "objectProperties"}, "CONFORM"], "operator": "="}, {"children": ["applicationData.reviewData.isLastLevel"], "operator": "objectProperties"}], "operator": "AND"}	{"applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
81	5	generateReviewAssignments	onReviewSubmit	5	true	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
82	5	updateReviewVisibility	onReviewSubmit	6	{"children": [{"children": [{"children": ["applicationData.reviewData.latestDecision.decision"], "operator": "objectProperties"}, "LIST_OF_QUESTIONS"], "operator": "="}, {"children": ["applicationData.reviewData.isLastLevel"], "operator": "objectProperties"}], "operator": "AND"}	{"reviewId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}}
83	5	changeStatus	onReviewSubmit	7	{"children": [{"children": [{"children": ["applicationData.reviewData.latestDecision.decision"], "operator": "objectProperties"}, "LIST_OF_QUESTIONS"], "operator": "="}, {"children": ["applicationData.reviewData.isLastLevel"], "operator": "objectProperties"}], "operator": "AND"}	{"newStatus": {"value": "Changes Required"}, "applicationId": {"children": ["applicationData.applicationId"], "operator": "objectProperties"}}
84	5	updateReviewAssignmentsStatus	onReviewSelfAssign	\N	true	{"trigger": {"children": ["applicationData.trigger"], "operator": "objectProperties"}, "reviewAssignmentId": {"children": ["applicationData.record_id"], "operator": "objectProperties"}}
85	5	cLog	onApplicationSubmit	\N	true	{"message": "Application Submitted"}
\.


--
-- Data for Name: template_element; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.template_element (id, section_id, code, index, title, category, element_type_plugin_code, visibility_condition, is_required, is_editable, validation, validation_message, parameters) FROM stdin;
1000	1000	Text1	0	Intro	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"text": "Please fill in your details to **register** for a user account.", "title": "Create a user account"}
1001	1000	Q1	1	First Name	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "First Name"}
1002	1000	Q2	2	Last Name	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"children": [{"children": [{"children": ["responses.Q1.text"], "operator": "objectProperties"}, {"value": null}], "operator": "!="}, {"children": [{"children": ["responses.Q1.text"], "operator": "objectProperties"}, {"value": ""}], "operator": "!="}], "operator": "AND"}	You need a first name.	{"label": {"children": ["%1, what is your last name?", {"children": ["responses.Q1.text", ""], "operator": "objectProperties"}], "operator": "stringSubstitution"}}
1003	1000	Text2	3	User Info	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"text": {"children": ["The new user's name is: %1 %2", {"children": ["responses.Q1.text", ""], "operator": "objectProperties"}, {"children": ["responses.Q2.text", ""], "operator": "objectProperties"}], "operator": "stringSubstitution"}, "title": {"children": ["Current User: %1 %2", {"children": ["currentUser.firstName"], "operator": "objectProperties"}, {"children": ["currentUser.lastName"], "operator": "objectProperties"}], "operator": "stringSubstitution"}}
1004	1000	Q3	4	Username	Question	shortText	{"children": [{"children": ["responses.Q1.text"], "operator": "objectProperties"}, {"value": ""}], "operator": "!="}	{"value": true}	{"value": true}	{"children": [{"value": "http://localhost:8080/check-unique"}, {"value": ["type", "value"]}, {"value": "username"}, {"children": ["responses.thisResponse"], "operator": "objectProperties"}, {"value": "unique"}], "operator": "API"}	Username must be unique	{"label": "Select a username"}
1005	1000	Q4	5	Email	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"children": [{"children": ["responses.thisResponse"], "operator": "objectProperties"}, {"value": "^[A-Za-z0-9.]+@[A-Za-z0-9]+\\\\.[A-Za-z0-9.]+$"}], "operator": "REGEX"}	Not a valid email address	{"label": "Email"}
1006	1000	Q5	6	Password	Question	password	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Password", "placeholder": "Password must be at least 8 chars long", "confirmPlaceholder": "Enter password again", "validationInternal": {"children": [{"children": ["responses.thisResponse"], "operator": "objectProperties"}, {"value": "^[\\\\S]{8,}$"}], "operator": "REGEX"}, "validationMessageInternal": "Password must be at least 8 characters"}
1007	1000	Q5B	7	Dynamic Options demo	Question	dropdownChoice	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "Which is your favourite response?", "options": {"type": "array", "children": [{"children": ["responses.Q1.text"], "operator": "objectProperties"}, {"children": ["responses.Q2.text"], "operator": "objectProperties"}, {"children": ["responses.Q3.text"], "operator": "objectProperties"}, {"children": ["responses.Q4.text"], "operator": "objectProperties"}], "operator": "CONCAT"}, "placeholder": "Select"}
1008	1000	PB1	8	Page Break	Information	pageBreak	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	\N
1009	1000	Q6	9	Organisation Category	Question	radioChoice	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "Organisation Type", "default": 1, "options": ["Manufacturer", "Distributor", "Importer"], "validation": {"value": true}, "description": "_Select which type of organisation you belong to._"}
1010	1000	Q7	10	Select Manufacturer	Question	dropdownChoice	{"children": [{"children": ["responses.Q6.text"], "operator": "objectProperties"}, {"value": "Manufacturer"}], "operator": "="}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Select Manufacturer", "options": ["Manufacturer A", "Manufacturer B", "Manufacturer C"], "placeholder": "Select"}
1011	1000	Q8	11	Select Distributor	Question	dropdownChoice	{"children": [{"children": ["responses.Q6.text"], "operator": "objectProperties"}, {"value": "Distributor"}], "operator": "="}	false	{"value": true}	{"value": true}	\N	{"label": "Select Distributor", "options": ["Distributor A", "Distributor B", "Distributor C"], "placeholder": "Select"}
1012	1000	Q9	12	Select Importer	Question	dropdownChoice	{"children": [{"children": ["responses.Q6.text"], "operator": "objectProperties"}, {"value": "Importer"}], "operator": "="}	false	{"value": true}	{"value": true}	\N	{"label": "Select Importer", "options": ["Importer A", "Importer B", "Importer C"], "placeholder": "Select"}
1013	1000	Q10	13	API Selection demo	Question	dropdownChoice	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "API Lookup: Choose a name from this list", "search": true, "options": {"children": [{"value": "https://jsonplaceholder.typicode.com/users"}, {"value": []}, {"value": "name"}], "operator": "API"}, "placeholder": "Select"}
1014	1000	Q11	14	Test Visibility	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Enter 'magicword' to see text box"}
1015	1000	TextTest	15	Intro	Information	textInfo	{"children": [{"children": ["responses.Q11.text"], "operator": "objectProperties"}, {"value": "magicword"}], "operator": "="}	{"value": true}	{"value": true}	{"value": true}	\N	{"text": {"children": ["You chose %1 (index number %2) in the API lookup", {"children": ["responses.Q10.text"], "operator": "objectProperties"}, {"children": ["responses.Q10.optionIndex"], "operator": "objectProperties"}], "operator": "stringSubstitution"}, "title": "This has appeared because you typed 'magicword' above."}
1016	1000	PB3	16	Page Break	Information	pageBreak	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	\N
1017	1000	Qradio	17	Testing Radio buttons	Question	radioChoice	{"value": true}	true	{"value": true}	{"value": true}	\N	{"label": "This Radio button group has no default", "options": ["Option A", "Option B", "Option C"]}
1018	1000	Q12	18	Role	Question	dropdownChoice	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "What is your role?", "default": 1, "options": ["Owner", "Supplier", "Other"], "placeholder": "Select one"}
1019	1000	Q13	19	Other description	Question	shortText	{"value": true}	false	{"children": ["Other", {"children": ["responses.Q12.text"], "operator": "objectProperties"}], "operator": "="}	{"value": true}	\N	{"label": "If Other, please describe", "placeholder": "Describe your role"}
1035	1000	QGraphQLTest	20	GraphQL query	Question	dropdownChoice	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "Select a company (GraphQL query)", "options": {"children": ["query getOrgs {organisations {nodes {name}}}", [], "organisations.nodes"], "operator": "graphQL"}, "placeholder": "Select one"}
1020	1000	PB4	21	Page Break	Information	pageBreak	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	\N
1021	1000	CheckboxShowcase	22	Checkbox demonstration	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"text": "Different types and settings for Checkbox plugin", "title": "Checkbox demonstration"}
1022	1000	CB1	23	Single checkbox	Question	checkbox	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "This is a single checkbox", "checkboxes": ["Tick me"]}
1023	1000	CB2	24	Three checkboxes	Question	checkbox	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "Three checkboxes, one pre-selected", "checkboxes": [{"key": 0, "label": "Option 1", "selected": true}, "Option 2", "Option 3"]}
1024	1000	CB3	25	Toggle switch	Question	checkbox	{"value": true}	false	{"value": true}	{"value": true}	\N	{"type": "toggle", "label": "Behold! a **toggle** switch:", "checkboxes": ["ON"]}
1025	1000	TXTON-OFF	26	Checkbox ON	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"title": {"children": ["The switch is toggled %1", {"children": [{"children": [{"children": ["responses.CB3.text"], "operator": "objectProperties"}, "ON"], "operator": "="}, "ON", "OFF"], "operator": "?"}], "operator": "stringSubstitution"}}
1026	1000	CB4	27	Slider switch	Question	checkbox	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"type": "slider", "label": "And a couple of **sliders**:", "checkboxes": [{"key": "Opt1", "text": "Ice-cream", "label": "I like ice-cream"}, {"key": "Opt2", "text": "Cake", "label": "I like cake"}]}
1027	1000	TXT_LIKE	28	Display Likes	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"text": {"children": ["You like: %1%2", {"children": [{"children": ["responses.CB4.values.Opt1.selected"], "operator": "objectProperties"}, "\\n- Ice Cream", ""], "operator": "?"}, {"children": [{"children": ["responses.CB4.values.Opt2.selected"], "operator": "objectProperties"}, "\\n- Cake", ""], "operator": "?"}], "operator": "stringSubstitution"}}
1028	1000	CB5	29	Many checkboxes	Question	checkbox	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "Lotsa boxes", "layout": "inline", "checkboxes": {"children": [{"value": "https://jsonplaceholder.typicode.com/users"}, {"value": []}, {"value": "name"}], "operator": "API"}, "description": "If you have a lot of checkboxes, you may wish to use `layout: \\"inline\\"`.  \\n_This selection is dynamically created from an online API._"}
1029	1010	DocText1	100	Document Intro	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"text": "A demonstration of the File Upload plugin", "title": "This sections allows you to upload files"}
1030	1010	Q_upload1	101	File upload demo 1	Question	fileUpload	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Please upload your documentation", "description": "You can provide multiple files.  \\nFiles must be **image** files or **PDF** and under 5MB.", "fileSizeLimit": 5000, "fileCountLimit": 6, "fileExtensions": ["pdf", "png", "jpg"]}
1031	1010	PB10	102	Page Break	Information	pageBreak	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	\N
1032	1010	Q_upload2	103	File upload demo 2	Question	fileUpload	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "Please add some more files", "description": {"children": ["No restrictions on this one, but we're testing dynamic description:\\n\\n_The files uploaded in the last page were:_  \\n- _%1_", {"children": ["responses.Q_upload1.text"], "operator": "objectProperties"}], "operator": "stringSubstitution"}, "fileCountLimit": 99}
1033	1010	PB11	104	Page Break	Information	pageBreak	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	\N
1034	1010	Q_upload3	105	File upload demo 3	Question	fileUpload	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "One more upload demo", "description": "Only 1 file allowed, no other restrictions", "fileCountLimit": 1}
2000	1001	S1T1	0	Intro Section 1	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"text": "The details entered should match with your registered company documents attached.", "title": "Company details"}
2001	1001	S1Q1	1	Organisation Name	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"children": ["http://localhost:8080/check-unique", ["type", "value"], "organisation", {"children": ["responses.thisResponse"], "operator": "objectProperties"}, "unique"], "operator": "API"}	An organisation with that name already exists	{"label": "What is your company name?"}
2002	1001	S1Q2	2	Organisation Activity	Question	dropdownChoice	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Select type of activity", "options": ["Manufacturer", "Importer", "Producer"]}
2003	1001	S1Q3	5	Organisation national or international	Question	dropdownChoice	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Organisation Nationality", "options": ["National", "International"], "description": "Select the nationality of this company:"}
2004	1001	S1Q4	6	Import permit upload	Information	textInfo	{"children": [{"children": ["responses.S1Q3.text"], "operator": "objectProperties"}, "International"], "operator": "="}	false	{"value": true}	{"value": true}	\N	{"text": "Upload your valid import permit"}
2005	1002	S2T1	0	Intro Section 2 - Page 1/2	Information	textInfo	{"children": [{"children": ["responses.S1Q3.text"], "operator": "objectProperties"}, "National"], "operator": "="}	{"value": true}	{"value": true}	{"value": true}	\N	{"title": "Company location"}
2006	1002	S2Q1	1	Address	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Enter the organisation street address"}
2007	1002	S2Q2	2	Organisation region	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Enter the company region"}
2008	1002	S2T2	4	Intro Section 2 - Page 2/2	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"title": "Licence Details"}
2009	1002	S2Q3	5	Licence	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "What is your licence no.?"}
2010	1002	S2Q4	6	Registration document	Question	shortText	{"value": true}	false	false	{"value": true}	\N	{"label": "TO-DO: upload licence"}
2011	1003	S3T1	0	Intro Section 1 - Page 1/1	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"title": "Company staff details"}
2012	1003	S3Q1	1	Organisation Size	Question	dropdownChoice	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "What is the size of the organization", "options": ["Small", "Medium", "Large"]}
3000	1004	Text1	0	Intro	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"text": "Please fill in your details to **register** for a user account.", "title": "Create a user account"}
3001	1004	Q1	1	First Name	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"children": [{"children": ["responses.thisResponse"], "operator": "objectProperties"}, {"value": ".+"}], "operator": "REGEX"}	First name must not be blank	{"label": "First Name"}
3002	1004	Q2	2	Last Name	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Last Name"}
3003	1004	Q3	3	Username	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"children": [{"value": "http://localhost:8080/check-unique"}, {"value": ["type", "value"]}, {"value": "username"}, {"children": ["responses.thisResponse"], "operator": "objectProperties"}, {"value": "unique"}], "operator": "API"}	Username must be unique	{"label": "Select a username"}
3004	1004	Q4	4	Email	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"children": [{"children": ["responses.thisResponse"], "operator": "objectProperties"}, {"value": "^[A-Za-z0-9.]+@[A-Za-z0-9]+\\\\.[A-Za-z0-9.]+$"}], "operator": "REGEX"}	Not a valid email address	{"label": "Email"}
3005	1004	Q5	5	Password	Question	password	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Password", "maskedInput": true, "placeholder": "Password must be at least 8 chars long", "validationInternal": {"children": [{"children": ["responses.thisResponse"], "operator": "objectProperties"}, {"value": "^[\\\\S]{8,}$"}], "operator": "REGEX"}, "validationMessageInternal": "Password must be at least 8 characters"}
4000	1005	Text1	0	Intro	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"text": "In this section, we require your **personal information**"}
4001	1005	Q1	1	First Name	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "First Name"}
4002	1005	Q2	2	Last Name	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Last Name"}
4003	1005	Q3	3	Email	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"children": [{"children": ["responses.thisResponse"], "operator": "objectProperties"}, {"value": "^[A-Za-z0-9.]+@[A-Za-z0-9]+\\\\.[A-Za-z0-9.]+$"}], "operator": "REGEX"}	Not a valid email address	{"label": "Email"}
4004	1005	PB1	4	Page Break	Information	pageBreak	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	\N
4005	1005	Q4	5	Age	Question	shortText	{"value": true}	false	{"value": true}	{"children": [{"children": ["responses.thisResponse"], "operator": "objectProperties"}, {"value": "^[0-9]+$"}], "operator": "REGEX"}	Response must be a number	{"label": "Age"}
4006	1005	Q5	6	Nationality	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Nationality", "placeholder": "Enter a country"}
4007	1006	Text2	0	Product Intro	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"text": "In this section, we require your **PRODUCT information**"}
4008	1006	Q20	1	Product Name	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Name of Product"}
4009	1006	Q21	2	Product Type	Question	dropdownChoice	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "What type of product are you registering?", "options": ["Medicine", "Natural Product"], "placeholder": "Select"}
4010	1006	PB2	3	Page Break	Information	pageBreak	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	\N
4011	1006	Q22	4	Dose Size	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Size of single dose", "placeholder": "Metric units please"}
4012	1006	Q23	5	Packet Size	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"children": [{"children": ["responses.thisResponse"], "operator": "objectProperties"}, {"value": "^[0-9]+$"}], "operator": "REGEX"}	Must be a number	{"label": "How many doses per packet?", "placeholder": "Whole number"}
4013	1006	Q24	6	Side Effects	Question	shortText	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "Please list any side effects"}
1	1007	S1Info1	0	General information	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"text": "Start application, by providing the product **NAME** and **ORIGIN**"}
2	1007	S1Q1	10	Product name	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Product name"}
3	1007	S1Q2	20	Origin category	Question	radioChoice	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Product origin", "default": 0, "options": ["Domestic", "Imported"], "description": "_Select which is the origin of the drug._"}
4	1007	S1PB1	30	Page Break	Information	pageBreak	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	\N
5	1007	S1Info2	40	Universal code	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"text": "In this section, we require information for **USAGE**"}
6	1007	S1Q3	50	ATC Code	Question	shortText	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "ATC Code (TODO: Replace with API using UC)"}
7	1007	S1Q4	60	Generic name	Question	shortText	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "Generic name (TODO: Replace with API using UC)"}
8	1007	S1Q5	70	Therapeutic class	Question	shortText	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "Therapeutic class (TODO: Replace with API using UC)"}
9	1007	S1Q6	80	Formulations	Question	dropdownChoice	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "Formulations", "options": ["All dosage form have the same formulation", "This presentation has dosage forms with different formulations"]}
10	1007	S1PB2	90	Page Break	Information	pageBreak	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	\N
11	1007	S1Info4	100	Prescription/OTC information	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"text": "In this section, we require information about **PRESCRIPTION**"}
12	1007	S1Q7	110	Prescriptions/OTC - code	Question	dropdownChoice	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Prescriptions/OTC", "options": ["HCD - Highly Controlled Medicine", "LCD - Limited Controlled Medicine", "OTC - Over The Counter Medicine", "POM - Prescription Only Medicine", "NA - UNASSIGNED"]}
13	1007	S1Q9	120	Strength	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Strength"}
14	1007	S1Q10	130	Route of administration	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Route of administration (Replace with Lookup table)"}
15	1007	S1PB3	140	Page Break	Information	pageBreak	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	\N
16	1007	S1Info5	150	Container information	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"text": "In this section, we require information about **CONTAINER**"}
17	1007	S1Q11	160	Primary container	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Primary container"}
18	1007	S1Q12	170	Packaging and number of units	Question	shortText	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Packaging and number of units"}
19	1007	S1PB4	180	Page Break	Information	pageBreak	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	\N
20	1007	S1Info6	190	Dosage information	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"text": "In this section, we require information about **DOSAGE**"}
21	1007	S1Q13	200	Administration unit	Question	dropdownChoice	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Administration unit", "options": ["1. Same as dosage form (e.g. tablet, capsule)", "2. Same as primary container (e.g. ampoule, vial, sachet)", "3. Liquid or reconstituted preparation (e.g. oral solution, dry syrup, large volume injectable solution)", "4. Semisolid (e.g. cream)", "5. Other, specify below"]}
22	1007	S1Q14	210	Number of (dosage form)	Question	shortText	{"children": [{"children": ["responses.S1Q13.optionIndex"], "operator": "objectProperties"}, {"value": 0}], "operator": "="}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Number of (dosage form) per pack"}
23	1007	S1Q15	220	Number of (primary container)	Question	shortText	{"children": [{"children": ["responses.S1Q13.optionIndex"], "operator": "objectProperties"}, {"value": 1}], "operator": "="}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Number of (primary container) per pack"}
24	1007	S1Q16	230	Number of millilitres (primary container)	Question	shortText	{"children": [{"children": ["responses.S1Q13.optionIndex"], "operator": "objectProperties"}, {"value": 1}], "operator": "="}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "If applicable (e.g. ampoule), number of millilitres per (primary container)"}
25	1007	S1Q17	240	Number of millilitres per primary container (as provided or after reconstitution)	Question	shortText	{"children": [{"children": ["responses.S1Q13.optionIndex"], "operator": "objectProperties"}, {"value": 2}], "operator": "="}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Number of millilitres per primary container (as provided or after reconstitution)"}
26	1007	S1Q18	250	Number of grams per pack	Question	shortText	{"children": [{"children": ["responses.S1Q13.optionIndex"], "operator": "objectProperties"}, {"value": 3}], "operator": "="}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Number of grams per pack"}
27	1007	S1Q19	260	Specify administration unit	Question	shortText	{"children": [{"children": ["responses.S1Q13.optionIndex"], "operator": "objectProperties"}, {"value": 4}], "operator": "="}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Specify administration unit"}
28	1007	S1Q20	270	Number of (specify) per pack	Question	shortText	{"children": [{"children": ["responses.S1Q13.optionIndex"], "operator": "objectProperties"}, {"value": 4}], "operator": "="}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": {"children": ["Number of (%1) per pack", {"children": ["responses.S1Q19.text", "other"], "operator": "objectProperties"}], "operator": "stringSubstitution"}}
29	1007	S1PB5	280	Page Break	Information	pageBreak	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	\N
30	1007	S1Info7	290	Optinal information	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"text": "Optinal information"}
31	1007	S1Q21	300	Shelf life (months)	Question	shortText	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "Shelf life (months)"}
32	1007	S1Q22	310	Comments	Question	shortText	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "Comments"}
33	1008	S2Info1	0	Product Intro	Information	textInfo	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"text": "In this section, we require the INGREDIENTS for **Drug registered**"}
34	1008	S2Q1	1	File upload: Ingredients	Question	fileUpload	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	{"label": "Upload ingredients list", "description": "Only 1 file allowed.  \\nFile extension allowed: **pdf**, **doc**, **docx**, **xls**.", "fileCountLimit": 1, "fileExtensions": ["pdf", "doc", "docx", "xls"]}
35	1009	S3Q1	0	File upload: Samples	Question	fileUpload	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "Upload samples", "description": "Maximum of 5 image files allowed.  \\nFile extension allowed: **pdf**, **png**, **jpg**, **jpeg**.", "fileExtensions": ["pdf", "png", "jpg", "jpeg"]}
36	1009	S3PB1	1	Page Break	Information	pageBreak	{"value": true}	{"value": true}	{"value": true}	{"value": true}	\N	\N
37	1009	S3Q2	2	File upload: Product images	Question	fileUpload	{"value": true}	false	{"value": true}	{"value": true}	\N	{"label": "Upload product images", "description": "Maximum of 5 image files allowed.  \\nFile extension allowed: **pdf**, **png**, **jpg**, **jpeg**.", "fileCountLimit": 5, "fileExtensions": ["pdf", "png", "jpg", "jpeg"]}
\.


--
-- Data for Name: template_permission; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.template_permission (id, permission_name_id, template_id, stage_number, level, restrictions) FROM stdin;
1	10100	1	\N	\N	\N
2	10100	2	\N	\N	\N
3	4000	2	1	\N	\N
3000	1000	3	\N	\N	\N
4000	2000	4	\N	\N	\N
4001	5000	4	1	1	{"templateSectionRestrictions": ["S1"]}
4002	5001	4	1	1	{"templateSectionRestrictions": ["S2"]}
4003	6000	4	2	1	\N
4004	6001	4	2	2	\N
4005	7000	4	3	1	\N
4006	9000	4	1	1	\N
4	10100	5	\N	\N	\N
5	10300	5	1	1	{"canSelfAssign": true}
6	10200	5	2	1	\N
7	10400	5	2	1	\N
\.


--
-- Data for Name: template_section; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.template_section (id, template_id, title, code, index) FROM stdin;
1000	1	Section 1	S1	0
1010	1	Section 2 - Documents	S2	2
1001	2	Section 1 - Organisation Details	S1	0
1002	2	Section 2	S2	1
1003	2	Section 3	S3	2
1004	3	User information	S1	0
1005	4	Personal Info	S1	0
1006	4	Product Info	S2	1
1007	5	Product Information	S1	0
1008	5	Ingredients	S2	1
1009	5	Product images	S3	2
\.


--
-- Data for Name: template_stage; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.template_stage (id, number, title, description, template_id) FROM stdin;
1	1	Automatic	Please check your email to confirm your account.	1
2	1	Approval	This application will be approved by a Reviewer	2
3	1	Automatic	\N	3
5	1	Screening	This application will go through the Screening stage before it can be accessed.	4
6	2	Assessment	This phase is where your documents will be revised before the application can get the final approval.	4
7	3	Final Decision	This is the final step and will change the outcome of this applications.	4
8	1	Screening	This application will go through the Screening stage before it can be accessed.	5
9	2	Assessment	This phase is where your documents will be revised before the application can get the final approval.	5
10	3	Final Decision	This is the final step and will change the outcome of this applications.	5
\.


--
-- Data for Name: trigger_queue; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.trigger_queue (id, trigger_type, "table", record_id, "timestamp", status, log) FROM stdin;
\.


--
-- Data for Name: user; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public."user" (id, first_name, last_name, username, email, date_of_birth, password_hash) FROM stdin;
1	Nicole	\N	nmadruga	nicole@sussol.net	\N	$2a$10$dSDSYzTuuwJvEDp/tRsKXOV7LQc9Ue0gR8bctN4V7TcMRIfcCKhme
2	Carl	Smith	carl	carl@sussol.net	\N	$2a$10$3Z1cXVI.GzE9F2QYePzbMOg5CGtf6VnNKRiaiRGkzlBXJ0aiMN4JG
3	Andrei	\N	andrei	andrei@sussol.net	\N	$2a$10$3Ufr.//hLoxp6BEEbFIq4u.zh435BNxNNLFEmJN74Ka/U5SMp0A2e
4	Valerio	\N	valerio	valerio@nra.org	\N	$2a$10$ne2WcPISMw/Do3JzlwThYeO2GcodrumjI3FwGu1ZUoKgRQyAgNS3e
5	John	Smith	js	js@nowhere.com	\N	$2a$10$WQ5VMHB6bOVwjyE8Vhh64.TLQKcUOeJpfU6ZUSqYq3tlts3vCN2mG
6	Reviewer1	\N	testReviewer1	reviewer1@sussol.net	\N	$2a$10$r8XTfUWIzrSaDfn0rxbIlei0kFHitJMI4W3g59w/94/9VopxNB4w.
7	Reviewer2	\N	testReviewer2	reviewer2@sussol.net	\N	$2a$10$pzhH6GcC7rw38AencBcbCuDaN6ANGZnVnE3ViCa5veOeTelbkkkv2
8	Consolidator1	\N	testConsolidator1	consolidator1@sussol.net	\N	$2a$10$pzhH6GcC7rw38AencBcbCuDaN6ANGZnVnE3ViCa5veOeTelbkkkv2
9	Consolidator2	\N	testConsolidator2	consolidator2@sussol.net	\N	$2a$10$pzhH6GcC7rw38AencBcbCuDaN6ANGZnVnE3ViCa5veOeTelbkkkv2
10	Assigner1	\N	testAssigner1	assigner1@sussol.net	\N	$2a$10$Kk4m2yhfFC5GqX2mJsXTtO.GLq6zNbezYnI8ix09h/MfNNy6AW7Ne
11	Assigner2	\N	testAssigner2	assigner2@sussol.net	\N	$2a$10$DA4a1E2i3dfN5BrdmO6iX.EYt.ob0czyF1sQqNQxPMPrfEPsRCx2a
12	Screener1	\N	screener1	\N	\N	$2a$10$5R5ruFOLgrjOox5oH0I67.Rez7qGCEwf2a60Pe2TpfmIN99Dr0uW.
13	Screener2	\N	screener2	\N	\N	$2a$10$5R5ruFOLgrjOox5oH0I67.Rez7qGCEwf2a60Pe2TpfmIN99Dr0uW.
14	assessor1	\N	assessor1	\N	\N	$2a$10$5R5ruFOLgrjOox5oH0I67.Rez7qGCEwf2a60Pe2TpfmIN99Dr0uW.
15	assessor2	\N	assessor2	\N	\N	$2a$10$5R5ruFOLgrjOox5oH0I67.Rez7qGCEwf2a60Pe2TpfmIN99Dr0uW.
16	\N	\N	nonRegistered		\N	$2a$10$UIfa3GTUbOS92Ygy/UpqheTngGo3O54Q5UOnJ5CBlra9LYCcr4IGq
17	Admin	\N	userWithMultiplePermissions	\N	\N	$2a$10$5R5ruFOLgrjOox5oH0I67.Rez7qGCEwf2a60Pe2TpfmIN99Dr0uW.
\.


--
-- Data for Name: user_organisation; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_organisation (id, user_id, organisation_id, user_role) FROM stdin;
1	1	1	Owner
2	1	2	\N
3	1	3	\N
4	2	2	Owner
5	2	3	\N
6	2	4	\N
7	3	3	Owner
8	5	3	Owner
\.


--
-- Name: action_queue_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.action_queue_id_seq', 1, false);


--
-- Name: application_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.application_id_seq', 1, false);


--
-- Name: application_response_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.application_response_id_seq', 1, false);


--
-- Name: application_section_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.application_section_id_seq', 13, true);


--
-- Name: application_stage_history_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.application_stage_history_id_seq', 8, true);


--
-- Name: application_status_history_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.application_status_history_id_seq', 8, true);


--
-- Name: file_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.file_id_seq', 1, false);


--
-- Name: notification_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.notification_id_seq', 1, false);


--
-- Name: organisation_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.organisation_id_seq', 4, true);


--
-- Name: permission_join_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.permission_join_id_seq', 32, true);


--
-- Name: permission_name_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.permission_name_id_seq', 1, false);


--
-- Name: permission_policy_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.permission_policy_id_seq', 1, false);


--
-- Name: review_assignment_assigner_join_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.review_assignment_assigner_join_id_seq', 1, false);


--
-- Name: review_assignment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.review_assignment_id_seq', 1, false);


--
-- Name: review_decision_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.review_decision_id_seq', 6, true);


--
-- Name: review_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.review_id_seq', 4, true);


--
-- Name: review_question_assignment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.review_question_assignment_id_seq', 10, true);


--
-- Name: review_response_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.review_response_id_seq', 45, true);


--
-- Name: review_status_history_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.review_status_history_id_seq', 15, true);


--
-- Name: template_action_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.template_action_id_seq', 85, true);


--
-- Name: template_element_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.template_element_id_seq', 37, true);


--
-- Name: template_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.template_id_seq', 5, true);


--
-- Name: template_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.template_permission_id_seq', 7, true);


--
-- Name: template_section_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.template_section_id_seq', 1, false);


--
-- Name: template_stage_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.template_stage_id_seq', 3, true);


--
-- Name: trigger_queue_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.trigger_queue_id_seq', 1, false);


--
-- Name: user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.user_id_seq', 17, true);


--
-- Name: user_organisation_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.user_organisation_id_seq', 8, true);


--
-- Name: action_plugin action_plugin_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.action_plugin
    ADD CONSTRAINT action_plugin_pkey PRIMARY KEY (code);


--
-- Name: action_queue action_queue_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.action_queue
    ADD CONSTRAINT action_queue_pkey PRIMARY KEY (id);


--
-- Name: application application_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application
    ADD CONSTRAINT application_pkey PRIMARY KEY (id);


--
-- Name: application_response application_response_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application_response
    ADD CONSTRAINT application_response_pkey PRIMARY KEY (id);


--
-- Name: application_section application_section_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application_section
    ADD CONSTRAINT application_section_pkey PRIMARY KEY (id);


--
-- Name: application application_serial_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application
    ADD CONSTRAINT application_serial_key UNIQUE (serial);


--
-- Name: application_stage_history application_stage_history_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application_stage_history
    ADD CONSTRAINT application_stage_history_pkey PRIMARY KEY (id);


--
-- Name: application_status_history application_status_history_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application_status_history
    ADD CONSTRAINT application_status_history_pkey PRIMARY KEY (id);


--
-- Name: element_type_plugin element_type_plugin_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.element_type_plugin
    ADD CONSTRAINT element_type_plugin_pkey PRIMARY KEY (code);


--
-- Name: file file_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.file
    ADD CONSTRAINT file_pkey PRIMARY KEY (id);


--
-- Name: file file_unique_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.file
    ADD CONSTRAINT file_unique_id_key UNIQUE (unique_id);


--
-- Name: notification notification_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification
    ADD CONSTRAINT notification_pkey PRIMARY KEY (id);


--
-- Name: organisation organisation_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organisation
    ADD CONSTRAINT organisation_name_key UNIQUE (name);


--
-- Name: organisation organisation_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.organisation
    ADD CONSTRAINT organisation_pkey PRIMARY KEY (id);


--
-- Name: permission_join permission_join_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.permission_join
    ADD CONSTRAINT permission_join_pkey PRIMARY KEY (id);


--
-- Name: permission_name permission_name_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.permission_name
    ADD CONSTRAINT permission_name_name_key UNIQUE (name);


--
-- Name: permission_name permission_name_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.permission_name
    ADD CONSTRAINT permission_name_pkey PRIMARY KEY (id);


--
-- Name: permission_policy permission_policy_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.permission_policy
    ADD CONSTRAINT permission_policy_pkey PRIMARY KEY (id);


--
-- Name: review_assignment_assigner_join review_assignment_assigner_join_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_assignment_assigner_join
    ADD CONSTRAINT review_assignment_assigner_join_pkey PRIMARY KEY (id);


--
-- Name: review_assignment review_assignment_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_assignment
    ADD CONSTRAINT review_assignment_pkey PRIMARY KEY (id);


--
-- Name: review_decision review_decision_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_decision
    ADD CONSTRAINT review_decision_pkey PRIMARY KEY (id);


--
-- Name: review review_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review
    ADD CONSTRAINT review_pkey PRIMARY KEY (id);


--
-- Name: review_question_assignment review_question_assignment_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_question_assignment
    ADD CONSTRAINT review_question_assignment_pkey PRIMARY KEY (id);


--
-- Name: review_response review_response_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_response
    ADD CONSTRAINT review_response_pkey PRIMARY KEY (id);


--
-- Name: review_status_history review_status_history_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_status_history
    ADD CONSTRAINT review_status_history_pkey PRIMARY KEY (id);


--
-- Name: template_action template_action_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.template_action
    ADD CONSTRAINT template_action_pkey PRIMARY KEY (id);


--
-- Name: template_element template_element_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.template_element
    ADD CONSTRAINT template_element_pkey PRIMARY KEY (id);


--
-- Name: template_permission template_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.template_permission
    ADD CONSTRAINT template_permission_pkey PRIMARY KEY (id);


--
-- Name: template template_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.template
    ADD CONSTRAINT template_pkey PRIMARY KEY (id);


--
-- Name: template_section template_section_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.template_section
    ADD CONSTRAINT template_section_pkey PRIMARY KEY (id);


--
-- Name: template_stage template_stage_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.template_stage
    ADD CONSTRAINT template_stage_pkey PRIMARY KEY (id);


--
-- Name: trigger_queue trigger_queue_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.trigger_queue
    ADD CONSTRAINT trigger_queue_pkey PRIMARY KEY (id);


--
-- Name: user_organisation user_organisation_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_organisation
    ADD CONSTRAINT user_organisation_pkey PRIMARY KEY (id);


--
-- Name: user user_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."user"
    ADD CONSTRAINT user_pkey PRIMARY KEY (id);


--
-- Name: user user_username_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public."user"
    ADD CONSTRAINT user_username_key UNIQUE (username);


--
-- Name: unique_review_assignment_assigner_no_org; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX unique_review_assignment_assigner_no_org ON public.review_assignment_assigner_join USING btree (assigner_id, review_assignment_id) WHERE (organisation_id IS NULL);


--
-- Name: unique_review_assignment_assigner_with_org; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX unique_review_assignment_assigner_with_org ON public.review_assignment_assigner_join USING btree (assigner_id, organisation_id, review_assignment_id) WHERE (organisation_id IS NOT NULL);


--
-- Name: unique_review_assignment_no_org; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX unique_review_assignment_no_org ON public.review_assignment USING btree (reviewer_id, stage_number, application_id, level) WHERE (organisation_id IS NULL);


--
-- Name: unique_review_assignment_with_org; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX unique_review_assignment_with_org ON public.review_assignment USING btree (reviewer_id, organisation_id, stage_number, application_id, level) WHERE (organisation_id IS NOT NULL);


--
-- Name: unique_user_org_permission; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX unique_user_org_permission ON public.permission_join USING btree (user_id, organisation_id, permission_name_id) WHERE (organisation_id IS NOT NULL);


--
-- Name: unique_user_permission; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX unique_user_permission ON public.permission_join USING btree (user_id, permission_name_id) WHERE (organisation_id IS NULL);


--
-- Name: action_queue action_queue; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER action_queue AFTER INSERT ON public.action_queue FOR EACH ROW WHEN ((new.status <> 'Processing'::public.action_queue_status)) EXECUTE FUNCTION public.notify_action_queue();


--
-- Name: application_stage_history application_stage_history_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER application_stage_history_trigger AFTER INSERT OR UPDATE OF is_current ON public.application_stage_history FOR EACH ROW WHEN ((new.is_current = true)) EXECUTE FUNCTION public.stage_is_current_update();


--
-- Name: application_status_history application_status_history_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER application_status_history_trigger AFTER INSERT OR UPDATE OF is_current ON public.application_status_history FOR EACH ROW WHEN ((new.is_current = true)) EXECUTE FUNCTION public.status_is_current_update();


--
-- Name: application application_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER application_trigger AFTER INSERT OR UPDATE OF trigger ON public.application FOR EACH ROW WHEN (((new.trigger IS NOT NULL) AND (new.trigger <> 'Processing'::public.trigger) AND (new.trigger <> 'Error'::public.trigger))) EXECUTE FUNCTION public.add_event_to_trigger_queue();


--
-- Name: application outcome_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER outcome_trigger AFTER INSERT OR UPDATE OF outcome ON public.application FOR EACH ROW WHEN (((new.outcome = 'Approved'::public.application_outcome) OR (new.outcome = 'Rejected'::public.application_outcome))) EXECUTE FUNCTION public.outcome_changed();


--
-- Name: review_assignment review_assignment_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER review_assignment_trigger AFTER INSERT OR UPDATE OF trigger ON public.review_assignment FOR EACH ROW WHEN (((new.trigger IS NOT NULL) AND (new.trigger <> 'Processing'::public.trigger) AND (new.trigger <> 'Error'::public.trigger))) EXECUTE FUNCTION public.add_event_to_trigger_queue();


--
-- Name: review_status_history review_status_history_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER review_status_history_trigger AFTER INSERT OR UPDATE OF is_current ON public.review_status_history FOR EACH ROW WHEN ((new.is_current = true)) EXECUTE FUNCTION public.review_status_history_is_current_update();


--
-- Name: review review_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER review_trigger AFTER INSERT OR UPDATE OF trigger ON public.review FOR EACH ROW WHEN (((new.trigger IS NOT NULL) AND (new.trigger <> 'Processing'::public.trigger) AND (new.trigger <> 'Error'::public.trigger))) EXECUTE FUNCTION public.add_event_to_trigger_queue();


--
-- Name: review_response set_original_response_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER set_original_response_trigger BEFORE INSERT ON public.review_response FOR EACH ROW EXECUTE FUNCTION public.set_original_response();


--
-- Name: trigger_queue trigger_queue; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_queue AFTER INSERT ON public.trigger_queue FOR EACH ROW EXECUTE FUNCTION public.notify_trigger_queue();


--
-- Name: action_queue action_queue_template_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.action_queue
    ADD CONSTRAINT action_queue_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.template(id);


--
-- Name: action_queue action_queue_trigger_event_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.action_queue
    ADD CONSTRAINT action_queue_trigger_event_fkey FOREIGN KEY (trigger_event) REFERENCES public.trigger_queue(id);


--
-- Name: application application_org_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application
    ADD CONSTRAINT application_org_id_fkey FOREIGN KEY (org_id) REFERENCES public.organisation(id);


--
-- Name: application_response application_response_application_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application_response
    ADD CONSTRAINT application_response_application_id_fkey FOREIGN KEY (application_id) REFERENCES public.application(id);


--
-- Name: application_response application_response_template_element_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application_response
    ADD CONSTRAINT application_response_template_element_id_fkey FOREIGN KEY (template_element_id) REFERENCES public.template_element(id);


--
-- Name: application_section application_section_application_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application_section
    ADD CONSTRAINT application_section_application_id_fkey FOREIGN KEY (application_id) REFERENCES public.application(id);


--
-- Name: application_section application_section_template_section_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application_section
    ADD CONSTRAINT application_section_template_section_id_fkey FOREIGN KEY (template_section_id) REFERENCES public.template_section(id);


--
-- Name: application_stage_history application_stage_history_application_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application_stage_history
    ADD CONSTRAINT application_stage_history_application_id_fkey FOREIGN KEY (application_id) REFERENCES public.application(id);


--
-- Name: application_stage_history application_stage_history_stage_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application_stage_history
    ADD CONSTRAINT application_stage_history_stage_id_fkey FOREIGN KEY (stage_id) REFERENCES public.template_stage(id);


--
-- Name: application_status_history application_status_history_application_stage_history_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application_status_history
    ADD CONSTRAINT application_status_history_application_stage_history_id_fkey FOREIGN KEY (application_stage_history_id) REFERENCES public.application_stage_history(id);


--
-- Name: application application_template_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application
    ADD CONSTRAINT application_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.template(id);


--
-- Name: application application_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.application
    ADD CONSTRAINT application_user_id_fkey FOREIGN KEY (user_id) REFERENCES public."user"(id);


--
-- Name: file file_application_response_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.file
    ADD CONSTRAINT file_application_response_id_fkey FOREIGN KEY (application_response_id) REFERENCES public.application_response(id);


--
-- Name: file file_application_serial_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.file
    ADD CONSTRAINT file_application_serial_fkey FOREIGN KEY (application_serial) REFERENCES public.application(serial);


--
-- Name: file file_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.file
    ADD CONSTRAINT file_user_id_fkey FOREIGN KEY (user_id) REFERENCES public."user"(id);


--
-- Name: notification notification_application_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification
    ADD CONSTRAINT notification_application_id_fkey FOREIGN KEY (application_id) REFERENCES public.application(id);


--
-- Name: notification notification_document_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification
    ADD CONSTRAINT notification_document_id_fkey FOREIGN KEY (document_id) REFERENCES public.file(id);


--
-- Name: notification notification_review_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification
    ADD CONSTRAINT notification_review_id_fkey FOREIGN KEY (review_id) REFERENCES public.review(id);


--
-- Name: notification notification_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification
    ADD CONSTRAINT notification_user_id_fkey FOREIGN KEY (user_id) REFERENCES public."user"(id);


--
-- Name: permission_join permission_join_organisation_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.permission_join
    ADD CONSTRAINT permission_join_organisation_id_fkey FOREIGN KEY (organisation_id) REFERENCES public.organisation(id);


--
-- Name: permission_join permission_join_permission_name_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.permission_join
    ADD CONSTRAINT permission_join_permission_name_id_fkey FOREIGN KEY (permission_name_id) REFERENCES public.permission_name(id);


--
-- Name: permission_join permission_join_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.permission_join
    ADD CONSTRAINT permission_join_user_id_fkey FOREIGN KEY (user_id) REFERENCES public."user"(id);


--
-- Name: permission_name permission_name_permission_policy_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.permission_name
    ADD CONSTRAINT permission_name_permission_policy_id_fkey FOREIGN KEY (permission_policy_id) REFERENCES public.permission_policy(id);


--
-- Name: review review_application_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review
    ADD CONSTRAINT review_application_id_fkey FOREIGN KEY (application_id) REFERENCES public.application(id);


--
-- Name: review_assignment review_assignment_application_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_assignment
    ADD CONSTRAINT review_assignment_application_id_fkey FOREIGN KEY (application_id) REFERENCES public.application(id);


--
-- Name: review_assignment review_assignment_assigner_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_assignment
    ADD CONSTRAINT review_assignment_assigner_id_fkey FOREIGN KEY (assigner_id) REFERENCES public."user"(id);


--
-- Name: review_assignment_assigner_join review_assignment_assigner_join_assigner_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_assignment_assigner_join
    ADD CONSTRAINT review_assignment_assigner_join_assigner_id_fkey FOREIGN KEY (assigner_id) REFERENCES public."user"(id);


--
-- Name: review_assignment_assigner_join review_assignment_assigner_join_organisation_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_assignment_assigner_join
    ADD CONSTRAINT review_assignment_assigner_join_organisation_id_fkey FOREIGN KEY (organisation_id) REFERENCES public.organisation(id);


--
-- Name: review_assignment_assigner_join review_assignment_assigner_join_review_assignment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_assignment_assigner_join
    ADD CONSTRAINT review_assignment_assigner_join_review_assignment_id_fkey FOREIGN KEY (review_assignment_id) REFERENCES public.review_assignment(id);


--
-- Name: review_assignment review_assignment_organisation_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_assignment
    ADD CONSTRAINT review_assignment_organisation_id_fkey FOREIGN KEY (organisation_id) REFERENCES public.organisation(id);


--
-- Name: review_assignment review_assignment_reviewer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_assignment
    ADD CONSTRAINT review_assignment_reviewer_id_fkey FOREIGN KEY (reviewer_id) REFERENCES public."user"(id);


--
-- Name: review_assignment review_assignment_stage_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_assignment
    ADD CONSTRAINT review_assignment_stage_id_fkey FOREIGN KEY (stage_id) REFERENCES public.template_stage(id);


--
-- Name: review_decision review_decision_review_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_decision
    ADD CONSTRAINT review_decision_review_id_fkey FOREIGN KEY (review_id) REFERENCES public.review(id);


--
-- Name: review_question_assignment review_question_assignment_review_assignment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_question_assignment
    ADD CONSTRAINT review_question_assignment_review_assignment_id_fkey FOREIGN KEY (review_assignment_id) REFERENCES public.review_assignment(id);


--
-- Name: review_question_assignment review_question_assignment_template_element_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_question_assignment
    ADD CONSTRAINT review_question_assignment_template_element_id_fkey FOREIGN KEY (template_element_id) REFERENCES public.template_element(id);


--
-- Name: review_response review_response_application_response_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_response
    ADD CONSTRAINT review_response_application_response_id_fkey FOREIGN KEY (application_response_id) REFERENCES public.application_response(id);


--
-- Name: review_response review_response_original_review_response_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_response
    ADD CONSTRAINT review_response_original_review_response_id_fkey FOREIGN KEY (original_review_response_id) REFERENCES public.review_response(id);


--
-- Name: review_response review_response_review_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_response
    ADD CONSTRAINT review_response_review_id_fkey FOREIGN KEY (review_id) REFERENCES public.review(id);


--
-- Name: review_response review_response_review_question_assignment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_response
    ADD CONSTRAINT review_response_review_question_assignment_id_fkey FOREIGN KEY (review_question_assignment_id) REFERENCES public.review_question_assignment(id);


--
-- Name: review_response review_response_review_response_link_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_response
    ADD CONSTRAINT review_response_review_response_link_id_fkey FOREIGN KEY (review_response_link_id) REFERENCES public.review_response(id);


--
-- Name: review_response review_response_template_element_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_response
    ADD CONSTRAINT review_response_template_element_id_fkey FOREIGN KEY (template_element_id) REFERENCES public.template_element(id);


--
-- Name: review review_review_assignment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review
    ADD CONSTRAINT review_review_assignment_id_fkey FOREIGN KEY (review_assignment_id) REFERENCES public.review_assignment(id);


--
-- Name: review review_reviewer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review
    ADD CONSTRAINT review_reviewer_id_fkey FOREIGN KEY (reviewer_id) REFERENCES public."user"(id);


--
-- Name: review_status_history review_status_history_review_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.review_status_history
    ADD CONSTRAINT review_status_history_review_id_fkey FOREIGN KEY (review_id) REFERENCES public.review(id);


--
-- Name: template_action template_action_template_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.template_action
    ADD CONSTRAINT template_action_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.template(id);


--
-- Name: template_element template_element_section_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.template_element
    ADD CONSTRAINT template_element_section_id_fkey FOREIGN KEY (section_id) REFERENCES public.template_section(id);


--
-- Name: template_permission template_permission_permission_name_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.template_permission
    ADD CONSTRAINT template_permission_permission_name_id_fkey FOREIGN KEY (permission_name_id) REFERENCES public.permission_name(id);


--
-- Name: template_permission template_permission_template_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.template_permission
    ADD CONSTRAINT template_permission_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.template(id);


--
-- Name: template_section template_section_template_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.template_section
    ADD CONSTRAINT template_section_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.template(id);


--
-- Name: template_stage template_stage_template_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.template_stage
    ADD CONSTRAINT template_stage_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.template(id);


--
-- Name: user_organisation user_organisation_organisation_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_organisation
    ADD CONSTRAINT user_organisation_organisation_id_fkey FOREIGN KEY (organisation_id) REFERENCES public.organisation(id);


--
-- Name: user_organisation user_organisation_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_organisation
    ADD CONSTRAINT user_organisation_user_id_fkey FOREIGN KEY (user_id) REFERENCES public."user"(id);


--
-- Name: application; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.application ENABLE ROW LEVEL SECURITY;

--
-- Name: application view_pp1000pn1000; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp1000pn1000 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp1000pn1000'::text) = true) AND (template_id = public.jwt_get_bigint('pp1000pn1000_templateId'::text))));


--
-- Name: application view_pp1000pn1000tp3000; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp1000pn1000tp3000 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp1000pn1000tp3000'::text) = true) AND (template_id = public.jwt_get_bigint('pp1000pn1000tp3000_templateId'::text))));


--
-- Name: application view_pp2000pn10100; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp2000pn10100 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp2000pn10100'::text) = true) AND (user_id = public.jwt_get_bigint('userId'::text)) AND (template_id = public.jwt_get_bigint('pp2000pn10100_templateId'::text))));


--
-- Name: application view_pp2000pn10100tp1; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp2000pn10100tp1 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp2000pn10100tp1'::text) = true) AND (user_id = public.jwt_get_bigint('userId'::text)) AND (template_id = public.jwt_get_bigint('pp2000pn10100tp1_templateId'::text))));


--
-- Name: application view_pp2000pn10100tp2; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp2000pn10100tp2 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp2000pn10100tp2'::text) = true) AND (user_id = public.jwt_get_bigint('userId'::text)) AND (template_id = public.jwt_get_bigint('pp2000pn10100tp2_templateId'::text))));


--
-- Name: application view_pp2000pn10100tp4; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp2000pn10100tp4 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp2000pn10100tp4'::text) = true) AND (user_id = public.jwt_get_bigint('userId'::text)) AND (template_id = public.jwt_get_bigint('pp2000pn10100tp4_templateId'::text))));


--
-- Name: application view_pp2000pn2000; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp2000pn2000 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp2000pn2000'::text) = true) AND (user_id = public.jwt_get_bigint('userId'::text)) AND (template_id = public.jwt_get_bigint('pp2000pn2000_templateId'::text))));


--
-- Name: application view_pp2000pn2000tp4000; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp2000pn2000tp4000 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp2000pn2000tp4000'::text) = true) AND (user_id = public.jwt_get_bigint('userId'::text)) AND (template_id = public.jwt_get_bigint('pp2000pn2000tp4000_templateId'::text))));


--
-- Name: application view_pp3000pn10000; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp3000pn10000 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp3000pn10000'::text) = true) AND (template_id = public.jwt_get_bigint('pp3000pn10000_templateId'::text))));


--
-- Name: application view_pp3000pn10300; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp3000pn10300 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp3000pn10300'::text) = true) AND (template_id = public.jwt_get_bigint('pp3000pn10300_templateId'::text))));


--
-- Name: application view_pp3000pn10300tp5; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp3000pn10300tp5 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp3000pn10300tp5'::text) = true) AND (template_id = public.jwt_get_bigint('pp3000pn10300tp5_templateId'::text))));


--
-- Name: application view_pp3000pn10400; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp3000pn10400 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp3000pn10400'::text) = true) AND (template_id = public.jwt_get_bigint('pp3000pn10400_templateId'::text))));


--
-- Name: application view_pp3000pn10400tp7; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp3000pn10400tp7 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp3000pn10400tp7'::text) = true) AND (template_id = public.jwt_get_bigint('pp3000pn10400tp7_templateId'::text))));


--
-- Name: application view_pp3000pn4000; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp3000pn4000 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp3000pn4000'::text) = true) AND (template_id = public.jwt_get_bigint('pp3000pn4000_templateId'::text))));


--
-- Name: application view_pp3000pn4000tp3; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp3000pn4000tp3 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp3000pn4000tp3'::text) = true) AND (template_id = public.jwt_get_bigint('pp3000pn4000tp3_templateId'::text))));


--
-- Name: application view_pp3000pn5000; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp3000pn5000 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp3000pn5000'::text) = true) AND (template_id = public.jwt_get_bigint('pp3000pn5000_templateId'::text))));


--
-- Name: application view_pp3000pn5000tp4001; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp3000pn5000tp4001 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp3000pn5000tp4001'::text) = true) AND (template_id = public.jwt_get_bigint('pp3000pn5000tp4001_templateId'::text))));


--
-- Name: application view_pp3000pn5001; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp3000pn5001 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp3000pn5001'::text) = true) AND (template_id = public.jwt_get_bigint('pp3000pn5001_templateId'::text))));


--
-- Name: application view_pp3000pn5001tp4002; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp3000pn5001tp4002 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp3000pn5001tp4002'::text) = true) AND (template_id = public.jwt_get_bigint('pp3000pn5001tp4002_templateId'::text))));


--
-- Name: application view_pp3000pn6000; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp3000pn6000 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp3000pn6000'::text) = true) AND (template_id = public.jwt_get_bigint('pp3000pn6000_templateId'::text))));


--
-- Name: application view_pp3000pn6000tp4003; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp3000pn6000tp4003 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp3000pn6000tp4003'::text) = true) AND (template_id = public.jwt_get_bigint('pp3000pn6000tp4003_templateId'::text))));


--
-- Name: application view_pp3000pn6001; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp3000pn6001 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp3000pn6001'::text) = true) AND (template_id = public.jwt_get_bigint('pp3000pn6001_templateId'::text))));


--
-- Name: application view_pp3000pn6001tp4004; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp3000pn6001tp4004 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp3000pn6001tp4004'::text) = true) AND (template_id = public.jwt_get_bigint('pp3000pn6001tp4004_templateId'::text))));


--
-- Name: application view_pp3000pn7000; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp3000pn7000 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp3000pn7000'::text) = true) AND (template_id = public.jwt_get_bigint('pp3000pn7000_templateId'::text))));


--
-- Name: application view_pp3000pn7000tp4005; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp3000pn7000tp4005 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp3000pn7000tp4005'::text) = true) AND (template_id = public.jwt_get_bigint('pp3000pn7000tp4005_templateId'::text))));


--
-- Name: application view_pp4000pn9000; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp4000pn9000 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp4000pn9000'::text) = true) AND (template_id = public.jwt_get_bigint('pp4000pn9000_templateId'::text))));


--
-- Name: application view_pp4000pn9000tp4006; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY view_pp4000pn9000tp4006 ON public.application FOR SELECT USING (((public.jwt_get_boolean('pp4000pn9000tp4006'::text) = true) AND (template_id = public.jwt_get_bigint('pp4000pn9000tp4006_templateId'::text))));


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: postgres
--

GRANT ALL ON SCHEMA public TO graphile_user;


--
-- Name: TABLE application; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.application TO graphile_user;


--
-- Name: TABLE review; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.review TO graphile_user;


--
-- Name: TABLE review_decision; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.review_decision TO graphile_user;


--
-- Name: TABLE action_plugin; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.action_plugin TO graphile_user;


--
-- Name: TABLE action_queue; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.action_queue TO graphile_user;


--
-- Name: TABLE application_response; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.application_response TO graphile_user;


--
-- Name: TABLE application_section; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.application_section TO graphile_user;


--
-- Name: TABLE application_stage_history; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.application_stage_history TO graphile_user;


--
-- Name: TABLE application_status_history; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.application_status_history TO graphile_user;


--
-- Name: TABLE template_stage; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.template_stage TO graphile_user;


--
-- Name: TABLE application_stage_status_all; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.application_stage_status_all TO graphile_user;


--
-- Name: TABLE application_stage_status_latest; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.application_stage_status_latest TO graphile_user;


--
-- Name: TABLE review_assignment; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.review_assignment TO graphile_user;


--
-- Name: TABLE application_trigger_states; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.application_trigger_states TO graphile_user;


--
-- Name: TABLE element_type_plugin; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.element_type_plugin TO graphile_user;


--
-- Name: TABLE file; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.file TO graphile_user;


--
-- Name: TABLE notification; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.notification TO graphile_user;


--
-- Name: TABLE organisation; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.organisation TO graphile_user;


--
-- Name: TABLE permission_join; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.permission_join TO graphile_user;


--
-- Name: TABLE permission_name; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.permission_name TO graphile_user;


--
-- Name: TABLE permission_policy; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.permission_policy TO graphile_user;


--
-- Name: TABLE template; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.template TO graphile_user;


--
-- Name: TABLE template_permission; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.template_permission TO graphile_user;


--
-- Name: TABLE "user"; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public."user" TO graphile_user;


--
-- Name: TABLE permissions_all; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.permissions_all TO graphile_user;


--
-- Name: TABLE review_assignment_assigner_join; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.review_assignment_assigner_join TO graphile_user;


--
-- Name: TABLE review_question_assignment; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.review_question_assignment TO graphile_user;


--
-- Name: TABLE review_response; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.review_response TO graphile_user;


--
-- Name: TABLE review_status_history; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.review_status_history TO graphile_user;


--
-- Name: TABLE template_action; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.template_action TO graphile_user;


--
-- Name: TABLE template_element; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.template_element TO graphile_user;


--
-- Name: TABLE template_section; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.template_section TO graphile_user;


--
-- Name: TABLE trigger_queue; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.trigger_queue TO graphile_user;


--
-- Name: TABLE user_organisation; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_organisation TO graphile_user;


--
-- Name: TABLE user_org_join; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_org_join TO graphile_user;


--
-- Name: postgraphile_watch_ddl; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER postgraphile_watch_ddl ON ddl_command_end
         WHEN TAG IN ('ALTER AGGREGATE', 'ALTER DOMAIN', 'ALTER EXTENSION', 'ALTER FOREIGN TABLE', 'ALTER FUNCTION', 'ALTER POLICY', 'ALTER SCHEMA', 'ALTER TABLE', 'ALTER TYPE', 'ALTER VIEW', 'COMMENT', 'CREATE AGGREGATE', 'CREATE DOMAIN', 'CREATE EXTENSION', 'CREATE FOREIGN TABLE', 'CREATE FUNCTION', 'CREATE INDEX', 'CREATE POLICY', 'CREATE RULE', 'CREATE SCHEMA', 'CREATE TABLE', 'CREATE TABLE AS', 'CREATE VIEW', 'DROP AGGREGATE', 'DROP DOMAIN', 'DROP EXTENSION', 'DROP FOREIGN TABLE', 'DROP FUNCTION', 'DROP INDEX', 'DROP OWNED', 'DROP POLICY', 'DROP RULE', 'DROP SCHEMA', 'DROP TABLE', 'DROP TYPE', 'DROP VIEW', 'GRANT', 'REVOKE', 'SELECT INTO')
   EXECUTE FUNCTION postgraphile_watch.notify_watchers_ddl();


ALTER EVENT TRIGGER postgraphile_watch_ddl OWNER TO postgres;

--
-- Name: postgraphile_watch_drop; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER postgraphile_watch_drop ON sql_drop
   EXECUTE FUNCTION postgraphile_watch.notify_watchers_drop();


ALTER EVENT TRIGGER postgraphile_watch_drop OWNER TO postgres;

--
-- PostgreSQL database dump complete
--

